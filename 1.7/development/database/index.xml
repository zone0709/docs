<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Database on PrestaShop Developer Documentation</title>
    <link>https://devdocs.prestashop.com/1.7/development/database/</link>
    <description>Recent content in Database on PrestaShop Developer Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://devdocs.prestashop.com/1.7/development/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Db class</title>
      <link>https://devdocs.prestashop.com/1.7/development/database/db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/database/db/</guid>
      <description>Using the database with the Db class Get link to the database &amp;lt;?php /** * @var \Db $db */ $db = \Db::getInstance(); The first call to this method initialize the link to the database, and return the same link to all the next calls. $db in this example will be reused in all the next examples.
Db class methods Execute a raw SQL request (SELECT only) &amp;lt;?php $request = &amp;#39;SELECT `id_table` FROM `&amp;#39; .</description>
    </item>
    
    <item>
      <title>DBQuery class</title>
      <link>https://devdocs.prestashop.com/1.7/development/database/dbquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/database/dbquery/</guid>
      <description>The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:
&amp;lt;?php $sql = new DbQuery(); $sql-&amp;gt;select(&amp;#39;*&amp;#39;); $sql-&amp;gt;from(&amp;#39;cms&amp;#39;, &amp;#39;c&amp;#39;); $sql-&amp;gt;innerJoin(&amp;#39;cms_lang&amp;#39;, &amp;#39;l&amp;#39;, &amp;#39;c.id_cms = l.id_cms AND l.id_lang = &amp;#39;.(int)$id_lang); $sql-&amp;gt;where(&amp;#39;c.active = 1&amp;#39;); $sql-&amp;gt;orderBy(&amp;#39;position&amp;#39;); return Db::getInstance()-&amp;gt;executeS($sql); Main methods  __toString() Generate and get the query. build() Generate and get the query (return a string). from(string $table, mixed $alias = null) Set table for FROM clause. groupBy(string $fields) Add a GROUP BY restriction.</description>
    </item>
    
    <item>
      <title>ObjectModel class</title>
      <link>https://devdocs.prestashop.com/1.7/development/database/objectmodel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/database/objectmodel/</guid>
      <description>The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop’s object model. It can be overridden… with precaution.
It is an Active Record kind of class (see: Active record pattern). The table attributes or view attributes of PrestaShop’s database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database.</description>
    </item>
    
    <item>
      <title>Database structure</title>
      <link>https://devdocs.prestashop.com/1.7/development/database/structure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://devdocs.prestashop.com/1.7/development/database/structure/</guid>
      <description>Maintaining the database Database structure definition Global definition The database structure of PrestaShop can be found in install/data/db_structure.sql (1.7.3.x releases example).
It is used one time, during the installation of PrestaShop. It contains the structure of almost all tables. If a table needs to be added or modified, this the file you should open.
Table in DB but not in db_structure.sql With PrestaShop 1.7, some tables have been migrated to doctrine entities (i.</description>
    </item>
    
  </channel>
</rss>
