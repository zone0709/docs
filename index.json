[
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/advanced-use/additional-list-parameters/",
	"title": "Additional list parameters",
	"tags": [],
	"description": "",
	"content": "Additional list parameters Previous tutorials only use simple list that returns the IDs of the resources, but you can actually get more details, sort and filter the list.\nDisplay parameter You can specify which fields you want for each resource using the display parameter.\n   Key Value Result     display full Returns all the fields of the resource    [field1,field2,...] Returns only the fields specified in this array       Result API call PHP Webservice lib options     Include all fields from the products resource /api/products/?display=full $opt = [ 'resource' = 'products', 'display' = 'full' ];    Include only the ID from the carriers resource /api/carriers/?display=[id] $opt = [ 'resource' = 'carriers', 'display' = '[id]' ];    Only include the name and value fields from the configurations resource /api/configurations/?display=[name,value] $opt = [ 'resource' = 'configurations', 'display' = '[name,value]' ];     Filter parameter You can filter the expected result with the filter parameter\n   Key Value Result     filter[field] [1|5]  OR operator: list of possible values    [1,10]  Interval operator: define interval of possible values    [John]  Literal value (not case sensitive)    [Jo]%  Begin operator: fields begins with the value (not case sensitive)    %[hn]  End operator: fields ends with the value (not case sensitive)    %[oh]%  Contains operator: fields contains the value (not case sensitive)       Result API call PHP Webservice lib options     Only the customers whose ids are 1 or 5 /api/customers/?filter[id]=[1|5]  $opt = [ 'resource' = 'customers', 'filter[id]' = '[1|5]' ];    Only the customers whose ids are between 1 and 10 /api/customers/?filter[id]=[1,10]  $opt = [ 'resource' = 'customers', 'filter[id]' = '[1,10]' ];    Only the customers whose first name is \u0026ldquo;John\u0026rdquo; /api/customers/?filter[firstname]=[John]  $opt = [ 'resource' = 'customers', 'filter[firstname]' = '[John]', ];    Only the manufacturers whose name begins with \u0026ldquo;Appl\u0026rdquo; /api/manufacturers/?filter[name]=[appl]%  $opt = [ 'resource' = 'manufacturers', 'filter[name]' = '[appl]%', ];     Sort parameter You can sort the expected result with the sort parameter\n   Key Value Result     sort [{fieldname}_{ASC|DESC}]  The sort value is composed of a field name and the expected order separated by a _       Result API call PHP Webservice lib options     Sort the customers in alphabetical order according to last name /api/customers/?sort=[lastname_ASC]  $opt = [ 'resource' = 'customers', 'sort' = '[lastname_ASC]' ];    Sort the customers in alphabetical order according to last name, then by biggest ID first /api/customers/?sort=[lastname_ASC,id_DESC]  $opt = [ 'resource' = 'customers', 'sort' = '[lastname_ASC,id_DESC]' ];     Limit parameter You can define a limit to the expected result with the limit parameter (which may allow you to perform pagination)\n   Key Value Result     limit [offset,]limit Either define offset and limit separated by a , (ex: 1,5) or the limit only (offset is 0-indexed)       Result API call PHP Webservice lib options     Only include the first 5 states /api/states/?limit=5 $opt = [ 'resource' = 'states', 'limit' = '5' ];    Only include the first 5 states starting from the 10th element /api/states/?limit=9,5 $opt = [ 'resource' = 'states', 'limit' = '9,5' ];     "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/page-reference/back-office/",
	"title": "Back Office Pages",
	"tags": [],
	"description": "",
	"content": "Back Office Pages  Order Page   Product Page   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/testing/basic-checks/",
	"title": "Basic checks",
	"tags": [],
	"description": "",
	"content": "Basic checks Syntax check First of all, making sure your file is understood by PHP is a trivial but critical check. PHP provides a linter to verify a file can be run:\n$ php -l \u0026lt;file\u0026gt; Syntax check only (lint) The linter can be run on a whole project if a list of files to check is created. On a Linux bash, this command looks for all the PHP files (except in folders vendor and tests) then runs the linter on each of them:\nfind . -type f -name \u0026#39;*.php\u0026#39; ! -path \u0026#34;./vendor/*\u0026#34; ! -path \u0026#34;./tests/*\u0026#34; -exec php -l -n {} \\; | (! grep -v \u0026#34;No syntax errors detected\u0026#34;) The linter should be run with different PHP version that are compatible with your module. Let\u0026rsquo;s consider this example, defining an empty array and dumping it:\ntest.php\n\u0026lt;?php $myVar = []; var_dump($myVar); Running the linter on this file from PHP 5.4 would return No syntax errors detected in test.php, while PHP 5.3 displays the following error:\nParse error: syntax error, unexpected \u0026#39;[\u0026#39; on line 3 That\u0026rsquo;s why the minimum and maximum compatible PHP versions should be used to check your code. Merchants may use a version that cannot run all the code written in your modules (i.e namespaces, traits, strict typing\u0026hellip;).\nIf some errors are reported by this tool, this gives you the opportunity :\n to make changes on the module to warn the merchants about the PHP compatibility range  Coding standards Modules follows the same rules as the core. The coding standards chapter of this project provides more details about it.\nFollowing the same rules as the core requires the configuration file to be available in your project. These rules are distributed and maintained on a repository prestashop/php-dev-tools available on Packagist which can be required via composer.\n# Install dependencies composer require --dev prestashop/php-dev-tools # Set up configuration files php vendor/bin/prestashop-coding-standards cs-fixer:init These commands install and prepare your projet for php-cs-fixer and the core standards. The commands have run successfully if a file .php_cs.dist exists in the root folder.\nPHP-CS-Fixer is used to check the code style, and is automatically included in your project if you required prestashop/php-dev-tools by following the commands above.\nIt provides two main features:\n Fixing automatically the coding standards problem found in the code, Reporting these errors without fixing them, useful in a continuous integration context (with --dry-run).  Supposing it was installed via Composer, the command to run it is:\nphp vendor/bin/php-cs-fixer fix [--dry-run] This example provides the output expected by this tool, here with a file requiring changes:\n$ php vendor/bin/php-cs-fixer fix --dry-run Loaded config PrestaShop coding standard from \u0026#34;\u0026lt;path_to_your_module\u0026gt;/.php_cs.dist\u0026#34;. Using cache file \u0026#34;.php_cs.cache\u0026#34;. 1) controllers/front/TheController.php Checked all files in 0.085 seconds, 12.000 MB memory used "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Basics Discover what PrestaShop is all about and the core concepts behind it.\n Introduction   Installation   Keep PrestaShop up-to-date   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Configuration Data can be saved in the shop database without requiring a module specific table to be created.\nThe table configuration contains a list of key =\u0026gt; value(s) properties which can be accessed from anywhere, including in a module. The Configuration class is the interface allowing each module developer to get or store data in this table.\nStore configuration data \u0026lt;?php Configuration::updateValue(string $key, mixed $value); $key will be the reference to your data to reuse later. $value can be any scalar type (int, string, bool, array\u0026hellip;).\nCheck a configuration data exists \u0026lt;?php Configuration::hasKey(string $key); $key is the name of the configuration data to check. The method returns true if the data exists, false otherwise.\nRetrieve configuration data Single key \u0026lt;?php Configuration::get(string $key); With $key as the data to retrieve. If the key does not exist, the returned value will be null.\nExample:\n\u0026lt;?php Configuration::get(\u0026#39;PS_VERSION_DB\u0026#39;); // returns \u0026#39;1.7.4.0\u0026#39; Multiple keys \u0026lt;?php Configuration::getMultiple(array $keys); With $keys as an array of keys to retrieve.\nThis returns an array, containing the values stored in the configuration table or null if a key does not exist.\nExample:\n\u0026lt;?php Configuration::getMultiple(array(\u0026#39;PS_VERSION_DB\u0026#39;, \u0026#39;UNKNOWN_KEY\u0026#39;)); // returns this array: array( \u0026#39;PS_VERSION_DB\u0026#39; =\u0026gt; \u0026#39;1.7.4.0\u0026#39;, \u0026#39;UNKNOWN_KEY\u0026#39; =\u0026gt; null, ) Use widgets "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-search-form/custom-form-factory/",
	"title": "Create your custom form factory",
	"tags": [],
	"description": "",
	"content": "Create your custom form factory In some cases the generic form factory is not enough for your need. In PrestaShop the category grid has three specific features:\n it can manage a parent category which changes the grid rendering (only displays children) so it needs to dynamically add a parameter its search url doesn\u0026rsquo;t match the list so it needs to specify the form action the redirection url is dynamic so that it takes the parent category into account  To manage this additional behaviour we create a decorator that uses the default form factory but adds specific behaviour.\nDecorate the default factory In those examples we use decorator that are based on the default grid factory. But you could create a fully autonomous class as long as it implements the GridFilterFormFactoryInterface. Factory decorator \u0026lt;?php /** * Class CategoryFilterFormFactory decorates original filter factory to add custom submit action. */ final class CategoryFilterFormFactory implements GridFilterFormFactoryInterface { /** * @var GridFilterFormFactoryInterface */ private $formFactory; /** * @var UrlGeneratorInterface */ private $urlGenerator; /** * @var RequestStack */ private $requestStack; /** * @param GridFilterFormFactoryInterface $formFactory * @param UrlGeneratorInterface $urlGenerator * @param RequestStack $requestStack */ public function __construct( GridFilterFormFactoryInterface $formFactory, UrlGeneratorInterface $urlGenerator, RequestStack $requestStack ) { $this-\u0026gt;formFactory = $formFactory; $this-\u0026gt;urlGenerator = $urlGenerator; $this-\u0026gt;requestStack = $requestStack; } /** * {@inheritdoc} */ public function create(GridDefinitionInterface $definition) { // Use the default factory to build the form like usual  $categoryFilterForm = $this-\u0026gt;formFactory-\u0026gt;create($definition); // Create a new empty form that will be used as an empty shell  $newCategoryFormBuilder = $categoryFilterForm-\u0026gt;getConfig()-\u0026gt;getFormFactory()-\u0026gt;createNamedBuilder( $definition-\u0026gt;getId(), FormType::class ); // Adds all the form types in the new form  /** @var FormInterface $categoryFormItem */ foreach ($categoryFilterForm as $categoryFormItem) { $newCategoryFormBuilder-\u0026gt;add( $categoryFormItem-\u0026gt;getName(), get_class($categoryFormItem-\u0026gt;getConfig()-\u0026gt;getType()-\u0026gt;getInnerType()), $categoryFormItem-\u0026gt;getConfig()-\u0026gt;getOptions() ); } $queryParams = []; if (null !== ($request = $this-\u0026gt;requestStack-\u0026gt;getCurrentRequest()) \u0026amp;\u0026amp; $request-\u0026gt;query-\u0026gt;has(\u0026#39;id_category\u0026#39;) ) { $queryParams[\u0026#39;id_category\u0026#39;] = $request-\u0026gt;query-\u0026gt;get(\u0026#39;id_category\u0026#39;); } // Set the specific action in the new form  $newCategoryFormBuilder-\u0026gt;setAction( $this-\u0026gt;urlGenerator-\u0026gt;generate(\u0026#39;admin_categories_search\u0026#39;, $queryParams) ); return $newCategoryFormBuilder-\u0026gt;getForm(); } } Service definitions # your-module/config/services.yml# Define form factory decoratorprestashop.core.grid.filter.category_form_factory:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\CategoryFilterFormFactory\u0026#39;arguments:- \u0026#39;@prestashop.core.grid.filter.form_factory\u0026#39;- \u0026#39;@router\u0026#39;- \u0026#39;@request_stack\u0026#39;# Use the decorator in the grid factory instead of the default oneprestashop.core.grid.factory.category:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory\u0026#39;arguments:- \u0026#39;@prestashop.core.grid.definition.factory.category\u0026#39;- \u0026#39;@prestashop.core.grid.data.factory.category_decorator\u0026#39;- \u0026#39;@prestashop.core.grid.filter.category_form_factory\u0026#39;- \u0026#39;@prestashop.core.hook.dispatcher\u0026#39;Simply change the action  If you just need to change the form action PrestaShop provides a FilterFormFactoryFormActionDecorator class that sets the action you need to use. All you need to do is define the services properly:\n# your-module/config/services.yml# Define form factory decoratorprestashop.core.grid.filter.credit_slip_form_factory:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\FilterFormFactoryFormActionDecorator\u0026#39;arguments:- \u0026#39;@prestashop.core.grid.filter.form_factory\u0026#39;- \u0026#39;@router\u0026#39;- \u0026#39;admin_credit_slips_search\u0026#39;# You just need to specify your search route# Use the decorator in the grid factory instead of the default oneprestashop.core.grid.factory.credit_slip:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory\u0026#39;arguments:- \u0026#39;@prestashop.core.grid.definition.factory.credit_slip\u0026#39;- \u0026#39;@prestashop.core.grid.data.factory.credit_slip_decorator\u0026#39;- \u0026#39;@prestashop.core.grid.filter.credit_slip_form_factory\u0026#39;- \u0026#39;@prestashop.core.hook.dispatcher\u0026#39;"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/creating-access/",
	"title": "Creating access to the Webservice",
	"tags": [],
	"description": "",
	"content": "Creating access to the Webservice Enable the webservice By default, the webservice feature is disabled on PrestaShop and needs to be switched on before the first use.\nVia the user interface Go in the PrestaShop back office, open the \u0026ldquo;Web service\u0026rdquo; page under the \u0026ldquo;Advanced Parameters\u0026rdquo; menu, and then choose \u0026ldquo;Yes\u0026rdquo; for the \u0026ldquo;Enable PrestaShop Webservice\u0026rdquo; option.\n  Enabling Webservice   Programatically The Webservice switch is stored in the configuration table of PrestaShop.\nIn order to enable the webservice API:\n\u0026lt;?php Configuration::updateValue(\u0026#39;PS_WEBSERVICE\u0026#39;, 1); With the equivalent for disabling it:\n\u0026lt;?php Configuration::updateValue(\u0026#39;PS_WEBSERVICE\u0026#39;, 0); Create an access key Via the user interface In order to have access to the API you need to create an access key, this will allow you to finely tune the permissions you give to the different data of your shop. You will use this key later in each call to the API. Open the \u0026ldquo;Webservice\u0026rdquo; page under the \u0026ldquo;Advanced Parameters\u0026rdquo; menu, and then click the \u0026ldquo;Add new webservice key\u0026rdquo; button to access the account configuration section.\n  Creating an access key   Each access key is defined by this information:\n Key - The API key serves as the main identifier for the webservice account you are creating. Click the \u0026ldquo;Generate\u0026rdquo; button to get an unique authentication key. You can also create your own (which must be 32 characters long), but using a generated key prevents wrong-doers from guessing your key too easily. Using this key, you and other selected users will be able to access the webservice. Key description - Helps you remember who you created that key for, what are the access rights assigned to it, etc. The description is not public, but make sure to put all the keywords pertaining to the user, so that you can find their key more quickly. Status - You can disable any key at any time. Permissions - This section is very important, as it enables you to assign rights for each resource you want to make available to this key. Indeed, you might want a user to have read and write access on some resources, but only read access on others – and no access to the more important ones. In the list of permissions, the top left checkbox enables you to define all the rights for a given resource. Likewise, the checkbox at the top of each column enables you to give the select right (View, Modify, etc.) to all the resources. Make sure to only select the rights needed for the usage of that key. Do not give all the rights for all resources to any key, keep that to yours and yours only. Shop association - This only appears in multistore mode. It enables you to choose which of your stores the key owner should have access to.  Programatically Creating API keys can be done with the class WebserviceKey.\n\u0026lt;?php $apiAccess = new WebserviceKey(); $apiAccess-\u0026gt;key = \u0026#39;GENERATE_A_COMPLEX_VALUE_WITH_32_CHARACTERS\u0026#39;; $apiAccess-\u0026gt;save(); This first code allows you to pass the authentication layer. You also need access to the resources you expect to use.\nWe need the Api account ID in order to grant it access, and an array having the resource name as key and the array of methods allowed as value. The available resources can be found in WebserviceRequest::getResources() (link to definition).\nFor instance is we want to give all permissions for customers and orders resources for the account we previously created:\n\u0026lt;?php $permissions = [ \u0026#39;customers\u0026#39; =\u0026gt; [\u0026#39;GET\u0026#39; =\u0026gt; 1, \u0026#39;POST\u0026#39; =\u0026gt; 1, \u0026#39;PUT\u0026#39; =\u0026gt; 1, \u0026#39;DELETE\u0026#39; =\u0026gt; 1, \u0026#39;HEAD\u0026#39; =\u0026gt; 1], \u0026#39;orders\u0026#39; =\u0026gt; [\u0026#39;GET\u0026#39; =\u0026gt; 1, \u0026#39;POST\u0026#39; =\u0026gt; 1, \u0026#39;PUT\u0026#39; =\u0026gt; 1, \u0026#39;DELETE\u0026#39; =\u0026gt; 1, \u0026#39;HEAD\u0026#39; =\u0026gt; 1], ]; WebserviceKey::setPermissionForAccount($apiAccess-\u0026gt;id, $permissions); Note only the key in the nested arrays of permissions are important. We set 1 as a value in this example but it can be anything.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/db/",
	"title": "Db class",
	"tags": [],
	"description": "",
	"content": "Using the database with the Db class Get link to the database \u0026lt;?php /** * @var \\Db $db */ $db = \\Db::getInstance(); The first call to this method initialize the link to the database, and return the same link to all the next calls. $db in this example will be reused in all the next examples.\nDb class methods Execute a raw SQL request (SELECT only) \u0026lt;?php $request = \u0026#39;SELECT `id_table` FROM `\u0026#39; . _DB_PREFIX_ . \u0026#39;some_table` ...\u0026#39;; /** @var array $result */ $result = $db-\u0026gt;executeS($request); As the method deals with raw SQL requests, the _DB_PREFIX_ must be used.\nThe result is an associative array, containing an array for each row.\nExecute a raw SQL request (SELECT only) and get the first row \u0026lt;?php $request = \u0026#34;SELECT `id_table` FROM `\u0026#39; . _DB_PREFIX_ . \u0026#39;some_table` ...\u0026#34;; /** @var array $result */ $result = $db-\u0026gt;getRow($request); As the method deals with raw SQL requests, the _DB_PREFIX_ must be used.\nReturns an associative array containing the first row of the query. This function automatically adds \u0026ldquo;LIMIT 1\u0026rdquo; to the query.\nExecute a SELECT request with only one column and one row \u0026lt;?php $request = \u0026#34;SELECT `count(\u0026#39;sales\u0026#39;)` FROM `\u0026#39; . _DB_PREFIX_ . \u0026#39;some_table` ...\u0026#34;; /** @var string|false $salesCount */ $salesCount = $db-\u0026gt;getValue($request); As the method deals with raw SQL requests, the _DB_PREFIX_ must be used.\nThis method is convenient when you need only one value to retrieve from the database. It prevent to loop in several arrays in order to get the first value of the first row.\nExecute a raw SQL request (UPDATE, INSERT\u0026hellip;) \u0026lt;?php $request = \u0026#34;INSERT INTO `\u0026#39; . _DB_PREFIX_ . \u0026#39;some_table` (`id_table`) VALUES (10)\u0026#34;; /** @var array|false */ $db-\u0026gt;execute($request); Return an array if the request was properly executed, false otherwise.\nInsert a row in the database \u0026lt;?php /** @var bool $result */ $result = $db-\u0026gt;insert(\u0026#39;db_table\u0026#39;, array( \u0026#39;id_lang\u0026#39; =\u0026gt; (int) $lang, \u0026#39;value\u0026#39; =\u0026gt; pSQL($value), \u0026#39;date_upd\u0026#39; =\u0026gt; date(\u0026#39;Y-m-d H:i:s\u0026#39;), )); _DB_PREFIX_ will be automatically prefixed to the table name.\nThe result is boolean saying if the request was properly executed or not.\nUpdate a row in the database \u0026lt;?php /** @var bool $result */ $result = $db-\u0026gt;update(\u0026#39;db_table\u0026#39;, array( \u0026#39;value\u0026#39; =\u0026gt; pSQL($value), \u0026#39;date_upd\u0026#39; =\u0026gt; date(\u0026#39;Y-m-d H:i:s\u0026#39;), ), \u0026#39;id_table = 10\u0026#39;, 1, true); _DB_PREFIX_ will be automatically prefixed to the table name.\nThe result is boolean saying if the request was properly executed or not.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/",
	"title": "Getting started with theme development",
	"tags": [],
	"description": "",
	"content": "Getting started  Guidelines and coding standards   Setting up your local environment   Tooling prerequisites for theme designers   Theme organization   Theme.yml   Asset management   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage/",
	"title": "Grid and identifiable object form hooks usage example",
	"tags": [],
	"description": "",
	"content": "Grid and identifiable object form hooks usage example  Introduction In this tutorial we are going to build module which extends customers list with one extra column which can be toggled. It can have two states - turned on or off. In customer creation and edit form we will add switch which will also manage the same state. By following this tutorial you will learn how to:\n extend modern grids. Grid component extend identifiable object form. identifiable object form  The module created within this tutorial can be found here\nPrerequisites  To be familiar with basic module creation.  Register hooks On module installation the following hooks are being registered:\n actionCustomerGridDefinitionModifier - for adding new column to customers grid. actionCustomerGridQueryBuilderModifier - for modifying customers grid sql. actionCustomerFormBuilderModifier - for adding new field to customers create or edit form field. actionAfterCreateCustomerFormHandler - to execute the saving process of added field from the module. actionAfterUpdateCustomerFormHandler - to execute the update process of added field from the module.  \u0026lt;?php public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;actionCustomerGridDefinitionModifier\u0026#39;) \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;actionCustomerGridQueryBuilderModifier\u0026#39;) \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;actionCustomerFormBuilderModifier\u0026#39;) \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;actionAfterCreateCustomerFormHandler\u0026#39;) \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;actionAfterUpdateCustomerFormHandler\u0026#39;) \u0026amp;\u0026amp; $this-\u0026gt;installTables() ; }  Hooks actionCustomerGridDefinitionModifier and actionCustomerGridQueryBuilderModifier are built using grid id which in this case is Customer. If you want to use hook for any other grid You can check any definition factory service in PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory to see available grid ids. Grid id is returned by getId() method. Hooks actionCustomerFormBuilderModifier,actionAfterCreateCustomerFormHandler and actionAfterUpdateCustomerFormHandler are built using unique identifier which in this case is Customer is retrieved from its form type CustomerType. E.g id retrieved from ManufacturerType will be Manufacturer. Some types might use function getBlockPrefix to retrieve the unique id Adding new column to customers grid Extending grid definition and filters \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinitionInterface; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ToggleColumn; use PrestaShopBundle\\Form\\Admin\\Type\\YesAndNoChoiceType; class Ps_DemoCQRSHooksUsage extends Module { // ...  /** * Hook allows to modify Customers grid definition. * This hook is a right place to add/remove columns or actions (bulk, grid). * * @param array $params */ public function hookActionCustomerGridDefinitionModifier(array $params) { /** @var GridDefinitionInterface $definition */ $definition = $params[\u0026#39;definition\u0026#39;]; $translator = $this-\u0026gt;getTranslator(); $definition -\u0026gt;getColumns() -\u0026gt;addAfter( \u0026#39;optin\u0026#39;, (new ToggleColumn(\u0026#39;is_allowed_for_review\u0026#39;)) -\u0026gt;setName($translator-\u0026gt;trans(\u0026#39;Allowed for review\u0026#39;, [], \u0026#39;Modules.Ps_DemoCQRSHooksUsage\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;is_allowed_for_review\u0026#39;, \u0026#39;primary_field\u0026#39; =\u0026gt; \u0026#39;id_customer\u0026#39;, \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;ps_democqrshooksusage_toggle_is_allowed_for_review\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;customerId\u0026#39;, ]) ) ; $definition-\u0026gt;getFilters()-\u0026gt;add( (new Filter(\u0026#39;is_allowed_for_review\u0026#39;, YesAndNoChoiceType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;is_allowed_for_review\u0026#39;) ); } // ... } This hook, through $params array, received GridDefinition that defines how the grid is rendered. See Grid definition for more information.\nIn this sample a new toggable column which determines if the customer is eligible to review products is added just after another column which has id optin. The sample code also demonstrates how add new filter.\nCreating route for toggle column ToggleColumn - used to display booleans, it will display an icon instead of the value. If user clicks on it, this triggers a toggle of the boolean value. More information about this column and all available parameters can be found here.\nAs in this sample module we are creating ToggleColumn we need to configure the route in which the toggling action will be performed. Indeed when the end-user clicks on this column, an ajax request is performed and must reach one new controller to handle the action (here: toggle a value on and off).\nIf you only want to display data then this step can be skipped. E.g you are creating DataColumn. See Column references for full list of grid columns available.\n Create controller DemoCQRSHooksUsage\\Controller\\Admin\\CustomerReviewController:  \u0026lt;?php namespace DemoCQRSHooksUsage\\Controller\\Admin; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; class CustomerReviewController extends FrameworkBundleAdminController { }  Create controller action:  This example has been simplified for practical reasons.\nYou can find full implementation here which uses CQRS pattern to toggle the reviewer state. More about it here.\n \u0026lt;?php namespace DemoCQRSHooksUsage\\Controller\\Admin; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; class CustomerReviewController extends FrameworkBundleAdminController { public function toggleIsAllowedForReviewAction($customerId) { // updating reviewer state can be handled here  return $this-\u0026gt;redirectToRoute(\u0026#39;admin_customers_index\u0026#39;); } }  As this is a Symfony controller, we must configure the related routing (read more about symfony routing), which means create a route in ps_democqrshooksusage/config/routes.yml file:  ps_democqrshooksusage_toggle_is_allowed_for_review:path:demo-cqrs-hook-usage/{customerId}/toggle-is-allowed-for-reviewmethods:[POST]defaults:_controller:\u0026#39;DemoCQRSHooksUsage\\Controller\\Admin\\CustomerReviewController::toggleIsAllowedForReviewAction\u0026#39;requirements:customerId:\\d+Route name ps_democqrshooksusage_toggle_is_allowed_for_review matches the one that was passed as mandatory option when creating the ToggleColumn.\nExtending grid query builder By just extending grid definition we won\u0026rsquo;t be able to display any data since we need to fetch it first. Luckily, we can add additional sql conditions by extending doctrine\u0026rsquo;s query builder.\n\u0026lt;?php use Doctrine\\DBAL\\Query\\QueryBuilder; use PrestaShop\\PrestaShop\\Core\\Search\\Filters\\CustomerFilters; class Ps_DemoCQRSHooksUsage extends Module { // ...  /** * Hook allows to modify Customers query builder and add custom sql statements. * * @param array $params */ public function hookActionCustomerGridQueryBuilderModifier(array $params) { /** @var QueryBuilder $searchQueryBuilder */ $searchQueryBuilder = $params[\u0026#39;search_query_builder\u0026#39;]; /** @var CustomerFilters $searchCriteria */ $searchCriteria = $params[\u0026#39;search_criteria\u0026#39;]; $searchQueryBuilder-\u0026gt;addSelect( \u0026#39;IF(dcur.`is_allowed_for_review` IS NULL,0,dcur.`is_allowed_for_review`) AS `is_allowed_for_review`\u0026#39; ); $searchQueryBuilder-\u0026gt;leftJoin( \u0026#39;c\u0026#39;, \u0026#39;`\u0026#39; . pSQL(_DB_PREFIX_) . \u0026#39;democqrshooksusage_reviewer`\u0026#39;, \u0026#39;dcur\u0026#39;, \u0026#39;dcur.`id_customer` = c.`id_customer`\u0026#39; ); if (\u0026#39;is_allowed_for_review\u0026#39; === $searchCriteria-\u0026gt;getOrderBy()) { $searchQueryBuilder-\u0026gt;orderBy(\u0026#39;dcur.`is_allowed_for_review`\u0026#39;, $searchCriteria-\u0026gt;getOrderWay()); } foreach ($searchCriteria-\u0026gt;getFilters() as $filterName =\u0026gt; $filterValue) { if (\u0026#39;is_allowed_for_review\u0026#39; === $filterName) { $searchQueryBuilder-\u0026gt;andWhere(\u0026#39;dcur.`is_allowed_for_review` = :is_allowed_for_review\u0026#39;); $searchQueryBuilder-\u0026gt;setParameter(\u0026#39;is_allowed_for_review\u0026#39;, $filterValue); if (!$filterValue) { $searchQueryBuilder-\u0026gt;orWhere(\u0026#39;dcur.`is_allowed_for_review` IS NULL\u0026#39;); } } } } // ... } This sample demonstrates how to extend sql of the customers grid. From our custom database table democqrshooksusage_reviewer we fetch the result of field is_allowed_for_review. This name must match the id we added in the grid definition. In order for sorting to work we also add orderBy condition and finally, in order for filters to work where conditions are added if the filter exists in $searchCriteria-\u0026gt;getFilters().\nResult After completing the steps above by going to customers list you should see new column \u0026ldquo;allowed for review\u0026rdquo; added.\n  Allowed for review column added to customers list   Adding new form field to customer form Modifying customers form builder In this step we are appending to the customers form a new SwitchType form field - its one of many form types which already exist in PrestaShop. More information about it can be found here.\nThis example has been simplified for practical reasons.\nYou can find full implementation here which uses CQRS pattern to get reviewer state. More about it here.\n \u0026lt;?php // modules/ps_democqrshooksusage/ps_democqrshooksusage.php  use Symfony\\Component\\Form\\FormBuilderInterface; use PrestaShopBundle\\Form\\Admin\\Type\\SwitchType; class Ps_DemoCQRSHooksUsage extends Module { // ...  public function hookActionCustomerFormBuilderModifier(array $params) { /** @var FormBuilderInterface $formBuilder */ $formBuilder = $params[\u0026#39;form_builder\u0026#39;]; $formBuilder-\u0026gt;add(\u0026#39;is_allowed_for_review\u0026#39;, SwitchType::class, [ \u0026#39;label\u0026#39; =\u0026gt; $this-\u0026gt;getTranslator()-\u0026gt;trans(\u0026#39;Allow reviews\u0026#39;, [], \u0026#39;Modules.Ps_DemoCQRSHooksUsage\u0026#39;), \u0026#39;required\u0026#39; =\u0026gt; false, ]); $customerId = $params[\u0026#39;id\u0026#39;]; $params[\u0026#39;data\u0026#39;][\u0026#39;is_allowed_for_review\u0026#39;] = $this-\u0026gt;getIsAllowedForReview($customerId); $formBuilder-\u0026gt;setData($params[\u0026#39;data\u0026#39;]); } private function getIsAllowedForReview($customerId) { // implement your data retrieval logic here  return true; } // ... } In this sample by using Symfony form builder we just added another Form type. To determine if its on or off we also need to reset its form data by assigning is_allowed_for_review value to true or false.\nResult By completing the steps above newly added switch is now visible in the customers form.\n  Allowed for review switch added to customers form   Extending customers form after create and update actions In the previous example we have added a switch field ! But when we want to save its state (on or off) nothing happens. The data is not modified. This is because we have not used the hooks dedicated to handle this topic - lets do that!\nThis example has been simplified for practical reasons.\nYou can find full implementation here which uses CQRS pattern to create or update reviewer state. More about it here.\n \u0026lt;?php public function hookActionAfterUpdateCustomerFormHandler(array $params) { $this-\u0026gt;updateCustomerReviewStatus($params); } public function hookActionAfterCreateCustomerFormHandler(array $params) { $this-\u0026gt;updateCustomerReviewStatus($params); } private function updateCustomerReviewStatus(array $params) { $customerId = $params[\u0026#39;id\u0026#39;]; /** @var array $customerFormData */ $customerFormData = $params[\u0026#39;form_data\u0026#39;]; $isAllowedForReview = (bool) $customerFormData[\u0026#39;is_allowed_for_review\u0026#39;]; // implement review status saving here } when we created the switch type form we named it is_allowed_for_review. By using the same name we can get the state (on or off). This hook receives from $params the form data, that you can retrieve like this: $params['form_data']. All the form data is available here, including is_allowed_for_review data which comes from the switch.\nYou can find example module here: https://github.com/PrestaShop/example-modules/tree/master/demoextendsymfonyform2\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/guidelines/",
	"title": "Guidelines and coding standards",
	"tags": [],
	"description": "",
	"content": "Guidelines and coding standards Compatibility PHP Code Your PHP code should be compatible with the following versions:\n PrestaShop 1.7.0  ~ 1.7.3  : at least PHP 5.4 PrestaShop 1.7.4  : at least PHP 5.6 PrestaShop 1.7.7  : at least PHP 7.1  HTML / CSS / Javascript Your HTML/CSS/JS code should work with at least:\n Edge Firefox 45 Chrome 29.  Mobile-wise:\n iOS 8.4 Android Browser 4.4  Standards General Use spaces for indentation in every language (PHP, HTML, CSS, etc.):\n4 spaces for PHP files, 2 spaces for all other file types.\nUse our .editorconfig file in order to easily configure your editor: https://github.com/PrestaShop/PrestaShop/blob/develop/.editorconfig\nPHP files You should follow the PSR-2 standard, just like PrestaShop does.\nIn general, we tend to follow the Symfony coding standards.\nHTML files Use HTML 5 tags:\n \u0026lt;br /\u0026gt; → \u0026lt;br\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;section\u0026gt; etc.  All open tags must be closed in the same file (a \u0026lt;div\u0026gt; should not be opened in header.tpl then closed in footer.tpl). Subtemplates (templates meant to be included in another template) must reside inside a /_partials/ folder.\nCSS files Use CSS3.\nWe recommend that you follow the RSCSS structure\nJavascript Make sure your linter tool follows our .eslint file: https://github.com/PrestaShop/PrestaShop/blob/develop/.eslintrc\nIf you wish to write ECMAScript 2015 (ES6) code, we recommend using the Babel compiler to maximize compatibility.\nA good JS practice consists in splitting files per use, and then compiling them into one.\nLearn more about the ES2015 standard: https://babeljs.io/docs/learn-es2015/\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-process/how-issues-are-sorted/",
	"title": "How issues are sorted",
	"tags": [],
	"description": "",
	"content": "How issues are sorted What happens to the issue you have reported PrestaShop Quality Assurance team (aka QA) uses a transparent definition for the criteria used to qualify issues' severity, and how they should be applied through labels on github issues.\nPlease note that severity is to be distinguished from priority. Indeed, severity is used to measure the negative impact that a bug has on a system, a feature, a component or on the project development. It is usually defined by the QA team. As for the priority, it is used to organize all the tasks (bugs, improvements, features, technical tasks) that have to be done in order to meet the project\u0026rsquo;s deadlines.\nIssue Severity Criteria When a new issue is created, the first step is to understand what the problem is and then reproduce it. Once that work is done, the second step is to define the severity of that bug.\nFour severity levels are used: Critical, Major, Minor and Trivial.\nCritical The bug affects critical functionality or critical data and there is no workaround (no way to avoid it). A critical issue affects a very large percentage of users (\u0026gt; 60%) and matches at least one of the following:\n It can lead to data loss, introduce a security vulnerability or break the automatic end to end tests It prevents the essential shop operations or puts your business at great risk  Examples:\n Difficulty accessing the front office or back office (significant slowdown, error during installation or update, fatal error) Difficulty to globally manage categories, products or customers Difficulty to globally place and manage orders  A critical issue should result in a patch version that should be released as soon as possible. PrestaShop 1.7.2.5 is a good example: this patch release fixes two vulnerabilities affecting the Back Office.\nMajor The bug affects major functionality or major data and there is a workaround, but it is not obvious or can be difficult to put in practice.\nA major issue affects a large percentage of users (\u0026gt; 30%) and matches at least one of the following:\n It impacts law compliance It has a strong impact on the usability of the front-office / back-office or blocks another project It is an important problem but not necessarily blocking the main activity of the seller  Examples:\n Being unable to add, configure or delete a theme or a module Difficulty in operating a module properly Impacts the price the customer pays  Minor The bug affects minor functionality or non-critical data and there is a reasonable workaround, even if it can be annoying when using your shop.\nExamples:\n A tolerable slowdown A display problem that prevents users from doing something non-critical (eg: can’t click on an element that can be accessible in another way) An error message displayed in your back-office that can be dismissed Cloning a product doesn\u0026rsquo;t copy all of it\u0026rsquo;s data Inaccurate statistics  Trivial The bug doesn’t affect any functionality or data. It does not impact productivity or efficiency. It is only an inconvenience without functional impact and it does not even need a workaround.\nExamples:\n Cosmetic issues Wrong translation in a specific language: that can be solved on Crowdin Missing confirmation message after an action A link opened in the same tab instead of a new tab  Issue Prioritization Assessing severity helps to prioritize issues but it is not the only criterion at stake. Given two equally severe issues, how to choose one over the other ?\nPrioritization is done by representatives of the Development team, the Product Management team, and the Quality Assurance team.\nTogether, during regular meetings, they look at the new confirmed issues and they sort them.\nIn order to make sure that a given bug does not damage PrestaShop\u0026rsquo;s image nor it affects the confidence merchants can have in PrestaShop, they take special care and strive to make every version of PrestaShop better than the one before. Since no one wants to introduce new bugs while fixing other bugs, regressions (new bugs created accidentally when fixing or improving an existing feature) are usually prioritized higher than older bugs. By doing this, the overall software stability is ever increasing.\nThen the issue\u0026rsquo;s technical complexity is also studied : that is, whether the bug is easy or complex to fix.\nSometimes a smaller bug will be prioritize over a bigger one. This is because a complex bug may require big technical changes which are not suitable until a later version. This may be because a would require applying backwards-incompatible changes (which are bad for module developers), or because it can be better addressed as a part of a larger project – there is no use fixing a bug if the whole feature is due to be revamped in the near future. Also sometimes some bugs will be prioritized just because of the “opportunity cost” of fixing them together, as it is usually easier to fix several bugs within the same component. For instance, during the migration of a BO page to Symfony, the bugs of this page are prioritized higher in order to fix them all at once.\nLast criterion used is the business impact as of course.\nIn the end, handling bugs requires two points of view: micro and macro. Severity analyzes the issue on its own, while Priority analyzes the issue in the context of the whole project.\n (This article was originally published on our blog: Introducing A New Bug Severity Classification)\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/benchmark/",
	"title": "How to benchmark your PrestaShop",
	"tags": [],
	"description": "",
	"content": "How to setup the benchmark of your PrestaShop shop Prerequisite  git php-7+ composer The prestashop version you want to bench  Dockerized installation of benchmark To get an automatically pre-populated shop, you can use the following github repository: Prestashop performance project\nManually prepare your benchmark Prepare your dataset Before launching a benchmark of PrestaShop, you need to put a few entries in your database.\nThe prestashop shop Generator will help you to do this.\nFirst clone the project from the following url, and set the number of entries you want for each main entities:\ngit clone https://github.com/PrestaShop/prestashop-shop-creator cd prestashop-shop-creator composer install The default settings is a rather small shop (about 100 products).\nCreating the \u0026#34;app/config/config.yml\u0026#34; file Some parameters are missing. Please provide them. shop_id (1): customers (100): manufacturers (100): suppliers (10): addresses (100): aliases (100): categories (100): warehouses (2): carriers (3): specific_prices (100): attribute_groups (10): products (100): attributes (10): carts (1000): cart_rules (100): customizations (10): features (100): feature_values (5): orders (10): guests (10): order_histories (6): range_prices (100): range_weights (100): product_attributes (5): images (100): order_messages (100): deliveries (100): connections (1000): product_suppliers (10): order_carriers (2): order_details (10): feature_products (5): stores (100): profiles (10): stock_availables (1): langs ([fr_FR, en_US]): If you want to customize later the number of entities, just modify the file app/config/config.yml\nThen run the following command to generate your initial dataset, which will be stored in the generated_data directory\nphp app/console.php How to use this dataset during Prestashop install? Actually it\u0026rsquo;s quite simple. Just copy the content of the generated_data folders (three folders should be there: data, img and langs) in the prestashop install/fixtures/fashion folders (overwrite the folders already there).\nThen launch a standard prestashop install.\nPrepare your shop Make sure you\u0026rsquo;re not in debug mode! In config/defines.inc.php you should have:\ndefine(\u0026#39;_PS_MODE_DEV_\u0026#39;, false); The smarty cache should be enabled, but the multi-front synchronisation should be disabled for best performances. (those are the default settings).\nMake sure also to have at least french and english enabled and the internationalization page.\nIf you are running a prestashop version from source, properly setup your environment for production:\nexport SYMFONY_ENV=prod export SYMFONY_DEBUG=0 composer dump-autoload --optimize php bin/console cache:clear --env=prod --no-debug Write down your settings Write down all the relevant informations which have an impact on your benchmark results:\n Server configuration (CPU / Memory / Disks\u0026hellip;) PHP / Apache / MySQL settings PrestaShop configuration and version  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-bulk-actions/",
	"title": "How to use Bulk actions in Grid",
	"tags": [],
	"description": "",
	"content": "How to use Bulk actions in Grid? In addition to displaying data tables, Grid component also comes with a lot of additional functionality. One of it is Bulk actions.\nWhat is Bulk action? Bulk action is action (e.g. Delete, Change status \u0026amp; etc) that can be performed on multiple entries in table. This is a common task when using Grid (e.g. Delete multiple selected Suppliers with a single click).\nHow to add Bulk actions to Grid? Let\u0026rsquo;s take an example from Customers grid definition. It has 3 bulk actions: Enable, Disable \u0026amp; Delete multiple customers. See code example below:\n\u0026lt;?php // src/Core/Grid/Definition/Factory/CustomerGridDefinitionFactory.php  final class CustomerGridDefinitionFactory extends AbstractGridDefinitionFactory { // ...  protected function getBulkActions() { return (new BulkActionCollection()) -\u0026gt;add( (new SubmitBulkAction(\u0026#39;enable_selection\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Enable selection\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;submit_route\u0026#39; =\u0026gt; \u0026#39;admin_customers_enable_bulk\u0026#39;, ]) ) -\u0026gt;add( (new SubmitBulkAction(\u0026#39;disable_selection\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Disable selection\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;submit_route\u0026#39; =\u0026gt; \u0026#39;admin_customers_disable_bulk\u0026#39;, ]) ) -\u0026gt;add((new DeleteCustomersBulkAction(\u0026#39;delete_selection\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Delete selected\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;customers_bulk_delete_route\u0026#39; =\u0026gt; \u0026#39;admin_customers_delete_bulk\u0026#39;, ]) ) ; } } As you see, Grid stores Bulk actions in BulkActionCollection object. This means that every Bulk action needed for Grid must be added to BulkActionCollection using add() method.\nHow to add Bulk actions from module? You can add additional Bulk actions to any Grid using hook. You have to follow these steps:\n Register hook action{gridId}GridDefinitionModifier where {gridId} is Grid id (e.g. customer for Customers grid, this means that hook name would be actionCustomerGridDefinitionModifier). Implement hook method in your module:  \u0026lt;?php // modules/mymodule/mymodule.php  class MyModule extends Module { // ...  /** * Use hook to add Bulk action for subscribing multiple customers to newsletter */ public function hookActionCustomerGridDefinitionModifier(array $params) { // $params[\u0026#39;definition\u0026#39;] is instance of \\PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinition  $params[\u0026#39;definition\u0026#39;]-\u0026gt;getBulkActions()-\u0026gt;add( (new SubmitBulkAction(\u0026#39;subscribe_newsletter\u0026#39;)) -\u0026gt;setName(\u0026#39;Subscribe newsletter\u0026#39;) -\u0026gt;setOptions([ // in most cases submit action should be implemented by module  \u0026#39;submit_route\u0026#39; =\u0026gt; \u0026#39;admin_my_module_customers_bulk_subscribe_newsletter\u0026#39;, ]) ); } } Now you should be able to see new Bulk action available in Customers grid!\nHow to create custom Bulk action? PrestaShop already comes with a bunch of Bulk actions that are available for use in your Grids or for extending PrestaShop grids. However, in some use cases you may find that existing Bulk actions do not fit your needs. Luckily, there is a solution, you can create custom Bulk actions.\nFirst, you need to create Bulk action itself:\n\u0026lt;?php // modules/mymodule/src/Grid/Action/Bulk  use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\AbstractBulkAction; // It extends AbstractBulkAction, // but you can also implement \\PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\BulkActionInterface // if for some reason you want to avoid using abstract class final class ExportBulkAction extends AbstractBulkAction { public function getType() { return \u0026#39;export\u0026#39;; } protected function configureOptions(OptionsResolver $resolver) { $resolver -\u0026gt;setDefaults([ // fictional action implemented by module to export only selected customers  \u0026#39;submit_route\u0026#39; =\u0026gt; \u0026#39;admin_my_module_customers_bulk_export\u0026#39;, ]) ; } } Then you need to create template so it can render nicely in your grid.\n{# mymodule/views/PrestaShop/Admin/Common/Grid/Actions/Bulk/export.html.twig #}{# This button should be used with SubmitBulkActionExtension grid extension in Javascript #}\u0026lt;button id=\u0026#34;{{ \u0026#39;%s_grid_bulk_action_%s\u0026#39;|format(grid.id, action.id) }}\u0026#34; class=\u0026#34;dropdown-item js-bulk-action-submit-btn\u0026#34; type=\u0026#34;button\u0026#34; data-form-url=\u0026#34;{{ path(action.options.submit_route) }}\u0026#34; data-form-method=\u0026#34;GET\u0026#34; \u0026gt; {{ action.name }}\u0026lt;/button\u0026gt; Last thing is to add your newly created Bulk action to Grid\u0026rsquo;s BulkActionCollection and then it should be available in your Grid!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/shortcodes/ref/",
	"title": "Internal and cross links",
	"tags": [],
	"description": "",
	"content": "Internal and cross links Cross links To link to another page in the documentation, use ref:\n[This is a link to Configuration]({{\u0026lt; ref \u0026quot;1.7/basics/configuration.md\u0026quot; \u0026gt;}})  Rendered result:\nThis is a link to Configuration\n Don\u0026rsquo;t forget to put the link between double quotes. Internal links To a link that points to a specific point in the current page, use relref:\n[This is a link to the first title]({{\u0026lt; relref \u0026quot;#cross-links\u0026quot; \u0026gt;}})  Rendered result:\nThis is a link to the first title\n Internal links need to be \u0026ldquo;slugified\u0026rdquo; to work.\nIf you feel lost, here\u0026rsquo;s a tool that will slugify your titles.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction Technical principles behind a module A PrestaShop module consists of a main PHP file with as many other PHP files as needed, as well as the necessary template (.tpl) files and assets (images, JavaScript, CSS, etc.) to display the module\u0026rsquo;s interface, whether to the customer (on the front office) or to the merchant (on the back office).\nAny PrestaShop module, once installed on an online shop, can interact with one or more \u0026ldquo;hooks\u0026rdquo;. Hooks enable you to hook/attach your code to the current View at the time of the code parsing (i.e., when displaying the cart or the product sheet, when displaying the current stock, etc.). Specifically, a hook is a shortcut to the various methods available from the Module object, as assigned to that hook.\nFor security reasons, during validation, we do not accept any call to another website/API in order to retrieve code that will later be executed on server or client.\nModules' operating principles Modules are the ideal way to let your talent and imagination as a developer express themselves, as the creative possibilities are many and you can do pretty much anything with PrestaShop\u0026rsquo;s module API.\nAny module:\n can display a variety of content (blocks, text, etc.), perform many tasks (batch update, import, export, etc.), interface with other tools, and much much more. facilitates interactions between the shop and external services. can be made as configurable as necessary; the more configurable it is, the easier it will be to use, and thus will be able to address the needs of a wider range of users. can add functionalities to PrestaShop without having to edit its core files, thus making it easier to perform an update of PrestaShop without having the transpose all core changes. Indeed, you should always strive to stay away from core files when building a module, even though this may seem necessary in some situations.  Main differences between 1.6 and 1.7 modules PrestaShop 1.7 was built so that modules that were written for PS 1.6 could work almost as-is \u0026ndash; save for minor changes and a cosmetic update, the template files being in need of adapting to the 1.7 default theme.\nThe major module development changes in PrestaShop 1.7 are explained in details in this Build article, and are integrated into this updated documentation. If you already know how to create a module that works with PS 1.6, we strongly advise you to read that article from top to bottom in order to get up to speed with 1.7 development.\nSome native modules have had their names changed in PrestaShop 1.7. See the full list here.\nModules folder PrestaShop\u0026rsquo;s modules are found in the /modules folder, which is at the root of the PrestaShop main folder. This is true for both default modules (provided with PrestaShop) and 3rd-party modules that are subsequently installed.\nModules can also be part of a theme if they are really specific to it. In that case, they would be in the theme\u0026rsquo;s own /modules folder, and therefore under the following path: /themes/[my-theme]/modules\nEach module has its own sub-folder inside the /modules folder: /bankwire, /birthdaypresent, etc.\nAbout the cache The /cache/class_index.php file contains the link between the class and the declaration file. If there is a caching issue, this file can safely be deleted.\nThe /config/xml folder contains the list of all the base modules:\ndefault_country_modules_list.xml must_have_modules_list.xml tab_modules_list.xml  When the store\u0026rsquo;s front-end doesn\u0026rsquo;t quite reflect your changes and emptying the browser\u0026rsquo;s cache is not effective, you should try emptying the following folders:\n/cache/smarty/cache /cache/smarty/compile  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "How testing works in PrestaShop  PrestaShop is a complex software and uses automated testing to ensure that the new additions to the codebase do not break existing behaviors.\nAutomated tests are located in tests and tests-legacy folders.\nWhat kind of tests do PrestaShop use? In the tests folder, you will find:\n Unit tests Integration tests Web acceptance tests  Unit tests Unit tests are powered by PHPUnit. They test one and only one php class, mocking/stubbing any dependencies that class has.\nThis Unit folder meets some rules:\n One php class = one test file. The test filepath must follow the class filepath/ Every dependency of the class must be replaced by test doubles.  If there is a hard-coded dependency such as a singleton pattern being used or a static call, this class cannot be unit tested and should be tested using integration tests.\nConventions  Use camelCase names for test function names. Try to make method names explain the intent of the test case as best as possible. Don\u0026rsquo;t hesitate to write long method names if necessary.  Bad example: testGetPrice (no idea what such a test is supposed to do) Good example: testDiscountIsAppliedToFinalPrice    Integration tests Unit tests can validate the behavior of a php class when it can be isolated. However, some classes cannot be validated this way. Moreover, a lot of logic from PrestaShop is written into complex SQL queries that cannot be validated by those kind of tests. This is why we also need integration tests.\nWe use 2 technologies for the integration tests in the Integration folder:\n Behat for tests that are meaningful scenarios from a user point of view PHPUnit for tests which rather answer the need to test the technical behavior of a class or a component  Web acceptance tests Finally, we have some web acceptance tests. These tests launch and control a browser that will then go on either the FO or the BO of a shop and perform several actions to check that the behavior, from the point of view of a browser, is as expected. So these tests send real HTTP requests and check the returned DOM.\nThese tests can be found in UI folders.\nUI tests rely on Puppeeteer.\nWhat are legacy tests in tests-legacy folder? We are currently refactoring how the test folder is structured. As this is a huge work that is going to take months, we have chosen the following strategy:\nTests that we are not satisfied by remain in the tests-legacy folder and will be, one by one, replaced by tests of a higher quality inside the tests folder.\nWe keep the legacy tests as they have value (they can detect mistakes in the modifications we bring to the codebase) but they are not being updated anymore as we want to replace them.\nWhat was wrong with these legacy tests? Theses tests were powered by PHPUnit but were not unit tests: they were integration tests, which means they would test several classes together and would run additional services such as a database. This has made this test quite complex and sometimes lead to random failures.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/release/patch-release-lifecycle/",
	"title": "Minor release lifecycle",
	"tags": [],
	"description": "",
	"content": "Minor release lifecycle Kanban and scope Each minor version is defined by a feature scope, that is, a number of GitHub issues that we put in a version Kanban. How these issues are picked or sorted is the responsibility of the Product Team, who spends a lot of time gathering feedback from the PrestaShop community to make sure the next minor version addresses the most important needs.\nFor example PrestaShop 1.7.7.0 scope contained, but not only:\n Compatibility with php 7.3 Migration and rework of Back-office Order pages Advanced currencies management  Although it is very hard to estimate the size of this scope, we try to size it in order for the development phase to last 4 months.\nOnce this scope has been is completed – i.e all issues have reached the \u0026ldquo;Done\u0026rdquo; column of the Kanban – the project reaches the Feature Freeze stage.\nDuring this phase, no new items can be added to the version\u0026rsquo;s scope, unless they are bugs related to code changes performed during the development of this version – called regressions). However, this is a Feature Freeze, not a Code Freeze, so some older bugs may be added to the scope if it is considered opportune to fix them quickly before the release is out (e.g. security fixes).\nFeature Freeze Feature freeze means that all features of this version have been done and no new ones may be accepted in its scope. The project enters a phase of stabilization whose aim is to identify and fix all regressions) before it\u0026rsquo;s released.\nOnce this phase is started, Core maintainers create a git branch from develop branch which will carry the work to be done until the release (for 1.7.7.0, the branch name was 1.7.7.x). From this moment on, only bug fixes can be merged into this branch. Incidentally, this is also the branch where all future patch versions for this minor version will be developed on (hence the .x at the end).\nAlso, since stabilization is performed in a separate branch (1.7.7.x in our example), development for the next minor release (1.7.8 in our example) can start on the develop branch. This means that the development of any given minor version development actually starts (albeit slowly) precisely the moment the previous version enters feature freeze.\nThe QA team picks up the latest nightly build and starts a huge test campaign. The goal of this campaign is to find and register all regressions of this build.\nAs the QA team verifies the build, they will populate the Kanban with all the bugs they find. All important regressions must be fixed quickly. Although it depends heavily on the number of regressions found, this phase should last about one month. Once all major bugs have been fixed, the Beta phase can be launched.\nPublic Beta period When the branch reaches a point of maturity, which means only minor or trivial issues remain to be fixed, maintainers can create a Beta build using the .x branch codebase.\nThis Beta build is released publicly. During the month following this release, the community is very strongly encouraged to test it and give their feedback quickly: the sooner a problem is identified, the sooner it will be fixed. Remember that experts agree that the cost of fixing a bug grows exponentially with time – it is much cheaper to spend time now to ensure everything works well before the final release is out than to discover a bug in production later and lose business while a patch is prepared.\nDuring this one month, we continue testing and fixing the .x (following the stabilization goal) but we know that we can only test and imagine a limited amount of usecases. The community however knows better than us all the possible ways to use PrestaShop to build a business.\nSo everybody can help make this release better and more stable by testing it during the Beta phase.\nWhat does it mean to test a Beta build?\n If you use PrestaShop web services API for integration with other systems, make sure they work as expected If you build 1.7 modules or themes, test them on the new version If you know very well some of the modified/improved/reworked Back-office pages, please give them a try If you customized some parts of the shop, make sure they work well in the new version If you are hosting shops or providing maintenance services to merchants, import the data of one or two typical shops on a pre-production server and check the performance and the behavior of this version; you can also check that the update process is working as expected, depending on your favorite method  For example, if you are a payment module developer, just installing your module on this Beta software, processing one payment and telling us that everything is running as expected is already a great feedback.\nIf however you find a problem, you can\n Report this as a bug on GitHub (read how to report issues) Submit a bug fix by creating a pull request (read the contribution guidelines)  Release Candidate When Beta period ends, we consider that all the remaining regressions for this release are registered in the Kanban. So the aim is clear: fix them all, then ship.\nOnce all regressions have been fixed, maintainers deliver a Release Candidate Build using the .x branch codebase. This will be the Release Candidate 1 (also known as RC1).\nThis Build is extensively re-tested by the QA, then provided to everyone. Once released, the timer starts. We wait for one week. During this week we continue testing and exploring the Build, trying to find anything that would not have been detected earlier, and the community should do the same.\nBy the end of the week, if no new regression has been reported, the RC1 is rebranded and becomes the final release. The new minor version of PrestaShop is out.\nMost of the time, a couple final regressions will be reported. In that case, the bugs are fixed, an RC2 build is published, and the timer is reset. This cycle repeats until no new regressions are reported within the defined timeframe.\nFinally the latest built Release Candidate becomes the new latest stable PrestaShop software minor release.\nSummary  The cycle begins when development starts within the scope of a minor version release. When the scope of this version is finished, Feature Freeze is triggered.  Expected duration: 4 months\n Following Feature Freeze, a nightly build is picked up and tested extensively by QA team, who will then report all known defects. This will allow to plan, then deliver a Beta release.  Expected duration: 1 month\n The Beta Build is made available to all. Maintainers host a one-month long beta period to allow the community to test the build and submit feedback.  Expected duration: 1 month\n At the end of the Beta period, all regressions are fixed and maintainers deliver a Release Candidate 1 build. If bugs are reported, they are fixed in an RC2 build, and so on until a build has no issues reported within the following week. The last Release Candidate becomes the stable release.  Expected duration: from 1 week (if RC1 is flawless) to 1 month, possibly 2 months\nCalendar The global duration for all the process is about 6 months. This is why we expect to deliver at most 2 minor releases per year.\n(This article was originally published on our blog: PrestaShop 1.7 Minor Release Lifecycle )\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sample-modules/order-view-page-new-hooks/module-base/",
	"title": "Module base creation",
	"tags": [],
	"description": "",
	"content": "Module base creation Composer autoloading Let\u0026rsquo;s create module folder demovieworderhooks inside modules directory (located in the root of PrestaShop project). Then create composer.json in the root of the module to autoload classes with the namespaces (PrestaShop\\Module\\DemoViewOrderHooks\\) we define from the src folder (https://getcomposer.org/doc/01-basic-usage.md#autoloading). Using composer PSR-4 autoload helps us autoload classes without the need to use require_once __DIR__.'/vendor/autoload.php'; .\nEven though using autoload block in composer.json helps us to autoload classes from the specified folder src with the namespace PrestaShop\\\\Module\\\\DemoViewOrderHooks\\\\ we might have some autoloading issues if we use our classes in our module main file demovieworderhooks.php. For example, we might define a constant if one of our class and use it in demovieworderhooks.php when we will get error: the class is not defined. Then a solution can be including require_once __DIR__.'/vendor/autoload.php'; before the main module class demovieworderhooks is defined. { \u0026#34;name\u0026#34;: \u0026#34;prestashop/demovieworderhooks\u0026#34;, \u0026#34;authors\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Name Surname\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;author@email.com\u0026#34; } ], \u0026#34;autoload\u0026#34;: { \u0026#34;psr-4\u0026#34;: { \u0026#34;PrestaShop\\\\Module\\\\DemoViewOrderHooks\\\\\u0026#34;: \u0026#34;src/\u0026#34; }, \u0026#34;config\u0026#34;: { \u0026#34;prepend-autoloader\u0026#34;: false }, \u0026#34;type\u0026#34;: \u0026#34;prestashop-module\u0026#34; } } Then run composer install on the terminal/command line inside /modules/demovieworderhooks/ folder. Also run composer dump-autoload to re-generate the vendor/autoload.php file. If files were autoloaded successfully you should see something similar to PrestaShop\\\\Module\\\\DemoViewOrderHooks\\\\' =\u0026gt; array($baseDir . '/src') in modules/demovieworderhooks/vendor/composer/autoload_psr4.php generated.\nModule installation Let\u0026rsquo;s use SOLID principles (https://en.wikipedia.org/wiki/SOLID) to make code more understandable, flexible and maintainable. Create FixturesInstaller class inside /demovieworderhooks/src/Install folder to represent Single responsibility principle (https://en.wikipedia.org/wiki/Single_responsibility_principle) responsible only for module fixtures data inserted to the database.\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Install; use Db; use Order; /** * Installs data fixtures for the module. */ class FixturesInstaller { /** * @var Db */ private $db; public function __construct(Db $db) { $this-\u0026gt;db = $db; } public function install(): void { $orderIds = Order::getOrdersIdByDate(\u0026#39;2000-01-01\u0026#39;, \u0026#39;2100-01-01\u0026#39;); foreach ($orderIds as $orderId) { $this-\u0026gt;insertSignature($orderId); } } private function insertSignature(int $orderId): void { $this-\u0026gt;db-\u0026gt;insert(\u0026#39;order_signature\u0026#39;, [ \u0026#39;id_order\u0026#39; =\u0026gt; $orderId, \u0026#39;filename\u0026#39; =\u0026gt; \u0026#39;john_doe.png\u0026#39;, ]); } } Lets create Installer class inside /demovieworderhooks/src/Install folder structure. It is responsible only for module installation (hook registration, database creation, population database data). When it comes to database creation we use PrestaShop DbCore class functions because doctrine is not fully supported for modules installation at 1.7.7.0 release (https://devdocs.prestashop.com/1.7/modules/concepts/doctrine/#creating-the-database).\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Install; use Db; use Module; /** * Class responsible for modifications needed during installation/uninstallation of the module. */ class Installer { /** * @var FixturesInstaller */ private $fixturesInstaller; public function __construct(FixturesInstaller $fixturesInstaller) { $this-\u0026gt;fixturesInstaller = $fixturesInstaller; } /** * Module\u0026#39;s installation entry point. * * @param Module $module * * @return bool */ public function install(Module $module): bool { if (!$this-\u0026gt;registerHooks($module)) { return false; } if (!$this-\u0026gt;installDatabase()) { return false; } $this-\u0026gt;fixturesInstaller-\u0026gt;install(); return true; } /** * Module\u0026#39;s uninstallation entry point. * * @return bool */ public function uninstall(): bool { return $this-\u0026gt;uninstallDatabase(); } /** * Install the database modifications required for this module. * * @return bool */ private function installDatabase(): bool { $queries = [ \u0026#39;CREATE TABLE IF NOT EXISTS `\u0026#39;._DB_PREFIX_.\u0026#39;order_signature` ( `id_signature` int(11) NOT NULL AUTO_INCREMENT, `id_order` int(11) NOT NULL, `filename` varchar(64) NOT NULL, PRIMARY KEY (`id_signature`), UNIQUE KEY (`id_order`) ) ENGINE=\u0026#39;._MYSQL_ENGINE_.\u0026#39; DEFAULT CHARSET=utf8;\u0026#39;, ]; return $this-\u0026gt;executeQueries($queries); } /** * Uninstall database modifications. * * @return bool */ private function uninstallDatabase(): bool { $queries = [ \u0026#39;DROP TABLE IF EXISTS `\u0026#39;._DB_PREFIX_.\u0026#39;order_signature`\u0026#39;, ]; return $this-\u0026gt;executeQueries($queries); } /** * Register hooks for the module. * * @param Module $module * * @return bool */ private function registerHooks(Module $module): bool { // Hooks available in the order view page.  $hooks = [ \u0026#39;displayBackOfficeOrderActions\u0026#39;, \u0026#39;displayAdminOrderTabLink\u0026#39;, \u0026#39;displayAdminOrderTabContent\u0026#39;, \u0026#39;displayAdminOrderMain\u0026#39;, \u0026#39;displayAdminOrderSide\u0026#39;, \u0026#39;displayAdminOrder\u0026#39;, \u0026#39;displayAdminOrderTop\u0026#39;, \u0026#39;actionGetAdminOrderButtons\u0026#39;, ]; return (bool) $module-\u0026gt;registerHook($hooks); } /** * A helper that executes multiple database queries. * * @param array $queries * * @return bool */ private function executeQueries(array $queries): bool { foreach ($queries as $query) { if (!Db::getInstance()-\u0026gt;execute($query)) { return false; } } return true; } } Then let\u0026rsquo;s create InstallerFactory inside /demovieworderhooks/src/Install which will be used to create Installer object. We call it factory because it deals with creating objects without having to specify the exact class of the object that will be created. More about factory design pattern: https://en.wikipedia.org/wiki/Factory_method_pattern\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Install; use Db; class InstallerFactory { public static function create(): Installer { return new Installer( new FixturesInstaller(Db::getInstance()) ); } } Let\u0026rsquo;s create main module file: demovieworderhooks.php inside the modules/demovieworderhooks folder. And create DemoViewOrderHooks class which extends the Module class:\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); use PrestaShop\\Module\\DemoViewOrderHooks\\Install\\InstallerFactory; if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } require_once __DIR__.\u0026#39;/vendor/autoload.php\u0026#39;; class DemoViewOrderHooks extends Module { public function __construct() { $this-\u0026gt;name = \u0026#39;demovieworderhooks\u0026#39;; $this-\u0026gt;author = \u0026#39;PrestaShop\u0026#39;; $this-\u0026gt;version = \u0026#39;1.0.0\u0026#39;; $this-\u0026gt;ps_versions_compliancy = [\u0026#39;min\u0026#39; =\u0026gt; \u0026#39;1.7.7.0\u0026#39;, \u0026#39;max\u0026#39; =\u0026gt; _PS_VERSION_]; parent::__construct(); $this-\u0026gt;displayName = $this-\u0026gt;l(\u0026#39;Demo view order hooks\u0026#39;); $this-\u0026gt;description = $this-\u0026gt;l(\u0026#39;Demonstration of new hooks in PrestaShop 1.7.7 order view page\u0026#39;); } public function install() { if (!parent::install()) { return false; } $installer = InstallerFactory::create(); return $installer-\u0026gt;install($this); } public function uninstall() { $installer = InstallerFactory::create(); return $installer-\u0026gt;uninstall() \u0026amp;\u0026amp; parent::uninstall(); } } Now we can install the module through PrestaShop Back Office Modules\\Module Catalog. In the search box type Demo, click Enter and then you should see the module with name Demo view order hooks suggested for Installation. Click Install, you should see the green box at the top right corner telling you about the success!\nLet\u0026rsquo;s go to create Signature card and Additional action buttons, I am getting excited now!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/module-translation/new-system/",
	"title": "New translation system",
	"tags": [],
	"description": "",
	"content": "New module translation system  The new module translation system is based on the new system introduced in PrestaShop 1.7 for the Core and Native modules. It aims to harmonize translation systems throughout PrestaShop while providing backwards compatibility.\nThis feature is only available for PrestaShop 1.7.6 and later. If you need to support older versions, see the Classic translation system. Vocabulary  Wording – A string that you may want to translate. Translation Domain – A contextual group of wordings, that allows translated a given wording differently according to the context in which they appear.  How it works Similarly to the classic system, the new translation system works in two steps.\n1. Translation functions are used to display your module\u0026rsquo;s wordings in another language PrestaShop provides functions that allow PHP files and Smarty/Twig templates to display translated wordings. By leveraging a list of translation sources (including dictionary files from classic translation), a module can use this feature display a wording in another language during runtime.\n  How wordings are translated at runtime   2. Creating module dictionaries The Back Office\u0026rsquo;s Translation page (International \u0026gt; Translations \u0026gt; Modify Translations) is used to generate module dictionaries. It extracts the module\u0026rsquo;s wordings by analyzing its source code, then inspects a list of sources to compile a list of translations, and finally displays a form that allows you to customize or complete those translations in a given language. Once saved, this information is stored in the Database.\n  Translation workflow   If your module has already been translated using the classic translation system, the new translation interface can also source translations from your existing classic translation dictionary files. This means that you can keep your old controllers for compatibility with older PrestaShop versions, and add Symfony controllers for 1.7.6+, without losing your previous translations. Making your module translatable To make your module translatable, you need to adapt your module\u0026rsquo;s source code. Find any wording you want to make translatable, then wrap it using the appropriate method as explained below. Once wrapped, your wordings will be ready to be translated through the translation interface.\nBy default, wordings are displayed as originally written.\nDon\u0026rsquo;t worry if you don\u0026rsquo;t translate everything to all languages right away. Any wording left untranslated will be shown in its original language. Because of this, we suggest writing all your wordings in English, and then translating them to other languages.\n Translation domain An important part of the new translation system is Translation Domains, which replaces the classic system\u0026rsquo;s contextualization. In the new translation system, all wordings must be linked to at least one translation domain.\nWhile the Core and Native modules have clearly defined translation domain naming scheme, non-native modules must respect a specific naming convention:\nModules.Nameofthemodule.Specificpart Translation Domain names are always made of three parts, separated by dots:\n The first part must always be \u0026ldquo;Modules\u0026rdquo; \u0026ldquo;Nameofthemodule\u0026rdquo; is the name of your module, with some rules:   The first letter must be in upper case, and the rest in lower case (eg. \u0026ldquo;MyModule\u0026rdquo; becomes \u0026ldquo;Mymodule\u0026rdquo;) Only word characters (A-z, 0-9) are supported.\nMake sure that the technical name of your module does not contain contains underscores (_) or any other unsupported symbol, or else translation may not work. If your module name starts with ps_, that part must be removed. This is an exception to the previous rule.  \u0026ldquo;Specificpart\u0026rdquo; allows for contextualization and can be set to whatever you like, following this rules:   The first letter must be in upper case, and the rest in lower case. Symbols like dots, dashes and underscores are allowed (but discouraged). If you want to use previously-generated classic translation dictionary files, you need to follow a specific naming convention for backwards compatibility.\nOtherwise, consider using the Native module conventions (\u0026ldquo;Admin\u0026rdquo; or \u0026ldquo;Shop\u0026rdquo;).  Backwards compatibility If you want your module to be compatible with previously-generated classic translation dictionary files, then the third component of the Translation domain must be set to the name of the file where the wording is used, respecting the following rules:\n The first letter must be in upper case, and the rest in lower case If the file extension is .tpl, the extension must be removed If the file name ends in \u0026ldquo;controller\u0026rdquo;, that part must be removed as well.  Examples Assuming your module is called \u0026ldquo;my_module\u0026rdquo;:\n   File where the wording is used Expected translation domain     my_module.php Modules.Mymodule.My_module.php   SomeFile.php Modules.Mymodule.Somefile.php   a_certain_template.tpl Modules.Mymodule.A_certain_template   ps_somefile.tpl Modules.Mymodule.Ps_somefile   another-template.html.twig Modules.Mymodule.Another-template.html.twig    You can find more examples in the test fixtures for DomainHelper.\nPHP files In PHP files, translation is performed using the module\u0026rsquo;s trans() method.\nThis method takes four parameters:\n $id – The wording you want to translate. $parameters – An array of replacements, if any. (Learn more about translation placeholders). $domain – The translation domain for that wording, as explained above. $locale – (optional) The locale identifier (eg. \u0026ldquo;en-US\u0026rdquo;) if you want to translate in a different language than the current one.  Now let\u0026rsquo;s see some examples on how to use it.\nModule\u0026rsquo;s main class When translating wordings in the module\u0026rsquo;s main class, since it extends the Module class, you can simply call $this-\u0026gt;trans().\n\u0026lt;?php // file: mymodule.php  class mymodule extends Module { public function __construct() { $this-\u0026gt;displayName = $this-\u0026gt;trans(\u0026#39;My module\u0026#39;, [], \u0026#39;Modules.Mymodule.Mymodule\u0026#39;); $this-\u0026gt;description = $this-\u0026gt;trans(\u0026#39;Description of my module.\u0026#39;, [], \u0026#39;Modules.Mymodule.Mymodule\u0026#39;); } } Since the module is called MyModule, the translation domain should be Modules.Mymodule.Mymodule. The third part matches the file name, which is also \u0026ldquo;mymodule\u0026rdquo;.\nModule controllers ModuleAdminController and ModuleFrontController can access the module instance via the $this-\u0026gt;module property.\n\u0026lt;?php // file: controllers/front/something.php  class MymoduleSomethingModuleFrontController extends ModuleFrontController { public function initContent() { $this-\u0026gt;title = $this-\u0026gt;module-\u0026gt;trans(\u0026#39;My module title\u0026#39;, [], \u0026#39;Modules.Mymodule.Something\u0026#39;); } } Symfony controllers work exactly the same as the Core\u0026rsquo;s. Just use $this-\u0026gt;trans method.\nBe aware that in symfony controllers, the second and third arguments have been swapped to make $replacements optional. \u0026lt;?php namespace PrestaShop\\Module\\MyModule; class SomeAdminController extends FrameworkBundleAdminController { public function someAction() { $this-\u0026gt;text = $this-\u0026gt;trans(\u0026#39;Some text being translated\u0026#39;, [], \u0026#39;Modules.Mymodule.Admin\u0026#39;); } } Other classes Other classes will need to retrieve the module\u0026rsquo;s instance somehow. We recommend passing it as a parameter in the constructor and storing it for later use.\n\u0026lt;?php class CustomModuleClass { private $module; public function __construct(Module $module) { $this-\u0026gt;module = $module } public function foo() { $this-\u0026gt;text = $this-\u0026gt;module-\u0026gt;trans(\u0026#39;My text to translate\u0026#39;, [], \u0026#39;Modules.Mymodule.Custommoduleclass\u0026#39;); } } If you really need to, you can also retrieve a new instance of your module using Module::getInstanceByName('mymodulename'). This should be avoided though, as it\u0026rsquo;s not a good practice.\nTemplates Smarty files Wordings in Smarty .tpl files can be translated using the {l} function call, which Smarty will replace by the translation in the current language.\nThis function accepts three parameters:\n s – The wording to be translated. d – The translation domain. sprintf – Optional, it can be used to interpolate variables in your wording.  For instance, translating the string \u0026ldquo;Welcome to this page!\u0026rdquo; can be done like this:\n{* file: somefile.tpl *}{l s=\u0026#39;Welcome to this page!\u0026#39; d=\u0026#39;Modules.Mymodule.Somefile\u0026#39;}Twig files Wordings in Twig .twig files can be translated using the trans filter. It works similarly as the trans() method described for PHP files above:\n{# file: something.twig #}{{ \u0026#39;Welcome to this page!\u0026#39;|trans({}, \u0026#39;Modules.Mymodule.Admin\u0026#39;) }}The first parameter can be used to replace tokens in your wording after it\u0026rsquo;s translated:\n{{ \u0026#39;Hello %username%!\u0026#39;|trans({\u0026#39;%username%\u0026#39;: \u0026#39;John\u0026#39;}, \u0026#39;Modules.Mymodule.Admin\u0026#39;) }}Translating your module To be translatable through the new translation interface, modules must opt-in. This can be done by declaring this function on your module\u0026rsquo;s main class:\n\u0026lt;?php public function isUsingNewTranslationSystem() { return true; } After this:\n Go to the \u0026ldquo;Translations\u0026rdquo; page under the \u0026ldquo;International\u0026rdquo; menu, In the \u0026ldquo;Modify translations\u0026rdquo; section, find the \u0026ldquo;Type of translation\u0026rdquo; drop-down and select \u0026ldquo;Installed modules translations\u0026rdquo;, Choose the module you want to translate. Choose the language you want to translate the module into. The destination language must already be installed to enable translation in it. Click the \u0026ldquo;Modify\u0026rdquo; button.  You will be presented with a page that displays all the wordings for the selected module, grouped by translation domain.\nOnce saved, translations are stored in the database in the table ps_translations.\nCreating translation dictionary files This feature has not been implemented as of 1.7.6.\nIf you need to distribute translated wordings with your module, you can either write classic dictionary files manually, or export your module\u0026rsquo;s wordings from the database into a file, then import it during the module\u0026rsquo;s install process.\nIf you choose to export wordings from the database, you can easily extract only your module\u0026rsquo;s wordings from the ps_translation table by filtering domains that start with ModulesYourmodulename*. You can disregard id_translation, but you will have to match the original lang_id to the shop\u0026rsquo;s one (see ps_lang) when you re-import them. Automatic export of classic dictionary files and XLIFF catalogues for the new translation system is due to be implemented in 1.7.8.\nLimitations and caveats Making your wordings appear in the translation interface The translation interface relies on code analysis to \u0026ldquo;discover\u0026rdquo; wordings for translation. Therefore, when declaring wordings in your code, some care is needed in order to make sure they can be discovered.\n  The translation interface only detects wordings used through the trans() function, the {l} Smarty tag, and the trans Twig filter. Therefore, they must be declared in a PHP, TPL, or TWIG file. They will be detected regardless of whether that code is actually used in runtime or not.\n  Always use literal values, not variables, with the trans() function, the {l} Smarty tag, and trans Twig filter. Although variables are interpreted at runtime, they won\u0026rsquo;t be understood by the code analyzer, which only supports literals. Passing variables to these methods will prevent those wordings from appearing in the translation interface.\n  Example:\n\u0026lt;?php // literal values will work $this-\u0026gt;trans(\u0026#39;Some wording\u0026#39;, [], \u0026#39;Modules.Mymodule.Something\u0026#39;); // dynamic content can be injected using placeholders \u0026amp; replacements $this-\u0026gt;trans(\u0026#39;Some wording with %foo%\u0026#39;, [\u0026#39;%foo%\u0026#39; =\u0026gt; $dynamicContent], \u0026#39;Modules.Mymodule.Bar\u0026#39;); // this won\u0026#39;t work, the interpreter will ignore variables $wording = \u0026#39;Some wording\u0026#39;; $domain = \u0026#39;Modules.Mymodule.Foo\u0026#39;; $this-\u0026gt;trans($wording, [], $domain); // this will yield unexpected results $this-\u0026gt;trans(\u0026#39;Some \u0026#39;. $var . \u0026#39; wording\u0026#39;, [], \u0026#39;Modules.Mymodule.Foo\u0026#39;); // dynamic behavior, like aliasing the trans() function, won\u0026#39;t work well either function translate($wording) { $this-\u0026gt;trans($wording, [], \u0026#39;Modules.Mymodule.Foo\u0026#39;); } In Twig files, you can use trans_default_domain to set up your default domain. Keep in mind this works on a per-file basis:\n{% trans_default_domain \u0026#39;Modules.Mymodule.Foo\u0026#39; %}{{ \u0026#39;Hello world\u0026#39;|trans }}{{ \u0026#39;Something else\u0026#39;|trans }}"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/webservers/",
	"title": "Optimize your webserver",
	"tags": [],
	"description": "",
	"content": "Optimize your webserver We often talk about optimizing the application side but less about the webserver.\nWhich is a shame as there is a lot to gain from some simple configurations parameters. You do not need to have hundred of visitors for them to be efficient, either to reduce your server\u0026rsquo;s load or speed up your visitor\u0026rsquo;s browsing.\nAs we will see, the configuration options presented here are quite easy and should allow some nice improvements.\nWebserver\u0026rsquo;s function You may already be aware of, a webserver is a piece of software dedicated to satisfy world wide web requests.\nIt usually works through the http (and https) protocol and delivers web pages to the clients (your web browser).\n  webserver\u0026#39;s function   An interesting point to mention is that, php being compiled server side, it often is the webserver\u0026rsquo;s job to manage this task before sending html to the web browser.\nTesting your optimizations There are plenty of ways to validate the gains of those improvements but a very simple one is to go check any page speed website.\nIt will point the required changes and as you will see, most of them will be straightforward to implement.\nWe don\u0026rsquo;t really want to influence you should find the tool you need with a simple google search.\nAs usual, the surest way to tune your shop is:\n benchmark make a change repeat   Webservers We will show you the different ways to implement those options for both Nginx and Apache httpd, the two most popular and widespread webservers.\nBut before we go on, just a few words about them. Don\u0026rsquo;t worry, it won\u0026rsquo;t be long before reaching the crunchy part.\nNginx It is often said that nginx is faster than httpd, which is not entirely true. Nginx uses an asynchronous mechanism which is very efficient to sustain heavy loads and static assets (such as pictures and scripts) but slightly increases response time for dynamic content (such as, you know php).\nIf you want to know more about configuring nginx for PrestaShop.\nApache httpd Apache\u0026rsquo;s httpd is the usual suspect and the most popular webserver of alls.\nContrary to nginx, it uses threads that directly serves the contents, being locked during the process.\nWhich means that if the server receives more calls than available threads it won\u0026rsquo;t be able to answer - hence the reputation of being able to handle less traffic than nginx.\nIf you want to know more about configuring httpd for PrestaShop.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/page-reference/back-office/order/",
	"title": "Order Page",
	"tags": [],
	"description": "",
	"content": "Order Detail Page  Refunds   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/page-reference/back-office/product/",
	"title": "Product Page",
	"tags": [],
	"description": "",
	"content": "Product Page  The Product Form   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/prestashop-webservice-lib/setup-library/",
	"title": "Setup library",
	"tags": [],
	"description": "",
	"content": "Setup library Now that your webservice is configured and accessible you might want to use it. To help you perform requests on your webservice, you can use the PHP library for PrestaShop Webservices.\nInstall the library Prerequisites  You need a server with mod_rewrite enabled You need the curl extension enabled in PHP  Installing with Composer If you are starting a new project you can init your composer project along with the dependency:\ncomposer init --require=\u0026#34;Prestashop/Prestashop-webservice-lib:dev-master\u0026#34; -n composer install Or if you already have an existing project simply add the dependency:\ncomposer require \u0026#34;Prestashop/Prestashop-webservice-lib\u0026#34; The library is not PSR compliant and has no namespace therefore you need to update your composer.json file to include the class in your autoload:\n{ \u0026#34;require\u0026#34;: { \u0026#34;Prestashop/Prestashop-webservice-lib\u0026#34;: \u0026#34;dev-master\u0026#34; }, \u0026#34;autoload\u0026#34;: { \u0026#34;files\u0026#34;: [ \u0026#34;vendor/prestaShop/prestaShop-webservice-lib/PSWebServiceLibrary.php\u0026#34; ] } } And regenerate your autoload:\ncomposer dump-autoload Then you can use the library with Composer\u0026rsquo;s autoloading:\n\u0026lt;?php require_once(\u0026#39;./vendor/autoload.php\u0026#39;); $webService = new PrestaShopWebservice(...); Manual install If you don\u0026rsquo;t use composer you can download the library archive and extract it where you need. You will then need to manually load the PSWebServiceLibrary in your PHP script or application:\n\u0026lt;?php require_once(\u0026#39;./PSWebServiceLibrary.php\u0026#39;); $webService = new PrestaShopWebservice(...); Accessing the webservice Create your client First, you must create an instance of the PrestaShopWebservice object, which takes 3 parameters in its constructor:\n The store\u0026rsquo;s root path (ex: http://example.com/ ). The authentication key (ex: ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT). A boolean value, indicating whether the Webservice must use its debug mode.  \u0026lt;?php $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); Once the instance is created you can access the following methods:\n   Method HTTP equivalent SQL     add() POST INSERT   get() GET SELECT   edit() PUT UPDATE   delete() DELETE DELETE    Handling errors It is essential that you understand how to handle errors with the webservice library. By implementing error-catch method early, you will more easily detect issues, and be able to correct them on the go.\nError handling with the webservice library is done using PHP exceptions. If you do not know about them, you should read about it, as exceptions are an essential part of good coding practices.\nThe error handling is done within a try...catch block, with the webservice instantiation and execution being done in the try section, the catch one containing the error handling code. There are many types of exception that exist you can catch specific ones which allows you to deal with each error case accordingly, the webservice library uses PrestaShopWebserviceException so you can catch this one only to deal with errors related to webservice.\n\u0026lt;?php try { // creating webservice access  $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); // call to retrieve all customers  $xml = $webService-\u0026gt;get([\u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;]); } catch (PrestaShopWebserviceException $ex) { // Shows a message related to the error  echo \u0026#39;Other error: \u0026lt;br /\u0026gt;\u0026#39; . $ex-\u0026gt;getMessage(); } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sell/technical-tools/",
	"title": "Technical tools",
	"tags": [],
	"description": "",
	"content": "Technical Tools \u0026amp; Information Technical Tools: 3 tools to help you get off to a good start 1. The Validator The Validator ( https://validator.prestashop.com ) is a tool created to check if your module is technically compatible with the PrestaShop standards. You can:\n upload a zip. or specify the URL of your GitHub repository (that has to be public).  The Validator then automatically creates a detailed report explaining what needs to be improved/changed in your module. By following this report, you can submit your module error-free!\nImportant!\nSince version 1.6.1.0, PrestaShop uses the PSR-2 norm. We recommend using this norm but note that it is not mandatory and that it won’t be a reason to decline your module. Here are more details in this blog article. 2. Method search engine A search engine is available within the Validator to help you work out which methods are available for the various versions of PrestaShop. Make the most of this and use it to save time! It is not entirely up-to-date but we intend to work on it. You can find the search engine here.\n3. The Module Generator Have you thought about saving time with our Module Generator yet? All you have to do is choose your module type and follow the instructions. A skeleton module is then automatically generated to facilitate the creation of your module.\nInformation: 3 steps to pass technical validation 1. A development environment You can create and test your module on whatever environment you like. Could be Windows using WampServer, Linux on local, docker, etc. The important thing to remember is to always activate the display of error messages.\nTo make this easier, PrestaShop features a Dev Mode, which allows you to configure your use of PHP to display error messages. There are 2 methods to activate Dev Mode:\n Go to the Advanced Parameters \u0026gt; Performances section of your back office and activate the debug mode.  In the directory config/ of your PrestaShop, open the file defines.inc.php. The Dev Mode is to be activated at the very start of the file: you must modify the following line to change the defined value to true (it is set to false by default):  \u0026lt;?php define(\u0026#39;_PS_MODE_DEV_\u0026#39;, true); Important: stores which are up and running must not be used in Dev Mode! https://build.prestashop.com/news/module-development-changes-in-17/\n2. Follow our good practices Read our article: Good practices for developing modules.\n3. Use the Validator to optimize your module The Validator explains exactly what you need to modify for your module to be compliant with our technical requirements (technical errors, forbidden features or structural problems, etc.). By following the Validator\u0026rsquo;s recommendations, your module will be on sale sooner!\nAre the recommendations provided preventing your module from working properly?\nContact us, we will be happy to help you develop your module! If you encounter any problems, you can contact the technical team when submitting your module. Take advantage of their experience to perfect your module!\nUpdate your modules and create themes for PrestaShop 1.7 All well-written 1.6 modules should work with little to no changes in version 1.7, except those which target:\n The theme/front office – because we rewrote the way themes are written. Payment modules – should be especially taken care of, since the payment API has seen a slight update. The BO Product page – because the DOM of this page has changed. The BO Modules page – again, because the DOM of this page has changed.  What this means for any shop upgrade is that in order for a PS 1.6 to migrate to PS 1.7, you will have to:\n Rewrite the theme. You can use the default theme (\u0026ldquo;classic\u0026rdquo;) as a foundation. Adapt the Product page modules (CSS and JavaScript). Adapt the Modules page modules (CSS and JavaScript).  Everything you should know is gathered in the following pages:\n Details on every changes concerning modules on this article of the Build devblog; The Theme Developer documentation is being written in the open. Don\u0026rsquo;t hesitate to contribute or ask questions! Payment modules:  Get inspired by our payment module demo to develop yours and use our dedicated documentation!    And of course our 1.7 Project FAQ that should already be your bedtime reading!\nHow to submit a product to the Addons marketplace After creating the perfect product page using the Contributor Kit, submit your module for technical validation.\nInformation At this stage, you can find the module_key for your module. This is to be entered into the constructor in this format:\n\u0026lt;?php public function __construct() { // etc.  $this-\u0026gt;module_key = \u0026#39;c1614c239af92968e5fae97f366e9961\u0026#39;; } This will signal to the seller when an update of your module is available in the back-office. You should describe the modifications made one by one when an update is made. Don\u0026rsquo;t forget to indicate which versions of PrestaShop your module is compatible with!\nYour file and the permanent name of your module The zip archive submitted to our team must contain all the necessary files for your module, and have the same name as your module: if the main file of your module is called \u0026ldquo;module_name.php\u0026rdquo;, then it should be in the folder \u0026ldquo;module_name\u0026rdquo;, and the zip file must have the same name - without a version number.\nMake sure that the name used for your file and zip is the same that you have given to your product page (so that the online seller can quickly identify your module in the back office of their store). So think carefully about the name you choose for your product (without using either \u0026ldquo;PrestaShop\u0026rdquo; or \u0026ldquo;module\u0026rdquo;). Feel free to personalize the name, for example with the name of your company or your initials\nWhat happens next? Once your module has been verified by the technical team, you will receive an email from us informing you of its status (validated or refused).\nIf refused, you will be told the points to improve. You can respond directly to the team via a link in the email informing you of the refusal in order to receive further information. Then it is up to you to follow these recommendations and resubmit your module to us!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/page-reference/back-office/product/form/product-form-before-1-7-8/",
	"title": "The Product Form before 1.7.8",
	"tags": [],
	"description": "",
	"content": "The Product Form before 1.7.8 The product form is divided into multiple sub forms, here is a list that defines each sub forms along with its fields:\nMain form This form is created by the controller which combines a few different form types for each tab.\n   Form type Fields Field type Description     ProductInformation   This Form type is used for step1 or \u0026ldquo;Basic settings\u0026rdquo; tab    type_product ChoiceType Type of product: Standard, virtual or Pack of Product    inputPackItems TypeaheadProductPackCollectionType List of products (for Pack of product)    name TranslateType Product name (localized)    description TranslateType Product description (localized)    description_short TranslateType Product short description (localized)    features CollectionType [ProductFeature] List of sub forms for product Feature entity    id_manufacturer ChoiceType One of the ManufacturerCore    active CheckboxType Boolean to indicate if Product is active    price_shortcut MoneyType Product price (tax excluded)    price_ttc_shortcut MoneyType Product price (tax included)    qty_0_shortcut NumberType Product stock quantity    categories ChoiceCategoriesTreeType List of associated categories    id_category_default ChoiceType One of the Category as default    new_category SimpleCategory Sub form to add and associate a new Category entity    ignore null N/A    related_products TypeaheadProductCollectionType List of related products   ProductPrice   This Form type is used for step2 or \u0026ldquo;Pricing\u0026rdquo; tab    price MoneyType Product price (tax excluded)    price_ttc MoneyType Product price (tax included)    ecotax MoneyType Product eco tax (tax included)    id_tax_rules_group ChoiceType One of the TaxRulesGroup entity    on_sale CheckboxType Boolean to indicate if Product is on sale    wholesale_price MoneyType Wholesale/cost Product price (tax excluded)    unit_price MoneyType Price per unit (tax included)    unity TextType Unity description (Per kilo, per litre, \u0026hellip;)    specific_price ProductSpecificPrice Sub form to add and associate a new SpecificPrice entity    *specificPricePriority_* ChoiceType List of criteria to define priorities to apply specific prices    specificPricePriorityToAll CheckboxType Boolean to indicate if the priorities criteria must be applied on ALL products   ProductQuantity   This Form type is used for step3 or \u0026ldquo;Quantities\u0026rdquo; tab    attributes TextType Text field used to select attributes for Combination entity generation    advanced_stock_management CheckboxType Boolean to indicate if Advanced stock management is enable for this Product (available only if PS_ADVANCED_STOCK_MANAGEMENT is enabled)    depends_on_stock ChoiceType Select stock policy when using advanced stock management (based on stock or manual)    pack_stock_type ChoiceType Pack stock management type (Decrement pack only, products only, both or default configuration PS_PACK_STOCK_TYPE)    qty_0 NumberType Define product stock quantity    out_of_stock ChoiceType Out of stock policy (Allow orders, Deny orders, or default configuration PS_ORDER_OUT_OF_STOCK)    minimal_quantity NumberType Minimum quantity for sale    location TextType Stock location    low_stock_threshold NumberType Quantity that defines low stock is reached    low_stock_alert CheckboxType Enable email alert when low stock is reached    available_now TranslateType Label when in stock (localized)    available_later TranslateType Label when out of stock (and back order allowed) (localized)    available_date DatePickerType Availability date    virtual_product ProductVirtual For virtual product: Specify if a file is associated, and download limitations (number of download, expiration, \u0026hellip;)   ProductShipping   This Form type is used for step4 or \u0026ldquo;Shipping\u0026rdquo; tab    width NumberType Product width    height NumberType Product height    depth NumberType Product depth    weight NumberType Product weight    additional_shipping_cost MoneyType Shipping fees    selectedCarriers ChoiceType Selection of available carriers    additional_delivery_times ChoiceType Specify delivery time (None, default, specific)    delivery_out_stock TranslateType Specific label for out of stock delivery time (localized)    delivery_in_stock TranslateType Specific label for in stock delivery time (localized)    *warehouse_combination_* CollectionType [ProductWarehouseCombination] List of sub forms for WarehouseProductLocation entity   ProductSeo   This Form type is used for step5 or \u0026ldquo;SEO\u0026rdquo; tab    meta_title TranslateType Meta title used for search engine (localized)    meta_description TranslateType Meta description used for search engine (localized)    link_rewrite TranslateType Link rewrite part used when generating Friendly urls (localized)    redirect_type ChoiceType Redirection HTTP code when product is inactive (Permanent/temporary redirection to category/product, or not found)    id_type_redirected TypeaheadProductCollectionType Product/Category ID to redirect to   ProductOptions   This Form type is used for step6 or \u0026ldquo;Options\u0026rdquo; tab    visibility ChoiceType Product visibility is lists (Everywhere, catalog only, search only, nowhere)    tags TranslateType List of tags (localized)    display_options FormType Various display options (available_for_order, show_price, online_only)    mpn TextType Manufacturer Part Number    upc TextType UPC barcode    ean13 TextType EAN-13 or JAN barcode    isbn TextType ISBN code    reference TextType Product reference    show_condition CheckboxType Display condition of product    condition ChoiceType Type of condition for product (New, used, refurbished)    suppliers ChoiceType List of Supplier for this product    default_supplier TextType One of the Supplier as default one    *supplier_combination_* CollectionType [ProductSupplierCombination] List of sub forms for ProductSupplier entity (details Price and reference for each supplier)    custom_fields CollectionType [ProductCustomField] List of sub forms for ProductCustom entity (define possible custom texts, images, \u0026hellip;)    attachment_product ProductAttachement Sub form to create and associate an Attachment entity (instructions, documentation, recipes, \u0026hellip;)    attachments ChoiceType List of Attachment for this product    Sub forms Here is a description of the sub forms used in the main one\n   Form type Fields Field type Description     ProductAttachement   This Form type is used in ProductOptions to create an Attachment entity    file FileType File to upload    name TextType Filename    description TextType File description    add ButtonType Add button    cancel ButtonType Cancel button   ProductCustomField   This Form type is used in ProductOptions to edit a CustomizationField entity    id_customization_field HiddenType CustomizationField ID    label TranslateType Customization field name (localized)    type ChoiceType Customization field type (text, file)    require CheckboxType Boolean to indicate if custom field is required   ProductSpecificPrice   This Form type is used in ProductOptions to edit a SpecificPrice entity    sp_id_shop HiddenType or ChoiceType Select Shop association (When only one Shop just use the default one)    sp_id_currency ChoiceType Select specific price currency    sp_id_country ChoiceType Select specific price country    sp_id_group ChoiceType Select specific price group    sp_id_customer ChoiceType Select specific price customer    sp_id_product_attribute ChoiceType Select specific price combination    sp_from DatePickerType Specific price starting date    sp_to DatePickerType Specific price ending date    sp_from_quantity NumberType Specific price minimum quantity    sp_price MoneyType Specific price (tax excl.)    leave_bprice CheckboxType Boolean to indicate if initial price is kept    sp_reduction NumberType Reduction amount    sp_resp_reduction_type ChoiceType Reduction type (amount, percentage)    save ButtonType Save button    cancel ButtonType Cancel button   ProductSupplierCombination   This Form type is used in ProductOptions to edit a ProductSupplier entity    supplier_reference TextType Supplier reference    product_price MoneyType Product price for supplier    product_price_currency ChoiceType Select product price currency    id_product HiddenType Product ID    id_product_attribute HiddenType Combination ID    supplier_id HiddenType Supplier ID   ProductVirtual   This Form type is used in ProductQuantity to specify the virtual product file settings    is_virtual_file ChoiceType Boolean that indicates if the virtual product has an associated file    file FileType File to upload    name TextType Filename    nb_downloadable NumberType Number of allowed downloads    expiration_date DatePickerType Expiration date    nb_days NumberType Number of days    save ButtonType Save button   ProductWarehouseCombination   This Form type is used in ProductShipping to edit WarehouseProductLocation entities    activated ChoiceType Boolean that indicates if the warehouse stores the product    product_id HiddenType Product ID    id_product_attribute HiddenType Combination ID    warehouse_id HiddenType Warehouse ID    location TextType Location in warehouse (optional)   TypeaheadProductCollectionType   This Form type is used in ProductInformation to select related products and in ProductSEO to select the redirection target (Product or Category)    data CollectionType Serialized data that is then used to create the relation For related product it creates an accessory relation, for SEO it stores the ID for redirection   TypeaheadProductPackCollectionType   This Form type is used in ProductInformation to select products contained in the Pack    data CollectionType Serialized data that is then used to create the relation using the Pack entity    Extra forms Some extra forms are not integrated directly in the product form but displayed in the page and managed in individual components (often through ajax requests).\n   Form type Fields Field type Description     ProductCategories   This Form type is used to display and select the categories for the Product (as a tree)    categories ChoiceCategoriesTreeType Display a tree of categories and allows to select them   ChoiceCategoriesTreeType   Categories tree selector    tree ChoiceType List of Category entities   ProductCombination   This Form type is used to edit a Combination entity    id_product_attribute HiddenType Combination ID    attribute_reference TextType Combination reference    attribute_ean13 TextType Combination EAN-13 or JAN barcode    attribute_isbn TextType Combination ISBN code    attribute_upc TextType Combination UPC barcode    attribute_mpn TextType Combination Manufacturer Part Number    attribute_wholesale_price MoneyType Combination wholesale/cost price (tax excluded)    attribute_price MoneyType Impact on price (tax excl.)    attribute_priceTI MoneyType Impact on price (tax incl.)    attribute_ecotax MoneyType Combination ecotax (tax incl.)    attribute_weight NumberType Impact on weight    attribute_unity NumberType Impact on price per unit (tax excl.)    attribute_minimal_quantity NumberType Min. quantity for sale    attribute_location TextType Stock location    attribute_low_stock_threshold NumberType Low stock threshold    attribute_low_stock_alert CheckboxType Enable email alert when low stock is reached    available_date_attribute DatePickerType Availability date    attribute_default CheckboxType Set as default combination    attribute_quantity NumberType Combination quantity (when Stock management enabled)    id_image_attr ChoiceType List of Images associated to the Combination    final_price NumberType Final price   ProductCombinationBulk   This Form type is used to edit options when performing bulk action on Combination entities    quantity NumberType Combination quantity (when Stock management enabled)    cost_price MoneyType Combination wholesale/cost price (tax excl.)    impact_on_price_te MoneyType Combination price (tax excl.)    impact_on_price_ti MoneyType Combination price (tax incl.)    impact_on_weight NumberType Combination weight    date_availability DatePickerType Availability date    reference TextType Combination reference    minimal_quantity NumberType Combination minimum quantity for sale    low_stock_threshold NumberType Low stock threshold    low_stock_alert CheckboxType Enable email alert when low stock is reached    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/why/",
	"title": "Why write documentation",
	"tags": [],
	"description": "",
	"content": "Why write technical documentation?  The best documentation is no documentation: code should be self-explanatory. All the lazy developers in history\n Writing documentation is hard.\nWe try to find excuses and rationalize and lie to ourselves so we can feel better about the fact that we should be doing it, but it\u0026rsquo;s \u0026ldquo;too much work\u0026rdquo;.\nHere are two good reasons to try and convince you to start writing documentation, and help you while you help others, too:\n1. You won\u0026rsquo;t remember that 6 months from now Just fixed a bug? Written a new feature? Cool! You may think you know your code now, but if you come back to it 6 months later, you will have forgotten most about. It will be as if someone else had written it.\nWrite it down now that it\u0026rsquo;s fresh on your mind. You will be happy you did it when you come back later looking for help finding out how \u0026ldquo;this\u0026rdquo; was done and how does \u0026ldquo;that\u0026rdquo; work.\nWhich bring us to\u0026hellip;\n2. Grep is sub-optimal Why browse the sources and reverse-engineer code when you can read a paragraph that\u0026rsquo;s written for humans? It\u0026rsquo;s not efficient to read 600 lines of code and run them in your head when you could simply google it.\nRemember, code is for computers and documentation is for humans. If you are reading this, that means you\u0026rsquo;re probably a human. Optimize for your time, too.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/testing/advanced-checks/",
	"title": "Advanced checks",
	"tags": [],
	"description": "",
	"content": "Advanced checks Static Analysis In the previous chapter we dealt with the critical syntax error. Although we made sure it can be read by PHP, errors can exist in it and need to be caught before being sent to production. Static code analysers are able to detect some of these issues, such as:\n calling an undefined class or method from PHP or your project, trying to get the value of an unset variable, sending the wrong type of parameter to a method having a mismatch between your PHPdoc and your code \u0026hellip;  There are three major tools able to analyse your code: PHPStan, Psalm and Phan.\nAt the time we write this article, only PHPStan is being used on our modules.\nInstallation PHPStan can be installed via composer like other PHP libraries. But, as it can only run by PHP 7.0 and above, you may be unable to add it to your composer.json if your PHP requirements are below the version 7.\n Project requires PHP 7 min  If the current requirements of your project match PHPStan ones, your may add it directly in your project dependencies.\ncomposer require --dev phpstan/phpstan  Project is compliant with PHP 5.x  Requiring the library in a project that can run on PHP 5.x will trigger compatibility errors from Composer. One workaround is to install it globally, so it can be run from anywhere flawlessly.\ncomposer global require phpstan/phpstan Another option is to use the Docker image of PHPStan, following the same versioning of the library on Packagist.\ndocker run --rm [...] phpstan/phpstan analyse Setting up PHPStan can analyse a standalone project without much configuration, where it only needs the files to analyse. Some features, like autoloading with composer, are enabled by default.\nA module deals with many methods from the core in order to work. To avoid issues like undefined methods and classes, the core needs to be autoloaded in memory each time the module is analysed. PHPStan handles several levels of checks, which are defined in their documentation page \u0026ldquo;Rule levels\u0026rdquo;. The higher the better, but somes inconsistencies in the core PHPDoc may prevent you to reach the highest level.\nThe configuration file stores the parameters that would be sent in the command line otherwise. Having a configuration file is a mandatory step for a module, as we have complex rules to write:\n Files to analyse Level of check to run PrestaShop constants to set as dynamic Potential errors to ignore If run with different versions of PS: Do not report ignored messages that aren\u0026rsquo;t reported.  Their documentation page \u0026ldquo;Config reference\u0026rdquo; explains how to write this configuration file from scratch. We also provide a model having some specificities useful for a module. To setup a project with it, require the package prestashop/php-dev-tools and call the initialization of PHPStan:\n# Install dependencies composer require --dev prestashop/php-dev-tools # Set up configuration files php vendor/bin/prestashop-coding-standards phpstan:init Files will be copied in the folder tests/phpstan/ of your module. We provide this library to setup a proper environment for a module, for instance to handle constants that are only defined when PrestaShop is installed. If only the source is downloaded in your test environment, the configuration we provide will use an extension file defining these constants for you. In the next version of this library, we expect more rules to be added to avoid false positive issues and add pertinent errors in a module context.\nUsage Running PHPStan can be done in several ways, and depends on the way you installed it. But in all cases, an environment variable _PS_ROOT_DIR_ must be set, targeting the PrestaShop root folder.\n Project requires PHP 7 min  _PS_ROOT_DIR_=/var/www/html vendor/bin/phpstan analyse --configuration=tests/phpstan/phpstan.neon   Project is compliant with PHP 5.x\n  Via Composer global dependencies\nPrestaShop is considered to be present in the folder /var/www/html. PHPStan can be found in your global composer folder, available from the home directory.\n_PS_ROOT_DIR_=/var/www/html ~/.config/composer/vendor/bin/phpstan analyse --configuration=tests/phpstan/phpstan.neon or\n_PS_ROOT_DIR_=/var/www/html ~/.composer/vendor/bin/phpstan analyse --configuration=tests/phpstan/phpstan.neon   Via Docker\n# Create a container with PrestaShop files docker run -tid --rm -v ps-volume:/var/www/html --name temp-ps prestashop/prestashop # Run the PHPStan image with all the volumes available to read the module and the core files docker run --rm --volumes-from temp-ps -v $PWD:/web/module -e _PS_ROOT_DIR_=/var/www/html --workdir=/web/module phpstan/phpstan analyse --configuration=/web/module/tests/phpstan/phpstan.neon     Here is an example of output. In that case, we were using PHPStan on a module with the latest version of PrestaShop, and tried to run it with a old PS 1.7 version (1.7.0.3), so we could assert that all the methods we call exist in the project and we won\u0026rsquo;t encounter compatibility issues:\n$ _PS_ROOT_DIR_=/var/www/html vendor/bin/phpstan analyse --configuration=tests/phpstan/phpstan.neon ------ ------------------------------------------------------------------ Line controllers/admin/AdminAjaxPoppromoController.php ------ ------------------------------------------------------------------ 428 Call to an undefined static method ImageType::getFormatedName(). ------ ------------------------------------------------------------------ [ERROR] Found 1 error PHPStan allowed us to know that a method disappeared in the first 1.7 versions of PrestaShop, although it was found on PS 1.6 and went back in later versions.\nUnit tests Having unit tests on a module can be challenging because of the relations between your code and PrestaShop\u0026rsquo;s (i.e ObjectModels, context, Database instance). Even though the full coverage of a module cannot be reached, there is some business logic which can be isolated and tested.\nThe main tools used for unit testing is PHPUnit.\nLike other PHP testing tools, it can be installed in your project with composer. Take care to install it in your development dependencies to avoid distributing in your production releases.\ncomposer require --dev phpunit/phpunit:5.7 While newer versions of PHPUnit exist, the version chosen in your project must match the PHP compatibility range of the project, otherwise composer will refuse to install it. The version provided in the example above is the last one compatible with PHP 5.6.\nCreating your unit tests can be done the same way as the core, so more details can be found in the chapter Testing of the core.\nSupposing it was installed via Composer, the command to run it is:\nphp vendor/bin/phpunit tests The following example provides the output expected by this tool when 19 unit tests have been created in the tests/ folder and pass:\n$ php vendor/bin/phpunit tests PHPUnit 5.7.27 by Sebastian Bergmann and contributors. ................... 19 / 19 (100%) Time: 40 ms, Memory: 4.00MB OK (19 tests, 28 assertions) "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/module-translation/classic-system/",
	"title": "Classic translation system",
	"tags": [],
	"description": "",
	"content": "Classic module translation system The classic translation system is a heritage from previous versions of PrestaShop and provides retrocompatibility with PrestaShop 1.6. If you plan on supporting only versions 1.7.6 and up, consider using the New translation system.\nNative modules work differently\nIn PrestaShop 1.7, native modules (the ones bundled with PrestaShop) use a different system. Read more about it here: Native module translation.\n Modern (symfony-based) modules can only be translated using the New translation system. How it works This system works in two steps.\n1. Translation functions are used to display your module\u0026rsquo;s wordings in another language PrestaShop provides functions that allow PHP files and Smarty templates to display translated wordings. By leveraging the module\u0026rsquo;s dictionary files (generated in step 2), a module can use this feature to display a wording in another language during runtime.\n  How wordings are translated at runtime   2. Creating dictionary files The Back Office\u0026rsquo;s Translation page (International \u0026gt; Translations \u0026gt; Modify Translations) is used to generate dictionary files. It extracts the module\u0026rsquo;s wordings by analyzing its source code, then displays a form that allows to translate them manually into any language installed in your shop. Once translated, this information is stored into dictionary files, which are placed inside the module\u0026rsquo;s translations directory. These dictionaries are used in step 1 to match the original wording with the translated one. In addition, dictionary files can be distributed with the module and be reused by other users.\n  Translation workflow   Making your module translatable To make your module translatable, you need to adapt your module\u0026rsquo;s source code. Find any wording you want to make translatable, then wrap it using the appropriate method as explained below. Once wrapped, your wordings will be ready to be translated through the translation interface.\nBy default, wordings are displayed as originally written.\nDon\u0026rsquo;t worry if you don\u0026rsquo;t translate everything to all languages right away. Any wording left untranslated will be shown in its original language. Because of this, we suggest writing all your wordings in English, and then translating them to other languages.\n PHP files In PHP files, translation is performed using the module\u0026rsquo;s l() method.\nThis method accepts up to three parameters:\n $wording – The wording you want to translate. $specific – (Optional) The contextual file name. If not provided, it defaults to the current module\u0026rsquo;s technical name. Contextualization is explained below. $locale – (Optional) The language you want to translate to. If not provided, the user\u0026rsquo;s current language will be used.  Now let\u0026rsquo;s see some examples on how to use it.\nModule\u0026rsquo;s main class When translating wordings in the module\u0026rsquo;s main class, since it extends the Module class, you can simply call $this-\u0026gt;l().\n\u0026lt;?php class mymodule extends Module { public function __construct() { $this-\u0026gt;displayName = $this-\u0026gt;l(\u0026#39;My module\u0026#39;); $this-\u0026gt;description = $this-\u0026gt;l(\u0026#39;Description of my module.\u0026#39;); } } Module controllers ModuleAdminController and ModuleFrontController can access the module instance via the $this-\u0026gt;module property.\n\u0026lt;?php class MyModuleFrontController extends ModuleFrontController { public function initContent() { $this-\u0026gt;title = $this-\u0026gt;module-\u0026gt;l(\u0026#39;My module title\u0026#39;); } } Other classes Other classes will need to retrieve the module\u0026rsquo;s instance somehow. We recommend passing it as a parameter in the constructor and storing it for later use.\n\u0026lt;?php class CustomModuleClass { private $module; public function __construct(Module $module) { $this-\u0026gt;module = $module; } public function foo() { $this-\u0026gt;text = $this-\u0026gt;module-\u0026gt;l(\u0026#39;My text to translate\u0026#39;); } } If you really need to, you can also retrieve a new instance of your module using Module::getInstanceByName('mymodulename'). This should be avoided though, as it\u0026rsquo;s not a good practice.\nTemplates Wordings in Smarty .tpl files can be translated using the {l} function call, which Smarty will replace by the translation in the current language.\nThis function accepts three parameters:\n s – The wording to be translated. mod – Your module\u0026rsquo;s technical name. sprintf – Optional, it can be used to interpolate variables in your wording.  For instance, translating the string \u0026ldquo;Welcome to this page!\u0026rdquo; can be done like this:\n{l s=\u0026#39;Welcome to this page!\u0026#39; mod=\u0026#39;mymodule\u0026#39;}In our sample module, the mymodule.tpl file\u0026hellip;\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{$base_dir}modules/mymodule/mymodule_page.php\u0026#34; title=\u0026#34;Click this link\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026#34;mymodule_block_left\u0026#34; class=\u0026#34;block\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;Welcome!\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;block_content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{$my_module_link}\u0026#34; title=\u0026#34;Click this link\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt; \u0026hellip;becomes:\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{$base_dir}modules/mymodule/mymodule_page.php\u0026#34; title=\u0026#34;{l s=\u0026#39;Click this link\u0026#39; mod=\u0026#39;mymodule\u0026#39;}\u0026#34;\u0026gt;{l s=\u0026#39;Click me!\u0026#39; mod=\u0026#39;mymodule\u0026#39;}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026#34;mymodule_block_left\u0026#34; class=\u0026#34;block\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;{l s=\u0026#39;Welcome!\u0026#39; mod=\u0026#39;mymodule\u0026#39;}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;block_content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{l s=\u0026#39;Hello,\u0026#39; mod=\u0026#39;mymodule\u0026#39;} {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} {l s=\u0026#39;World\u0026#39; mod=\u0026#39;mymodule\u0026#39;} {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{$my_module_link}\u0026#34; title=\u0026#34;{l s=\u0026#39;Click this link\u0026#39; mod=\u0026#39;mymodule\u0026#39;}\u0026#34;\u0026gt;{l s=\u0026#39;Click me!\u0026#39; mod=\u0026#39;mymodule\u0026#39;}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt; As you can see, the basis of template file translation is to enclose them like this:\n{l s=\u0026#39;The string\u0026#39; mod=\u0026#39;name_of_the_module\u0026#39;} Notice how the mod parameter is always provided. This parameter is mandatory for module translation in templates. It is used by PrestaShop to assert which module the string belongs to.\nVariable interpolation The changes in mymodule.tpl\u0026rsquo;s link and title texts are straightforward to understand. But consider this block:\n{l s=\u0026#39;Hello,\u0026#39; mod=\u0026#39;mymodule\u0026#39;} {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} {l s=\u0026#39;World\u0026#39; mod=\u0026#39;mymodule\u0026#39;} {/if} ! Isn\u0026rsquo;t there a better way to make this work?\nWe have two possible cases:\n \u0026quot;Hello \u0026quot; . $my_module_name . \u0026quot;!\u0026quot; \u0026quot;Hello World!\u0026quot;  We can start improving this by keeping the first case, then replacing the variable content to \u0026ldquo;World\u0026rdquo; as needed:\n{if !isset($my_module_name) || !$my_module_name} {capture name=\u0026#39;my_module_tempvar\u0026#39;}{l s=\u0026#39;World\u0026#39; mod=\u0026#39;mymodule\u0026#39;}{/capture} {assign var=\u0026#39;my_module_name\u0026#39; value=$smarty.capture.my_module_tempvar} {/if} {l s=\u0026#39;Hello,\u0026#39; mod=\u0026#39;mymodule\u0026#39;} {$my_module_name}! This is a start! In this example, when $my_module_name is not defined, we capture the value of translating \u0026ldquo;World\u0026rdquo; and assign that value in $my_module_name. This way, we can simply display $my_module_name in any case.\nNow, when working in internationalization, it\u0026rsquo;s better not to make assumptions regarding spacing and positioning of variables. For example, in French, there should be a non-breaking space before the exclamation mark (!), but not in other languages. How can we handle this?\nIn PrestaShop, you can interpolate variables within your wordings using sprintf replacement markers, such as %s or %1$s. Using this feature, we could get rid of the explicit concatenation of \u0026ldquo;Hello, \u0026ldquo;, \u0026ldquo;$my_module_name\u0026rdquo; and \u0026ldquo;!\u0026rdquo;, and let it depend on the translated wording:\n{if !isset($my_module_name) || !$my_module_name} {capture name=\u0026#39;my_module_tempvar\u0026#39;}{l s=\u0026#39;World\u0026#39; mod=\u0026#39;mymodule\u0026#39;}{/capture} {assign var=\u0026#39;my_module_name\u0026#39; value=$smarty.capture.my_module_tempvar} {/if} {l s=\u0026#39;Hello %s!\u0026#39; sprintf=[$my_module_name] mod=\u0026#39;mymodule\u0026#39;} This way, since the variable replacement will happen after the wording is translated, we can have a wording in English like Hello %s!, being translated as Bonjour %s ! in French.\nThere\u0026rsquo;s no fixed \u0026ldquo;special\u0026rdquo; format for placeholders.\nYou can use sprintf markers like %s and %d, or replacement tokens like [foo] and %bar%. If you choose to use tokens, just remember to provide an associative array:\nsprintf=[\u0026#39;[foo]\u0026#39; =\u0026gt; \u0026#39;some replacement, \u0026#39;%bar%\u0026#39; =\u0026gt; \u0026#39;something else\u0026#39;]  Interpolating HTML You may need to add HTML content in your translated string. Writing it directly in the string (original or translated) won\u0026rsquo;t work, as the special characters would be escaped to avoid XSS security issues.\nInstead, you should use placeholders and replace them with HTML code.\nLet\u0026rsquo;s take an example with a link in a string, which can be tricky to do. The first solution that comes to mind would be to concatenate the translated strings with raw HTML code. But as we explained before, this solution is not recommended, because the words order could be different depending on the translation language.\n{l s=\u0026#39;If you want a category to appear in the menu of your shop, go to [modules-link]Modules \u0026gt; Modules \u0026amp; Services \u0026gt; Installed modules.[/modules-link] Then, configure your menu module.\u0026#39; sprintf=[ \u0026#39;[modules-link]\u0026#39; =\u0026gt; \u0026#34;\u0026lt;a href=\\\u0026#34;{$link-\u0026gt;getAdminLink(\u0026#39;AdminModules\u0026#39;)}\\\u0026#34; target=\\\u0026#34;_blank\\\u0026#34;\u0026gt;\u0026#34;, \u0026#39;[/modules-link]\u0026#39; =\u0026gt; \u0026#39;\u0026lt;/a\u0026gt;\u0026#39; ] mod=\u0026#39;mymodule\u0026#39; }Let\u0026rsquo;s look at the resulting string:\nIf you want a category to appear in the menu of your shop, go to \u0026lt;a href=\u0026#34;(...)\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Modules \u0026amp;gt; Modules \u0026amp;amp; Services \u0026amp;gt; Installed modules.\u0026lt;/a\u0026gt; Then, configure your menu module. Make sure to keep [modules-link] and [/modules-link] when translating the wording to other languages.\nContextualization Sometimes the same wording would be translated differently when used in two different contexts. To allow translators to pick the best translation for each context, module developers can choose to contextualize wordings by specifying the file where it\u0026rsquo;s used. When context is provided, translators can choose a different translation for each context.\nAlthough contextualization is optional, we strongly suggest to contextualize all your wordings.\nContextualization works differently in the Core, see Core Translation. Contextualize translations in PHP files Context is defined by setting the second parameter of l() to something of your choosing. By convention, we suggest using the name of the php file it\u0026rsquo;s located in, like this:\n\u0026lt;?php // in SomeFile.php  $module-\u0026gt;l(\u0026#39;Some wording\u0026#39;, \u0026#39;somefile\u0026#39;);  When no context is provided, PrestaShop automatically sets it to your module\u0026rsquo;s technical name Contextualize translations in template files Good news! Contextualization is performed automatically in template files, you don\u0026rsquo;t need to do anything.\nCreating translation dictionary files Translation dictionary files can be created inside the PrestaShop Back Office:\n Go to the \u0026ldquo;Translations\u0026rdquo; page under the \u0026ldquo;International\u0026rdquo; menu, In the \u0026ldquo;Modify translations\u0026rdquo; section, find the \u0026ldquo;Type of translation\u0026rdquo; drop-down and select \u0026ldquo;Installed modules translations\u0026rdquo;, Choose the module you want to translate. Choose the language you want to translate the module into. The destination language must already be installed to enable translation in it. Click the \u0026ldquo;Modify\u0026rdquo; button.  You will be presented with a page that displays all the wordings for the selected module, grouped by translation context. Groups where all wordings have already been translated appear collapsed, whereas groups where at least one string is missing appear expanded. In order to translate your module, simply fill out the empty fields.\nOnce all strings for your module are correctly translated, click on either the \u0026ldquo;Save and stay\u0026rdquo; button or the \u0026ldquo;Save\u0026rdquo; button at the bottom of the list.\nPrestaShop then saves the translations in a file named using the \u0026lt;language_code\u0026gt;.php format and located in you module\u0026rsquo;s translations directory (for instance, /mymodule/translations/fr.php).\nThe translation file looks like this:\n\u0026lt;?php // fr.php  global $_MODULE; $_MODULE = array(); $_MODULE[\u0026#39;\u0026lt;{mymodule}prestashop\u0026gt;mymodule_2ddddc2a736e4128ce1cdfd22b041e7f\u0026#39;] = \u0026#39;Mon module\u0026#39;; $_MODULE[\u0026#39;\u0026lt;{mymodule}prestashop\u0026gt;mymodule_d6968577f69f08c93c209bd8b6b3d4d5\u0026#39;] = \u0026#39;Description du module.\u0026#39;; $_MODULE[\u0026#39;\u0026lt;{mymodule}prestashop\u0026gt;mymodule_533937acf0e84c92e787614bbb16a7a0\u0026#39;] = \u0026#39;Êtes-vous certain de vouloir désinstaller ce module ? Vous perdrez tous vos réglages !\u0026#39;; $_MODULE[\u0026#39;\u0026lt;{mymodule}prestashop\u0026gt;mymodule_0f40e8817b005044250943f57a21c5e7\u0026#39;] = \u0026#39;Aucun nom fourni\u0026#39;;  This file shouldn\u0026rsquo;t be modified manually! It is meant to be edited through the PrestaShop translation interface. Editing a dictionary file manually If for any reason you need to edit your dictionary file manually or create it from scratch, here\u0026rsquo;s how.\nDictionary files are essentially a list of key-values that match a representation of the original wording as it appears in the code, and its translation to a given language. The key stays the same across all translation dictionary files for a given module.\nTranslation keys have a tricky syntax, which is constructed as follows:\n\u0026lt;?php $translationKey = strtolower(\u0026#39;\u0026lt;{\u0026#39; . $moduleName . \u0026#39;}prestashop\u0026gt;\u0026#39; . $sourceFile) . \u0026#39;_\u0026#39; . $md5; As you can see, there are three parameters:\n  $moduleName – Your module\u0026rsquo;s technical name, in lower case.\n  $sourceFile – Name of the file where the wording is used, according to the following rules:\n If the translation is performed in PHP code via call to $this-\u0026gt;l(...) function:  The second argument to that function, if provided. Your module\u0026rsquo;s technical name, in lowercase, if not provided.   If the translation is performed in a .tpl file via {l} smarty tag:  The file name, in lowercase, without the extension removed (eg. foo.tpl → foo)      $md5 – MD5 hash of the original wording you intend to translate.\n  If you are manually building a translation file to use with the New translation system, keep in mind the Backward compatibility constraints. Limitations and caveats Making your wordings appear in the translation interface The translation interface relies on code analysis to \u0026ldquo;discover\u0026rdquo; wordings for translation. Therefore, when declaring wordings in your code, some care is needed in order to make sure they can be discovered.\n  The translation interface only detects wordings used through the l() function and the {l} Smarty tag. Therefore, they must be declared in a PHP or TPL file. They will be detected regardless of whether that code is actually used in runtime or not.\n  Always use literal values, not variables, with the l() function and the {l} Smarty tag. Although variables are interpreted at runtime, they won\u0026rsquo;t be understood by the code analyzer, which only supports literals. Passing variables to these methods will prevent those wordings from appearing in the translation interface.\n  Example:\n\u0026lt;?php // literal values will work $this-\u0026gt;l(\u0026#39;Some wording\u0026#39;, \u0026#39;somecontext\u0026#39;); // dynamic content can be injected using placeholders \u0026amp; sprintf sprintf( $this-\u0026gt;l(\u0026#39;Some wording with %s\u0026#39;, \u0026#39;somecontext\u0026#39;), $dynamicContent ); // this won\u0026#39;t work, the interpreter will ignore variables $wording = \u0026#39;Some wording\u0026#39;; $context = \u0026#39;somecontext\u0026#39;; $this-\u0026gt;l($wording, $context); // this will yield unexpected results $this-\u0026gt;l(\u0026#39;Some \u0026#39;. $var . \u0026#39; wording\u0026#39;); // dynamic behavior, like aliasing the l() function, won\u0026#39;t work well either public function translate($wording) { $this-\u0026gt;l($wording); } Language codes The classic translation system identifies languages using a two-letter code referred to as \u0026ldquo;Language code\u0026rdquo; or \u0026ldquo;ISO code\u0026rdquo;, based on the ISO-619-1 standard (see an unofficial list here).\nSince this standard does not include regional language variants, like British English, Canadian French or Swiss German for example, PrestaShop supports them through nonstandard language codes (gb, qc and dh respectively).\nThis historical choice is subject to debate because of the interoperability issues it raises. In order to fully address them, a future major version of PrestaShop will switch completely to IETF language tags for language identification. PrestaShop already uses them for some purposes.\nIn the meantime, refer to this list for the equivalences between language codes and IETF language tags: Legacy to standard locales.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute-pull-requests/contribute_using_localhost/",
	"title": "Contribute using localhost",
	"tags": [],
	"description": "",
	"content": "How to become a Core Contributor If you\u0026rsquo;re reading this, thank you! This means you\u0026rsquo;re interested in contributing to PrestaShop. You probably are a PrestaShop developer, and your use of the project is slightly different from ours. For instance, there are few differences between PrestaShop 1.7 (the release) and the branch 1.7 of PrestaShop in the GitHub repository. This is because we create a release usable by everyone from our sources.\nTo be able to contribute you need:\n a GitHub account to know the basics of git to be able to run prestashop from the sources  In this part, we\u0026rsquo;ll run PrestaShop by setting up a localhost environment on your machine. Your machine needs:\n a running mysql database be able to execute php scripts a running web server (Apache or Nginx, this page explains how to use Apache)  Installing PrestaShop for development Prerequisites Please read the system requirements to check that your machine can run PrestaShop.\nInstalling a local environment Installing any web-application locally requires that you first install the adequate environment, namely the Apache web server, the PHP language interpreter, the MySQL database server, and ideally the phpMyAdmin tool. This is called an *AMP package: Apache+MySQL+PHP and the operating system, giving WAMP (Windows+Apache+MySQL+PHP), MAMP (Mac OS X+…) and LAMP (Linux+…). Since all of the items packaged are open-source, these installers are most of the time free.\nHere is a selection of free AMP installers:\n XAMPP (Windows, Mac OS X, Linux, Solaris) WampServer (Windows) EasyPHP (Windows) MAMP (Windows, Mac OS X) Laragon (Windows)  Creating a database for your local shop Open the phpMyAdmin tool using your browser. Its location depends on the AMP pack you chose:\n http://127.0.0.1/phpmyadmin (XAMPP, WampServer, MAMP), http://127.0.0.1/mysql (EasyPHP)  In the “Databases” tab, indicate the database name you want and validate by clicking on the “Create a database” button.\nDownloading PrestaShop sources To install the source code, you need to fork the PrestaShop repository. A fork is a copy of the original project on GitHub. If you don\u0026rsquo;t know what is a fork or how to fork a project on GitHub, you can follow the GitHub tutorial.\nOnce you have forked the project, you need to download it to your computer.\nFor instance, if your GitHub nickname is preston, this is what you should do in your terminal:\ngit clone https://github.com/preston/PrestaShop.git  Of course, you need to replace \u0026ldquo;preston\u0026rdquo; with your own nickname here. Clone the repository inside the document folder of the AMP installer you chose:\n XAMPP: C:\\xampp\\htdocs or /Applications/xampp/htdocs WampServer: C:\\wamp\\www EasyPHP: C:\\easyphp\\www MAMP: /Applications/MAMP/htdocs/  Download dependencies using composer Use composer to download the project\u0026rsquo;s dependencies:\ncd /path/to/prestashop composer install Compile assets  From the 1.7.8 version the assets are no longer present in the repository and need to be compiled (we explained with more details why in this article). You will need npm installed on your environment (here is the documentation about how to compile assets), then you can simply run:\ncd /path/to/prestashop make assets Setting up file rights PrestaShop needs recursive write permissions on several directories:\n /admin-dev/autoupgrade/ /app/logs /app/Resources/translations /cache /config/themes /download /img /log /mails /modules /themes /translations /var  To ease up your life on a development environment, we suggest to either:\n Make Apache run with your own user. Add your own user and Apache\u0026rsquo;s to a common user group (eg. \u0026ldquo;_www\u0026rdquo;), then chown all PrestaShop files to \u0026ldquo;youruser:_www\u0026rdquo;.  Installing PrestaShop Open the PrestaShop installer and follow its instructions.\nThe installer can be run from your browser, if you browse http://127.0.0.1/prestashop/install-dev\nYou can read the Getting Started guide for more details.\nThat\u0026rsquo;s it! You have now a running shop on localhost!\nMake your first contribution The very first step to create a pull request is to create your own git branch.\nLet\u0026rsquo;s say you want to suggest a new feature, like emoticon support everywhere. A correct name for your git branch could be \u0026ldquo;add-emoticons-support\u0026rdquo;:\ngit checkout -b \u0026#34;add-emoticons-support\u0026#34; Then you can start to do changes on PrestaShop Core, and create commits: Yay!\nA good practice is to write meaningful commits labels: it\u0026rsquo;s better to have \u0026ldquo;Corrected type hinting in FooBar\u0026rdquo; than \u0026ldquo;Fixed stuff\u0026rdquo;. Publish your work See Submit a Pull Request.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/",
	"title": "Core Development Reference",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Core Development Reference This section describes technical aspects of the PrestaShop Core.\n Coding standards   Naming conventions   The PrestaShop architecture   Database   Page Reference   PrestaShop components   Internationalization   How to compile assets   How to send e-mails   The UIKit   Native Modules   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/dbquery/",
	"title": "DBQuery class",
	"tags": [],
	"description": "",
	"content": "The DBQuery class The DBQuery class is a query builder which helps you create SQL queries. For instance:\n\u0026lt;?php $sql = new DbQuery(); $sql-\u0026gt;select(\u0026#39;*\u0026#39;); $sql-\u0026gt;from(\u0026#39;cms\u0026#39;, \u0026#39;c\u0026#39;); $sql-\u0026gt;innerJoin(\u0026#39;cms_lang\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;c.id_cms = l.id_cms AND l.id_lang = \u0026#39;.(int)$id_lang); $sql-\u0026gt;where(\u0026#39;c.active = 1\u0026#39;); $sql-\u0026gt;orderBy(\u0026#39;position\u0026#39;); return Db::getInstance()-\u0026gt;executeS($sql); Main methods  __toString() Generate and get the query. build() Generate and get the query (return a string). from(string $table, mixed $alias = null) Set table for FROM clause. groupBy(string $fields) Add a GROUP BY restriction. having(string $restriction) Add a restriction in the HAVING clause (each restriction will be separated by an AND statement). innerJoin(string $table, string $alias = null, string $on = null) Add a INNER JOIN clause\nE.g. $this-\u0026gt;innerJoin('product p ON ...'). join(string $join) Add a JOIN clause\nE.g. $this-\u0026gt;join('RIGHT JOIN'.DB_PREFIX.'produc t p ON ...');. leftJoin(string $table, string $alias = null, string $on = null) Add a LEFT JOIN clause. leftOuterJoin(string $table, string $alias = null, string $on = null) Add a LEFT OUTER JOIN clause. limit(string $limit, mixed $offset = 0) Limit results in query. naturalJoin(string $table, string $alias = null) Add a NATURAL JOIN clause. orderBy(string $fields) Add an ORDER BY restriction. select(string $fields) Add fields in query selection. where(string $restriction) Add a restriction in WHERE clause (each restriction will be separated by an AND statement).   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/module-file-structure/",
	"title": "Folder structure",
	"tags": [],
	"description": "",
	"content": "Module file structure A module is made of a lot of files, all stored in a folder that bears the same name as the module, that folder being in turn stored in the /modules folder at the root of the main PrestaShop folder: /modules/\u0026lt;name_of_the_module\u0026gt;/. A module published in an archive file must be in a same subfolder.\nHere are the possible files and folders for a PrestaShop 1.7 module:\n➜ module tree -L 3 . ├── config │ ├── services.yml │ ├── admin │ │ └── services.yml │ └── front │ └── services.yml ├── config.xml ├── controllers ├── logo.png ├── module_name.php ├── override ├── src │ └── Entity ├── themes │ └── theme_name │ └── modules ├── translations ├── upgrade └── views ├── css ├── img ├── js └── templates 13 directories, 4 files Main file: module_name.php The main PHP file should have the same name as the module’s root folder. For instance, for the BlockCMS module:\n Folder name: /modules/blockcms Main file name: /modules/blockcms/blockcms.php  Icon files: logo.png \u0026amp;\u0026amp; logo.gif This needs to be a 32*32 pixels PNG file.\nTemplating: the views folder This folder contains your module’s template files (.tpl or .html.twig files).\nDepending on your needs, your files are located in differents subfolders:\n /views/templates/admin: For template files used by the module’s administration legacy controllers. /views/templates/front: For template files used by the module’s front office controllers. /views/templates/hook: For template files used by the module’s hooks.  If you want to override a Twig template file from Back Office, declare your own following the same path in /views/PrestaShop subfolder. For instance, if you want to override product.html.twig template located in Admin/Product/ProductPage, create your own file in /views/PrestaShop/Admin/Product/ProductPage/product.html.twig.\nEvery asset you need to use in the module (css, js or image files) must be located in their folders: /views/{js, css, img, fonts}.\nMake actions and pages: the controllers folder This folder contains the Controller files. You can use the same sub-folder paths as for the View files.\nFor instance, /modules/\u0026lt;module_name\u0026gt;/controllers/front/payment.php is a valid path to share an action with your Front Office.\nOverride Core classes of PrestaShop: the override folder Try to avoid the overriding Core classes, this make the upgrade of your application risky. You need to follow the same path as the PrestaShop application in your module. For instance:\n Shop class  PrestaShop class =\u0026gt; classes/shop/Shop.php Module override =\u0026gt; modules/\u0026lt;module_name\u0026gt;/override/classes/shop/Shop.php    If /modules/\u0026lt;module_name\u0026gt;/override/classes/Shop.php exists in your module and is not overriden by any more module later, this class will be used instead of the native ShopCore class everywhere in your application.\nTranslate your strings: the translations folder This folder contains a php file for each locale: fr.php, es.php. Translating your module can be done within your shop administration panel, in International \u0026gt; Translations \u0026gt; Installed modules translations.\nAdapt behavior of others modules: the themes/\u0026lt;theme_name\u0026gt;/modules folder This folder is essential during modifications of an existing module, so that you can adapt it without having to touch its original files. Notably, it enables you to handle the module’s template files in various ways, depending on the current theme.\nManage the upgrade: the upgrade folder When releasing a new version of the module, the older might need an upgrade of its data or files. This can be done using this folder.\nConfiguration file: services.yml In services.yml file, you can register your own classes as a Symfony service and alter the ones provided by PrestaShop.\nCache file: config.xml If it does not exist yet, config.xml file is automatically generated by PrestaShop when the module is installed.\nIt contains some properties on the main module class and optimizes the loading of the module list in the back office.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;module\u0026gt; \u0026lt;name\u0026gt;mymodule\u0026lt;/name\u0026gt; \u0026lt;displayName\u0026gt;\u0026lt;![CDATA[My module]]\u0026gt;\u0026lt;/displayName\u0026gt; \u0026lt;version\u0026gt;\u0026lt;![CDATA[1.0]]\u0026gt;\u0026lt;/version\u0026gt; \u0026lt;description\u0026gt;\u0026lt;![CDATA[Description of my module.]]\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;author\u0026gt;\u0026lt;![CDATA[Firstname Lastname]]\u0026gt;\u0026lt;/author\u0026gt; \u0026lt;tab\u0026gt;\u0026lt;![CDATA[front_office_features]]\u0026gt;\u0026lt;/tab\u0026gt; \u0026lt;confirmUninstall\u0026gt;Are you sure you want to uninstall?\u0026lt;/confirmUninstall\u0026gt; \u0026lt;is_configurable\u0026gt;0\u0026lt;/is_configurable\u0026gt; \u0026lt;need_instance\u0026gt;0\u0026lt;/need_instance\u0026gt; \u0026lt;limited_countries\u0026gt;\u0026lt;/limited_countries\u0026gt; \u0026lt;/module\u0026gt; A few details:\n is_configurable indicates whether the module has a configuration page or not. need_instance indicates whether an instance of the module must be created when it is displayed in the module list. This can be useful if the module has to perform checks on the PrestaShop configuration, and display warning message accordingly. limited_countries is used to indicate the countries to which the module is limited. For instance, if the module must be limited to France and Spain, use \u0026lt;limited_countries\u0026gt;fr,es\u0026lt;/limited_countries\u0026gt;.  External libraries All external library you\u0026rsquo;d use should be put in a dedicated folder.\nThat folder can use one of these names: \u0026lsquo;lib\u0026rsquo;, \u0026lsquo;libs\u0026rsquo;, \u0026lsquo;libraries\u0026rsquo;, \u0026lsquo;sdk\u0026rsquo;, \u0026lsquo;vendor\u0026rsquo;, \u0026lsquo;vendors\u0026rsquo;.\nChoose the most appropriate one for your library (indeed, \u0026lsquo;libraries\u0026rsquo; doesn\u0026rsquo;t not have the same meaning as \u0026lsquo;sdk\u0026rsquo;). You can have more than one such folder, for instance /sdk and /vendor.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/front-controllers/",
	"title": "Front controllers",
	"tags": [],
	"description": "",
	"content": "Front controllers These class are accessible from the front-office and add features to the customers.\nCreating a front controller In order to have a front controller read by PrestaShop, these 3 rules have to be followed:\n it is stored in the subfolder controllers/front/ of the module. in CamelCase, the class name follows this format: \u0026lt;ModuleClassName\u0026gt;\u0026lt;FileName\u0026gt;ModuleFrontController. it extends the class ModuleFrontController.  Minimum controller example Let\u0026rsquo;s say we want a controller responsible of payments validation in our module cheque.\nWe create a file /modules/cheque/controllers/front/validation.php and its class:\n\u0026lt;?php /** * \u0026lt;ModuleClassName\u0026gt; =\u0026gt; Cheque * \u0026lt;FileName\u0026gt; =\u0026gt; validation.php * Format expected: \u0026lt;ModuleClassName\u0026gt;\u0026lt;FileName\u0026gt;ModuleFrontController */ class ChequeValidationModuleFrontController extends ModuleFrontController { } That\u0026rsquo;s all, methods added to the class will be taken in account by PrestaShop automatically.\nAvailable properties The controllers added in a module extend ModuleFrontController, itself extending FrontController \u0026amp; Controller. They provide access to the environment in which they run.\n $this-\u0026gt;module is the instance of the module responsible of the controller. $this-\u0026gt;context delivers the result of Context::getContext().  Other existing properties may be useful and can be discovered by looking at the parent classes content (by following links above) or with dump($this).\nAdding methods to the controller There are basically two kinds of HTTP calls possible for a controller:\n Calls with GET, used to only retrieve data, Calls with POST, used as soon as some data is modified on the shop.  Depending of the request made to the controller, a different method will be called by the core.\nDisplay content (GET) Handling GET requests can be done by implementing the method initContent() in the front controller. Note the parent class also implements it, do not forget to call it as well.\nIts purpose should be assigning the variables to smarty, and setting the template to be displayed.\nAssign variables to smarty The smarty engine is available in the context property of the controller. Assigning variables can be done with its method assign(array $vars).\n\u0026lt;?php public function initContent() { // In the template, we need the vars paymentId \u0026amp; paymentStatus to be defined  $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( array( \u0026#39;paymentId\u0026#39; =\u0026gt; Tools::getValue(\u0026#39;id\u0026#39;), // Retrieved from GET vars  \u0026#39;paymentStatus\u0026#39; =\u0026gt; [...], )); } Display HTML content This is the second part we expect in the method initContent().\nHTML content should be stored in a smarty template, available in the module subfolder views/templates/front/.\nThe method setTemplate(...) expect the template file name as parameter. There is no need to write its complete path, as PrestaShop expects to find it in the folder views/templates/front/ of the same module.\n\u0026lt;?php public function initContent() { // In the template, we need the vars paymentId \u0026amp; paymentStatus to be defined  $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( array( \u0026#39;paymentId\u0026#39; =\u0026gt; Tools::getValue(\u0026#39;id\u0026#39;), // Retrieved from GET vars  \u0026#39;paymentStatus\u0026#39; =\u0026gt; [...], )); // Will use the file modules/cheque/views/templates/front/validation.tpl  $this-\u0026gt;setTemplate(\u0026#39;module:cheque/views/templates/front/validation.tpl\u0026#39;); } Handle actions (POST) POST requests will be managed from the method postProcess().\nIt does not receive parameters and does not expect any value to be returned, but user input can be checked with Tools::getIsset(...) and retrieved with Tools::getValue(...).\nWhen done, controllers generally redirects to another route, by using Tools::redirect(\u0026lt;url\u0026gt;).\nAccessing a module front controller Addresses to your controller can be generated easily with the class Link:\n\u0026lt;?php public function Link::getModuleLink($module, $controller, array $params = array()); $module is the technical name of the module, $controller is the controller file name (without \u0026lsquo;.php\u0026rsquo;), and $params is an array of variables to add in a customized route or simply as GET params.\nThe generated address handles automatically HTTP or HTTPS environments, with or without URL rewriting.\nExample of method calls \u0026lt;?php Context::getContext()-\u0026gt;link-\u0026gt;getModuleLink(\u0026#39;cheque\u0026#39;, \u0026#39;validation\u0026#39;, array(\u0026#39;idPayment\u0026#39; =\u0026gt; 1337));  Without URL rewriting: http://\u0026lt;shop_domain\u0026gt;/index.php?idPayment=1337\u0026amp;fc=module\u0026amp;module=cheque\u0026amp;controller=validation\u0026amp;id_lang=1 With URL rewriting: http://\u0026lt;shop_domain\u0026gt;/en/module/cheque/validation?idPayment=1337  Ajax request When you call controller via AJAX, you nedd to add ajax parameter in the url.\nContext::getContext()-\u0026gt;link-\u0026gt;getModuleLink(\u0026#39;cheque\u0026#39;, \u0026#39;validation\u0026#39;, array(\u0026#39;idPayment\u0026#39; =\u0026gt; 1337, \u0026#39;ajax\u0026#39;=\u0026gt;true));  Without URL rewriting: http://\u0026lt;shop_domain\u0026gt;/index.php?idPayment=1337\u0026amp;fc=module\u0026amp;module=cheque\u0026amp;controller=validation\u0026amp;id_lang=1\u0026amp;ajax=true With URL rewriting: http://\u0026lt;shop_domain\u0026gt;/en/module/cheque/validation?idPayment=1337\u0026amp;ajax=true  Restricting access Logged customers only Set the property $auth to true if you want guests to be redirected to the login page automatically.\n\u0026lt;?php public $auth = true; public $guestAllowed = false; To everybody, temporarily You can force the maintenance page to be displayed when a customer reaches a controller.\n\u0026lt;?php protected $maintenance = true; Non-SSL calls When SSL is enabled to a shop, you can force a call to a controller to be secured by redirecting it to HTTPS.\n\u0026lt;?php public $ssl = true; Execution order of the controller’s functions  __construct(): Sets all the controller’s member variables. init(): Initializes the controller. setMedia() or setMobileMedia(): Adds all JavaScript and CSS specifics to the page so that they can be combined, compressed and cached (see PrestaShop’s CCC tool, in the back office “Performance” page, under # the “Advanced preferences” menu). postProcess(): Handles ajaxProcess. initHeader(): Called before initContent(). initContent(): Initializes the content. initFooter(): Called after initContent(). display() or displayAjax(): Displays the content.  Using a front controller as a cron task Thanks to Symfony, modules may implement Console commands for cron tasks.\nFor modules compatible with early versions of PrestaShop 1.7 and previous major versions, there is no dedicated handler for CLI calls. A workaround is available with front controllers containing specific checks for CLI calls.\nImplementing a controller instead of a simple PHP script will allow you to avoid some issues such as a non-instanciated Context or Symfony Kernel, especially on the latest versions of PrestaShop (i.e display of prices from PS 1.7.6). That\u0026rsquo;s why, even for CLI calls triggered by a cron jobs, we recommend having a controller. The trick is to define it as an Ajax call to prevent the page template to be displayed.\nThe following code provides a base for a cron task in the module examplemodule.\nmodules/examplemodule/controllers/front/cron.php\n\u0026lt;?php class ExampleModuleCronModuleFrontController extends ModuleFrontController { /** @var bool If set to true, will be redirected to authentication page */ public $auth = false; /** @var bool */ public $ajax; public function display() { $this-\u0026gt;ajax = 1; if (php_sapi_name() !== \u0026#39;cli\u0026#39;) { $this-\u0026gt;ajaxDie(\u0026#39;Forbidden call.\u0026#39;); } // Additional token checks  // ...  $this-\u0026gt;ajaxDie(\u0026#34;hello\\n\u0026#34;); } } This controller can now be triggered by creating a PHP file that initiates the route to the controller, then includes the index.php at the root of PrestaShop in order to init the dispatcher and your controller.\nThis kind of script is also useful if a standalone PHP script interacting with PrestaShop has been migrated to a ModuleFrontController. The URLs to call would change by moving into a Controller, but the old one would be still accessible with this workaround.\nmodules/examplemodule/cron.php\n\u0026lt;?php $_GET[\u0026#39;fc\u0026#39;] = \u0026#39;module\u0026#39;; $_GET[\u0026#39;module\u0026#39;] = \u0026#39;examplemodule\u0026#39;; $_GET[\u0026#39;controller\u0026#39;] = \u0026#39;cron\u0026#39;; require_once dirname(__FILE__) . \u0026#39;/../../index.php\u0026#39;; The code is now callable via the php command on a terminal:\n$ php modules/examplemodule/cron.php hello "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/benchmark/front-office/",
	"title": "Front-Office Benchmark",
	"tags": [],
	"description": "",
	"content": "How to benchmark your PrestaShop Shop (Front-office) Automatically benchmark with Gatling (recommended) Follow instruction on Back-Office benchmark page to get a pre-populated shop and to run Gatling scenarios on it.\nPrestashop performance project on Github includes Front-Office scenarios you can edit to get your own scenarios running.\nBenchmark with Siege tool Benchmark methodology In order to benchmark the performances of your shop, you will use the siege testing tool. Try to always use the latest available version HERE.\nSetup siege configuration Create a txt file url.txt with various urls from your shop: (prepend with the domain of your shop)\nhttp://localhost:8080/ http://localhost:8080/panier http://localhost:8080/meilleures-ventes http://localhost:8080/nouveaux-produits http://localhost:8080/promotions http://localhost:8080/men/1-1-hummingbird-printed-t-shirt.html#/1-taille-s/8-couleur-blanc http://localhost:8080/accessories/3-mug-the-best-is-yet-to-come.html http://localhost:8080/3-clothes http://localhost:8080/6-accessories http://localhost:8080/3-clothes?q=Prix-€-28-34 http://localhost:8080/magasins http://localhost:8080/fournisseur http://localhost:8080/recherche?controller=search\u0026amp;s=sweater http://localhost:8080/2-accueil Run the siege benchmark Then run a siege benchmark using this file:\nsiege -b -i -c 1 -t 20S --no-parser -f url.txt We will first warmup the cache by testing 1 time with 1 concurrent user, and then progressively raise the number of concurrent users until the performances actually decreases.\nRaise the concurrent parameter (-c 1) to the number of concurrent users you want to test.\nEx for 10 concurrent users without MySQL query cache:\nsiege -b -i -c 10 -t 20S --no-parser -f url.txt Lifting the server siege... Transactions:\t879 hits Availability:\t100.00 % Elapsed time:\t19.26 secs Data transferred:\t37.32 MB Response time:\t0.22 secs Transaction rate:\t45.64 trans/sec Throughput:\t1.94 MB/sec Concurrency:\t9.92 Successful transactions: 879 Failed transactions:\t0 Longest transaction:\t0.68 Shortest transaction:\t0.03 With MySQL query cache enabled:\nLifting the server siege... Transactions:\t1114 hits Availability:\t100.00 % Elapsed time:\t19.46 secs Data transferred:\t46.70 MB Response time:\t0.17 secs Transaction rate:\t57.25 trans/sec Throughput:\t2.40 MB/sec Concurrency:\t9.93 Successful transactions: 1114 Failed transactions:\t0 Longest transaction:\t0.57 Shortest transaction:\t0.02 Interpret the results In the siege result output, here is the useful results:\nTransactions The total number of pages loaded during the benchmark. The higher the better.\nAvailability It tells you the amount of pages which have failed to load.\nResponse time The average response time of your pages. The lower the better.\nTransaction rate The number of pages loaded by second. The higher the better.\nConcurrency The number of concurrent transaction the software has been able to run. Should be close to the requested concurrent user setting.\nFailed transactions Closely related to Availability, the number of pages which have failed to load (404, 503, \u0026hellip;)\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": "Hooks Hooks are a way to associate your code to some specific PrestaShop events.\nMost of the time, they are used to insert content in a page. The place it will be added (header, footer, left or right column \u0026hellip;) will depend on the hook you choose.\nHooks can also be used to perform specific actions under certain circumstances (i.e. sending an e-mail to the client on an order creation).\nNaming scheme Hook names are prefixed with \u0026ldquo;action\u0026rdquo; or \u0026ldquo;display\u0026rdquo;. This prefix indicates if a hook is triggered by an event or if it\u0026rsquo;s used to display content:\n action\u0026lt;Something\u0026gt; Triggered by specific events that take place in PrestaShop. display\u0026lt;Something\u0026gt; Result in something being displayed, either in the front-end or the back-end.  Using hooks Registration Every hook you want to use must be registered first. This is usually done during the installation of your module, by calling the method Module::registerHook($hookName).\n\u0026lt;?php public function install() { // [...]  $this-\u0026gt;registerHook(\u0026#39;displayHeader\u0026#39;); $this-\u0026gt;registerHook(\u0026#39;displayFooter\u0026#39;); // [...] } If you do not know where you can register, a list of available hooks is available.\nExecution For each registered hook, you must create a non-static public method, starting with the \u0026ldquo;hook\u0026rdquo; keyword followed by the name of the hook you want to use (starting with either \u0026ldquo;display\u0026rdquo; or \u0026ldquo;action\u0026rdquo;).\nThis method receives one (and only one) argument: an array of the contextual information sent to the hook.\n\u0026lt;?php public function hookDisplayHeader(array $params) { // Your code. } public function hookDisplayFooter(array $params) { // Your code. } public function hookActionOtherHook(array $params) { // Your code. } Remember, in order for a module to respond to a hook call, it must be registered within PrestaShop.\nTriggering a hook In a controller It is easy to call a hook from within a controller: you simply have to use its name with the Hook::exec($hook_name, $hook_args = array()) method. Some parameters can be sent as well.\nFor instance:\n\u0026lt;?php $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( \u0026#39;HOOK_LEFT_COLUMN\u0026#39;, Hook::exec(\u0026#39;displayLeftColumn\u0026#39;) ); In a theme It is easy to call a hook from within a template file (.tpl): you simply have to use its name with the hook function. You can add the name of a module that you want the hook execute.\nBasic call of a hook:\n{hook h=\u0026#39;displayLeftColumn\u0026#39;} Call of a hook for a specific module:\n{hook h=\u0026#39;displayLeftColumn\u0026#39; mod=\u0026#39;blockcart\u0026#39;} Going further: Creating your own hook You can create new PrestaShop hooks by adding a new record in the Hook table. This can be done with the Hook class, which inherit ObjectModel features:\n\u0026lt;?php $hook = new Hook(); $hook-\u0026gt;name = \u0026#39;displayAtSpecificPlace\u0026#39;; $hook-\u0026gt;title = \u0026#39;The name of your hook\u0026#39;; $hook-\u0026gt;description = \u0026#39;This is a custom hook!\u0026#39;; $hook-\u0026gt;position = 1; $hook-\u0026gt;add(); // return true on success  You can check if hook exists before this with Hook::getIdByName(\u0026#39;hook_name\u0026#39;) \u0026hellip;but PrestaShop enables you to do it the easy way:\n\u0026lt;?php $this-\u0026gt;registerHook(\u0026#39;displayAtSpecificPlace\u0026#39;); If the hook \u0026ldquo;displayAtSpecificPlace\u0026rdquo; doesn\u0026rsquo;t exist, PrestaShop will create it for you but be carefull : this will also plug the current module to the hook.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-process/how-pull-requests-are-processed/",
	"title": "How Pull Requests are processed",
	"tags": [],
	"description": "",
	"content": "How Pull Requests are processed All submitted pull requests go through a thorough process which aims to provide a stable, consistent and reliable software that we all know under the name PrestaShop. Here is this process in details.\nAutomatic tasks when you open a Pull Request When you submit a new Pull Request to the project repository, some automatic checks are triggered.\nContinuous Integration Four automatic code checker tools are active on the project.\nGitHub Actions The first tool is a PHP CS Fixer GitHub Action. This tool will look at your Pull Request and check whether the php syntax and code-style is correct. If not, it will block the PR from being merged and tell you what is wrong.\nIt is a lot easier to work on a big codebase like PrestaShop if all code is written following the same conventions: snake_case or camelCase, how to write the phpDoc, when to use white spaces \u0026hellip; it makes the code look like if it was written by a single developer. Just like reading a book with two different styles in it, having a codebase with a unified style is making it easier to browse. A unified code-style also makes the pull requests easier to review.\nIf the Github Action states that your pull request has issues, you need to fix the issues by looking at the Github Action output to understand what needs to be fixed.\nThe second tool is a ESLint GitHub Action. This one checks whether the Javascript syntax and code-style is correct. Likewise, it will block the PR from being merged if there is a syntax or code-style issue.\nThe third tool is a stylelint GitHub Action. This one checks whether the CSS syntax and code-style is correct. It will block the PR from being merged as well if there is a syntax or code-style issue.\nThese GitHub Actions are executed automatically for every Pull Request.\nTest runner The fourth tool is Travis. Travis is a Continous Integration system that will look at the Pull Request and run several checks, be it code-style checkers, format checkers or automated tests, and provide you the result in the Pull Request. If something is wrong it will block the PR from being merged. This is a standard approach to ensure that new contributions in a codebase do not break existing features and behaviors.\nIf Travis states that your pull request has issues, you need to fix the issues by looking at Travis output to understand what needs to be fixed.\nTravis runs automatically for every Pull Request.\nPrestonbot and Issuebot Prestonbot (based on Carsonbot) is a custom bot that looks at all Pull Requests and tries to help us manage the project. He has multiple capabilities.\nFor example he detects mistakes in the pull request description, he add some labels to classify the pull requests, he welcomes new contributors to the project \u0026hellip;\nRead his article for the full details.\nIf something is wrong, Prestonbot will write a comment in the pull request to tell you what to fix.\nIssuebot (based on the probot framework) is another bot that automates our issue/PR workflow. It will make sure your Pull Request metadata, such as labels or Kanban cards, are valid.\nThe code review Your Pull Request will be reviewed by a Core maintainer.\nWhat is being checked in code review? When a Core maintainer sees a pull request, they will review it and decide whether it should be accepted, if it needs changes, or if it cannot be accepted.\nThe review process is quite thorough in order to make sure that PrestaShop codebase gets better with each contribution. Here is all the things looked for in a Pull Request, when reviewing it:\n The start is checking that the code is correct. This means both from a behavior point of view as well as from a technical point of view. This is simply an assessment of the quality of the Pull Request code, just like it happens in a lot of software teams. The Core maintainers check the code works as intended, it uses the right functions, it handles expectable edge-cases, has no obvious vulnerabilities, scales well, etc. The Core maintainers also keep in mind that PrestaShop is a CMS and consequently must provide all the necessary extension points to allow developers to customize or extend its behavior. The Core maintainers also assess the readability of the code. There is a statement that says \u0026ldquo;when a code file is opened by a developer, 9 times out of 10 it will only to be read, not to be modified\u0026rdquo;. Because PrestaShop is a huge and complex codebase and because it has so many people reading through it, it is very important that its code is made as readable as possible. This is obtained by adding comments, carefully choosing function and variable names, and building an architecture that makes sense so it is easy to grasp and navigate for people who have never worked on it before. The Core maintainers also check that best practices are implemented into the Pull Request, be it standard conventions or practices like PSR or best security recommandations like the ones from OWASP. When people use PrestaShop to build a shop, it is likely that they will follow the practices they see implemented in the Core, so the aim is to think of the code merged as an example that people will use. PrestaShop has grown huge over the years, both as a codebase and as a software. There are hundreds of features built in the software, and some are more commonly used than others. Some contributions sometimes need to be reworked because they did not take into account one of the less popular features of the software, or are not compatible with them. Common examples are the multi-store mode or the RTL (Right-To-Left) mode, two features that adress very specific needs and that many developers are not aware of. PrestaShop follows SemVer. This means that The Core maintainers strive not to introduce breaking compatibility changes when releasing minor and patch versions. Therefore, each Pull Request must not introduce such changes. The Core maintainers also have a vision of what PrestaShop should evolve to in order to follow the new trends in the software world. Although a big codebase like PrestaShop evolves slowly, the future architecture and features to come are kept in mind, and the Core maintainers check whether the Pull Request is following this direction. For example today PrestaShop relies heavily on jQuery for its frontend features, and Vue.js is slowly starting to be used in the project. So if tomorrow a Pull Request that is using React.js is submitted, it might be refused in order to keep a consistency in the technology stack used for the project.  Some Pull Requests are very hard to review because they are related to a complex topic, a complex area of the code or have a huge global impact on the software that is very hard to estimate and assess. Reviews can take hours or days in order to make sure every contribution merged in the project meets the level of quality we want for it.\nMost of the time, if an issue is found during the review, the Core maintainer will provide feedback about the issue and requests the author to modify the parts of the Pull Request that cannot be accepted as they are. After the author of the Pull Request has implemented the requested changes, then the Pull Request can be approved and move forward to the next step.\nIt is not only about code For some Pull Requests, some more people of PrestaShop might be involved in the review:\n UX design team will review changes that have a significant UX impact Product team will review changes that introduce a significant behavior modification (either an existing feature or a new feature) Content team will review Pull Requests that introduce wording changes (labels, titles, error and information messages)  Once the Pull Request has been validated by all of the relevant people, it is finally verified by the QA team. The QA team will then make sure that the behavior of the proposed change is correct and that it does not produce any regressions (new errors).\nAfter the Pull Request has finally passed the QA validation, it is merged in the project and the author becomes (if they weren\u0026rsquo;t already) a contributor to this great open source project !\nGraphical summary (click on it to see full size)\nOther useful resources  What it means to rebase a Pull Request submitted on GitHub on dev.to, by Mathieu Ferment How to resolve a git merge conflict on opensource.com by Brian Breniser   (This article was originally published on our blog: What Happens To Pull Requests After They Are Submitted)\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/how/",
	"title": "How to contribute",
	"tags": [],
	"description": "",
	"content": "How to contribute to PrestaShop\u0026rsquo;s Developer Documentation This documentation is collaborative, hosted on GitHub and served through GitHub Pages. Contributions are welcome!\nTL;DR – Contributing is super easy! Edit any page by clicking on the \u0026ldquo;Improve this page\u0026rdquo; link at the top right corner of your screen.\nWhat to contribute We are happy that you want to contribute to the project! Here are some examples of how you can help.\nWrite If you know your way around the guts of PrestaShop and you are comfortable writing in English:\n Pick up a subject that is either insufficiently or not at all covered by the documentation already, and write about it. If the subject is already covered, you can improve it by adding screenshots or examples. You can also write short tutorials.  Plan Found a subject that is not covered or needs to be developed? Let us know by submitting an issue on GitHub. That way we will know where to focus on.\nReview \u0026amp; proofread You can help us by reviewing new contributions. Even if you aren\u0026rsquo;t that technical, if your English is good, you can help by proofreading.\nIf you find an error, you can let us know by submitting an issue, or even fix it by yourself (read below for how).\nSee all the current open Pull Requests.\nHow to edit a page To contribute, you\u0026rsquo;ll need a GitHub account. If you don\u0026rsquo;t have one, don\u0026rsquo;t worry! It\u0026rsquo;s free and it only takes a couple of minutes. Create your GitHub account.\nThere are two ways to contribute to this documentation, each having its advantages:\n Edit any page on Github – Best if you don\u0026rsquo;t know git or you just want to quickly correct something. Edit on your computer – Best if you know git and/or you want to see how your changes look.  Editing on your computer is recommended if you already know your way around git and the GitHub workflow, or if you want to work on the site itself. It will also allow you to build the site locally and check out exactly how your changes will look. Regardless of the path you choose to contribute, you\u0026rsquo;ll end up creating a Pull Request – don\u0026rsquo;t forget to submit it!.\nOnce your PR is submitted, the team will promptly review it and do its best to see that your contribution is added to the documentation!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/ui-tests/how-to-contribute-and-create-ui-tests/",
	"title": "How to contribute and create UI tests",
	"tags": [],
	"description": "",
	"content": "How to contribute and create UI tests Architecture Page Object Model (also called Page Object Pattern) is a way to organize your code in a test framework. It encourages you to separate your test logic from your page manipulation logic.\nOur team uses POM as an architecture to organize the code: on one side we have our page logic, and on the other side we have our test logic.\nThe goal is to write your test code once, and only change the page logic when someone updates the application.\nBoth are described in the following paragraphs.\nPages Name The name of the class must be simple and linked to the page in the shop. You should be able to find the corresponding page in the application using the folder hierarchy, and the class name.\nThe convention for naming the file itself is different: the main page name is always index.js, while other pages should always have a relevant name.\nExample:\nFor BO products pages located at pages/catalog/products/, we use 2 classes:\n index.js for the products listing page (main page) add.js for the add/edit product page  Inheritance We heavily use inheritance in the pages to make sure all our generic methods are available from everywhere, and you don’t need to instantiate separate objects.\nThere is a main mother class, called CommonPage, located at the root of the pages folder.\nWe have another level of inheritance in each root folder (BO and FO) through the classes BOmainPage.js and FOMainPage.js. Of course, CommonPage is not meant to be instantiated (it’s kind of an abstract class) !\nWhen you create new page classes, make sure to make them inherit from their respective XXMainPage to be sure to be able to use both generic methods and specific methods.\nExamples:\n Install page (which is independent) extends from CommonPage Brands page (which is part of the BO) extends from BOBasePage Checkout page (which is part of the FO) extends from FOBasePage  Methods Methods inside a page class must be properly named about their primary function. Remember to KISS ! You should be able to understand what a method does just by looking at its name.\nMethods inside a page class CANNOT USE the expect keyword or any kind of asserting function, since their sole purpose is to interact with the page they’re linked with. They don’t validate anything per se, they just expose functionalities. To validate a behavior in your test logic, your methods can return booleans, integers (number of lines, elements, etc), strings, objects\u0026hellip; It’s up to you.\nExample:\n/** * Get order status * @param page * @return {Promise\u0026lt;string\u0026gt;} */ async getOrderStatus(page) { return this.getTextContent(page, `${this.orderStatusesSelect}option[selected=\u0026#39;selected\u0026#39;]`, false); } This method returns the text content of the selected option in the Status select element in the Orders page.\nSelectors Selectors are used on every page and are stored as attributes of the class. They should be named following this convention: nameType in camelCase, with name being the distinctive information about the element and type being its type (see below).\nFor example, a button used to submit the main form in the order page should be named: submitMainFormButton.\nTypes Each selector must belong to a certain type. Here is a non-exhaustive list:\n Button, link, block, image, icon, text, modal, other HTML elements\u0026hellip; Table, table-header, row, column, other table elements\u0026hellip; Form, input, select, radio, checkbox, other forms inputs\u0026hellip;  Tests Campaigns We currently have 2 campaigns implemented:\n Sanity: its purpose is to validate a Pull Request. Executed on Travis CI, this campaign must fully pass before merging the PR (one failed test blocks the merge). It consists of a few tests of the core features of PrestaShop: shop installation, orders/products pages in BO, and catalog/cart/checkout process in FO. Functional: it is the biggest and most important campaign. Its purpose is to validate that every feature of PrestaShop works, by testing them one by one. It goes on every page and tests whatever it can: table (filtering, ordering, quick edits, etc), CRUD items (orders, customers, products…), setting changes, etc.  We plan on implementing 2 more campaigns:\n End to end: its purpose is to check that popular user paths are working as intended. It will walk through the application and mimic a real user working on their daily routines as a merchant: checking products, generating invoices, creating a customer account, and an order, adding a special voucher for a specific user, etc. The selected user paths will be chosen by the Product Team. Thanks to their merchants and agencies interviews, they have a pretty good idea of what merchants do every day and how they use the software. Regression: a test campaign tailored to only target major and critical issues in the few last versions of PrestaShop, to make sure they don’t come back (hence the name).  Mocha and Mochawesome Mocha is our test runner (a framework that reads our test code and runs it). We use it in coordination with Mochawesome, a plugin for Mocha. Mochawesome produces a full JSON report in addition to a beautiful HTML report (which we don’t really use). The JSON file is sent to our Nightly Board, it is then inserted into the database to let visitors browse reports and visualize statistics.\nLambda function in describes Using lambda functions in mocha is discouraged. They bind this to the scope of the lambda function, making it impossible to use internal Mocha methods and objects. Since we may use the Mocha context to store some variables in the future, we strongly advise you to use the normal function() syntax.\nUtils The utils directory contain files that are necessary to run tests.\nGlobals This file contains all global variables that can be used in test files, pages and common tests.\nThe description of each variable in this file can be found in README.md.\nSetup Mocha gives us the possibility to load and run files before test files (with --file option). We use that option to run our setup.js file. This file opens only one browser for the whole campaign (and not one browser per test), since we\u0026rsquo;re then running each test file in its own context.\nBrowser helper This helper file is used to centralize the browser and tab functions called in all tests. This approach has one goal : to have the same browser’s configuration everywhere and of course to facilitate maintenance.\nThe functions that exist (for now) in this file are the following:\n createBrowser: used to create a browser with the global configuration, we create one browser for the whole campaign closeBrowser: usually called at the end of a run, to close the browser created and delete the downloaded files createBrowserContext: used to create a browser context, a browser can have multiple contexts that don\u0026rsquo;t share cookies/cache closeBrowserContext: usually called at the end of a test, to close the browser context created for the test newTab: allows us to open a new tab in a browser  Note that all these functions are used in mocha hooks functions in the global describe but can be called somewhere else.\nFiles Some of our tests need to create files (ex: Create files in BO), or to check some text in a PDF file (ex: Create and check invoice). For this specific need, we use some functions in Files.js.\nWhen a test is finished, all created files are deleted using a function from the same file : deleteFile, following the \u0026ldquo;cleaning behind\u0026rdquo; approach.\nRequire pages In each and every test, we require the pages that will be needed. The initialization is done when you require the class (no need to use the new keyword).\nExample:\n// For test \u0026#39;Filter Customer\u0026#39; const dashboardPage = require(\u0026#39;@pages/BO/dashboard\u0026#39;); const customersPage = require(\u0026#39;@pages/BO/customers\u0026#39;); Expect We use the expect keyword from the Chai library. This allows us to write assertions in a much more readable way. You can use whatever way to assert you want/need. Don’t forget that you can use the second argument of expect to log out a better error message when your assertion fails.\nExample :\nConst isCustomerConnected = await foLoginPage.isCustomerConnected(page); await expect(isCustomerConnected, \u0026#39;Customer is disconnected in FO\u0026#39;).to.be.true; Test identifier Our team thinks it’s very important to be able to follow how tests results evolve, so it’s been decided to add a unique identifier to every step in the test.\nWhy? To be able to identify each and every test and compare from one report to another, to know how the results change.\nFor example, you could have 10 failed tests one day, and 10 the day after. How do you know if it’s the same 10 tests failing, or another distribution (for example, 5 tests fixed, 5 other tests failing)? With this system we can calculate the trend and show it on the Nightly Board.\nWe first create a base context for each and every test file, and then we make a call to the function addContextItem with the unique value for this step, inside the test file.\nExample :\n// From test : UI/campaigns/functional/BO/04_customers/01_customers/07_helpCard.js const baseContext = \u0026#39;functional_BO_customers_customers_helpCard\u0026#39;; // And inside each `it`, we make a call // For example, in the “Go To Customer’s Page” step we will have : testContext.addContextItem(this, \u0026#39;testIdentifier\u0026#39;, \u0026#39;goToCustomersPage\u0026#39;, baseContext); // In the report, the final identifier will look like this: ‘functional_BO_customers_customers_filterAndQuickEditCustomers_goToCustomersPage’ Be careful, identifiers must be unique through the whole campaign ! We have a dedicated Github Action to help us find duplicates, so if you submit a PR we\u0026rsquo;ll see it directly.\nCleaning behind You must be able to launch a test independently, as well as in a whole campaign. That means :\n Your test must create its own data or rely on the default fixtures Your test must clean behind itself in a reliable manner Deleting files (invoices, images) and artifacts  The shop must end in the same state it was in before your test, as much as possible (since some actions are logged and create artifacts, that may not be always easy to clean though) and let subsequent tests run smoothly! That means deleting the items you created, reverting your changes, etc.\nA rule of thumb: can you launch your test suite multiple times? If yes, you know you’re not dependent on the data, and you’re properly cleaning behind.\nData Demo Data Our tests rely heavily on the demo fixtures (= demo data added when installing the vanilla PrestaShop package). However, we describe these data in separate files to make sure there’s no reference hard written in our code.\nThe only assumption we have to make is the presence of certain items like Orders or Products in the catalog after a vanilla installation.\nIf you need to rely on the fixtures too, make sure to use the description of the objects you’re looking for in the data folder. If it’s not complete, you can expand it and make a Pull Request, we’ll be happy to improve our datasets !\nFaker When we need to create new items, we rely on Faker to create random data.\nThis helps us make sure we’re testing with randomized sets of data and covering a lot of cases. It’s very important to check the specifications before to make sure you’re properly setting up your faker : input length, authorized characters, range of dates/values, etc.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-grid-actions/",
	"title": "How to use Grid Actions",
	"tags": [],
	"description": "",
	"content": "How to use Grid actions In addition to displaying data tables, Grid component also comes with a lot of additional features. One is the Grid actions.\nWhat is a Grid action? A Grid action is an action (e.g. Import, Export \u0026amp; Show SQL query) that is applicable to the entire Grid.\nHow to add actions to Grid? Let\u0026rsquo;s take an example from Customers grid definition. It has 5 (grid) actions already:\n Import; Export; Refresh; Show SQL query; Export to the SQL Manager;  See code example from the Core below:\n\u0026lt;?php // src/Core/Grid/Definition/Factory/CustomerGridDefinitionFactory.php  final class CustomerGridDefinitionFactory extends AbstractGridDefinitionFactory { // ...  /** * {@inheritdoc} */ protected function getGridActions() { return (new GridActionCollection()) -\u0026gt;add( (new LinkGridAction(\u0026#39;import\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Import\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;cloud_upload\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_import\u0026#39;, \u0026#39;route_params\u0026#39; =\u0026gt; [ \u0026#39;import_type\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;, ], ]) ) -\u0026gt;add( (new LinkGridAction(\u0026#39;export\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Export\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;cloud_download\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_customers_export\u0026#39;, ]) ) -\u0026gt;add( (new SimpleGridAction(\u0026#39;common_refresh_list\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Refresh list\u0026#39;, [], \u0026#39;Admin.Advparameters.Feature\u0026#39;)) -\u0026gt;setIcon(\u0026#39;refresh\u0026#39;) ) -\u0026gt;add( (new SimpleGridAction(\u0026#39;common_show_query\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Show SQL query\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;code\u0026#39;) ) -\u0026gt;add( (new SimpleGridAction(\u0026#39;common_export_sql_manager\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Export to SQL Manager\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;storage\u0026#39;) ); } } As you see, Grid stores Grid actions using a GridActionCollection object. This means that every action needed for Grid must be added to GridActionCollection using add() method. You\u0026rsquo;ll find the list of existing actions in the documentation.\nHow to add Grid actions to a Grid using a module? You can add additional actions to any Grid by hooking to the Grid workflow. You have to follow these steps:\n Register hook action{gridId}GridDefinitionModifier where {gridId} is Grid id (e.g. customer for Customers grid, this means that hook name would be actionCustomerGridDefinitionModifier). Implement hook method in your module:  \u0026lt;?php // modules/mymodule/mymodule.php  class Mymodule extends Module { // ...  /** * Use hook to add Grid action for subscribing multiple customers to newsletter */ public function hookActionCustomerGridDefinitionModifier(array $params) { /** @var \\PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinition */ $gridDefinition = $params[\u0026#39;definition\u0026#39;]; $gridDefinition-\u0026gt;getGridActions() -\u0026gt;add( (new LinkGridAction(\u0026#39;new_action\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;New action\u0026#39;, [], \u0026#39;MyModule.Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;add_circle\u0026#39;) // icon from https://materializecss.com/icons.html by default  -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;my_module_specific_route\u0026#39;, ]) ) ; } } Now you should be able to see new action available into the Customers grid!\nHow to create custom Grid action? PrestaShop already comes with a bunch of actions that are available for use in your Grids or for extending PrestaShop grids. However, in some use cases you may find that the existing actions do not fit your needs.\nLuckily, there is a solution, you can create and register your own custom actions.\nFirst, you need to create a Grid action itself:\n\u0026lt;?php // modules/mymodule/src/Grid/Action/Type/  use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\AbstractGridAction; /** * It extends AbstractGridAction, * but you can also implement \\PrestaShop\\PrestaShop\\Core\\Grid\\Action\\GridActionInterface * if for some reason you want to avoid using the abstract class */ final class MySpecificAction extends AbstractGridAction { /** * {@inheritdoc} */ public function getType() { return \u0026#39;my_specific\u0026#39;; } /** * {@inheritdoc} */ protected function configureOptions(OptionsResolver $resolver) { /** * options passed to the resolver will be available in the Grid action * and also in the template responsible of rendering the action. */ $resolver -\u0026gt;setRequired([ \u0026#39;route\u0026#39;, ]) -\u0026gt;setDefaults([ \u0026#39;route_params\u0026#39; =\u0026gt; [], ]) -\u0026gt;setAllowedTypes(\u0026#39;route\u0026#39;, \u0026#39;string\u0026#39;) -\u0026gt;setAllowedTypes(\u0026#39;route_params\u0026#39;, \u0026#39;array\u0026#39;); } } Then you need to create template so it can render nicely in your grid.\n{# mymodule/views/PrestaShop/Admin/Common/Grid/Actions/Grid/my_specific.html.twig #}\u0026lt;a id=\u0026#34;{{ \u0026#39;%s_grid_action_%s\u0026#39;|format(grid.id, action.id) }}\u0026#34; href=\u0026#34;{{ path(action.options.route, action.options.route_params) }}\u0026#34; class=\u0026#34;dropdown-item\u0026#34;\u0026gt; {% if action.icon is not empty %}\u0026lt;i class=\u0026#34;material-icons\u0026#34;\u0026gt;{{ action.icon }}\u0026lt;/i\u0026gt; {% endif %}{{ action.name }}\u0026lt;/a\u0026gt; Last thing is to add your newly created Grid action to Grid\u0026rsquo;s GridActionCollection and then it should be available in your Grid!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-row-actions/",
	"title": "How to use Row Actions",
	"tags": [],
	"description": "",
	"content": "How to use Row actions In addition to displaying data tables, Grid component also comes with a lot of additional features. One is Row actions.\nWhat is a Row action? A Row action is an action (e.g. Edit, View \u0026amp; Delete) that is applicable to a specific row in the Grid.\nHow to add row actions to Grid? Let\u0026rsquo;s take an example from Category grid definition. It has 3 (row) actions already:\n View; Edit; Delete;  See code example from the Core below:\n\u0026lt;?php // src/Core/Grid/Definition/Factory/CategoryGridDefinitionFactory.php  final class CategoryGridDefinitionFactory extends AbstractGridDefinitionFactory { // ...  /** * @return RowActionCollection */ private function getRowActions() { return (new RowActionCollection()) -\u0026gt;add( (new LinkRowAction(\u0026#39;view\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;View\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;zoom_in\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_categories_index\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;categoryId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;id_category\u0026#39;, \u0026#39;accessibility_checker\u0026#39; =\u0026gt; $this-\u0026gt;categoryForViewAccessibilityChecker, // Thanks to this option a click on the row will have the same effect as this action  \u0026#39;clickable_row\u0026#39; =\u0026gt; true, ]) ) -\u0026gt;add( (new LinkRowAction(\u0026#39;edit\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Edit\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;edit\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_categories_edit\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;categoryId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;id_category\u0026#39;, // A grid usually has only one click action, categories are a special case because the view  // action may be filtered via the accessibility_checker option, in which case the edit action  // will be used The order is important then as the first row action is used by default  \u0026#39;clickable_row\u0026#39; =\u0026gt; true, ]) ) -\u0026gt;add((new SubmitRowAction(\u0026#39;delete\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Delete\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;delete\u0026#39;) -\u0026gt;setOptions([ \u0026#39;method\u0026#39; =\u0026gt; \u0026#39;DELETE\u0026#39;, \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_categories_delete\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;categoryId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;id_category\u0026#39;, \u0026#39;confirm_message\u0026#39; =\u0026gt; $this-\u0026gt;trans( \u0026#39;Delete selected item?\u0026#39;, [], \u0026#39;Admin.Notifications.Warning\u0026#39; ), ]) ); } } As shown above, Grid stores Row actions using a RowActionCollection object. This means that every action needed for Grid must be added to RowActionCollection using add() method. You\u0026rsquo;ll find the list of existing actions in the documentation.\nHow to add Row actions to a Grid using a module? You can add additional actions to any Grid by hooking to the Grid workflow. You have to follow these steps:\n Register hook action{gridId}GridDefinitionModifier where {gridId} is Grid id (e.g. customer for Customers grid, this means that hook name would be actionCustomerGridDefinitionModifier). Implement hook method in your module:  \u0026lt;?php // modules/mymodule/mymodule.php  class Mymodule extends Module { // ...  /** * Use hook to add Row action for subscribing customer to newsletter */ public function hookActionCustomerGridDefinitionModifier(array $params) { /** @var \\PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\GridDefinition */ $gridDefinition = $params[\u0026#39;definition\u0026#39;]; $gridDefinition-\u0026gt;getGridActions() -\u0026gt;add((new SubmitRowAction(\u0026#39;subscribe\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Subscribe\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;)) -\u0026gt;setIcon(\u0026#39;mail\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_customer_subscribe\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;customerId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;id_customer\u0026#39;, \u0026#39;confirm_message\u0026#39; =\u0026gt; $this-\u0026gt;trans( \u0026#39;Subscribe to newsletter?\u0026#39;, [], \u0026#39;Admin.Notifications.Warning\u0026#39; ), ]) ) ; } } Now you should be able to see new action available into the Customers grid!\nHow to create custom Row action? PrestaShop already comes with a bunch of actions that are available for use in your Grids or for extending PrestaShop grids. However, in some use cases you may find that the existing actions do not fit your needs.\nLuckily, there is a solution, you can create and register your own custom actions.\nFirst, you need to create a Grid action itself:\n\u0026lt;?php // modules/mymodule/src/Grid/Action/Type/  use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\AbstractRowAction; /** * It extends AbstractRowAction, * but you can also implement \\PrestaShop\\PrestaShop\\Core\\Grid\\Action\\RowActionInterface * if for some reason you want to avoid using the abstract class */ final class MySpecificRowAction extends AbstractRowAction { /** * {@inheritdoc} */ public function getType() { return \u0026#39;my_specific\u0026#39;; } /** * {@inheritdoc} */ protected function configureOptions(OptionsResolver $resolver) { /** * options passed to the resolver will be available in the Grid Row action * and also in the template responsible of rendering the action. */ $resolver -\u0026gt;setRequired([ \u0026#39;route\u0026#39;, ]) -\u0026gt;setDefaults([ \u0026#39;route_params\u0026#39; =\u0026gt; [], ]) -\u0026gt;setAllowedTypes(\u0026#39;route\u0026#39;, \u0026#39;string\u0026#39;) -\u0026gt;setAllowedTypes(\u0026#39;route_params\u0026#39;, \u0026#39;array\u0026#39;); } } Then you need to create template so it can render nicely in your grid.\n{# mymodule/views/PrestaShop/Admin/Common/Grid/Actions/Row/my_specific.html.twig #}{# This button should be used with LinkRowActionExtension grid extension in Javascript #}\u0026lt;a class=\u0026#34;{{ class }}\u0026#34; href=\u0026#34;{{ path(action.options.route, action.options.route_params ) }}\u0026#34; \u0026gt; {{ action.name }}\u0026lt;/a\u0026gt; Last thing is to add your newly created Row action to Grid\u0026rsquo;s RowActionCollection and then it should be available in your Grid!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-search-form/in-1-7-5/",
	"title": "How to work with the Search Form in 1.7.5",
	"tags": [],
	"description": "",
	"content": "How to work with the Search Form The grid component allows to filter its content, to manage the filtering you will need to define the following elements:\n GridDefinition::getFilters Filters class Controllers:  Search action List action Reset filter action    Add Filters into GridDefinition \u0026lt;?php final class EmailLogsDefinitionFactory extends AbstractGridDefinitionFactory { /** * @param string $resetActionUrl * @param string $redirectionUrl */ public function __construct($resetActionUrl, $redirectionUrl) { $this-\u0026gt;resetActionUrl = $resetActionUrl; $this-\u0026gt;redirectionUrl = $redirectionUrl; } /** * {@inheritdoc} */ protected function getId() { return \u0026#39;email_logs\u0026#39;; } ... /** * {@inheritdoc} */ protected function getFilters() { return (new FilterCollection()) -\u0026gt;add((new Filter(\u0026#39;id_meta\u0026#39;, TextType::class)) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, ]) -\u0026gt;setAssociatedColumn(\u0026#39;id_meta\u0026#39;) ) -\u0026gt;add((new Filter(\u0026#39;page\u0026#39;, TextType::class)) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, ]) -\u0026gt;setAssociatedColumn(\u0026#39;page\u0026#39;) ) -\u0026gt;add((new Filter(\u0026#39;title\u0026#39;, TextType::class)) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, ]) -\u0026gt;setAssociatedColumn(\u0026#39;title\u0026#39;) ) -\u0026gt;add((new Filter(\u0026#39;url_rewrite\u0026#39;, TextType::class)) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, ]) -\u0026gt;setAssociatedColumn(\u0026#39;url_rewrite\u0026#39;) ) -\u0026gt;add((new Filter(\u0026#39;actions\u0026#39;, SearchAndResetType::class)) -\u0026gt;setTypeOptions([ \u0026#39;attr\u0026#39; =\u0026gt; [ \u0026#39;data-url\u0026#39; =\u0026gt; $this-\u0026gt;resetActionUrl, \u0026#39;data-redirect\u0026#39; =\u0026gt; $this-\u0026gt;redirectionUrl, ], ]) -\u0026gt;setAssociatedColumn(\u0026#39;actions\u0026#39;) ) ; } ... } And here is the service definition associated\nprestashop.core.grid.definition.factory.email_logs:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\EmailLogsDefinitionFactory\u0026#39;parent:\u0026#39;prestashop.core.grid.definition.factory.abstract_grid_definition\u0026#39;arguments:- \u0026#34;@=service(\u0026#39;router\u0026#39;).generate(\u0026#39;admin_common_reset_search\u0026#39;, {\u0026#39;controller\u0026#39;: \u0026#39;email\u0026#39;, \u0026#39;action\u0026#39;: \u0026#39;index\u0026#39;})\u0026#34;- \u0026#34;@=service(\u0026#39;router\u0026#39;).generate(\u0026#39;admin_emails_index\u0026#39;)\u0026#34;public:trueThe filters types In the filters collection you define all the available filters (which will match your grid columns), you can define a specific type depending on the column. You can basically use any Symfony form type (including your custom ones) and PrestaShop provides a few filter types that might be useful to you.\nFilters class You need to define a Filters class linked to your Grid, it will allow you to define the default filters and sorting values. It will also make your list action simpler as PrestaShop provides a parameter resolver responsible of automatically create and fill a Filters object.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Search\\Filters; /** * Class EmailLogsFilter defines default filters for Email logs grid. */ final class EmailLogsFilter extends Filters { /** * {@inheritdoc} */ public static function getDefaults() { return [ \u0026#39;limit\u0026#39; =\u0026gt; 50, \u0026#39;offset\u0026#39; =\u0026gt; 0, \u0026#39;orderBy\u0026#39; =\u0026gt; \u0026#39;id_mail\u0026#39;, \u0026#39;sortOrder\u0026#39; =\u0026gt; \u0026#39;desc\u0026#39;, \u0026#39;filters\u0026#39; =\u0026gt; [], ]; } } Controller actions The Grid filtering workflow is divided into three controllers:\n search action: it parses the filters from the POST request, then redirects to the list action list action: it parses the filters from GET request, persists them into database and finally renders the grid reset action: to clean the persisted filters and reset to the default ones  Search action \u0026lt;?php class EmailController extends FrameworkBundleAdminController { ... /** * @AdminSecurity(\u0026#34;is_granted(\u0026#39;read\u0026#39;, request.get(\u0026#39;_legacy_controller\u0026#39;))\u0026#34;, message=\u0026#34;Access denied.\u0026#34;) * * @param Request $request * * @return RedirectResponse */ public function searchAction(Request $request) { $definitionFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.definition.factory.email_logs\u0026#39;); $emailLogsDefinition = $definitionFactory-\u0026gt;getDefinition(); $gridFilterFormFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.filter.form_factory\u0026#39;); $filtersForm = $gridFilterFormFactory-\u0026gt;create($emailLogsDefinition); $filtersForm-\u0026gt;handleRequest($request); $filters = []; if ($filtersForm-\u0026gt;isSubmitted()) { $filters = $filtersForm-\u0026gt;getData(); } return $this-\u0026gt;redirectToRoute(\u0026#39;admin_emails_index\u0026#39;, [\u0026#39;filters\u0026#39; =\u0026gt; $filters]); } ... } # Routingadmin_emails_search:path:/methods:[POST]defaults:_controller:\u0026#39;PrestaShopBundle:Admin\\Configure\\AdvancedParameters\\Email:search\u0026#39;_legacy_controller:AdminEmailsList action Thanks to the internal parameter resolver you can directly use your Filters class as an argument in the controller. It then automatically:\n parses the potential parameters in the query and fills them into the Filters argument matches thanks to the class the filters from the database and fetch them if present persists the filters in the database  \u0026lt;?php class EmailController extends FrameworkBundleAdminController { ... /** * Show email configuration page. * * @AdminSecurity(\u0026#34;is_granted(\u0026#39;read\u0026#39;, request.get(\u0026#39;_legacy_controller\u0026#39;))\u0026#34;, message=\u0026#34;Access denied.\u0026#34;) * * @param Request $request * @param EmailLogsFilter $filters * * @return Response */ public function indexAction(Request $request, EmailLogsFilter $filters) { $emailLogsGridFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.factory.email_logs\u0026#39;); $emailLogsGrid = $emailLogsGridFactory-\u0026gt;getGrid($filters); $presentedEmailLogsGrid = $this-\u0026gt;presentGrid($emailLogsGrid); return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Configure/AdvancedParameters/Email/index.html.twig\u0026#39;, [ \u0026#39;enableSidebar\u0026#39; =\u0026gt; true, \u0026#39;emailLogsGrid\u0026#39; =\u0026gt; $presentedEmailLogsGrid, \u0026#39;help_link\u0026#39; =\u0026gt; $this-\u0026gt;generateSidebarLink($request-\u0026gt;attributes-\u0026gt;get(\u0026#39;_legacy_controller\u0026#39;)), ]); } ... } Reset action Last action is used to reset the persisted filters and your grid filtering/sorting. This action is the same for nearly all grids so PrestaShop provides a common controller to manage it, and you actually already set it via the grid definition.\nIt is defined in the service definition, it uses the admin_common_reset_search route and use email/index as keys to match the controller/action.\nprestashop.core.grid.definition.factory.email_logs:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\EmailLogsDefinitionFactory\u0026#39;parent:\u0026#39;prestashop.core.grid.definition.factory.abstract_grid_definition\u0026#39;arguments:- \u0026#34;@=service(\u0026#39;router\u0026#39;).generate(\u0026#39;admin_common_reset_search\u0026#39;, {\u0026#39;controller\u0026#39;: \u0026#39;email\u0026#39;, \u0026#39;action\u0026#39;: \u0026#39;index\u0026#39;})\u0026#34;- \u0026#34;@=service(\u0026#39;router\u0026#39;).generate(\u0026#39;admin_emails_index\u0026#39;)\u0026#34;public:true"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/advanced-use/image-management/",
	"title": "Image management",
	"tags": [],
	"description": "",
	"content": "Image management PrestaShop manages images via the image resource, and several other resources use it as well to manage their own images. There are several types of images available, which can all be accessed via their respective API:\n   Image type API url     General shop images /api/images/general   Product images /api/images/products   Category images /api/images/categories   Customization images /api/images/customizations   Manufacturer images /api/images/manufacturers   Supplier images /api/images/suppliers   Store images /api/images/stores    If you need to get a list of image types you can also use the /api/images API which lists all of them. The image format Except for the general shop images, all the images API will return the same kind of format:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;image_types\u0026gt; \u0026lt;image_type id=\u0026#34;5\u0026#34; name=\u0026#34;large_default\u0026#34; xlink:href=\u0026#34;http://example.com/api/image_types/5\u0026#34;/\u0026gt; \u0026lt;image_type id=\u0026#34;3\u0026#34; name=\u0026#34;medium_default\u0026#34; xlink:href=\u0026#34;http://example.com/api/image_types/3\u0026#34;/\u0026gt; \u0026lt;image_type id=\u0026#34;2\u0026#34; name=\u0026#34;small_default\u0026#34; xlink:href=\u0026#34;http://example.com/api/image_types/2\u0026#34;/\u0026gt; \u0026lt;/image_types\u0026gt; \u0026lt;images\u0026gt; \u0026lt;image id=\u0026#34;2\u0026#34; xlink:href=\u0026#34;http://example.com/api/images/manufacturers/2\u0026#34;/\u0026gt; \u0026lt;image id=\u0026#34;1\u0026#34; xlink:href=\u0026#34;http://example.com/api/images/manufacturers/1\u0026#34;/\u0026gt; \u0026lt;/images\u0026gt; \u0026lt;/prestashop\u0026gt;  a list of image types related to the resource; each one defines the expected image size for each resource (in this example we can see that manufacturers have three image sizes: small, medium and large) a list of images for this kind of resource  Using webservice lib You can get the information about a specific resource\u0026rsquo;s images using our Webservice library:\n\u0026lt;?php try { $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); $xml = $webService-\u0026gt;get([\u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;images/products\u0026#39;]); $imageTypes = $xml-\u0026gt;image_types-\u0026gt;children(); $images = $xml-\u0026gt;images-\u0026gt;children(); } catch (PrestaShopWebserviceException $e) { echo \u0026#39;Error:\u0026#39; . $e-\u0026gt;getMessage(); } GET image The GET image API allows you to request an image associated to a resource. The response is the image itself.\nDefault behaviour For most resources the url format is as follows: /api/images/{resource}/{resource_id}. You can use an additional parameter by appending the image format /api/images/{resource}/{resource_id}/{image_type}. In both cases, placeholders are:\n resource: the resource name (ex: categories, manufacturers, \u0026hellip;) resource_id: the integer ID to identify the resource image_type: the name of the image type requested (ex: small_default, category_default, \u0026hellip;)  This will return the target image as a response.\nGeneral shop The general image API only returns a list of images related to the shop configuration like the header or icon image. The /api/images/general returns the list of image types which you can then append to the URL (much like the image type in the default use case).\nFor example /api/images/general/header returns the header image.\nProduct images The product images API behaves mostly like the default ones, except that products may have multiple images, so the API contains an extra parameter for the image ID /api/images/products/{product_id}/{image_id}\nAdding a new image to a product We only refer to product here as it\u0026rsquo;s the only resource that has multiple images. For other resources we only update its image. Only one image is posted to the API, this image will then be resized into all the formats associated to the resource.\nUsing an HTML form \u0026lt;form enctype=\u0026#34;multipart/form-data\u0026#34; method=\u0026#34;POST\u0026#34; action=\u0026#34;http://ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT@example.com/api/images/products/1\u0026#34;\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Add image for products No 1\u0026lt;/legend\u0026gt; \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Execute\u0026#34;\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; Using cURL To create a new image we are going to use the /images/products API. We won\u0026rsquo;t use the PrestaShopWebservice class here, but a cURL request.\n\u0026lt;?php $urlImage = \u0026#39;http://example.com/api/images/products/10/\u0026#39;; $key = \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;; //Here you set the path to the image you need to upload $image_path = \u0026#39;/path/to/the/image.jpg\u0026#39;; $image_mime = \u0026#39;image/jpg\u0026#39;; $args[\u0026#39;image\u0026#39;] = new CurlFile($image_path, $image_mime); $ch = curl_init(); curl_setopt($ch, CURLOPT_HEADER, 1); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLINFO_HEADER_OUT, 1); curl_setopt($ch, CURLOPT_URL, $urlImage); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_USERPWD, $key.\u0026#39;:\u0026#39;); curl_setopt($ch, CURLOPT_POSTFIELDS, $args); $result = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if (200 == $httpCode) { echo \u0026#39;Product image was successfully created.\u0026#39;; } Update the image of a resource It\u0026rsquo;s almost the same principle as adding an image except the API expects a PUT method. Since not all clients can handle this HTTP method, we can add a parameter ps_method in the URL to simulate it (recommended workaround). Using an HTML form \u0026lt;form action=\u0026#34;http://ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT@example.com/api/images/categories/2\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; \u0026lt;fieldset\u0026gt; \u0026lt;legend\u0026gt;Update category image 2\u0026lt;/legend\u0026gt; \u0026lt;input name=\u0026#34;ps_method\u0026#34; value=\u0026#34;PUT\u0026#34; type=\u0026#34;hidden\u0026#34;\u0026gt; \u0026lt;input name=\u0026#34;image\u0026#34; type=\u0026#34;file\u0026#34;\u0026gt; \u0026lt;input value=\u0026#34;Execute\u0026#34; type=\u0026#34;submit\u0026#34;\u0026gt; \u0026lt;/fieldset\u0026gt; \u0026lt;/form\u0026gt; Using cURL \u0026lt;?php // DON\u0026#39;T FORGET to add the ps_method parameter $urlImage = \u0026#39;http://example.com/api/images/categories/2/?ps_method=PUT\u0026#39;; $key = \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;; //Here you set the path to the image you need to upload $image_path = \u0026#39;/path/to/the/image.jpg\u0026#39;; $image_mime = \u0026#39;image/jpg\u0026#39;; $args[\u0026#39;image\u0026#39;] = new CurlFile($image_path, $image_mime); $ch = curl_init(); curl_setopt($ch, CURLOPT_HEADER, 1); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLINFO_HEADER_OUT, 1); curl_setopt($ch, CURLOPT_URL, $urlImage); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_USERPWD, $key.\u0026#39;:\u0026#39;); curl_setopt($ch, CURLOPT_POSTFIELDS, $args); $result = curl_exec($ch); $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if (200 == $httpCode) { echo \u0026#39;Category image was successfully updated.\u0026#39;; } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/hooks/list-of-hooks/",
	"title": "List of hooks",
	"tags": [],
	"description": "",
	"content": "List of hooks in PrestaShop 1.7 Update notes A couple of hooks were modified between 1.7.0.x and 1.7.1.x.\n actionDeleteProductInCartAfter has been divided into two hooks:  actionObjectProductInCartDeleteBefore. actionObjectProductInCartDeleteAfter.   displayProductButtons has been renamed into displayProductAdditionalInfo.\nDon’t worry, we kept an alias :)  Full list Search hooks No hooks found\n   action\u0026lt;AdminControllerClassName\u0026gt;\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt; Located in: /classes/controller/AdminController.php\nParameters:\n\u0026lt;?php array( \u0026#39;controller\u0026#39; =\u0026gt; (AdminController), \u0026#39;return\u0026#39; =\u0026gt; (mixed) );  action\u0026lt;AdminControllerClassName\u0026gt;\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any \u0026lt;AdminController\u0026gt; Located in: /classes/controller/AdminController.php\nParameters:\n\u0026lt;?php array( \u0026#39;controller\u0026#39; =\u0026gt; (AdminController) );  action\u0026lt;AdminControllerClassName\u0026gt;FormModifier Called when rendering a form in any \u0026lt;AdminController\u0026gt; Located in: /classes/controller/AdminController.php\nParameters:\n\u0026lt;?php array( \u0026#39;object\u0026#39; =\u0026gt; \u0026amp;(ObjectModel), \u0026#39;fields\u0026#39; =\u0026gt; \u0026amp;(array), \u0026#39;fields_value\u0026#39; =\u0026gt; \u0026amp;(array), \u0026#39;form_vars\u0026#39; =\u0026gt; \u0026amp;(array), );  action\u0026lt;AdminControllerClassName\u0026gt;ListingFieldsModifier Located in: /classes/controller/AdminController.php Parameters:\n\u0026lt;?php array( \u0026#39;select\u0026#39; =\u0026gt; \u0026amp;(string), \u0026#39;join\u0026#39; =\u0026gt; \u0026amp;(string), \u0026#39;where\u0026#39; =\u0026gt; \u0026amp;(string), \u0026#39;group_by\u0026#39; =\u0026gt; \u0026amp;(string), \u0026#39;order_by\u0026#39; =\u0026gt; \u0026amp;(string), \u0026#39;order_way\u0026#39; =\u0026gt; \u0026amp;(string), \u0026#39;fields\u0026#39; =\u0026gt; \u0026amp;(array) );  action\u0026lt;AdminControllerClassName\u0026gt;OptionsModifier Located in: /classes/controller/AdminController.php Parameters:\n\u0026lt;?php array( \u0026#39;options\u0026#39; =\u0026gt; \u0026amp;(array), \u0026#39;option_vars\u0026#39; =\u0026gt; \u0026amp;(array), );  actionAdmin\u0026lt;Action\u0026gt;After Called after performing \u0026lt;Action\u0026gt; in any admin controller Located in: /classes/controller/AdminController.php\nParameters:\n\u0026lt;?php array( \u0026#39;controller\u0026#39; =\u0026gt; (AdminController), \u0026#39;return\u0026#39; =\u0026gt; (mixed) );  actionAdmin\u0026lt;Action\u0026gt;Before Called before performing \u0026lt;Action\u0026gt; in any admin controller Located in: /classes/controller/AdminController.php\nParameters:\n\u0026lt;?php array( \u0026#39;controller\u0026#39; =\u0026gt; (AdminController) );  actionAdminControllerSetMedia Located in: /classes/controller/AdminController.php Parameters: N/A\n actionAdminLoginControllerSetMedia Called after adding media to admin login page header Located in: /controllers/admin/AdminLoginController.php\nParameters: N/A\n actionAdminMetaAfterWriteRobotsFile Called after generating the robots.txt file Located in: /classes/Tools.php\nParameters:\n\u0026lt;?php array( \u0026#39;rb_data\u0026#39; =\u0026gt; (array) File data, \u0026#39;write_fd\u0026#39; =\u0026gt; \u0026amp;(resource) File handle );  actionAdminMetaBeforeWriteRobotsFile Called before generating the robots.txt file Located in: /classes/Tools.php\nParameters:\n\u0026lt;?php array( \u0026#39;rb_data\u0026#39; =\u0026gt; \u0026amp;(array) File data );  actionAdminMetaSave Called after saving the configuration in AdminMeta Located in: /controllers/admin/AdminMetaController.php\nParameters: N/A\n actionAdminOrdersTrackingNumberUpdate Located in: /controllers/admin/AdminOrdersController.php Parameters:\n\u0026lt;?php array( \u0026#39;order\u0026#39; =\u0026gt; (Order), \u0026#39;customer\u0026#39; =\u0026gt; (Customer), \u0026#39;carrier\u0026#39; =\u0026gt; (Carrier) );  actionAdminProductsListingFieldsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php Parameters:\n\u0026lt;?php array( \u0026#39;_ps_version\u0026#39; =\u0026gt; (string) PrestaShop version, \u0026#39;sql_select\u0026#39; =\u0026gt; \u0026amp;(array), \u0026#39;sql_table\u0026#39; =\u0026gt; \u0026amp;(array), \u0026#39;sql_where\u0026#39; =\u0026gt; \u0026amp;(array), \u0026#39;sql_order\u0026#39; =\u0026gt; \u0026amp;(array), \u0026#39;sql_limit\u0026#39; =\u0026gt; \u0026amp;(string), );  actionAdminProductsListingResultsModifier Located in: /src/Adapter/Product/AdminProductDataProvider.php Parameters:\n\u0026lt;?php array( \u0026#39;_ps_version\u0026#39; =\u0026gt; (string) PrestaShop version, \u0026#39;products\u0026#39; =\u0026gt; \u0026amp;(PDOStatement), \u0026#39;total\u0026#39; =\u0026gt; (int), );  actionAdminThemesControllerUpdate_optionsAfter Located in: /controllers/admin/AdminThemesController.php Parameters: N/A\n actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before Located in: /classes/controller/Controller.php Parameters:\n\u0026lt;?php array( \u0026#39;value\u0026#39; =\u0026gt; (string) );  actionAjaxDieBefore (deprecated since 1.6.1.1) Located in: /classes/controller/Controller.php\n actionAttributeCombinationDelete Located in: /classes/Combination.php actionAttributeCombinationSave Located in: /classes/Combination.php actionAttributeDelete Called when deleting an attributes features value Located in: /classes/Attribute.php\n actionAttributeGroupDelete Called while deleting an attributes group Located in: /classes/AttributeGroup.php\n actionAttributeGroupSave Called while saving an attributes group Located in: /classes/AttributeGroup.php\n actionAttributeSave Called while saving an attributes features value Located in: /classes/Attribute.php\n actionAuthentication After successful customer authentication Located in: /classes/form/CustomerLoginForm.php\n actionAuthenticationBefore Before a customer successfully signs in Located in: /classes/form/CustomerLoginForm.php\n actionBeforeAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt; (deprecated since 1.6.1.1) → actionAjaxDie\u0026lt;ControllerName\u0026gt;\u0026lt;Method\u0026gt;Before Located in: /classes/controller/Controller.php\n actionBeforeCartUpdateQty (deprecated since 1.6.1.1) → actionCartUpdateQuantityBefore Located in: /classes/Cart.php\n actionCarrierProcess Carrier process Located in: /classes/checkout/CheckoutDeliveryStep.php\n actionCarrierUpdate This hook is called when a carrier is updated Located in:\n /controllers/admin/AdminCarrierWizardController.php /controllers/admin/AdminCarriersController.php   actionCartSave After a product is added to the cart or if the cart\u0026rsquo;s content is modified Located in: /classes/Cart.php\n actionCartSummary Located in: /classes/Cart.php actionCartUpdateQuantityBefore Located in: /classes/Cart.php actionCategoryAdd Invoked when a category is created Located in: /classes/Category.php\n actionCategoryDelete Invoked when a category is deleted Located in: /classes/Category.php\n actionCategoryUpdate Invoked when a category is modified Located in:\n /classes/Category.php /controllers/admin/AdminProductsController.php   actionClearCache Available since: 1.7.1  Invoked when the smarty cache is cleared\nLocated in: /classes/Tools.php\n actionClearCompileCache Available since: 1.7.1  Invoked when the smarty compile cache is cleared\nLocated in: /classes/Tools.php\n actionClearSf2Cache Available since: 1.7.1  Invoked when the Symfony cache is cleared\nLocated in: /classes/Tools.php\n actionCustomerAccountAdd Invoked when a new customer creates an account successfully Located in: /classes/form/CustomerPersister.php\nParameters:\n\u0026lt;?php array( \u0026#39;newCustomer\u0026#39; =\u0026gt; (object) Customer object );  actionCustomerAccountUpdate Invoked when a customer updates its account successfully Located in: /classes/form/CustomerPersister.php\n actionCustomerAddGroups Located in: /classes/Customer.php actionCustomerBeforeUpdateGroup Located in: /classes/Customer.php actionCustomerLogoutAfter Located in: /classes/Customer.php actionCustomerLogoutBefore Located in: /classes/Customer.php actionDeliveryPriceByPrice Located in: /classes/Carrier.php actionDeliveryPriceByWeight Located in: /classes/Carrier.php actionDispatcher Located in: /classes/Dispatcher.php actionDispatcherAfter Available since: 1.7.1  This hook is called at the end of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDispatcherBefore Available since: 1.7.1  This hook is called at the beginning of the dispatch method of the Dispatcher\nLocated in: /classes/Dispatcher.php\n actionDownloadAttachment Located in: /controllers/front/AttachmentController.php actionEmailAddAfterContent Add extra content after mail content This hook is called just after fetching mail template Located in: /classes/Mail.php\n actionEmailAddBeforeContent Add extra content before mail content This hook is called just before fetching mail template Located in: /classes/Mail.php\n actionEmailSendBefore Before sending an email This hook is used to filter the content or the metadata of an email before sending it or even prevent its sending Located in: /classes/Mail.php\n actionFeatureDelete This hook is called while deleting an attributes features Located in: /classes/Feature.php\n actionFeatureSave This hook is called while saving an attributes features Located in: /classes/Feature.php\n actionFeatureValueDelete This hook is called while deleting an attributes features value Located in: /classes/FeatureValue.php\n actionFeatureValueSave This hook is called while saving an attributes features value Located in: /classes/FeatureValue.php\n actionFrontControllerSetMedia Located in: /classes/controller/FrontController.php actionFrontControllerSetVariables Available since: 1.7.5  Add variables to javascript object that is available in Front Office. These are also available in smarty templates in modules.your_module_name.\nLocated in: /classes/controller/FrontController.php\nParameters since 1.7.7 \n\u0026lt;?php array( \u0026#39;templateVars\u0026#39; =\u0026gt; \u0026amp;(array) ); Example usage:\nYour hook implementation should return array of values that will be added to prestashop object.\n\u0026lt;?php public function hookActionFrontControllerSetVariables() { return [ \u0026#39;hello_text\u0026#39; =\u0026gt; \u0026#39;Hello world\u0026#39;, ]; } In Front Office you can access it globally using:\nconsole.log(prestashop.modules.your_module_name.hello_text); \u0026#34;Hello world\u0026#34;  actionGetExtraMailTemplateVars Located in: /classes/Mail.php actionGetIDZoneByAddressID Located in: /classes/Address.php actionGetProductPropertiesAfter Located in: /classes/Product.php actionGetProductPropertiesBefore Located in: /classes/Product.php actionHtaccessCreate After .htaccess creation Located in: /classes/Tools.php\n actionInvoiceNumberFormatted Located in: /classes/order/OrderInvoice.php actionModuleInstallAfter Located in: /classes/module/Module.php actionModuleInstallBefore Located in: /classes/module/Module.php actionModuleRegisterHookAfter Located in: /classes/Hook.php actionModuleRegisterHookBefore Located in: /classes/Hook.php actionModuleUnRegisterHookAfter Located in: /classes/Hook.php actionModuleUnRegisterHookBefore Located in: /classes/Hook.php actionObject Located in: /classes/ObjectModel.php actionObjectAddAfter Located in: /classes/ObjectModel.php actionObjectAddBefore Located in: /classes/ObjectModel.php actionObjectAttributeAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php actionObjectAttributeGroupAddBefore Located in: /controllers/admin/AdminAttributesGroupsController.php actionObjectDeleteAfter Located in: /classes/ObjectModel.php actionObjectDeleteBefore Located in: /classes/ObjectModel.php actionObject\u0026lt;ObjectName\u0026gt;AddBefore Located in: /classes/ObjectModel.php actionObject\u0026lt;ObjectName\u0026gt;AddAfter Located in: /classes/ObjectModel.php actionObject\u0026lt;ObjectName\u0026gt;UpdateBefore Located in: /classes/ObjectModel.php actionObject\u0026lt;ObjectName\u0026gt;UpdateAfter Located in: /classes/ObjectModel.php actionObject\u0026lt;ObjectName\u0026gt;DeleteBefore Located in: /classes/ObjectModel.php actionObject\u0026lt;ObjectName\u0026gt;DeleteAfter Located in: /classes/ObjectModel.php actionObjectProductInCartDeleteAfter Available since: 1.7.1  This hook is called after a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectProductInCartDeleteBefore Available since: 1.7.1  This hook is called before a product is removed from a cart\nLocated in: /controllers/front/CartController.php\n actionObjectUpdateAfter Located in: /classes/ObjectModel.php actionObjectUpdateBefore Located in: /classes/ObjectModel.php actionOnImageCutAfter Located in: /classes/ImageManager.php actionOnImageResizeAfter Located in: /classes/ImageManager.php actionOrderEdited This hook is called when an order is edited Located in: /controllers/admin/AdminOrdersController.php\nParameters:\n\u0026lt;?php array( \u0026#39;order\u0026#39; =\u0026gt; (object) Order );  actionOrderHistoryAddAfter This hook is displayed when a customer returns a product Located in: /classes/order/OrderHistory.php\n actionOrderReturn Called after a new Order Return has been made. Located in: /controllers/front/OrderFollowController.php\nParameters:\n\u0026lt;?php array( \u0026#39;orderReturn\u0026#39; =\u0026gt; (object) OrderReturn );  actionOrderSlipAdd Called when the quantity of a product changes in an order. WARNING: only invoked when a product is actually removed from an order. Located in: /controllers/admin/AdminOrdersController.php\nParameters:\n\u0026lt;?php array( \u0026#39;order\u0026#39; =\u0026gt; Order, \u0026#39;productList\u0026#39; =\u0026gt; array( (int) product ID 1, (int) product ID 2, ..., (int) product ID n ), \u0026#39;qtyList\u0026#39; =\u0026gt; array( (int) quantity 1, (int) quantity 2, ..., (int) quantity n ) ); The order of IDs and quantities is important!  actionOrderStatusPostUpdate Called after the status of an order changes. Located in: /classes/order/OrderHistory.php\nParameters:\n\u0026lt;?php array( \u0026#39;newOrderStatus\u0026#39; =\u0026gt; (object) OrderState, \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  actionOrderStatusUpdate Called before the status of an order changes. Located in: /classes/order/OrderHistory.php\nParameters:\n\u0026lt;?php array( \u0026#39;newOrderStatus\u0026#39; =\u0026gt; (object) OrderState, \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  actionOutputHTMLBefore Available since: 1.7.1  Before HTML output This hook is used to filter the whole HTML page before it is rendered (only front)\nLocated in: /classes/controller/FrontController.php\n actionPasswordRenew Located in: /controllers/front/PasswordController.php actionPaymentCCAdd Payment CC added Located in: /classes/order/OrderPayment.php\nParameters:\n\u0026lt;?php array( \u0026#39;paymentCC\u0026#39; =\u0026gt; (object) OrderPayment object );  actionPaymentConfirmation Called after a payment has been validated Located in: /classes/order/OrderHistory.php\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  actionPDFInvoiceRender Located in:  /classes/PaymentModule.php /classes/order/OrderHistory.php /controllers/admin/AdminPdfController.php /controllers/front/PdfInvoiceController.php   actionProductAdd This hook is displayed after a product is created Located in: /controllers/admin/AdminProductsController.php\n actionProductAttributeDelete This hook is displayed when a product\u0026rsquo;s attribute is deleted Located in: /classes/Product.php\n actionProductAttributeUpdate This hook is displayed when a product\u0026rsquo;s attribute is updated Located in: /classes/Product.php\n actionProductCancel This hook is called when you cancel a product in an order Located in: /controllers/admin/AdminOrdersController.php\n actionProductCoverage Located in: /classes/stock/StockManager.php actionProductDelete This hook is called when a product is deleted Located in: /classes/Product.php\n actionProductOutOfStock This hook displays new action buttons if a product is out of stock Located in:\n /themes/classic/templates/catalog/_partials/product-details.tpl /themes/classic/templates/catalog/product.tpl   actionProductSave This hook is called while saving products Located in: /classes/Product.php\n actionProductSearchAfter Available since: 1.7.1  This hook is called after the product search. Parameters are already filter\nLocated in: /classes/controller/ProductListingFrontController.php\n actionProductUpdate This hook is displayed after a product has been updated Located in:\n /classes/Product.php /controllers/admin/AdminProductsController.php   actionProductFlagsModifier Available since: 1.7.6  Add and remove product labels available on product list\nLocated in: src/Adapter/Presenter/Product/ProductLazyArray.php\nParameters:\n\u0026lt;?php array( \u0026#39;flags\u0026#39; =\u0026gt; (array) \u0026amp;$flags, \u0026#39;product\u0026#39; =\u0026gt; (Product) $product, ),  actionSearch Available since: 1.7.1  After the search in the store. Includes both instant and normal search.\nLocated in: /src/Adapter/Search/SearchProductSearchProvider.php\nParameters:\n\u0026lt;?php array( \u0026#39;expr\u0026#39; =\u0026gt; (string) Search query, \u0026#39;total\u0026#39; =\u0026gt; (int) Amount of search results );  actionSetInvoice Located in: /classes/order/Order.php Parameters: \u0026lt;?php array( \u0026#39;Order\u0026#39; =\u0026gt; order object, \u0026#39;OrderInvoice\u0026#39; =\u0026gt; order invoice object, \u0026#39;use_existing_payment\u0026#39; =\u0026gt; (bool) );  actionShopDataDuplication After duplicating a shop. Located in: /classes/shop/Shop.php\nParameters:\n\u0026lt;?php array( \u0026#39;old_id_shop\u0026#39; =\u0026gt; (int) Old shop ID, \u0026#39;new_id_shop\u0026#39; =\u0026gt; (int) New shop ID );  actionSubmitAccountBefore Available since: 1.7.1  Located in: /controllers/front/AuthController.php\n actionUpdateLangAfter Available since: 1.7.1  Update \u0026ldquo;lang\u0026rdquo; tables after adding or updating a language\nLocated in: /classes/Language.php\n actionUpdateQuantity After updating the quantity of a product. Quantity is updated only when a customer effectively places their order Located in: /classes/stock/StockAvailable.php\nParameters:\n\u0026lt;?php array( \u0026#39;id_product\u0026#39; =\u0026gt; (int) Product ID, \u0026#39;id_product_attribute\u0026#39; =\u0026gt; (int) Product attribute ID, \u0026#39;quantity\u0026#39; =\u0026gt; (int) New product quantity );  actionValidateCustomerAddressForm This hook is called when a customer submit its address form Located in: /classes/form/CustomerAddressForm.php\nParameters:\n\u0026lt;?php array( \u0026#39;form\u0026#39; =\u0026gt; (object) CustomerAddressForm );  actionValidateOrder After an order has been validated. Doesn\u0026rsquo;t necessarily have to be paid. Located in: /classes/PaymentModule.php\nParameters:\n\u0026lt;?php array( \u0026#39;cart\u0026#39; =\u0026gt; (object) Cart, \u0026#39;order\u0026#39; =\u0026gt; (object) Order, \u0026#39;customer\u0026#39; =\u0026gt; (object) Customer, \u0026#39;currency\u0026#39; =\u0026gt; (object) Currency, \u0026#39;orderStatus\u0026#39; =\u0026gt; (object) OrderState );  actionWatermark After a watermark has been added to an image. Located in:\n /classes/FileUploader.php /classes/webservice/WebserviceSpecificManagementImages.php /controllers/admin/AdminImportController.php /controllers/admin/AdminProductsController.php  Parameters:\n\u0026lt;?php array( \u0026#39;id_image\u0026#39; =\u0026gt; (int) Image ID, \u0026#39;id_product\u0026#39; =\u0026gt; (int) Product ID );  actionGetAdminOrderButtons Available since: 1.7.7  This hook is used to generate the buttons collection on the order view page (see ActionsBarButtonsCollection)\nLocated in: /src/PrestaShopBundle/Controller/Admin/Sell/Order/OrderController.php\nParameters:\n\u0026lt;?php array( \u0026#39;controller\u0026#39; =\u0026gt; (OrderController) Symfony controller, \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID, \u0026#39;actions_bar_buttons_collection\u0026#39; =\u0026gt; (ActionsBarButtonsCollection) Collection of ActionsBarButtonInterface );  actionAdminAdminPreferencesControllerPostProcessBefore Available since: 1.7.7  This hook is called on Admin Preferences post-process before processing the form\nLocated in: /src/PrestaShopBundle/Controller/Admin/Configure/AdvancedParameters/AdministrationController.php\nParameters:\n\u0026lt;?php [ \u0026#39;controller\u0026#39; =\u0026gt; (AdministrationController) Symfony controller, ]  additionalCustomerFormFields Add fields to the Customer form This hook returns an array of FormFields to add them to the customer registration form Located in: /classes/form/CustomerFormatter.php\n addWebserviceResources This hook is called when webservice resources list in webservice controller Located in: /classes/webservice/WebserviceRequest.php\n dashboardData Located in: /controllers/admin/AdminDashboardController.php dashboardZoneOne Located in: /controllers/admin/AdminDashboardController.php dashboardZoneTwo Located in: /controllers/admin/AdminDashboardController.php displayAdminAfterHeader Located in:  admin-dev/themes/default/template/header.tpl admin-dev/themes/new-theme/template/layout.tpl   displayAdminCustomers Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office Located in: admin-dev/themes/default/template/controllers/customers/helpers/view/view.tpl\nParameters:\n\u0026lt;?php array( \u0026#39;id_customer\u0026#39; = (int) Customer ID );  displayAdminCustomersAddressesItemAction Available since: 1.7.3  Display new elements in the Back Office, tab AdminCustomers, Addresses actions. This hook launches modules when the Addresses list into the AdminCustomers tab is displayed in the Back Office\nLocated in: /admin-dev/themes/default/template/controllers/customers/helpers/view/view.tpl\nParameters:\n\u0026lt;?php array( \u0026#39;id_address\u0026#39; =\u0026gt; (int) Address ID )  displayAdminEndContent Available since: 1.7.4  Administration end of content. This hook is displayed at the end of the main content, before the footer\nLocated in:\n /admin-dev/themes/default/template/footer.tpl /admin-dev/themes/new-theme/template/layout.tpl   displayAdminForm Located in: admin-dev/themes/default/template/helpers/form/form.tpl displayAdminListAfter Located in:  admin-dev/themes/default/template/controllers/countries/helpers/list/list_footer.tpl admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_footer.tpl admin-dev/themes/default/template/helpers/list/list_footer.tpl   displayAdminListBefore Located in:  admin-dev/themes/default/template/controllers/tax_rules/helpers/list/list_header.tpl admin-dev/themes/default/template/helpers/list/list_header.tpl   displayAdminLogin Located in: admin-dev/themes/default/template/controllers/login/content.tpl displayAdminNavBarBeforeEnd Display new elements in the Back Office, tab AdminCustomers This hook launches modules when the AdminCustomers tab is displayed in the Back Office Located in:\n admin-dev/themes/default/template/nav.tpl admin-dev/themes/new-theme/template/components/layout/nav_bar.tpl   displayAdminOptions Located in: admin-dev/themes/default/template/helpers/options/options.tpl displayAdminOrder Display new elements in the Back Office, tab AdminOrder This hook launches modules when the AdminOrder tab is displayed in the Back Office Located in:\n - admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl - src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig  Parameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; = (int) Order ID );  displayAdminOrderContentOrder (removed in 1.7.7 in favor of) → displayAdminOrderTabContent Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderContentShip (removed in 1.7.7 in favor of) → displayAdminOrderTabContent Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel content\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderTabContent Available since: 1.7.7  This hook displays new tab contents on the order view page\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/Blocks/View/details.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayAdminOrderLeft (removed in 1.7.7 in favor of) → displayAdminOrderMain Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderMain Available since: 1.7.7  This hook displays content in the order view page in the main column under the details view\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayAdminOrderMainBottom Available since: 1.7.7  This hook displays content in the order view page at the bottom of the main column\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayAdminOrderRight (removed in 1.7.7 in favor of) → displayAdminOrderSide Located in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderSide Available since: 1.7.7  This hook displays content in the order view page at the end of the side column\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayAdminOrderSide Available since: 1.7.7  This hook displays content in the order view page in the side column under the customer view\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayAdminOrderSideBottom Available since: 1.7.7  This hook displays content in the order view page at the bottom of the side column\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayAdminOrderTabOrder (removed in 1.7.7 in favor of) → displayAdminOrderTabLink Display new elements in Back Office, AdminOrder, panel Order This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Order panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderTabShip (removed in 1.7.7 in favor of) → displayAdminOrderTabLink Display new elements in Back Office, AdminOrder, panel Shipping This hook launches modules when the AdminOrder tab is displayed in the Back Office and extends / override Shipping panel tabs\nLocated in: /controllers/admin/AdminOrdersController.php\n displayAdminOrderTabLink Available since: 1.7.7  This hook displays new tab links on the order view page\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/Blocks/View/details.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayAdminProductsExtra  displayAdminProductsCombinationBottom Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_combination.html.twig displayAdminProductsMainStepLeftColumnBottom Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepLeftColumnMiddle Display new elements in back office product page, left column of This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsMainStepRightColumnBottom Display new elements in back office product page, right column of This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepBottom Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsOptionsStepTop Display new elements in back office product page, Options tab This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsPriceStepBottom Display new elements in back office product page, Price tab This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsQuantitiesStepBottom Display new elements in back office product page, Quantities/Com This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/form.html.twig\n displayAdminProductsSeoStepBottom Display new elements in back office product page, SEO tab This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_seo.html.twig\n displayAdminProductsShippingStepBottom Display new elements in back office product page, Shipping tab This hook launches modules when the back office product page is displayed Located in: /src/PrestaShopBundle/Resources/views/Admin/Product/Include/form_shipping.html.twig\n displayAdminStatsModules Located in: /controllers/admin/AdminStatsTabController.php displayAdminView Located in: admin-dev/themes/default/template/helpers/view/view.tpl displayAfterBodyOpeningTag Very top of pages Use this hook for advertisement or modals you want to load first Located in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayAfterCarrier After carriers list This hook is displayed after the carrier list in Front Office Located in: /classes/checkout/CheckoutDeliveryStep.php\n displayAfterProductThumbs Available since: 1.7.1  Display extra content below product thumbs This hook displays new elements below product images ex. additional media\nLocated in: /themes/classic/templates/catalog/_partials/product-cover-thumbnails.tpl\n displayAfterThemeInstallation Located in: admin-dev/themes/default/template/controllers/themes/helpers/view/view.tpl displayAttributeForm Add fields to the form \u0026lsquo;attribute value\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute value\u0026rsquo; Located in: admin-dev/themes/default/template/controllers/attributes/helpers/form/form.tpl\n displayAttributeGroupForm Add fields to the form \u0026lsquo;attribute group\u0026rsquo; This hook adds fields to the form \u0026lsquo;attribute group\u0026rsquo; Located in: admin-dev/themes/default/template/controllers/attributes_groups/helpers/form/form.tpl\n displayBackOfficeCategory Display new elements in the Back Office, tab AdminCategories This hook launches modules when the AdminCategories tab is displayed in the Back Office Located in: /controllers/admin/AdminCategoriesController.php\n displayBackOfficeFooter (deprecated since 1.7.0.0) Displayed within the admin panel\u0026rsquo;s footer\nLocated in:\n admin-dev/themes/default/template/footer.tpl admin-dev/themes/new-theme/template/footer.tpl   displayBackOfficeHeader Displayed between the \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; tags on every Back Office page (when logged in). Located in: /classes/controller/AdminController.php\n displayBackOfficeOrderActions (deprecated since 1.7.7) → actionGetAdminOrderButtons This hook displays content in the order view page after action buttons\nSince the version 1.7.7 this hook no longer exists, an alias on the new displayAdminOrderSide exists but it is not displayed the same way, so it is recommended to use the dedicated actionGetAdminOrderButtons hook to add buttons\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayBackOfficeTop Shown above the actual content of a Back Office page Located in: /classes/controller/AdminController.php\n displayBanner Available since: 1.7.1  Located in: /themes/classic/templates/_partials/header.tpl\n displayBeforeBodyClosingTag Very bottom of pages Use this hook for your modals or any content you want to load at the very end Located in:\n /themes/classic/templates/checkout/checkout.tpl /themes/classic/templates/layouts/layout-both-columns.tpl   displayBeforeCarrier This hook is displayed before the carrier list on the Front Office Located in: /classes/checkout/CheckoutDeliveryStep.php\nParameters:\n\u0026lt;?php array( \u0026#39;carriers\u0026#39; =\u0026gt; array( array( \u0026#39;name\u0026#39; =\u0026gt; (string) Name, \u0026#39;img\u0026#39; =\u0026gt; (string) Image URL, \u0026#39;delay\u0026#39; =\u0026gt; (string) Delay text, \u0026#39;price\u0026#39; =\u0026gt; (float) Total price with tax, \u0026#39;price_tax_exc\u0026#39; =\u0026gt; (float) Total price without tax, \u0026#39;id_carrier\u0026#39; =\u0026gt; (int) intified option delivery identifier, \u0026#39;id_module\u0026#39; =\u0026gt; (int) Module ID )), \u0026#39;checked\u0026#39; =\u0026gt; (int) intified selected carriers, \u0026#39;delivery_option_list\u0026#39; =\u0026gt; array(array( 0 =\u0026gt; array( // First address  \u0026#39;12,\u0026#39; =\u0026gt; array( // First delivery option available for this address  carrier_list =\u0026gt; array( 12 =\u0026gt; array( // First carrier for this option  \u0026#39;instance\u0026#39; =\u0026gt; Carrier Object, \u0026#39;logo\u0026#39; =\u0026gt; \u0026lt;url to the carrier\u0026#39;s logo\u0026gt;, \u0026#39;price_with_tax\u0026#39; =\u0026gt; 12.4, // Example \u0026#39;price_without_tax\u0026#39; =\u0026gt; 12.4, // Example \u0026#39;package_list\u0026#39; =\u0026gt; array( 1, // Example 3, // Example ), ), ), is_best_grade =\u0026gt; true, // Does this option have the biggest grade (quick shipping) for this shipping address is_best_price =\u0026gt; true, // Does this option have the lower price for this shipping address unique_carrier =\u0026gt; true, // Does this option use a unique carrier total_price_with_tax =\u0026gt; 12.5, total_price_without_tax =\u0026gt; 12.5, position =\u0026gt; 5, // Average of the carrier position ), ), )), \u0026#39;delivery_option\u0026#39; =\u0026gt; array( \u0026#39;\u0026lt;id_address\u0026gt;\u0026#39; =\u0026gt; Delivery option, ... ) ); NOTE: intified means an array of integers \u0026lsquo;intified\u0026rsquo; by Cart::intifier\n displayCarrierExtraContent Display additional content for a carrier (e.g pickup points) This hook calls only the module related to the carrier, in order to add options when needed Located in: /classes/checkout/DeliveryOptionsFinder.php\n displayCarrierList (deprecated since 1.7.0.0) Display extra carriers in the carrier list.\nLocated in: /classes/Cart.php\nParameters:\n\u0026lt;?php array( \u0026#39;address\u0026#39; =\u0026gt; (object) Address object );  displayCartExtraProductActions Extra buttons in shopping cart This hook adds extra buttons to the product lines, in the shopping cart Located in: /themes/classic/templates/checkout/_partials/cart-detailed-product-line.tpl\n displayCartModalContent Available since: 1.7.8  Content of Add-to-cart modal This hook displays content in the middle of the window that appears after adding product to cart\nLocated in: /themes/classic/modules/ps_shoppingcart/modal.tpl\n displayCartModalFooter Available since: 1.7.8  Bottom of Add-to-cart modal This hook displays content in the bottom of window that appears after adding product to cart\nLocated in: /themes/classic/modules/ps_shoppingcart/modal.tpl\n displayCheckoutSubtotalDetails Located in: /themes/classic/templates/checkout/_partials/cart-detailed-totals.tpl displayCheckoutSummaryTop Located in: /themes/classic/templates/checkout/_partials/cart-summary.tpl displayCMSDisputeInformation Located in: /themes/classic/templates/cms/page.tpl displayCMSPrintButton Located in: /themes/classic/templates/cms/page.tpl displayContentWrapperBottom Content wrapper section (bottom) This hook displays new elements in the bottom of the content wrapper Located in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayContentWrapperTop Content wrapper section (top) This hook displays new elements in the top of the content wrapper Located in:\n themes/classic/templates/layouts/layout-both-columns.tpl themes/classic/templates/layouts/layout-content-only.tpl themes/classic/templates/layouts/layout-full-width.tpl themes/classic/templates/layouts/layout-left-column.tpl themes/classic/templates/layouts/layout-right-column.tpl   displayCrossSellingShoppingCart Located in: /themes/classic/templates/checkout/cart-empty.tpl displayCustomerAccount Displays new elements on the customer account page in Front Office Located in: /themes/classic/templates/customer/my-account.tpl\n displayCustomerAccountForm Displays information on the customer account creation form Located in: /classes/form/CustomerForm.php\n displayCustomerAccountFormTop Displayed above the customer\u0026rsquo;s account creation form Located in: /controllers/front/AuthController.php\n displayCustomerLoginFormAfter Displays new elements after the login form Located in: /themes/classic/templates/customer/authentication.tpl\n displayCustomization Located in: /classes/Product.php displayDashboardToolbarIcons Available since: 1.7.3  Display new elements in back office page with dashboard, on icons list. This hook launches modules when the back office with dashboard is displayed\nLocated in:\n /src/PrestaShopBundle/Resources/views/Admin/Configure/AdvancedParameters/LogsPage/Blocks/actions.html.twig /src/PrestaShopBundle/Resources/views/Admin/Product/CatalogPage/Blocks/tools.html.twig   displayDashboardToolbarTopMenu Available since: 1.7.3  Display new elements in back office page with a dashboard, on top Menu. This hook launches modules when a page with a dashboard is displayed\nLocated in:\n /admin-dev/themes/default/template/page_header_toolbar.tpl /admin-dev/themes/new-theme/template/page_header_toolbar.tpl   displayDashboardTop Dashboard Top Displays the content in the dashboard\u0026rsquo;s top area Located in: admin-dev/themes/default/template/page_header_toolbar.tpl\n displayExpressCheckout Located in: /themes/classic/templates/checkout/_partials/cart-detailed-actions.tpl displayFeatureForm Add fields to the form \u0026lsquo;feature\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature\u0026rsquo; Located in: admin-dev/themes/default/template/controllers/features/helpers/form/form.tpl\n displayFeaturePostProcess On post-process in admin feature This hook is called on post-process in admin feature Located in: /controllers/admin/AdminFeaturesController.php\n displayFeatureValueForm Add fields to the form \u0026lsquo;feature value\u0026rsquo; This hook adds fields to the form \u0026lsquo;feature value\u0026rsquo; Located in: admin-dev/themes/default/template/controllers/feature_value/helpers/form/form.tpl\n displayFeatureValuePostProcess On post-process in admin feature value This hook is called on post-process in admin feature value Located in: /controllers/admin/AdminFeaturesController.php\n displayFooter Displays new blocks in the footer Located in: /themes/classic/templates/_partials/footer.tpl\n displayFooterAfter Located in: /themes/classic/templates/_partials/footer.tpl displayFooterBefore Located in: /themes/classic/templates/_partials/footer.tpl displayFooterProduct Added under the product\u0026rsquo;s description Located in: /themes/classic/templates/catalog/product.tpl\n displayHeader Added in the header of every page Located in: /classes/controller/FrontController.php\n displayHome Displayed on the content of the home page. Located in: /controllers/front/IndexController.php\n displayInvoice (deprecated since 1.7.7) → displayAdminOrderTop Invoice This hook displays new blocks on the invoice (order)\nLocated in: admin-dev/themes/default/template/controllers/orders/helpers/view/view.tpl\n displayAdminOrderTop Available since: 1.7.7  This hook displays content at the top of the order view page\nLocated in: /src/PrestaShopBundle/Resources/views/Admin/Sell/Order/Order/view.html.twig\nParameters:\n\u0026lt;?php array( \u0026#39;id_order\u0026#39; =\u0026gt; (int) Order ID );  displayInvoiceLegalFreeText PDF Invoice - Legal Free Text This hook allows you to modify the legal free text on PDF invoices Located in: /classes/pdf/HTMLTemplateInvoice.php\n displayLeftColumn Displays new elements in the left-hand column Located in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayLeftColumnProduct Displays new elements in the left-hand column of the product page Located in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displayMaintenance Maintenance Page This hook displays new elements on the maintenance page Located in: /classes/controller/FrontController.php\n displayMyAccountBlock Displays extra information within the \u0026ldquo;my account: block Located in: /themes/classic/modules/ps_customeraccountlinks/ps_customeraccountlinks.tpl\n displayNav1 Located in:  /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNav2 Located in:  /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNavFullWidth Navigation This hook displays full width navigation menu at the top of your pages Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayNotFound Located in: /themes/classic/templates/errors/not-found.tpl displayOrderConfirmation Called within an order\u0026rsquo;s confirmation page Located in: /controllers/front/OrderConfirmationController.php\nParameters:\n\u0026lt;?php array( \u0026#39;order\u0026#39; =\u0026gt; (object) Order );  displayOrderConfirmation1 Located in: /themes/classic/templates/checkout/order-confirmation.tpl displayOrderConfirmation2 Located in: /themes/classic/templates/checkout/order-confirmation.tpl displayOrderDetail Displayed within the order\u0026rsquo;s details in Front Office Located in:\n /controllers/front/GuestTrackingController.php /controllers/front/OrderDetailController.php  Parameters:\n\u0026lt;?php array( \u0026#39;order\u0026#39; =\u0026gt; (object) Order object );  displayPaymentByBinaries Payment form generated by binaries This hook displays form generated by binaries during the checkout Located in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayPaymentEU Located in: /modules/ps_legalcompliance/ps_legalcompliance.php displayPaymentReturn Payment return Located in: /controllers/front/OrderConfirmationController.php\n displayPaymentTop Top of payment page This hook is displayed at the top of the payment page Located in: /themes/classic/templates/checkout/_partials/steps/payment.tpl\n displayPersonalInformationTop Available since: 1.7.6  Display actions or additional content in the personal details tab of the checkout funnel.\nLocated in: /themes/classic/templates/checkout/_partials/steps/personal-information.tpl\n displayProductActions Available since: 1.7.6  This hook allow additional actions to be displayed \u0026amp; triggered, close to the add to cart button.\nLocated in: /themes/classic/templates/catalog/_partials/product-add-to-cart.tpl\n displayProductAdditionalInfo Available since: 1.7.1  Product page additional info This hook adds additional information on the product page\nLocated in:\n /themes/classic/templates/catalog/_partials/product-additional-info.tpl /themes/classic/templates/catalog/_partials/quickview.tpl   displayProductExtraContent Available since: 1.7.0  Display extra content on the product page. This hook expects ProductExtraContent instances, which will be properly displayed by the template on the product page\nLocated in: /controllers/front/ProductController.php\nParameters:\n\u0026lt;?php array( \u0026#39;product\u0026#39; =\u0026gt; (object) Product object ),  displayProductListReviews Available since: 1.7.1  Located in: /themes/classic/templates/catalog/_partials/miniatures/product.tpl\n displayProductPageDrawer Available since: 1.7.1  Product Page Drawer. This hook displays content in the right sidebar of the product page\nLocated in: /src/PrestaShopBundle/Controller/Admin/ProductController.php\nParameters:\n\u0026lt;?php array( \u0026#39;product\u0026#39; =\u0026gt; (object) Product object ),  displayProductPriceBlock Located in:  /themes/classic/templates/catalog/_partials/miniatures/product.tpl /themes/classic/templates/catalog/_partials/product-prices.tpl /themes/classic/templates/checkout/_partials/cart-summary-product-line.tpl /themes/classic/templates/checkout/_partials/order-confirmation-table.tpl   displayReassurance Located in:  /themes/classic/templates/catalog/product.tpl /themes/classic/templates/checkout/cart.tpl /themes/classic/templates/checkout/checkout.tpl   displayRightColumn Displays new elements in the right-hand column Located in: /themes/classic/templates/layouts/layout-both-columns.tpl\nParameters:\n\u0026lt;?php array( \u0026#39;cart\u0026#39; =\u0026gt; (object) Cart object ); Note that the Cart object can also be retrieved from the current Context.\n displayRightColumnProduct Displays new elements in the right-hand column of the product page Located in: /themes/classic/templates/layouts/layout-both-columns.tpl\n displaySearch Located in: /themes/classic/templates/errors/not-found.tpl displayShoppingCart Displays new action buttons within the shopping cart Located in: /themes/classic/templates/checkout/cart.tpl\n displayShoppingCartFooter Shopping cart footer This hook displays some specific information on the shopping cart\u0026rsquo;s page Located in: /themes/classic/templates/checkout/cart.tpl\n displayTop Top of pages This hook displays additional elements at the top of your pages Located in:\n /themes/classic/templates/_partials/header.tpl /themes/classic/templates/checkout/_partials/header.tpl   displayWrapperBottom Main wrapper section (bottom) This hook displays new elements in the bottom of the main wrapper Located in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl   displayWrapperTop Main wrapper section (top) This hook displays new elements in the top of the main wrapper Located in:\n themes/classic/templates/checkout/checkout.tpl themes/classic/templates/layouts/layout-both-columns.tpl   displayAdditionalCustomerAddressFields Available since: 1.7.7  This hook allows to display extra field values added in an address form using hook \u0026lsquo;additionalCustomerAddressFields\u0026rsquo;\nLocated in: /themes/classic/templates/customer/_partials/block-address.tpl\n displayFooterCategory Available since: 1.7.7  This hook adds new blocks under the products listing in a category/search\nLocated in: /themes/classic/templates/catalog/listing/product-list.tpl\n filterCategoryContent Available since: 1.7.1  Filter the content page category. This hook is called just before fetching content page category\nLocated in: /controllers/front/listing/CategoryController.php\nParameters:\n\u0026lt;?php array( \u0026#39;object\u0026#39; =\u0026gt; (object) Category object ),  filterCmsCategoryContent Filter the content page category This hook is called just before fetching content page category Located in: /controllers/front/CmsController.php\n filterCmsContent Filter the content page This hook is called just before fetching content page Located in: /controllers/front/CmsController.php\n filterHtmlContent Filter HTML field before rending a page This hook is called just before fetching a page on HTML field Located in: /src/Adapter/ObjectPresenter.php\n filterManufacturerContent Filter the content page manufacturer This hook is called just before fetching content page manufacturer Located in: /controllers/front/listing/ManufacturerController.php\n filterProductContent Filter the content page product This hook is called just before fetching content page product Located in: /controllers/front/ProductController.php\n filterProductSearch Available since: 1.7.1  Located in: /classes/controller/ProductListingFrontController.php\n filterSupplierContent Located in: /controllers/front/listing/SupplierController.php moduleRoutes Located in: /classes/Dispatcher.php overrideMinimalPurchasePrice Located in:  /classes/controller/ModuleFrontController.php /src/Adapter/Cart/CartPresenter.php   sendMailAlterTemplateVars Located in: /prestashop/classes/Mail.php termsAndConditions Located in: /classes/checkout/ConditionsToApproveFinder.php updateProduct Located in:  /classes/Product.php /classes/webservice/WebserviceSpecificManagementImages.php   validateCustomerFormFields Located in: /classes/form/CustomerForm.php actionKpiRowModifier Available since: 1.7.6  This hook allow to alter the list of Kpis used in a Kpi row. This hook is called just before the validation and the building of the KpiRow.\nLocated in: /controllers/front/listing/CategoryController.php\nParameters:\n\u0026lt;?php array( \u0026#39;kpis\u0026#39; =\u0026gt; KpiInterface[] $kpis ),  action\u0026lt;HookName\u0026gt;Form Available since: 1.7.4  This hook allows to modify options form content\nLocated in: /src/Core/Form/FormHandler.php\nParameters:\n\u0026lt;?php [ \u0026#39;form_builder\u0026#39; =\u0026gt; (FormBuilderInterface) $this-\u0026gt;formBuilder, ]  action\u0026lt;HookName\u0026gt;Save Available since: 1.7.4  This hook allows to modify data of options form after it was saved\nLocated in: /src/Core/Form/FormHandler.php\nParameters:\n\u0026lt;?php [ \u0026#39;errors\u0026#39; =\u0026gt; (array) \u0026amp;$errors, \u0026#39;form_data\u0026#39; =\u0026gt; (array) \u0026amp;$data, ]  action\u0026lt;GridDefinitionId\u0026gt;GridDefinitionModifier Available since: 1.7.5  Located in: /src/Core/Grid/Definition/Factory/AbstractGridDefinitionFactory.php\nParameters:\n\u0026lt;?php [ \u0026#39;definition\u0026#39; =\u0026gt; (GridDefinition) $definition, ]  action\u0026lt;GridDefinitionId\u0026gt;GridQueryBuilderModifier Available since: 1.7.5  Located in: /src/Core/Grid/Data/Factory/DoctrineGridDataFactory.php\nParameters:\n\u0026lt;?php [ \u0026#39;search_query_builder\u0026#39; =\u0026gt; (QueryBuilder) $searchQueryBuilder, \u0026#39;count_query_builder\u0026#39; =\u0026gt; (QueryBuilder) $countQueryBuilder, \u0026#39;search_criteria\u0026#39; =\u0026gt; (SearchCriteriaInterface) $searchCriteria, ]  action\u0026lt;GridDefinitionId\u0026gt;GridDataModifier Available since: 1.7.5  Located in: /src/Core/Grid/GridFactory.php\nParameters:\n\u0026lt;?php [ \u0026#39;data\u0026#39; =\u0026gt; (GridData) $data, ]  action\u0026lt;GridDefinitionId\u0026gt;GridFilterFormModifier Available since: 1.7.5  Located in: /src/Core/Grid/Filter/GridFilterFormFactory.php\nParameters:\n\u0026lt;?php [ \u0026#39;filter_form_builder\u0026#39; =\u0026gt; (FormBuilderInterface) $formBuilder, ]  action\u0026lt;GridDefinitionId\u0026gt;GridPresenterModifier Available since: 1.7.5  Located in: /src/Core/Grid/Presenter/GridPresenter.php\nParameters:\n\u0026lt;?php [ \u0026#39;presented_grid\u0026#39; =\u0026gt; (array) \u0026amp;$presentedGrid, ]  action\u0026lt;FormName\u0026gt;FormBuilderModifier Available since: 1.7.6  Located in: /src/Core/Form/IdentifiableObject/Builder/FormBuilder.php\nParameters:\n\u0026lt;?php [ \u0026#39;form_builder\u0026#39; =\u0026gt; (FormBuilderInterface) $formBuilder, \u0026#39;data\u0026#39; =\u0026gt; (array) \u0026amp;$data, \u0026#39;id\u0026#39; =\u0026gt; (int|null) $id, ]  actionBeforeUpdate\u0026lt;FormName\u0026gt;FormHandler Available since: 1.7.6  Located in: /src/Core/Form/IdentifiableObject/Handler/FormHandler.php\nParameters:\n\u0026lt;?php [ \u0026#39;form_data\u0026#39; =\u0026gt; \u0026amp;$data, \u0026#39;id\u0026#39; =\u0026gt; (int) $id, ]  actionAfterUpdate\u0026lt;FormName\u0026gt;FormHandler Available since: 1.7.6  Located in: /src/Core/Form/IdentifiableObject/Handler/FormHandler.php\nParameters:\n\u0026lt;?php [ \u0026#39;id\u0026#39; =\u0026gt; (int) $id, ]  actionBeforeCreate\u0026lt;FormName\u0026gt;FormHandler Available since: 1.7.6  Located in: /src/Core/Form/IdentifiableObject/Handler/FormHandler.php\nParameters:\n\u0026lt;?php [ \u0026#39;form_data\u0026#39; =\u0026gt; \u0026amp;$data, ]  actionAfterCreate\u0026lt;FormName\u0026gt;FormHandler Available since: 1.7.6  Located in: /src/Core/Form/IdentifiableObject/Handler/FormHandler.php\nParameters:\n\u0026lt;?php [ \u0026#39;id\u0026#39; =\u0026gt; $id, ]    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/prestashop-webservice-lib/listing-resources/",
	"title": "Listing resources",
	"tags": [],
	"description": "",
	"content": "Listing resources Let\u0026rsquo;s now see how to view a full list of customer IDs. We could display more information and customize it, but that\u0026rsquo;s for another part of this tutorial.\nAs we saw in the previous code sample, we need the get() method to retrieve an XML file containing all the customers. The parameter has to be a key-value array, where we define the resource we want:\n   Key Value     resource customers    Using PrestaShopWebservice::get \u0026lt;?php try { // creating webservice access  $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); // call to retrieve all customers  $xml = $webService-\u0026gt;get([\u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;]); } catch (PrestaShopWebserviceException $ex) { // Shows a message related to the error  echo \u0026#39;Other error: \u0026lt;br /\u0026gt;\u0026#39; . $ex-\u0026gt;getMessage(); } Returned data The returned object is a SimpleXMLElement object containing this kind of data:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customers\u0026gt; \u0026lt;customer id=\u0026#34;1\u0026#34; xlink:href=\u0026#34;http://example.com/api/customers/1\u0026#34;/\u0026gt; \u0026lt;customer id=\u0026#34;2\u0026#34; xlink:href=\u0026#34;http://example.com/api/customers/2\u0026#34;/\u0026gt; \u0026lt;/customers\u0026gt; \u0026lt;/prestashop\u0026gt; Access children data You can now loop through this XML object to get each customer ID\n\u0026lt;?php $resources = $xml-\u0026gt;customers-\u0026gt;children(); foreach ($resources as $resource) { $attributes = $resource-\u0026gt;attributes(); $resourceId = $attributes[\u0026#39;id\u0026#39;]; // From there you could, for example, use th resource ID to call the webservice to get its details } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sample-modules/order-view-page-new-hooks/",
	"title": "Order view page new hooks demo tutorial",
	"tags": [],
	"description": "",
	"content": "Order view page new hooks demo tutorial  Introduction In this tutorial we are going to build a module to extend Order view page. The module will add the following components:\n User Signature card below the Customer card. Additional action buttons in the main buttons bar.  While creating this component you will learn how to:\n Create a module with namespace thanks to composer Use Doctrine (https://devdocs.prestashop.com/1.7/modules/concepts/doctrine/) Use Repository classes extending Symfony EntityRepository (https://symfony.com/doc/3.4/doctrine/repository.html) Use Symfony services (https://devdocs.prestashop.com/1.7/modules/concepts/services/) Use Twig templates to render HTML (https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/templating-with-twig/) Various design patterns: Repository, Factory, Presenter  We use this module to demonstrate how to use these concepts/components because they bring some additional value but this is not mandatory. These are just some of the \u0026ldquo;how to\u0026rdquo; examples. Would recommend to focus on your project needs and don\u0026rsquo;t hesitate to write a note to PrestaShop Core developers if we could do it better! Prerequisites  To be familiar with basic module creation. To be familiar how Composer autoloads classes (https://devdocs.prestashop.com/1.7/modules/concepts/composer/)  Available Order View page hooks On module installation the following hooks can be registered:\n displayAdminOrderTabLink - for adding tab links for tab content displayAdminOrderTabContent - for adding tab content to Order page displayAdminOrderMain - for adding Order main information displayAdminOrderSide - displayed between Customer and Messages cards in the Order page displayAdminOrderSideBottom - for adding Order side information displayAdminOrder - displayed at the bottom of the Order page displayAdminOrderTop - displayed at the top of the Order page actionGetAdminOrderButtons - to display additional action buttons into the main buttons bar.  These hooks are visualized in the picture below:\n  Order page hooks locations   This tutorial has these sections:\n Module base creation   Signature card   Additional action buttons   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/release/minor-release-lifecycle/",
	"title": "Patch release lifecycle",
	"tags": [],
	"description": "",
	"content": "Patch release lifecycle Patch releases are \u0026ldquo;maintainance\u0026rdquo; releases: they provide bug fixes and security patches, but do not provide enhancements or new features. They are part of a necessary maintenance process.\nScope of maintainance When a minor version is released, such as PrestaShop 1.7.7.0, the related branch becomes the latest and maintained branch. This means that, when PrestaShop 1.7.7.0 is out:\n There will be no more PrestaShop 1.7.6 patch releases, for either bug or security issues There might be, if necessary, patch releases for PrestaShop 1.7.7. (which means: 1.7.7.1, 1.7.7.2 and so on \u0026hellip;) until next minor release is delivered (PrestaShop 1.7.8)  When PrestaShop 1.7.7.0 is released, PrestaShop 1.7.6 reaches its End Of Life, just like all previous minor versions.\nWhen is it decided to release a patch ? A patch release is scheduled when a \u0026ldquo;trigger bug\u0026rdquo; is reported:\n A major bug in maintained branch A security issue in maintained branch  For example, let\u0026rsquo;s see 1.7.7.0 lifecycle:\nUntil PrestaShop 1.7.7.0 is released, the maintained branch remains 1.7.6.x.\nThis means that work on a new 1.7.6 release will start if a community contributor or the QA team reports a major regression in PrestaShop 1.7.6 or a security issue.\nIf minor or trivial regressions are reported for PrestaShop 1.7.6, they are scheduled to be fixed in next minor version. Minor or trivial bugs are considered not important enough to trigger a patch release process which is, as explained below, a costly process for both the PrestaShop company and the PrestaShop community.\nFrom the moment a \u0026ldquo;trigger bug\u0026rdquo; is reported, there start a 6 weeks long timer. Our process states that a patch release must be delivered within these 6 weeks.\nWhat happens in six weeks From the moment the 6 weeks timer is started, Product Team register into the dedicated Kanban the bugs to be fixed in the patch release, whether they are trivial, minor or major.\nThen maintainers start working on fixing them (or merging the bug fixes submitted by the community).\nObviously, security issues are not processed the same way: when a vulnerability is reported, it is being explored and it is being fixed in a hidden manner in order to make sure hackers unaware of the vulnerability do not hear about it. We use GitHub Security Advisories and temporary private forks to collaborate on the fix. Maintainers only publish the advisory and the fix on the day of the release, following responsible disclosure principle.\nWhen all bug fixes for the target patch version are merged, and all teams pressure themselves to make it happen before the end of the 6 weeks, maintainers deliver a Release Candidate to QA team for the standard patch release test campaign. This test campaign aims to find whether this patch introduces new bugs.\nIf the campaign reports that no bugs are found, the new patch release is validated by QA team and can be delivered!\n(This article was originally published on our blog: PrestaShop 1.7 Patch Release Lifecycle )\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sample-modules/order-view-page-new-hooks/signature-widget/",
	"title": "Signature card",
	"tags": [],
	"description": "",
	"content": "Signature card displayAdminOrderSide hook We use this hook to display scanned customer signature.\nLets create custom repository OrderSignatureRepository class inside demovieworderhooks/src/Repository folder. Symfony Repository classes (https://symfony.com/doc/3.3/doctrine/repository.html) help to interact with the database by providing frequently used functions like findOneBy to get the data (for example filtered data by a certain criteria - orderId field from OrderSignature entity).\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Repository; use Doctrine\\ORM\\EntityRepository; class OrderSignatureRepository extends EntityRepository { /** * @param int $orderId * * @return object|null */ public function findOneByOrderId(int $orderId) { return $this-\u0026gt;findOneBy([\u0026#39;orderId\u0026#39; =\u0026gt; $orderId]); } }  It is important that custom repository name represent the database table name. In this case we have order_signature table created and the repository starts with the same wording OrderSignatureRepository. Let\u0026rsquo;s create OrderSignature entity class inside demovieworderhooks/src/Entity folder and use Doctrine Object Relational Mapping (ORM) annotations: https://devdocs.prestashop.com/1.7/modules/concepts/doctrine/#define-an-entity. Also we map this entity with the repository with repositoryClass=\u0026quot;PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderSignatureRepository\u0026quot;. This mapping allows to use functions of SignatureRepository instead of only the EntityRepository.\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Entity; use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Table() * @ORM\\Entity(repositoryClass=\u0026#34;PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderSignatureRepository\u0026#34;) */ class OrderSignature { /** * @var int|null * * @ORM\\Id * @ORM\\Column(name=\u0026#34;id_signature\u0026#34;, type=\u0026#34;integer\u0026#34;) * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;) */ private $id; /** * @var int * * @ORM\\Column(name=\u0026#34;id_order\u0026#34;, type=\u0026#34;integer\u0026#34;) */ private $orderId; /** * @var string * * @ORM\\Column(name=\u0026#34;filename\u0026#34;, type=\u0026#34;string\u0026#34;) */ private $filename; /** * @return int|null */ public function getId(): ?int { return $this-\u0026gt;id; } /** * @param int $id * * @return self */ public function setId(int $id): self { $this-\u0026gt;id = $id; return $this; } /** * @return string */ public function getFilename(): string { return $this-\u0026gt;filename; } /** * @param string $filename * * @return self */ public function setFilename(string $filename): self { $this-\u0026gt;filename = $filename; return $this; } /** * @return int */ public function getOrderId(): int { return $this-\u0026gt;orderId; } } Let\u0026rsquo;s put our signature picture, john_doe.png inside demovieworderhooks/signatures/ folder.\n  Signature   Let\u0026rsquo;s create Order Repository and data structures for interacting with Orders data. Data Transfer Object (https://en.wikipedia.org/wiki/Data_transfer_object) Order.php in src/DTO to carry data between processes. The main benefit is that it reduces the amount of data that needs to be sent inside application and encapsulates parameters for method calls (This can be useful if a method takes more than 4 or 5 parameters.). Also it is more convenient than using associative array where you need to remember it\u0026rsquo;s indexes to get the certain values (no autocomplete is provided).\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\DTO; use DateTimeImmutable; final class Order { /** * @var int */ private $orderId; /** * @var string */ private $reference; /** * @var int */ private $orderStateId; /** * @var DateTimeImmutable */ private $orderDate; public function __construct(int $orderId, string $reference, int $orderStateId, DateTimeImmutable $orderDate) { $this-\u0026gt;orderId = $orderId; $this-\u0026gt;reference = $reference; $this-\u0026gt;orderStateId = $orderStateId; $this-\u0026gt;orderDate = $orderDate; } public function getOrderId(): int { return $this-\u0026gt;orderId; } public function getReference(): string { return $this-\u0026gt;reference; } public function getOrderStateId(): int { return $this-\u0026gt;orderStateId; } public function getOrderDate(): DateTimeImmutable { return $this-\u0026gt;orderDate; } } OrderCollection.php in src/Collection:\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Collection; use PrestaShop\\Module\\DemoViewOrderHooks\\DTO\\Order; use PrestaShop\\PrestaShop\\Core\\Data\\AbstractTypedCollection; final class OrderCollection extends AbstractTypedCollection { /** * {@inheritdoc} */ protected function getType() { return Order::class; } } OrderRepository in src\\Repository:\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Repository; use DateTimeImmutable; use Db; use Order as PrestaShopOrder; use PrestaShop\\Module\\DemoViewOrderHooks\\Collection\\OrderCollection; use PrestaShop\\Module\\DemoViewOrderHooks\\DTO\\Order; class OrderRepository { /** * @var Db */ private $db; public function __construct() { $this-\u0026gt;db = Db::getInstance(); } /** * Get all orders that a customer has placed. */ public function getCustomerOrders(int $customerId, array $excludeOrderIds = []): OrderCollection { $orders = PrestaShopOrder::getCustomerOrders($customerId); $ordersCollection = new OrderCollection(); foreach ($orders as $order) { if (in_array($order[\u0026#39;id_order\u0026#39;], $excludeOrderIds)) { continue; } $ordersCollection-\u0026gt;add(new Order( (int) $order[\u0026#39;id_order\u0026#39;], $order[\u0026#39;reference\u0026#39;], (int) $order[\u0026#39;current_state\u0026#39;], new DateTimeImmutable($order[\u0026#39;date_add\u0026#39;]) )); } return $ordersCollection; } }  Unlike the previous OrderSignatureRepository this repository uses legacy PrestaShop classes, it performs the request using the Db class. We have to do this because core objects from PrestaShop do not use Doctrine entities, so we can\u0026rsquo;t use a Doctrine repository to manage them. Let\u0026rsquo;s create OrderSignaturePresenter class responsible for returning order customer data\nin src/Presenter/:\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); namespace PrestaShop\\Module\\DemoViewOrderHooks\\Presenter; use Gender; use Order; use PrestaShop\\Module\\DemoViewOrderHooks\\Entity\\OrderSignature; class OrderSignaturePresenter { /** * @var string */ private $signatureImgDir; public function __construct(string $signatureImgDir) { $this-\u0026gt;signatureImgDir = $signatureImgDir; } public function present(OrderSignature $signature, int $languageId): array { $order = new Order($signature-\u0026gt;getOrderId()); $customer = $order-\u0026gt;getCustomer(); $gender = new Gender($customer-\u0026gt;id_gender, $languageId); return [ \u0026#39;firstName\u0026#39; =\u0026gt; $customer-\u0026gt;firstname, \u0026#39;lastName\u0026#39; =\u0026gt; $customer-\u0026gt;lastname, \u0026#39;gender\u0026#39; =\u0026gt; $gender-\u0026gt;name, \u0026#39;imagePath\u0026#39; =\u0026gt; $this-\u0026gt;signatureImgDir.$signature-\u0026gt;getFilename() ]; } } Then lets use Symfony Dependency Injection (https://www.freecodecamp.org/news/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f/). and create services configuration for the above classes in demovieworderhooks/config/services.yml. For more information: https://devdocs.prestashop.com/1.7/modules/concepts/services/#symfony-services. The intention behind dependency injection is to achieve Separation of Concerns of construction and use of objects. This can increase readability and code reuse, reduce dependencies, lead to more testable code. It also reduces memory consumption as services are, by default, created once and shared in the whole project.\nparameters:signatureImgDirectory:\u0026#39;signatures/\u0026#39;services:prestashop.module.demovieworderhooks:class:DemoViewOrderHooksfactory:[Module, getInstanceByName]arguments:- \u0026#39;demovieworderhooks\u0026#39;prestashop.module.demovieworderhooks.repository.order_repository:class:PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderRepositoryprestashop.module.demovieworderhooks.repository.order_signature_repository:class:PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderSignatureRepositoryfactory:[\u0026#39;@doctrine.orm.default_entity_manager\u0026#39;,getRepository]arguments:- PrestaShop\\Module\\DemoViewOrderHooks\\Entity\\OrderSignatureprestashop.module.demovieworderhooks.presenter.order_signature_presenter:class:PrestaShop\\Module\\DemoViewOrderHooks\\Presenter\\OrderSignaturePresenterarguments:- \u0026#39;@=service(\u0026#34;prestashop.module.demovieworderhooks\u0026#34;).getPathUri() ~ parameter(\u0026#34;signatureImgDirectory\u0026#34;)\u0026#39;Let\u0026rsquo;s create a twig templates in modules/demovieworderhooks/views/templates/admin/:\ncard.html.twig\n{% trans_default_domain \u0026#39;Module.Demovieworderhooks.Admin\u0026#39; %}\u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-header\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;card-header-title\u0026#34;\u0026gt; {% block card_title %}{% endblock %}\u0026lt;/h3\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-body\u0026#34;\u0026gt; {% block card_body %}{% endblock %}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; customer_signature.html.twig extending card.html.twig\n{% extends \u0026#39;@Modules/demovieworderhooks/views/templates/admin/card.html.twig\u0026#39; %}{% block card_title %}{{ \u0026#39;Signature\u0026#39;|trans }}{% endblock %}{% block card_body %}\u0026lt;div class=\u0026#34;col-lg\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;display-4 text-center\u0026#34;\u0026gt; {{ signature.gender }}{{ signature.firstName }}{{ signature.lastName }}\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{{ signature.imagePath }}\u0026#34; alt=\u0026#34;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %}Lets add several methods to DemoViewOrderHooks class. getModuleTemplatePath - get\u0026rsquo;s the path of the templates folder.\n\u0026lt;?php /** * Get path to this module\u0026#39;s template directory */ private function getModuleTemplatePath(): string { return sprintf(\u0026#39;@Modules/%s/views/templates/admin/\u0026#39;, $this-\u0026gt;name); } Render a twig template method:\n\u0026lt;?php /** * Render a twig template. */ private function render(string $template, array $params = []): string { /** @var Twig_Environment $twig */ $twig = $this-\u0026gt;get(\u0026#39;twig\u0026#39;); return $twig-\u0026gt;render($template, $params); } For each registered hook, you must create a non-static public method, starting with the “hook” keyword followed by the name of the hook you want to use (starting with either “display” or “action”). In our case: hookDisplayBackOfficeOrderActions For more information see: https://devdocs.prestashop.com/1.7/modules/concepts/hooks/#execution We add this code at the bottom of the main module class demovieworderhooks.php and also add the missing use statements for new classes.\n\u0026lt;?php /** * Displays customer\u0026#39;s signature. */ public function hookDisplayAdminOrderSide(array $params) { /** @var OrderSignatureRepository $signatureRepository */ $signatureRepository = $this-\u0026gt;get( \u0026#39;prestashop.module.demovieworderhooks.repository.order_signature_repository\u0026#39; ); /** @var OrderSignaturePresenter $signaturePresenter */ $signaturePresenter = $this-\u0026gt;get( \u0026#39;prestashop.module.demovieworderhooks.presenter.order_signature_presenter\u0026#39; ); $signature = $signatureRepository-\u0026gt;findOneByOrderId($params[\u0026#39;id_order\u0026#39;]); if (!$signature) { return \u0026#39;\u0026#39;; } return $this-\u0026gt;render($this-\u0026gt;getModuleTemplatePath() . \u0026#39;customer_signature.html.twig\u0026#39;, [ \u0026#39;signature\u0026#39; =\u0026gt; $signaturePresenter-\u0026gt;present($signature, (int) $this-\u0026gt;context-\u0026gt;language-\u0026gt;id), ]); } The full main module file with dependencies could be:\n\u0026lt;?php /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License 3.0 (AFL-3.0). * It is also available through the world-wide-web at this URL: https://opensource.org/licenses/AFL-3.0 */ declare(strict_types=1); use PrestaShop\\Module\\DemoViewOrderHooks\\Collection\\OrderCollection; use PrestaShop\\Module\\DemoViewOrderHooks\\Install\\InstallerFactory; use PrestaShop\\Module\\DemoViewOrderHooks\\Presenter\\OrderSignaturePresenter; use PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderRepository; use PrestaShop\\Module\\DemoViewOrderHooks\\Repository\\OrderSignatureRepository; if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } // need it because InstallerFactory is not autoloaded during the install require_once __DIR__.\u0026#39;/vendor/autoload.php\u0026#39;; class DemoViewOrderHooks extends Module { public function __construct() { $this-\u0026gt;name = \u0026#39;demovieworderhooks\u0026#39;; $this-\u0026gt;author = \u0026#39;PrestaShop\u0026#39;; $this-\u0026gt;version = \u0026#39;1.0.0\u0026#39;; $this-\u0026gt;ps_versions_compliancy = [\u0026#39;min\u0026#39; =\u0026gt; \u0026#39;1.7.7.0\u0026#39;, \u0026#39;max\u0026#39; =\u0026gt; _PS_VERSION_]; parent::__construct(); $this-\u0026gt;displayName = $this-\u0026gt;l(\u0026#39;Demo view order hooks\u0026#39;); $this-\u0026gt;description = $this-\u0026gt;l(\u0026#39;Demonstration of new hooks in PrestaShop 1.7.7 order view page\u0026#39;); } public function install() { if (!parent::install()) { return false; } $installer = InstallerFactory::create(); return $installer-\u0026gt;install($this); } public function uninstall() { $installer = InstallerFactory::create(); return $installer-\u0026gt;uninstall() \u0026amp;\u0026amp; parent::uninstall(); } /** * Displays customer\u0026#39;s signature. */ public function hookDisplayBackOfficeOrderActions(array $params) { /** @var OrderSignatureRepository $signatureRepository */ $signatureRepository = $this-\u0026gt;get( \u0026#39;prestashop.module.demovieworderhooks.repository.order_signature_repository\u0026#39; ); /** @var OrderSignaturePresenter $signaturePresenter */ $signaturePresenter = $this-\u0026gt;get( \u0026#39;prestashop.module.demovieworderhooks.presenter.order_signature_presenter\u0026#39; ); $signature = $signatureRepository-\u0026gt;findOneByOrderId($params[\u0026#39;id_order\u0026#39;]); if (!$signature) { return \u0026#39;\u0026#39;; } return $this-\u0026gt;render($this-\u0026gt;getModuleTemplatePath() . \u0026#39;customer_signature.html.twig\u0026#39;, [ \u0026#39;signature\u0026#39; =\u0026gt; $signaturePresenter-\u0026gt;present($signature, (int) $this-\u0026gt;context-\u0026gt;language-\u0026gt;id), ]); } /** * Render a twig template. */ private function render(string $template, array $params = []): string { /** @var Twig_Environment $twig */ $twig = $this-\u0026gt;get(\u0026#39;twig\u0026#39;); return $twig-\u0026gt;render($template, $params); } /** * Get path to this module\u0026#39;s template directory */ private function getModuleTemplatePath(): string { return sprintf(\u0026#39;@Modules/%s/views/templates/admin/\u0026#39;, $this-\u0026gt;name); } } Now we have all the code needed so let\u0026rsquo;s go to the Modules-\u0026gt;Module Manager. Find our module with search demo and click the drop down near the disable button and select reset to reload the module with the newly described symfony services.\nResult After completing the steps above the result should be visible inside the selected Order View page:\n Signature card:    Signature card   Feel free to experiment with other Order view page hooks! You can find demo implementation of these hooks in PrestaShop example-modules repository: https://github.com/PrestaShop/example-modules/tree/master/demovieworderhooks\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sell/techvalidation-keysteps/",
	"title": "Technical validation - Key steps",
	"tags": [],
	"description": "",
	"content": "Technical Validation: key steps Have you ever wondered how the PrestaShop Addons Team proceeds with the validation ?\nWe are going to show you how to spare time so that you can pretty much \u0026ldquo;validate\u0026rdquo; your own module before submitting it to the Addons Marketplace. First you might want to read the Technical Tools and the Good Practices.\n1. The Basics As you probably know, there are 3 types of submissions : New, Minor update, Major update. We do not handle them with the same standards:\n We are very strict and meticulous when it comes to New modules. For major updates, we have the exact same verifications that the New modules. For minor updates, we rely on the validator and we also have a Diff Tool to only see the modifications.  Let\u0026rsquo;s now give you more details on how we handle them all.\n2. Processing of New and Major updates What is a \u0026ldquo;New\u0026rdquo; Module? Actually, it is a zip file. Your module is the product and since you can submit several zips per product, let\u0026rsquo;s use the right words.\nSimple: the very first time you submit a zip for your module, it is called a \u0026ldquo;New\u0026rdquo; zip. Please, do not try to submit your module if you have never used the Validator. That tool runs several checks to make sure your module will run smoothly on PrestaShop. As the current version is closed source, a document summarize the different checks made by it.\n3. Review by the marketplace teams After meeting each requirement provided by the Validator, here\u0026rsquo;s a list of extra points we check: Validation checklist\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/testing-access/",
	"title": "Testing access to the Webservice",
	"tags": [],
	"description": "",
	"content": "Testing access to the Webservice Now that your access key is generated you can test your store\u0026rsquo;s webservice, its endpoint is located in the /api/ uri at the root of your installation of Prestashop.\nAccessing /api/ The quickest way to test your API is to use your browser:\n If PrestaShop is installed at the root of your server, you can access the API here: http://example.com/api/ If PrestaShop is installed in a subfolder of your server, you can access the API here: http://example.com/prestashop/api/  Browser prompt The shop should prompt you for a username and a password to enter. The username is the authentication key you created and there is no password to enter. If no permission has been set for the key, than the browser will keep asking you to enter the key indefinitely.\nInclude key in url (risky) The second way to access the API is to include your access key in the url, this will prevent you from entering any user name. Here is an example, assuming your access API key is UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX:\n At the root of the server: https://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/api/ In a subfolder of the server: https://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/prestashop/api/  This method might be convenient for development but very risky as you expose your API key directly in the url, so anyone able to see (or hack) your browser history or access logs would be able to get your key. This should never be used on a production shop. Using an Authorization header (recommended) The best way to authenticate your API calls is to use an Authorization header, this way you don\u0026rsquo;t expose your API key directly but a base64_encode compute of your user:password couple. Although PrestaShop API only has a user with empty password, so in order to compute your authorization key you can do as follows:\n\u0026lt;?php $apiKey = `UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX`; $authorizationKey = base64_encode($apiKey . \u0026#39;:\u0026#39;); // VUNDTExROU4yQVJTSFdDWExUNzRLVUtTU0szNEJGS1g6 Then you can use this value in your request header:\n   Key Value     Authorization Basic VUNDTExROU4yQVJTSFdDWExUNzRLVUtTU0szNEJGS1g6    To test/call your APIs we recommend you use an API client such as Insomnia or Postman, it is easier to call the APIs than with a browser, you can easily switch with HTTP methods, and it\u0026rsquo;s easier to set request parameters and headers.\nAs you noticed no password nor authentication process is required to access the APIs which is why you need to be extra careful with your access key rights and how (and to whom) you disclose them. Available resources The /api/ URL gives you the root of all the resources, in the form of an XML file. Here is an example of what you should see if you authorized full access to addresses, images and products resources:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;api shopName=\u0026#34;Prestashop\u0026#34;\u0026gt; \u0026lt;addresses xlink:href=\u0026#34;http://example.com/api/addresses\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;description xlink:href=\u0026#34;http://example.com/api/addresses\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; The Customer, Brand and Customer addresses\u0026lt;/description\u0026gt; \u0026lt;schema xlink:href=\u0026#34;http://example.com/api/addresses?schema=blank\u0026#34; type=\u0026#34;blank\u0026#34;/\u0026gt; \u0026lt;schema xlink:href=\u0026#34;http://example.com/api/addresses?schema=synopsis\u0026#34; type=\u0026#34;synopsis\u0026#34;/\u0026gt; \u0026lt;/addresses\u0026gt; \u0026lt;images xlink:href=\u0026#34;http://example.com/api/images\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;description xlink:href=\u0026#34;http://example.com/api/images\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; The images\u0026lt;/description\u0026gt; \u0026lt;/images\u0026gt; \u0026lt;products xlink:href=\u0026#34;http://example.com/api/products\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;description xlink:href=\u0026#34;http://example.com/api/products\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; The products\u0026lt;/description\u0026gt; \u0026lt;schema xlink:href=\u0026#34;http://example.com/api/products?schema=blank\u0026#34; type=\u0026#34;blank\u0026#34;/\u0026gt; \u0026lt;schema xlink:href=\u0026#34;http://example.com/api/products?schema=synopsis\u0026#34; type=\u0026#34;synopsis\u0026#34;/\u0026gt; \u0026lt;/products\u0026gt; \u0026lt;/api\u0026gt; \u0026lt;/prestashop\u0026gt; Resource schemas You can also see that each resource provides two links to access its schemas:\n blank schema which you can use as a blank content to create a resource synopsis schema which is the same blank schema with additional details on each field  Let\u0026rsquo;s see what they look like for the address resource.\nBlank schema /api/adresses?schema=blank\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_manufacturer\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_country\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;alias\u0026gt;\u0026lt;/alias\u0026gt; \u0026lt;company\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;lastname\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;vat_number\u0026gt;\u0026lt;/vat_number\u0026gt; \u0026lt;address1\u0026gt;\u0026lt;/address1\u0026gt; \u0026lt;address2\u0026gt;\u0026lt;/address2\u0026gt; \u0026lt;postcode\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;other\u0026gt;\u0026lt;/other\u0026gt; \u0026lt;phone\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;phone_mobile\u0026gt;\u0026lt;/phone_mobile\u0026gt; \u0026lt;dni\u0026gt;\u0026lt;/dni\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/prestashop\u0026gt; Synopsis schema /api/adresses?schema=synopsis\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id_customer format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_manufacturer format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_warehouse format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_country required=\u0026#34;true\u0026#34; format=\u0026#34;isUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;alias required=\u0026#34;true\u0026#34; maxSize=\u0026#34;32\u0026#34; format=\u0026#34;isGenericName\u0026#34;\u0026gt;\u0026lt;/alias\u0026gt; \u0026lt;company maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isGenericName\u0026#34;\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;lastname required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isName\u0026#34;\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isName\u0026#34;\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;vat_number format=\u0026#34;isGenericName\u0026#34;\u0026gt;\u0026lt;/vat_number\u0026gt; \u0026lt;address1 required=\u0026#34;true\u0026#34; maxSize=\u0026#34;128\u0026#34; format=\u0026#34;isAddress\u0026#34;\u0026gt;\u0026lt;/address1\u0026gt; \u0026lt;address2 maxSize=\u0026#34;128\u0026#34; format=\u0026#34;isAddress\u0026#34;\u0026gt;\u0026lt;/address2\u0026gt; \u0026lt;postcode maxSize=\u0026#34;12\u0026#34; format=\u0026#34;isPostCode\u0026#34;\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city required=\u0026#34;true\u0026#34; maxSize=\u0026#34;64\u0026#34; format=\u0026#34;isCityName\u0026#34;\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;other maxSize=\u0026#34;300\u0026#34; format=\u0026#34;isMessage\u0026#34;\u0026gt;\u0026lt;/other\u0026gt; \u0026lt;phone maxSize=\u0026#34;32\u0026#34; format=\u0026#34;isPhoneNumber\u0026#34;\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;phone_mobile maxSize=\u0026#34;32\u0026#34; format=\u0026#34;isPhoneNumber\u0026#34;\u0026gt;\u0026lt;/phone_mobile\u0026gt; \u0026lt;dni maxSize=\u0026#34;16\u0026#34; format=\u0026#34;isDniLite\u0026#34;\u0026gt;\u0026lt;/dni\u0026gt; \u0026lt;deleted format=\u0026#34;isBool\u0026#34;\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add format=\u0026#34;isDate\u0026#34;\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd format=\u0026#34;isDate\u0026#34;\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/prestashop\u0026gt; JSON format The Webservices can also output JSON instead of XML. To enable JSON output you have two choices:\nQuery parameter Add one of the following parameters to your query string:\n output_format=JSON io_format=JSON  Example:\nhttps://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/api/?output_format=JSON HTTP header Add the one of the following headers to your HTTP request:\n Io-Format: JSON Output-Format: JSON  Example:\nGET /api/ HTTP/1.1 Host: example.com Output-Format: JSON Authorization: Basic UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sample-modules/order-view-page-new-hooks/additional-action-buttons/",
	"title": "Additional action buttons",
	"tags": [],
	"description": "",
	"content": "Additional buttons in the main buttons bar actionGetAdminOrderButtons hook demo We use this hook to display additional action buttons into the main buttons bar.\nLet\u0026rsquo;s add hook related code to main module class demovieworderhooks:\n\u0026lt;?php /** * Add buttons to main buttons bar */ public function hookActionGetAdminOrderButtons(array $params) { $order = new Order($params[\u0026#39;id_order\u0026#39;]); /** @var \\Symfony\\Bundle\\FrameworkBundle\\Routing\\Router $router */ $router = $this-\u0026gt;get(\u0026#39;router\u0026#39;); /** @var \\PrestaShopBundle\\Controller\\Admin\\Sell\\Order\\ActionsBarButtonsCollection $bar */ $bar = $params[\u0026#39;actions_bar_buttons_collection\u0026#39;]; $viewCustomerUrl = $router-\u0026gt;generate(\u0026#39;admin_customers_view\u0026#39;, [\u0026#39;customerId\u0026#39;=\u0026gt; (int)$order-\u0026gt;id_customer]); $bar-\u0026gt;add( new \\PrestaShopBundle\\Controller\\Admin\\Sell\\Order\\ActionsBarButton( \u0026#39;btn-secondary\u0026#39;, [\u0026#39;href\u0026#39; =\u0026gt; $viewCustomerUrl], \u0026#39;View customer\u0026#39; ) ); $bar-\u0026gt;add( new \\PrestaShopBundle\\Controller\\Admin\\Sell\\Order\\ActionsBarButton( \u0026#39;btn-info\u0026#39;, [\u0026#39;href\u0026#39; =\u0026gt; \u0026#39;https://www.prestashop.com/\u0026#39;], \u0026#39;Go to prestashop\u0026#39; ) ); $bar-\u0026gt;add( new \\PrestaShopBundle\\Controller\\Admin\\Sell\\Order\\ActionsBarButton( \u0026#39;btn-dark\u0026#39;, [\u0026#39;href\u0026#39; =\u0026gt; \u0026#39;https://github.com/PrestaShop/example-modules/tree/master/demovieworderhooks\u0026#39;], \u0026#39;Go to GitHub\u0026#39; ) ); $createAnOrderUrl = $router-\u0026gt;generate(\u0026#39;admin_orders_create\u0026#39;); $bar-\u0026gt;add( new \\PrestaShopBundle\\Controller\\Admin\\Sell\\Order\\ActionsBarButton( \u0026#39;btn-link\u0026#39;, [\u0026#39;href\u0026#39; =\u0026gt; $createAnOrderUrl], \u0026#39;Create an order\u0026#39; ) ); }  We used full path here \\PrestaShopBundle\\Controller\\Admin\\Sell\\Order\\ActionsBarButton but a slightly better approach could be with use statement followed by imported class namespace above the class declaration: use PrestaShopBundle\\Controller\\Admin\\Sell\\Order\\ActionsBarButton; With $router = $this-\u0026gt;get('router'); we inject the router capable to generate url links to controller actions from routes and their parameters. For example:\n\u0026lt;?php $viewCustomerUrl = $router-\u0026gt;generate(\u0026#39;admin_customers_view\u0026#39;, [\u0026#39;customerId\u0026#39;=\u0026gt; (int)$order-\u0026gt;id_customer]); And also we use ActionsBarButtonsCollection to add our new ActionsBarButton buttons. And just with this small function we get a nice result (View customer and More actions buttons added):\n  Signature card   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/admin-controllers/",
	"title": "Admin controllers",
	"tags": [],
	"description": "",
	"content": "Create Admin module controllers   Since 1.7.3 you create and override templates and services in your modules. Since 1.7.4, you can create and override forms and console commands. Since 1.7.5, you can create your own \u0026ldquo;modern\u0026rdquo; controllers! Since 1.7.7, you can decorate Core controllers  Starting on PrestaShop 1.7.5, you can rely on the modern environment to add new entry points to your applications.\nUsing modern pages, you will have access to the PrestaShop debug toolbar, the service container, Twig and Doctrine, among others. For your views, the PrestaShop UI Kit is available, built on top of Bootstrap 4 and ensuring your views are consistent with the PrestaShop Back Office.\nHow to declare a new Controller  Somewhere in your module declare a new class that will act as a Controller:\n\u0026lt;?php // modules/your-module/src/Controller/DemoController.php  namespace MyModule\\Controller; use Doctrine\\Common\\Cache\\CacheProvider; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; class DemoController extends FrameworkBundleAdminController { private $cache; // you can use symfony DI to inject services  public function __construct(CacheProvider $cache) { $this-\u0026gt;cache = $cache; } public function demoAction() { return $this-\u0026gt;render(\u0026#39;@Modules/your-module/templates/admin/demo.html.twig\u0026#39;); } } If you want Symfony Dependency Injection to inject services into your controller, you need to use specific YAML service declaration:\nservices:# The name of the service must match the full namespace classMyModule\\Controller\\DemoController:class:MyModule\\Controller\\DemoControllerarguments:- \u0026#39;@doctrine.cache.provider\u0026#39;You can also retrieve services with the container available in symfony controllers -\u0026gt;\n\u0026lt;?php // modules/your-module/src/Controller/DemoController.php  namespace MyModule\\Controller; use Doctrine\\Common\\Cache\\CacheProvider; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; class DemoController extends FrameworkBundleAdminController { public function demoAction() { // you can also retrieve services directly from the container  $cache = $this-\u0026gt;container-\u0026gt;get(\u0026#39;doctrine.cache\u0026#39;); return $this-\u0026gt;render(\u0026#39;@Modules/your-module/templates/admin/demo.html.twig\u0026#39;); } } You have access to the Container, to Twig as rendering engine, the Doctrine ORM, everything from Symfony framework ecosystem. Note that you must return a Response object, but this can be a JsonResponse if you plan to make a single page application (or \u0026ldquo;SPA\u0026rdquo;).\nThis controller works exactly the same as the Core Back Office ones. You must enable the autoloading for this Controller. For example using a composer.json file for your module.\nExample using PSR-4 namespacing   Use namespace for your Controller file\n\u0026lt;?php // modules/your-module/src/Controller/DemoController.php  namespace MyModule\\Controller; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController;   Configure composer to autoload this namespace\n{ \u0026#34;name\u0026#34;: \u0026#34;you/your-module\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;...\u0026#34;, \u0026#34;autoload\u0026#34;: { \u0026#34;psr-4\u0026#34;: { \u0026#34;MyModule\\\\Controller\\\\\u0026#34;: \u0026#34;src/Controller/\u0026#34; } }, \u0026#34;config\u0026#34;: { \u0026#34;prepend-autoloader\u0026#34;: false }, \u0026#34;type\u0026#34;: \u0026#34;prestashop-module\u0026#34; }   You should run composer dumpautoload console command from where your module\u0026rsquo;s composer.json file is located.\nIf you do not have \u0026ldquo;composer\u0026rdquo; you can search for it. Composer is available on any operating system.\nNow we have created and loaded your controller, you need to declare a route. A route map an action of your controller to an URI.\nHow to map an action of your controller to a URI  This is really simple (and very well documented in Symfony\u0026rsquo;s Routing component documentation):\nFor instance:\n# modules/your-module/config/routes.ymlyour_route_name:path:your-module/demomethods:[GET]defaults:_controller:\u0026#39;MyModule\\Controller\\DemoController::demoAction\u0026#39; Any callable can be used to populate the _controller attribute, you don\u0026rsquo;t even need to create your own controller! You could even use a public function from your module main class. Even so, we strongly suggest using a controller. For controllers to link with the routes correctly always use double colon (::) and not the single colon (:) to separate classes and method names! Since Symfony 4.1 the bundle notation is going to be deprecated: https://symfony.com/blog/new-in-symfony-4-1-deprecated-the-bundle-notation The Controller in the previous example will now be available if you browse /admin-dev/modules/your-module/demo. Pay attention to this path: it starts with /modules.\nThis is because all module routes are, by default, prefixed with /modules.\nDisabling the prefix  If however you need or wish your route not to be prefixed, you can use the _disable_module_prefix route option to disable the prefix introduced in PrestaShop 1.7.7.0.\n# modules/your-module/config/routes.ymlyour_route_name:path:your-module/demomethods:[GET]defaults:_controller:\u0026#39;MyModule\\Controller\\DemoController::demoAction\u0026#39;_disable_module_prefix:trueSecure your controller  It is safer to define permissions required to use your controller, this can be configured using the @AdminSecurity annotation and some configuration in your routing file. You can read this documentation if you need more details about Controller Security.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/benchmark/back-office/",
	"title": "Back-Office Benchmark",
	"tags": [],
	"description": "",
	"content": "How to benchmark your PrestaShop Shop (Back-office) Benchmark methodology In order to benchmark the performances of the backoffice of your shop, you will use the Gatling testing tool.\n Note: Backoffice benchmark is only possible starting with prestashop 1.7.4.0!\n  If you want still want to run the test for version \u0026lt; 1.7.4.0, take a look at this PR: https://github.com/PrestaShop/PrestaShop/pull/8876\n What is Gatling? Gatling is a stress tool. Development is currently focusing on HTTP support. We won’t explain here the fundamentals of Gatling, but for more details I suggest you to have a look at the Gatling project.\nAutomatic run of Gatling on dockerized installation (recommended) Prerequisite  git docker  Clone the repository To follow these instructions, you will use the following github repository: Prestashop performance project\ngit clone git@github.com:PrestaShop/performance-project.git Shop filled with fixtures Benchmarks require a pre-populated shop. But this shop content has to be the same at each new bench in order to get reproducible results. Prestashop ShopCreator project will help to generate fixtures, used during shop installation to populate the benched shop.\nGenerate fixtures cd performance-project cd shop  README.md contains instructions to get a working shop filled with fixtures, using “Prestashop ShopCreator” project\ngit clone git@github.com:PrestaShop/prestashop-shop-creator.git  ShopCreator requires a config file to know which fixtures it has to generate. shop-creator-config.yml is the one used in this study. You can customize it to fit your own needs. Copy it in the ShopCreator /config/ directory.\ncp shop-creator-config.yml prestashop-shop-creator/app/config/  First we need to install required ShopCreator dependencies\ncomposer install  Once your config is ready, run fixture generation in ShopCreator directory\nphp app/console.php  Fixtures are created in /generated_data/ directory. It contains xml files with data for each Prestashop entity, and images for products, categories…\nInstall a shop with generated fixtures To use these generated fixtures, you need to copy the directory content into the installation directory of Prestashop before installing the shop\ncp -R generated_data/* [prestashop]/install/fixtures/fashion/  Make sure you’re not in debug mode! In config/defines.inc.php you should have:\ndefine('_PS_MODE_DEV_', false);  Once this is done, simply install and run your shop. If you want to use our pre-configured Dockerfile to do this, just keep reading.\nInstall and run the shop with docker The directory /prestashop-performance/ contains required Dockerfile and scripts to install and run a shop with generated fixtures\ncd ..  Build the docker image Copy the previously generated fixtures in the corresponding directory.\ncp -R prestashop-shop-creator/generated_data/* prestashop-performance/fixtures/  Then you can build the docker image. This one will embed generated fixtures since the Dockerfile copy them in the image.\ncd prestashop-performance docker build -t prestashop-bench .  Your image is ready to use.\nRun the shop Run the shop with the following command:\ndocker run \\ -e FIXTURE_FOLDER=fixtures\\ -e PS_DOMAIN=localhost:8080\\ -e PS_FOLDER_ADMIN=admin1234\\ -e PS_ERASE_DB=1 \\ -e PS_CANONICAL_REDIRECT_DISABLE=1 \\ -e DB_SERVER=host.docker.internal\\ -e DB_PORT=3306\\ -e DB_NAME=prestashop_bench \\ -e DB_USER=prestashop_bench \\ -e DB_PASSWD=prestashop_bench \\ -p 8080:80 \\ prestashop-bench Installation can take several minutes, depending on the size of fixtures you set, and of course depending on the machine you run it on.\nOnce it is done, you should access this shop from http://localhost:8080 on your browser.\nHosting customizations The docker image above is used for this study purposes. It is deployed on several stacks detailed in Results. Docker usage makes it easy to customize prestashop installation, or hosting configuration like php tuning, or mysql tuning.\nRun Gatling scenarios cd performance-project cd benchmark/gatling  NOTICE : Gatling scenarios will create orders on the tested shop. You should not use it on production environment Build Gatling image Official gatling image needs to be lightly customized. More precisely we need to pass some java arguments to the scenarios.\ndocker build -t prestashop-bench-gatling .  Run Gatling Provided Gatling run command accepts arguments such as user count, customer count, test duration.\ndocker run -it --rm \\ -v $dir/results:/opt/gatling/results \\ -e JAVA_OPTS=\u0026#34;-DusersCount=500 -DcustomersCount=20 -DadminsCount=0 -DrampDurationInSeconds=900 -DhttpBaseUrlFO=http://shop2.stack1.prestashop.net -DhttpBaseUrlBO=http://shop2.stack1.prestashop.net/ps-admin -DadminUser=demo@prestashop.com -DadminPassword=prestashop\u0026#34; \\ --add-host=sandbox.prestashop.com:192.168.0.4 \\ prestashop/performance-gatling \\ -s LoadSimulation In the example above:\n -v $dir/results:/opt/gatling/results mount result/ directory to get gatling results stored in it -DrampDurationInSeconds=900 the gatling simulation will add user count during this period (in seconds) -DusersCount=500 User count to run FrontOfficeCrawl scenario (crawling product/category pages) -DcustomersCount=500 User count to run FrontOfficeCart scenario (placing order) -DadminsCount=500 User count to run BackOfficeCrawl scenario -s LoadSimulation The name of the gatling simulation in the code (in the directory user-files/simulations/)  Gatling run script A more scriptable approach could be using the provided run.sh script. This script aims to properly rename result directory to a more readable one, and process these results to extract some useful data such as the needed “order-per-hour” KPI. You could then write your own batch.sh to run multiple gatling benchmarks.\nManual run of Gatling Gatling installation Download Gatling from here, and in the same way have a look at the Gatling quickstart page.\nOnce unzipping the folder it will look like as shown below:\nYour Gatling is ready to be run Now let\u0026rsquo;s test if our Gatling works well, so you can launch a sample test included natively in the project with the CLI:\n➜ ./bin/gatling.sh And choose the simulation you want to run\nIn my example I run \u0026ldquo;[1] basic.BasicExempleSimulation\u0026rdquo; Well done! Our Gatling installation is ready! After few minutes you can consult the detailed report generated automatically into \u0026ldquo;results\u0026rdquo; folder.\nInsert and setup your script Download the script \u0026ldquo;parcoursbackoffice.scala\u0026rdquo; and put it under \u0026ldquo;/gatling/user-files/simulations\u0026rdquo;.\nOpen with your editor the parcoursbackoffice.scala file and setup your script:\n URL:  EMAIL:  PASSWORD:   Disable the token To avoid handling the multiple generated token on each back-office page, you can just disable it by following the steps below:\nSetup environnement TOKEN variable to \u0026ldquo;disabled\u0026rdquo; allows you to disable token in urls for Symfony pages and in legacy pages. If you want to test it you need to setup environment variable (SetEnv TOKEN disabled in Apache vhost configuration file) and check that Symfony pages (Product, Module, \u0026hellip;) urls doesn\u0026rsquo;t contains _token anymore and legacy pages shouldn\u0026rsquo;t contains token parameter.\nFor example if you site is setup in /etc/apache2/sites-enabled/000-default.conf\nadd the value\nSetEnv _TOKEN_ disabled before\n\u0026lt; /VirtualHost \u0026gt;  Note: don\u0026rsquo;t forget to restart your apache service! Now the token are disabled on your PrestaShop site Back-office, this mean that everyone who can log-in your Back-office could access to anypage from the url page. That why we recommend you to run the benchmark on a website only dedicated to test. If this is not the case, don\u0026rsquo;t forget to restore it when you finish your performance test.\n Congratulations your performance testing script is ready to be run! Don\u0026rsquo;t forget to improve and share this Gatling script "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/testing/ci-cd/",
	"title": "Continuous Integration / Continuous Deployment",
	"tags": [],
	"description": "",
	"content": "Continuous Integration / Continuous Deployment In the previous page we detailed some testing tools and how to execute them. Thay may be run locally, in order to check the code is fine before pushing it to a remote git repository, but they can also be automatically run by a dedicated test environment after each push. This can be useful to prevent code being pushed to production if one of your tools reports an issue you missed.\nOur modules are hosted on GitHub and GitLab repositories and each of them provide a solution for running these tests automatically. The following files allow the tools to run on both environments.\nGitHub This example is taken from the module ps_checkout. The latest version and more checks can be found in https://github.com/PrestaShopCorp/ps_checkout/tree/master/.github/workflows.\nPHP Checks name:PHP testson:[push, pull_request]jobs:# Check there is no syntax errors in the projectphp-linter:name:PHP Syntax check 5.6|7.2|7.3runs-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2.0.0- name:PHP syntax checker 5.6uses:prestashop/github-action-php-lint/5.6@master- name:PHP syntax checker 7.2uses:prestashop/github-action-php-lint/7.2@master- name:PHP syntax checker 7.3uses:prestashop/github-action-php-lint/7.3@master# Check the PHP code follow the coding standardsphp-cs-fixer:name:PHP-CS-Fixerruns-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2.0.0- name:Run PHP-CS-Fixeruses:prestashopcorp/github-action-php-cs-fixer@master# Run PHPStan against the module and a PrestaShop releasephpstan:name:PHPStanruns-on:ubuntu-lateststrategy:matrix:presta-versions:[\u0026#39;1.7.0.3\u0026#39;,\u0026#39;latest\u0026#39;]steps:- name:Checkoutuses:actions/checkout@v2.0.0# Add vendor folder in cache to make next builds faster- name:Cache vendor folderuses:actions/cache@v1with:path:vendorkey:php-${{ hashFiles(\u0026#39;composer.lock\u0026#39;) }}# Add composer local folder in cache to make next builds faster- name:Cache composer folderuses:actions/cache@v1with:path:~/.composer/cachekey:php-composer-cache- run:composer install# Docker images prestashop/prestashop may be used, even if the shop remains uninstalled- name:Pull PrestaShop files (Tag ${{ matrix.presta-versions }})run:docker run -tid --rm -v ps-volume:/var/www/html --name temp-ps prestashop/prestashop:${{ matrix.presta-versions }}# Run a container for PHPStan, having access to the module content and PrestaShop sources.# This tool is outside the composer.json because of the compatibility with PHP 5.6- name :Run PHPStanrun:docker run --rm --volumes-from temp-ps -v $PWD:/web/module -e _PS_ROOT_DIR_=/var/www/html --workdir=/web/module phpstan/phpstan:0.12 analyse --configuration=/web/module/tests/phpstan/phpstan.neonBuild module artifact name:Buildon:[push, pull_request]jobs:deploy:name:build dependencies \u0026amp; create artifactruns-on:ubuntu-lateststeps:- name:Checkoutuses:actions/checkout@v2.0.0# Optional step compiling JS files- name:Build JS dependenciesuses:PrestaShopCorp/github-action-build-js/12@v1.0with:cmd:yarnpath:./_dev# Install PHP dependencies (Production ONLY)- name:Install composer dependenciesrun:composer install --no-dev -o# Remove development files- name:Clean-up projectuses:PrestaShopCorp/github-action-clean-before-deploy@v1.0# Zip files and upload to artifacts list- name:Create \u0026amp; upload artifactuses:actions/upload-artifact@v1with:name:${{ github.event.repository.name }}path:../GitLab This example is taken from one of our module sold on the marketplace, hosted on GitLab.\nstages:- tests- build- deploy# Preliminary code to run, preparing the environment for a PHP job.# Install wget, git and composer, then get dependencies..before_script_php_template:\u0026amp;before_script_phpbefore_script:- apt-get update \u0026amp;\u0026amp; apt-get install wget git zip unzip -y- wget https://composer.github.io/installer.sig -O - -q | tr -d \u0026#39;\\n\u0026#39; \u0026gt; installer.sig- php -r \u0026#34;copy(\u0026#39;https://getcomposer.org/installer\u0026#39;, \u0026#39;composer-setup.php\u0026#39;);\u0026#34;- php -r \u0026#34;if (hash_file(\u0026#39;SHA384\u0026#39;, \u0026#39;composer-setup.php\u0026#39;) === file_get_contents(\u0026#39;installer.sig\u0026#39;)) { echo \u0026#39;Installer verified\u0026#39;; } else { echo \u0026#39;Installer corrupt\u0026#39;; unlink(\u0026#39;composer-setup.php\u0026#39;); } echo PHP_EOL;\u0026#34;- php composer-setup.php- php -r \u0026#34;unlink(\u0026#39;composer-setup.php\u0026#39;); unlink(\u0026#39;installer.sig\u0026#39;);\u0026#34;test:php-5.6:\u0026lt;\u0026lt;:*before_script_phpimage:php:5.6stage:testsscript:- find . -type f -name \u0026#39;*.php\u0026#39; ! -path \u0026#34;./vendor/*\u0026#34; ! -path \u0026#34;./tests/*\u0026#34; -exec php -l -n {} \\; | (! grep -v \u0026#34;No syntax errors detected\u0026#34;)test:php-7.2:\u0026lt;\u0026lt;:*before_script_phpimage:php:7.2stage:testsscript:- find . -type f -name \u0026#39;*.php\u0026#39; ! -path \u0026#34;./vendor/*\u0026#34; ! -path \u0026#34;./tests/*\u0026#34; -exec php -l -n {} \\; | (! grep -v \u0026#34;No syntax errors detected\u0026#34;)php-cs-fixer-7-2:\u0026lt;\u0026lt;:*before_script_phpimage:php:7.2stage:testsscript:|php composer.phar install --dev php -d memory_limit=-1 vendor/bin/php-cs-fixer fix --dry-run --diff --using-cache=no --diff-format udiffphpstan-php-7-2:\u0026lt;\u0026lt;:*before_script_phpvariables:_PS_ROOT_DIR_:/var/www/html/image:prestashop/prestashop:1.7-7.2-apachestage:testsscript:|php composer.phar install --dev php composer.phar global require phpstan/phpstan-shim:0.12 ln -s /builds/ps-addons/$CI_PROJECT_NAME /var/www/html/modules/$CI_PROJECT_NAME php -d memory_limit=-1 ~/.composer/vendor/bin/phpstan analyse --configuration=/var/www/html/modules/$CI_PROJECT_NAME/tests/phpstan/phpstan.neon# Optional job installing JS dependencies and compiling scriptsbefore-deploy:image:node:10.16stage:buildartifacts:untracked:truescript:- npm install- npm run build# Clean development files and zip content for the marketplacedeploy-artifact-release:\u0026lt;\u0026lt;:*before_script_phpimage:php:7.2stage:deployscript:|php composer.phar install --no-dev -o rm -rf node_modules rm -rf _dev rm -f .browserlistrc rm -f .eslintrc.js rm -f .postcssrc.js rm -f babel.config.js rm -f vue.config.js rm -f .package.json rm -f .package-lock.json rm -f .php_cs.dist rm -f .gitlab-ci.yml rm -f .editorconfig rm -f Makefile rm -f docker-compose.yml rm -rf .git rm -f .gitignore rm -rf tests rm -f composer.phar mkdir ../module mv * ../module mkdir $CI_PROJECT_NAME mv ../module/* $CI_PROJECT_NAMEartifacts:name:$CI_PROJECT_NAMEpaths:- $CI_PROJECT_NAME"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute-pull-requests/contribute_using_docker/",
	"title": "Contribute using Docker",
	"tags": [],
	"description": "",
	"content": "How to become a Core Contributor using Docker If you\u0026rsquo;re reading this, thank you! This means you\u0026rsquo;re interested in contributing to PrestaShop. You probably are a PrestaShop developer, and your use of the project is slightly different from ours. For instance, there are few differences between PrestaShop 1.7 (the release) and the branch 1.7 of PrestaShop in the GitHub repository. This is because we create a release usable by everyone from our sources.\nTo be able to contribute you need:\n a GitHub account to know the basics of git to be able to run prestashop from the sources  In this part, we\u0026rsquo;ll run PrestaShop using docker.\nNo need to \u0026ldquo;know\u0026rdquo; docker, but you should have the \u0026ldquo;docker\u0026rdquo; command available in your terminal.\nIf you need to install \u0026ldquo;docker\u0026rdquo;, you can follow their Documentation. Install PrestaShop Core To install the core, you need to fork the PrestaShop repository. A fork is a copy of the original project on GitHub. If you don\u0026rsquo;t know what is a fork or how to fork a project on GitHub, you can follow the GitHub tutorial.\nOnce you have forked the project, you need to download it to your computer.\nFor instance, if your GitHub nickname is preston, this is what you should do in your terminal:\ngit clone https://github.com/preston/PrestaShop.git  Of course, you need to replace \u0026ldquo;preston\u0026rdquo; with your own nickname here. Then you can start the effective installation:\ncd PrestaShop docker-compose up  The installation can take between 10-15 minutes, don\u0026rsquo;t close the terminal! You\u0026rsquo;ll see a lot of information displayed in your terminal, you should spot the following ones:\nprestashop-git | \\n* Installing PrestaShop, this may take a while ... prestashop-git | -- Installation successful! -- prestashop-git | \\n* Almost ! Starting web server now\\n At this point, your PrestaShop installation is ready and the website is available at http://localhost:8001.\nThe default credentials for the back-office are demo@prestashop.com / prestashop_demo.\nDefault MySQL credentials to connect using 3rd party programs like Sequel Pro and others: Username: root Password: prestashop\nYou can check MySQL port using command line\ndocker-compose ps mysql  You can now close the terminal if you want. Make your first contribution The very first step to create a pull request is to create your own git branch.\nLet\u0026rsquo;s say you want to suggest a new feature, like emoticon support everywhere. A correct name for your git branch could be \u0026ldquo;add-emoticons-support\u0026rdquo;:\ngit checkout -b \u0026#34;add-emoticons-support\u0026#34; Then you can start to do changes on PrestaShop Core, and create commits: YaY!\nA good practice is to write meaningful commits messages: it\u0026rsquo;s better to have \u0026ldquo;corrected type hinting in FooBar\u0026rdquo; than \u0026ldquo;fixed stuff\u0026rdquo;. Launch the test suite Your changes now sounds ok, and you\u0026rsquo;re almost ready to share your changes with the community. Before all, you may ensure your changes don\u0026rsquo;t break everything: this is why we have multiple test suites you can use. Want to read more about tests in PrestaShop? Head to [this](/1.7/testing/introduction/ page.\nYou can execute it in your dockerized PrestaShop application without altering your website (it uses a specific database).\ndocker exec prestashop-git sh tests/check_unit.sh Publish your work See Submit a Pull Request.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sample-modules/extending-sf-form-with-upload-image-field/",
	"title": "Extending Symfony form with upload image field",
	"tags": [],
	"description": "",
	"content": "Extending Symfony form with upload image field  Introduction In this tutorial we are going to build a module which extends Suppliers form (SELL -\u0026gt; Catalog -\u0026gt; Brands \u0026amp; Suppliers). This module will address the following need \u0026ldquo;I\u0026rsquo;d like to add an \u0026lsquo;upload image\u0026rsquo; field to the Supplier Add/Edit form because I want to display a new logo for each supplier on my shop. So this new field must allow me to add, edit and delete image files linked to a supplier. Obviously I expect the uploaded files to be stored in a consistent way with how PrestaShop usually stores such files.\u0026rdquo;\nWe are going to create the module to address this need by using PrestaShop hooks in the Add/Edit Supplier Back-Office page and we will follow some software development best practices such as SOLID principles to make our code as supported as possible !\nYou will learn how to create:\n Main module class: main module entry point and hook entry point Installer class: responsible for module installation and uninstallation process Create Symfony controller: needed as we add a new \u0026ldquo;delete image\u0026rdquo; controller action Doctrine entity: this model is responsible for the image data persistence Repository class: this model is for image database search and retrieve Image Uploader class: this class is responsible for image upload process Twig View template: needed for display  Main module class Let\u0026rsquo;s create main module class DemoExtendSymfonyForm2\n\u0026lt;?php // since this module is compatible with PS 1.7.7 and later, we // can use PHP7 strict types because PHP5 support has been dropped for PS 1.7.7 declare(strict_types=1); // use statements  if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } // needed as use Composer to autoload this module require_once __DIR__.\u0026#39;/vendor/autoload.php\u0026#39;; /** * Class demoextendsymfonyform */ class DemoExtendSymfonyForm2 extends Module { private const SUPPLIER_EXTRA_IMAGE_PATH = \u0026#39;/img/su/\u0026#39;; public function __construct() { $this-\u0026gt;name = \u0026#39;demoextendsymfonyform2\u0026#39;; $this-\u0026gt;author = \u0026#39;PrestaShop\u0026#39;; $this-\u0026gt;version = \u0026#39;1.0.0\u0026#39;; $this-\u0026gt;ps_versions_compliancy = [\u0026#39;min\u0026#39; =\u0026gt; \u0026#39;1.7.7.0\u0026#39;, \u0026#39;max\u0026#39; =\u0026gt; _PS_VERSION_]; parent::__construct(); $this-\u0026gt;displayName = $this-\u0026gt;l(\u0026#39;Demo Symfony Forms #2\u0026#39;); $this-\u0026gt;description = $this-\u0026gt;l( \u0026#39;Demonstration of how to add an image upload field inside the Symfony form\u0026#39; ); } } Let\u0026rsquo;s create Installer class responsible for hooks registration and database management:\n\u0026lt;?php declare(strict_types=1); namespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Install; use Db; use Module; /** * Class Installer * @package PrestaShop\\Module\\DemoExtendSymfonyForm\\Install */ class Installer { /** * Module\u0026#39;s installation entry point. * * @param Module $module * * @return bool */ public function install(Module $module): bool { if (!$this-\u0026gt;registerHooks($module)) { return false; } if (!$this-\u0026gt;installDatabase()) { return false; } return true; } /** * Module\u0026#39;s uninstallation entry point. * * @return bool */ public function uninstall(): bool { return $this-\u0026gt;uninstallDatabase(); } /** * Install the database modifications required for this module. * * @return bool */ private function installDatabase(): bool { $queries = [ \u0026#39;CREATE TABLE IF NOT EXISTS `\u0026#39;._DB_PREFIX_.\u0026#39;supplier_extra_image` ( `id_extra_image` int(11) NOT NULL AUTO_INCREMENT, `id_supplier` int(11) NOT NULL, `image_name` varchar(64) NOT NULL, PRIMARY KEY (`id_extra_image`) ) ENGINE=\u0026#39;._MYSQL_ENGINE_.\u0026#39; DEFAULT CHARSET=utf8;\u0026#39;, ]; return $this-\u0026gt;executeQueries($queries); } /** * Uninstall database modifications. * * @return bool */ private function uninstallDatabase(): bool { $queries = [ \u0026#39;DROP TABLE IF EXISTS `\u0026#39;._DB_PREFIX_.\u0026#39;supplier_extra_image`\u0026#39;, ]; return $this-\u0026gt;executeQueries($queries); } /** * Register hooks for the module. * * @param Module $module * * @return bool */ private function registerHooks(Module $module): bool { $hooks = [ \u0026#39;actionSupplierFormBuilderModifier\u0026#39;, \u0026#39;actionAfterCreateSupplierFormHandler\u0026#39;, \u0026#39;actionAfterUpdateSupplierFormHandler\u0026#39;, ]; return (bool) $module-\u0026gt;registerHook($hooks); } /** * A helper that executes multiple database queries. * * @param array $queries * * @return bool */ private function executeQueries(array $queries): bool { foreach ($queries as $query) { if (!Db::getInstance()-\u0026gt;execute($query)) { return false; } } return true; } } Let\u0026rsquo;s use Installer class inside the main module class by adding code snippet below to DemoExtendSymfonyForm2 class.\n\u0026lt;?php /** * @return bool */ public function install() { if (!parent::install()) { return false; } $installer = new Installer(); return $installer-\u0026gt;install($this); } /** * @return bool */ public function uninstall() { $installer = new Installer(); return $installer-\u0026gt;uninstall() \u0026amp;\u0026amp; parent::uninstall(); } Let\u0026rsquo;s create SupplierExtraImage entity class. We use [Doctrine] (https://devdocs.prestashop.com/1.7/modules/concepts/doctrine/) which is available for PrestaShop modules since version 1.7.6.\n\u0026lt;?php declare(strict_types=1); namespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Entity; use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Table() * @ORM\\Entity(repositoryClass=\u0026#34;PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository\\SupplierExtraImageRepository\u0026#34;) */ class SupplierExtraImage { /** * @var int * * @ORM\\Id * @ORM\\Column(name=\u0026#34;id_extra_image\u0026#34;, type=\u0026#34;integer\u0026#34;) * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;) */ private $id; /** * @ORM\\Column(name=\u0026#34;id_supplier\u0026#34;, type=\u0026#34;integer\u0026#34;) */ private $supplierId; /** * @var string * * @ORM\\Column(type=\u0026#34;string\u0026#34;) */ private $imageName; /** * @return int */ public function getId(): int { return $this-\u0026gt;id; } /** * @param int $id */ public function setId(int $id): void { $this-\u0026gt;id = $id; } /** * @return mixed */ public function getSupplierId() { return $this-\u0026gt;supplierId; } /** * @param mixed $supplierId */ public function setSupplierId($supplierId): void { $this-\u0026gt;supplierId = $supplierId; } /** * @return string */ public function getImageName(): string { return $this-\u0026gt;imageName; } /** * @param string $imageName */ public function setImageName(string $imageName): void { $this-\u0026gt;imageName = $imageName; } } Let\u0026rsquo;s create SupplierExtraImageRepository class:\n\u0026lt;?php declare(strict_types=1); namespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository; use Doctrine\\ORM\\EntityRepository; use PrestaShop\\Module\\DemoExtendSymfonyForm\\Entity\\SupplierExtraImage; /** * Class SupplierExtraImageRepository * @package PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository */ class SupplierExtraImageRepository extends EntityRepository { /** * @param $supplierId * @param $imageName */ public function upsertSupplierImageName($supplierId, $imageName) { /** @var SupplierExtraImage $supplierExtraImage */ $supplierExtraImage = $this-\u0026gt;findOneBy([\u0026#39;supplierId\u0026#39; =\u0026gt; $supplierId]); if (!$supplierExtraImage) { $supplierExtraImage = new SupplierExtraImage(); $supplierExtraImage-\u0026gt;setSupplierId($supplierId); } $supplierExtraImage-\u0026gt;setImageName($imageName); $em = $this-\u0026gt;getEntityManager(); $em-\u0026gt;persist($supplierExtraImage); $em-\u0026gt;flush(); } /** * @param SupplierExtraImage $supplierExtraImage */ public function deleteExtraImage(SupplierExtraImage $supplierExtraImage) { $em = $this-\u0026gt;getEntityManager(); if ($supplierExtraImage) { $em-\u0026gt;remove($supplierExtraImage); $em-\u0026gt;flush(); } } } Let\u0026rsquo;s create hook hookActionSupplierFormBuilderModifier function inside Main module class. This is a hook available for [CRUD forms] (https://devdocs.prestashop.com/1.7/modules/sample-modules/grid-and-identifiable-object-form-hooks-usage/) in PrestaShop Symfony pages.\n\u0026lt;?php /** * @param array $params */ public function hookActionSupplierFormBuilderModifier(array $params) { /** @var SupplierExtraImageRepository $supplierExtraImageRepository */ $supplierExtraImageRepository = $this-\u0026gt;get( \u0026#39;prestashop.module.demoextendsymfonyform.repository.supplier_extra_image_repository\u0026#39; ); $translator = $this-\u0026gt;getTranslator(); /** @var FormBuilderInterface $formBuilder */ $formBuilder = $params[\u0026#39;form_builder\u0026#39;]; // we add to the Symfony form an `upload_image_file` field that will be used by BO user to upload image files  $formBuilder -\u0026gt;add(\u0026#39;upload_image_file\u0026#39;, FileType::class, [ \u0026#39;label\u0026#39; =\u0026gt; $translator-\u0026gt;trans(\u0026#39;Upload image file\u0026#39;, [], \u0026#39;Modules.DemoExtendSymfonyForm\u0026#39;), \u0026#39;required\u0026#39; =\u0026gt; false, ]); /** @var SupplierExtraImage $supplierExtraImage */ $supplierExtraImage = $supplierExtraImageRepository-\u0026gt;findOneBy([\u0026#39;supplierId\u0026#39; =\u0026gt; $params[\u0026#39;id\u0026#39;]]); if ($supplierExtraImage \u0026amp;\u0026amp; file_exists(_PS_SUPP_IMG_DIR_ . $supplierExtraImage-\u0026gt;getImageName())) { // When an image is already registered for this supplier, we add to the Symfony an  // \u0026#39;image_file\u0026#39; to provide a preview input to BO user and also provide a \u0026#34;delete button\u0026#34;  $formBuilder -\u0026gt;add(\u0026#39;image_file\u0026#39;, CustomContentType::class, [ \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;template\u0026#39; =\u0026gt; \u0026#39;@Modules/demoextendsymfonyform2/src/View/upload_image.html.twig\u0026#39;, \u0026#39;data\u0026#39; =\u0026gt; [ \u0026#39;supplierId\u0026#39; =\u0026gt; $params[\u0026#39;id\u0026#39;], \u0026#39;imageUrl\u0026#39; =\u0026gt; self::SUPPLIER_EXTRA_IMAGE_PATH . $supplierExtraImage-\u0026gt;getImageName(), ], ]); } } Let\u0026rsquo;s create SupplierExtraImageUploader class:\n\u0026lt;?php declare(strict_types=1); namespace PrestaShop\\Module\\DemoExtendSymfonyForm\\Uploader; use PrestaShop\\Module\\DemoExtendSymfonyForm\\Entity\\SupplierExtraImage; use PrestaShop\\Module\\DemoExtendSymfonyForm\\Repository\\SupplierExtraImageRepository; use PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\ImageOptimizationException; use PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\ImageUploadException; use PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\MemoryLimitException; use PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\Exception\\UploadedImageConstraintException; use PrestaShop\\PrestaShop\\Core\\Image\\Uploader\\ImageUploaderInterface; use Symfony\\Component\\HttpFoundation\\File\\UploadedFile; /** * Class SupplierExtraImageUploader * @package PrestaShop\\Module\\DemoExtendSymfonyForm\\Uploader */ class SupplierExtraImageUploader implements ImageUploaderInterface { /** @var SupplierExtraImageRepository */ private $supplierExtraImageRepository; /** * @param SupplierExtraImageRepository $supplierExtraImageRepository */ public function __construct(SupplierExtraImageRepository $supplierExtraImageRepository) { $this-\u0026gt;supplierExtraImageRepository = $supplierExtraImageRepository; } /** * @param int $supplierId * @param UploadedFile $image */ public function upload($supplierId, UploadedFile $image) { $this-\u0026gt;checkImageIsAllowedForUpload($image); $tempImageName = $this-\u0026gt;createTemporaryImage($image); $this-\u0026gt;deleteOldImage($supplierId); $originalImageName = $image-\u0026gt;getClientOriginalName(); $destination = _PS_SUPP_IMG_DIR_ . $originalImageName; $this-\u0026gt;uploadFromTemp($tempImageName, $destination); $this-\u0026gt;supplierExtraImageRepository-\u0026gt;upsertSupplierImageName($supplierId, $originalImageName); } /** * Creates temporary image from uploaded file * * @param UploadedFile $image * * @throws ImageUploadException * * @return string */ protected function createTemporaryImage(UploadedFile $image) { $temporaryImageName = tempnam(_PS_TMP_IMG_DIR_, \u0026#39;PS\u0026#39;); if (!$temporaryImageName || !move_uploaded_file($image-\u0026gt;getPathname(), $temporaryImageName)) { throw new ImageUploadException(\u0026#39;Failed to create temporary image file\u0026#39;); } return $temporaryImageName; } /** * Uploads resized image from temporary folder to image destination * * @param $temporaryImageName * @param $destination * * @throws ImageOptimizationException * @throws MemoryLimitException */ protected function uploadFromTemp($temporaryImageName, $destination) { if (!\\ImageManager::checkImageMemoryLimit($temporaryImageName)) { throw new MemoryLimitException(\u0026#39;Cannot upload image due to memory restrictions\u0026#39;); } if (!\\ImageManager::resize($temporaryImageName, $destination)) { throw new ImageOptimizationException( \u0026#39;An error occurred while uploading the image. Check your directory permissions.\u0026#39; ); } unlink($temporaryImageName); } /** * Deletes old image * * @param $supplierId */ private function deleteOldImage($supplierId) { /** @var SupplierExtraImage $supplierExtraImage */ $supplierExtraImage = $this-\u0026gt;supplierExtraImageRepository-\u0026gt;findOneBy([\u0026#39;supplierId\u0026#39; =\u0026gt; $supplierId]); if ($supplierExtraImage \u0026amp;\u0026amp; file_exists(_PS_SUPP_IMG_DIR_ . $supplierExtraImage-\u0026gt;getImageName())) { unlink(_PS_SUPP_IMG_DIR_ . $supplierExtraImage-\u0026gt;getImageName()); } } /** * Check if image is allowed to be uploaded. * * @param UploadedFile $image * * @throws UploadedImageConstraintException */ protected function checkImageIsAllowedForUpload(UploadedFile $image) { $maxFileSize = \\Tools::getMaxUploadSize(); if ($maxFileSize \u0026gt; 0 \u0026amp;\u0026amp; $image-\u0026gt;getSize() \u0026gt; $maxFileSize) { throw new UploadedImageConstraintException( sprintf( \u0026#39;Max file size allowed is \u0026#34;%s\u0026#34; bytes. Uploaded image size is \u0026#34;%s\u0026#34;.\u0026#39;, $maxFileSize, $image-\u0026gt;getSize() ), UploadedImageConstraintException::EXCEEDED_SIZE ); } if (!\\ImageManager::isRealImage($image-\u0026gt;getPathname(), $image-\u0026gt;getClientMimeType()) || !\\ImageManager::isCorrectImageFileExt($image-\u0026gt;getClientOriginalName()) || preg_match(\u0026#39;/\\%00/\u0026#39;, $image-\u0026gt;getClientOriginalName()) // prevent null byte injection  ) { throw new UploadedImageConstraintException( sprintf( \u0026#39;Image format \u0026#34;%s\u0026#34;, not recognized, allowed formats are: .gif, .jpg, .png\u0026#39;, $image-\u0026gt;getClientOriginalExtension() ), UploadedImageConstraintException::UNRECOGNIZED_FORMAT ); } } } Let\u0026rsquo;s create hook hookActionAfterUpdateSupplierFormHandler inside main module class:\n\u0026lt;?php /** * @param array $params */ public function hookActionAfterUpdateSupplierFormHandler(array $params) { $this-\u0026gt;uploadImage($params); } Let\u0026rsquo;s create one more hook hookActionAfterCreateSupplierFormHandler inside main module class:\n\u0026lt;?php /** * @param array $params */ public function hookActionAfterCreateSupplierFormHandler(array $params) { $this-\u0026gt;uploadImage($params); } Let\u0026rsquo;s add UploadImage function to main class:\n\u0026lt;?php /** * @param array $params */ private function uploadImage(array $params): void { /** @var ImageUploaderInterface $supplierExtraImageUploader */ $supplierExtraImageUploader = $this-\u0026gt;get( \u0026#39;prestashop.module.demoextendsymfonyform.uploader.supplier_extra_image_uploader\u0026#39; ); /** @var UploadedFile $uploadedFile */ $uploadedFile = $params[\u0026#39;form_data\u0026#39;][\u0026#39;upload_image_file\u0026#39;]; if ($uploadedFile instanceof UploadedFile) { $supplierExtraImageUploader-\u0026gt;upload($params[\u0026#39;id\u0026#39;], $uploadedFile); } }  You can find the ready solution in PrestaShop example-modules github repository: https://github.com/PrestaShop/example-modules/tree/master/demoextendsymfonyform2 "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/work-with-search-form/",
	"title": "How to work with the Search Form",
	"tags": [],
	"description": "",
	"content": "How to work with the Search Form  The grid component allows to filter its content, to manage the filtering you will need to define the following elements:\n GridDefinition::getFilters Filters class Controllers:  Search action List action Reset filter action    Add Filters into GridDefinition You should use AbstractGridDefinitionFactory as a parent class, and define a const GRID_ID which will be used as a key to persist the Filters.\n\u0026lt;?php final class ManufacturerGridDefinitionFactory extends AbstractGridDefinitionFactory { const GRID_ID = \u0026#39;manufacturer\u0026#39;; /** * {@inheritdoc} */ protected function getId() { return self::GRID_ID; } ... /** * {@inheritdoc} */ protected function getFilters() { return (new FilterCollection()) -\u0026gt;add((new Filter(\u0026#39;id_manufacturer\u0026#39;, TextType::class)) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;attr\u0026#39; =\u0026gt; [ \u0026#39;placeholder\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Search ID\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;), ], ]) -\u0026gt;setAssociatedColumn(\u0026#39;id_manufacturer\u0026#39;) ) -\u0026gt;add((new Filter(\u0026#39;name\u0026#39;, TextType::class)) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;attr\u0026#39; =\u0026gt; [ \u0026#39;placeholder\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Search name\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;), ], ]) -\u0026gt;setAssociatedColumn(\u0026#39;name\u0026#39;) ) -\u0026gt;add((new Filter(\u0026#39;active\u0026#39;, YesAndNoChoiceType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;active\u0026#39;) ) -\u0026gt;add((new Filter(\u0026#39;actions\u0026#39;, SearchAndResetType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;actions\u0026#39;) -\u0026gt;setTypeOptions([ \u0026#39;reset_route\u0026#39; =\u0026gt; \u0026#39;admin_common_reset_search_by_filter_id\u0026#39;, \u0026#39;reset_route_params\u0026#39; =\u0026gt; [ \u0026#39;filterId\u0026#39; =\u0026gt; self::GRID_ID, ], \u0026#39;redirect_route\u0026#39; =\u0026gt; \u0026#39;admin_manufacturers_index\u0026#39;, ]) ) ; } ... } The filters types The filters collection allows you to define all the available filters (which will match your grid columns). You can define a specific type depending on the column. You can basically use any Symfony form type (including your custom ones) and PrestaShop provides a few filter types that might be useful to you.\nFilterable grid definition  Starting the 1.7.7 we made it even easier, you can use the AbstractFilterableGridDefinitionFactory. This will allow you use the common search controller.\n\u0026lt;?php final class AddressGridDefinitionFactory extends AbstractFilterableGridDefinitionFactory { const GRID_ID = \u0026#39;address\u0026#39;; /** * {@inheritdoc} */ protected function getId() { return self::GRID_ID; } ... } Filters class You need to define a Filters class linked to your Grid, it will allow you to define the default filters and sorting values. It will also make your list action simpler as PrestaShop provides a parameter resolver responsible of automatically create and fill a Filters object.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\ManufacturerGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Search\\Filters; /** * Class ManufacturerFilters is responsible for providing filter values for manufacturer grid. */ final class ManufacturerFilters extends Filters { /** @var string */ protected $filterId = ManufacturerGridDefinitionFactory::GRID_ID; /** * {@inheritdoc} */ public static function getDefaults() { return [ \u0026#39;limit\u0026#39; =\u0026gt; 10, \u0026#39;offset\u0026#39; =\u0026gt; 0, \u0026#39;orderBy\u0026#39; =\u0026gt; \u0026#39;name\u0026#39;, \u0026#39;sortOrder\u0026#39; =\u0026gt; \u0026#39;asc\u0026#39;, \u0026#39;filters\u0026#39; =\u0026gt; [], ]; } } Controller actions The Grid filtering workflow is divided into three actions:\n search action: it parses the filters from the POST request, then redirects to the list action list action: it parses the filters from GET request, persists them into database and finally renders the grid reset action: it cleans the persisted filters and reset to the default ones  In this tutorial we assume the search and list actions have the same url, thus we don\u0026rsquo;t need to specify the search route in the form action. Search manages the POST request and list the GET request. Most of the time you will use the default form factory when you configure your grid factory which is usually enough. However if you need to change the form action route or perform any other advanced management you might need to create your custom form factory. Search action Custom search controller You can use the ResponseBuilder service to easily create the search response, it only needs four arguments as input:\n the definition factory the request the filter ID the list route for redirection  \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\ManufacturerGridDefinitionFactory; use PrestaShopBundle\\Service\\Grid\\ResponseBuilder; use PrestaShopBundle\\Security\\Annotation\\AdminSecurity; use Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\RedirectResponse; class ManufacturerController extends FrameworkBundleAdminController { ... /** * Provides filters functionality * * @AdminSecurity(\u0026#34;is_granted(\u0026#39;read\u0026#39;, request.get(\u0026#39;_legacy_controller\u0026#39;))\u0026#34;) * * @param Request $request * * @return RedirectResponse */ public function searchAction(Request $request) { /** @var ResponseBuilder $responseBuilder */ $responseBuilder = $this-\u0026gt;get(\u0026#39;prestashop.bundle.grid.response_builder\u0026#39;); return $responseBuilder-\u0026gt;buildSearchResponse( $this-\u0026gt;get(\u0026#39;prestashop.core.grid.definition.factory.manufacturer\u0026#39;), $request, ManufacturerGridDefinitionFactory::GRID_ID, \u0026#39;admin_manufacturers_index\u0026#39; ); } ... } # your-module/config/routes.ymladmin_manufacturers_search:path:/methods:POSTdefaults:_controller:\u0026#39;PrestaShopBundle:Admin/Sell/Catalog/Manufacturer:search\u0026#39;_legacy_controller:AdminManufacturers_legacy_link:AdminManufacturers:submitFiltermanufacturerCommon search controller  As this controller is almost always the same, starting 1.7.7, we introduced a common controller. So all you need to do is define the routing:\n# your-module/config/routes.ymladmin_addresses_search:path:/methods:[POST]defaults:_controller:PrestaShopBundle:Admin\\Common:searchGridgridDefinitionFactoryServiceId:prestashop.core.grid.definition.factory.addressredirectRoute:admin_addresses_index_legacy_controller:AdminAddresses_legacy_link:AdminAddresses:submitFilteraddressList action Thanks to the internal parameter resolver you can directly use your Filters class as an argument in the controller. It then automatically:\n parses the potential parameters in the query and fills them into the Filters argument matches thanks to the class the filters from the database and fetch them if present persists the filters in the database  \u0026lt;?php class ManufacturerController extends FrameworkBundleAdminController { ... /** * Show manufacturers listing page. * * @AdminSecurity(\u0026#34;is_granted(\u0026#39;read\u0026#39;, request.get(\u0026#39;_legacy_controller\u0026#39;))\u0026#34;) * * @param Request $request * @param ManufacturerFilters $manufacturerFilters * * @return Response */ public function indexAction( Request $request, ManufacturerFilters $manufacturerFilters ) { $manufacturerGridFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.grid_factory.manufacturer\u0026#39;); $manufacturerGrid = $manufacturerGridFactory-\u0026gt;getGrid($manufacturerFilters); return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Sell/Catalog/Manufacturer/index.html.twig\u0026#39;, [ \u0026#39;enableSidebar\u0026#39; =\u0026gt; true, \u0026#39;help_link\u0026#39; =\u0026gt; $this-\u0026gt;generateSidebarLink($request-\u0026gt;attributes-\u0026gt;get(\u0026#39;_legacy_controller\u0026#39;)), \u0026#39;manufacturerGrid\u0026#39; =\u0026gt; $this-\u0026gt;presentGrid($manufacturerGrid), ]); } ... } Reset action This action resets the persisted filters and your grid filtering/sorting. This action is the same for nearly all grids so PrestaShop provides a common controller to manage it, and you actually already set it via the grid definition.\nIt is defined in the SearchAndResetType options, it uses admin_common_reset_search_by_filter_id and only needs the filter id to identify the filters to clear, and a redirection route.\n\u0026lt;?php ... -\u0026gt;add((new Filter(\u0026#39;actions\u0026#39;, SearchAndResetType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;actions\u0026#39;) -\u0026gt;setTypeOptions([ \u0026#39;reset_route\u0026#39; =\u0026gt; \u0026#39;admin_common_reset_search_by_filter_id\u0026#39;, \u0026#39;reset_route_params\u0026#39; =\u0026gt; [ \u0026#39;filterId\u0026#39; =\u0026gt; self::GRID_ID, ], \u0026#39;redirect_route\u0026#39; =\u0026gt; \u0026#39;admin_manufacturers_index\u0026#39;, ]) ) ... Search form in 1.7.5 In the 1.7.5 version, first one that integrated the grid component, the system was a bit different and used controller/action to identify the filters. It had a few drawbacks and was abandoned in favor of a unique id but in case you need it here is how to work with search form in 1.7.5.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/objectmodel/",
	"title": "ObjectModel class",
	"tags": [],
	"description": "",
	"content": "The ObjectModel class When needing to dive deep, you have to use the ObjectModel class. This is the main object of PrestaShop’s object model. It can be overridden… with precaution.\nIt is an Active Record kind of class (see: Active record pattern). The table attributes or view attributes of PrestaShop’s database are encapsulated in this class. Therefore, the class is tied to a database record. After the object has been instantiated, a new record is added to the database. Each object retrieves its data from the database; when an object is updated, the record to which it is tied is updated as well. The class implements accessors for each attribute.\nDefining the model You must use the $definition static variable in order to define the model.\nFor instance:\n\u0026lt;?php /** * Example from the CMS model (CMSCore) */ public static $definition = [ \u0026#39;table\u0026#39; =\u0026gt; \u0026#39;cms\u0026#39;, \u0026#39;primary\u0026#39; =\u0026gt; \u0026#39;id_cms\u0026#39;, \u0026#39;multilang\u0026#39; =\u0026gt; true, \u0026#39;fields\u0026#39; =\u0026gt; array( \u0026#39;id_cms_category\u0026#39; =\u0026gt; [\u0026#39;type\u0026#39; =\u0026gt; self::TYPE_INT, \u0026#39;validate\u0026#39; =\u0026gt; \u0026#39;isUnsignedInt\u0026#39;], \u0026#39;position\u0026#39; =\u0026gt; [\u0026#39;type\u0026#39; =\u0026gt; self::TYPE_INT], \u0026#39;active\u0026#39; =\u0026gt; [\u0026#39;type\u0026#39; =\u0026gt; self::TYPE_BOOL], // Language fields  \u0026#39;meta_description\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; self::TYPE_STRING, \u0026#39;lang\u0026#39; =\u0026gt; true, \u0026#39;validate\u0026#39; =\u0026gt; \u0026#39;isGenericName\u0026#39;, \u0026#39;size\u0026#39; =\u0026gt; 255 ], \u0026#39;meta_keywords\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; self::TYPE_STRING, \u0026#39;lang\u0026#39; =\u0026gt; true, \u0026#39;validate\u0026#39; =\u0026gt; \u0026#39;isGenericName\u0026#39;, \u0026#39;size\u0026#39; =\u0026gt; 255 ], \u0026#39;meta_title\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; self::TYPE_STRING, \u0026#39;lang\u0026#39; =\u0026gt; true, \u0026#39;validate\u0026#39; =\u0026gt; \u0026#39;isGenericName\u0026#39;, \u0026#39;required\u0026#39; =\u0026gt; true, \u0026#39;size\u0026#39; =\u0026gt; 128 ], \u0026#39;link_rewrite\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; self::TYPE_STRING, \u0026#39;lang\u0026#39; =\u0026gt; true, \u0026#39;validate\u0026#39; =\u0026gt; \u0026#39;isLinkRewrite\u0026#39;, \u0026#39;required\u0026#39; =\u0026gt; true, \u0026#39;size\u0026#39; =\u0026gt; 128 ], \u0026#39;content\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; self::TYPE_HTML, \u0026#39;lang\u0026#39; =\u0026gt; true, \u0026#39;validate\u0026#39; =\u0026gt; \u0026#39;isString\u0026#39;, \u0026#39;size\u0026#39; =\u0026gt; 3999999999999 ], ) ]; Multiple stores and/or languages In order to retrieve an object in many languages:\n\u0026lt;?php \u0026#39;multilang\u0026#39; =\u0026gt; true In order to retrieve an object depending on the current store:\n\u0026lt;?php \u0026#39;multishop\u0026#39; =\u0026gt; true In order to retrieve an object which depends on the current store, and in many languages:\n\u0026lt;?php \u0026#39;multilang_shop\u0026#39; =\u0026gt; true Main methods  __construct($id = NULL, $id_lang = NULL) Build object. add($autodate = true, $nullValues = false) Adds current object to the database. associateTo(integer|array $id_shops) Associate an item to its context. delete() Delete current object from database. deleteImage(mixed $force_delete = false) Delete images associated with the object. deleteSelection($selection) Delete several objects from database. getFields() Prepare fields for ObjectModel class (add, update). getValidationRules($className = _CLASS_) Return object validation rules (field validity). save($nullValues = false, $autodate = true) Save current object to database (add or update). toggleStatus() Toggle object\u0026rsquo;s status in database. update($nullValues = false) Update current object to database. validateFields($die = true, $errorReturn = false) Check for field validity before database interaction.   ObjectModel lifecycle Thanks to the hooks, you can alter the Object Model or execute functions during the lifecycle of your models. Every hook receive an instance of the manipulated object model:\n  ObjectModel lifecycle   As an example, this is how you can retrieve information about a product when we delete it from the database:\n\u0026lt;?php use Product; // In a module  public function hookActionObjectProductDeleteAfter(Product $product) { PrestaShopLogger::addLog( sprintf(\u0026#39;Product with id %s was deleted with success\u0026#39;, $product-\u0026gt;id_product) ); } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/prestashop-webservice-lib/",
	"title": "PrestaShop Webservice lib",
	"tags": [],
	"description": "",
	"content": "Using the PrestaShop Webservice lib  Setup library   Listing resources   Retrieve a resource   Create a resource   Update a resource   Delete a resource   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/release/release-a-native-ps-module/",
	"title": "Release a native PrestaShop module",
	"tags": [],
	"description": "",
	"content": "Release a new version of a native PrestaShop module Some modules are embedded within PrestaShop ZIP archives and loaded through Composer package manager. They consequently are listed in the composer.json of the Core project.\nThis is what we call \u0026ldquo;native PrestaShop modules\u0026rdquo;. The source code of these modules is hosted on GitHub.\nThis page explains what is needed to release these modules.\nRequirements Mandatory requirements The module should be valid which means:\n it works as expected it complies with modules contribution guidelines: license headers must be valid and necessary files (LICENSE, CONTRIBUTORS) must be embedded  Recommended requirements It is recommended:\n to have enabled Release Drafter on the module to automatize the process of creating a new GitHub release have enabled some Continous Integration tools such as phpstan or php-cs-fixer on the module  These tools will help releasing a clean module in a smooth manner but the release can happen without them.\nRelease process When multiple improvements (bug fixes, enhancements or new features) have been merged into the dev branch of a module, we can merge them into master to deliver a new release of the module.\nChoosing the new version number We follow SemVer guidelines:\nIf the new version of the module is backward compatible, you can increase the version number either by a minor version or by a patch version.\nHowever, if the new version of the module breaks backward compatibility, it must be a new major version.\nUpdate version number in the code Create a Pull Request targeting dev branch. In this PR:\nUpdate the module version in the following files:\n config.xml \u0026lt;module_name\u0026gt;.php  Commit the changes with git message:\n// Version updated to v\u0026lt;new_version\u0026gt; Get this PR approved and merge it into dev. See an example of such PR.\nMerge dev into master Create a new PR to merge branch dev into branch master. See an example of such PR.\nKindly ask the QA team to perform a release test on this PR, warning them that this PR is a release PR and consequently they need to check the whole module behavior.\nIf QA validates the PR, it can be merged, which will update the master branch with the new code changes from dev.\nCreate a GitHub Release If you have enabled Release Drafter, it will create a draft release for you. You can review it and publish it.\nElse, you need to do it manually:\nCreate a new tag with \u0026ldquo;v\u0026lt;new_version\u0026gt;\u0026rdquo; that targets the last commit on master and push it. This will publish the module version on https://packagist.org/ .\nCreate a release on Github based on the tag you just pushed. In the content section, write a small changelog: list the PRs merged since the last version so that people can know what is included in the release (see this example).\n(by the way, GitHub is able to create the release and the tag at the same time from the \u0026ldquo;create a new release\u0026rdquo; page)\nAttach to GitHub release a stand-alone ready-to-use ZIP archive of the module.\nThis archive must be a stand-alone running module, which means it musts embeds all necessary files for its correct behavior. This includes bundled frontend assets (JS, CSS), NPM dependencies or Composer dependencies.\nAddons API PrestaShop instances are able to download new versions of modules through the Addons API. Addons API monitors the modules listed into the GitHub repository https://github.com/PrestaShop/PrestaShop-modules\nWhen a master branch of one of these modules receives an update, Addons API will update the ZIP it delivers with the new content within 24 hours.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/prestashop-webservice-lib/retrieve-resource/",
	"title": "Retrieve a resource",
	"tags": [],
	"description": "",
	"content": "Retrieve a resource Now that we have retrieved a list of resources let\u0026rsquo;s see how to access the details of one resource in particular. In the XML list you can see that each individual resource as a unique ID that you can use to get its details:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customers\u0026gt; \u0026lt;customer id=\u0026#34;1\u0026#34; xlink:href=\u0026#34;http://example.com/api/customers/1\u0026#34;/\u0026gt; \u0026lt;customer id=\u0026#34;2\u0026#34; xlink:href=\u0026#34;http://example.com/api/customers/2\u0026#34;/\u0026gt; \u0026lt;/customers\u0026gt; \u0026lt;/prestashop\u0026gt; We are going to use the same get() method but provide an additional id parameter\n   Key Value     resource customers   id resource_id (int)    Using PrestaShopWebservice::get \u0026lt;?php try { // creating webservice access  $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); // call to retrieve customer with ID 2  $xml = $webService-\u0026gt;get([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; 2, // Here we use hard coded value but of course you could get this ID from a request parameter or anywhere else  ]); } catch (PrestaShopWebserviceException $ex) { // Shows a message related to the error  echo \u0026#39;Other error: \u0026lt;br /\u0026gt;\u0026#39; . $ex-\u0026gt;getMessage(); } Returned data You will receive the same xml as if you request http://example.com/api/customers/1 in your browser:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[2]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_default_group xlink:href=\u0026#34;http://example.com/api/groups/3\u0026#34;\u0026gt;\u0026lt;![CDATA[3]]\u0026gt;\u0026lt;/id_default_group\u0026gt; \u0026lt;id_lang xlink:href=\u0026#34;http://example.com/api/languages/1\u0026#34;\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;newsletter_date_add\u0026gt;\u0026lt;![CDATA[2013-12-13 08:19:15]]\u0026gt;\u0026lt;/newsletter_date_add\u0026gt; \u0026lt;ip_registration_newsletter\u0026gt;\u0026lt;/ip_registration_newsletter\u0026gt; \u0026lt;last_passwd_gen\u0026gt;\u0026lt;![CDATA[2020-04-09 13:31:19]]\u0026gt;\u0026lt;/last_passwd_gen\u0026gt; \u0026lt;secure_key\u0026gt;\u0026lt;![CDATA[86b9ae3ec67dd49122e3a574fc131af4]]\u0026gt;\u0026lt;/secure_key\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;passwd\u0026gt;\u0026lt;![CDATA[33bdf9cf5657bf97149906b83ea3c6ed]]\u0026gt;\u0026lt;/passwd\u0026gt; \u0026lt;lastname\u0026gt;\u0026lt;![CDATA[DOE]]\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname\u0026gt;\u0026lt;![CDATA[John]]\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;email\u0026gt;\u0026lt;![CDATA[pub@prestashop.com]]\u0026gt;\u0026lt;/email\u0026gt; \u0026lt;id_gender\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id_gender\u0026gt; \u0026lt;birthday\u0026gt;\u0026lt;![CDATA[1970-01-15]]\u0026gt;\u0026lt;/birthday\u0026gt; \u0026lt;newsletter\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/newsletter\u0026gt; \u0026lt;optin\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/optin\u0026gt; \u0026lt;website\u0026gt;\u0026lt;/website\u0026gt; \u0026lt;company\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;siret\u0026gt;\u0026lt;/siret\u0026gt; \u0026lt;ape\u0026gt;\u0026lt;/ape\u0026gt; \u0026lt;outstanding_allow_amount\u0026gt;\u0026lt;![CDATA[0.000000]]\u0026gt;\u0026lt;/outstanding_allow_amount\u0026gt; \u0026lt;show_public_prices\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/show_public_prices\u0026gt; \u0026lt;id_risk\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_risk\u0026gt; \u0026lt;max_payment_days\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/max_payment_days\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;note\u0026gt;\u0026lt;/note\u0026gt; \u0026lt;is_guest\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/is_guest\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[2020-04-09 19:31:19]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[2020-04-09 19:31:19]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;reset_password_token\u0026gt;\u0026lt;/reset_password_token\u0026gt; \u0026lt;reset_password_validity\u0026gt;\u0026lt;![CDATA[0000-00-00 00:00:00]]\u0026gt;\u0026lt;/reset_password_validity\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;groups nodeType=\u0026#34;group\u0026#34; api=\u0026#34;groups\u0026#34;\u0026gt; \u0026lt;group xlink:href=\u0026#34;http://example.com/api/groups/3\u0026#34;\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[3]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/groups\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;/prestashop\u0026gt; Access resource fields You can now loop through this XML object to get each customer field value, or access specific fields individually\n\u0026lt;?php $customerFields = $xml-\u0026gt;customer-\u0026gt;children(); $firstName = $customerFields-\u0026gt;firstname; $lastName = $customerFields-\u0026gt;lastname; echo \u0026#39;Details for \u0026#39;. $firstName . \u0026#39; \u0026#39; . $lastName . PHP_EOL . PHP_EOL; foreach ($customerFields as $key =\u0026gt; $value) { echo $key . \u0026#39;: \u0026#39; . $value . PHP_EOL; } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/advanced-use/specific-price/",
	"title": "Specific prices",
	"tags": [],
	"description": "",
	"content": "Specific prices PrestaShop offers a feature that allows to set specific prices depending on various parameters (country, currency, customer group, \u0026hellip;). The regular API only return the generic prices so if you need some specific prices you can use the price parameter. It is available on:\n products combinations  Custom prices will be added in an alias field that you need to indicate in your parameters.\nExample Let\u0026rsquo;s say you want to retrieve the price for combination 25 of the product 2, with tax, in a webservice field name my_price, then you\u0026rsquo;ll need to query:\n/api/products/2?price[my_price][use_tax]=1\u0026amp;price[my_price][product_attribute]=25\nThis will add an XML node into the product response:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[2]]\u0026gt;\u0026lt;/id\u0026gt; ... \u0026lt;my_price\u0026gt;\u0026lt;![CDATA[34.460000]]\u0026gt;\u0026lt;/my_price\u0026gt; ... \u0026lt;/product\u0026gt; \u0026lt;/prestashop\u0026gt; Specific price parameters    Name Type Description     country int Customer\u0026rsquo;s country (use the resource ID)   state int Customer\u0026rsquo;s state (use the resource ID)   postcode int Customer\u0026rsquo;s zip/postal code   currency int Currency used for the price (use the resource ID)   group int Customer\u0026rsquo;s user group (use the resource ID)   quantity int Quantity of products   product_attribute int Product attribute (combination) ID   decimals int Number of decimals used for rounding (displayed result may still have more with pending zeros)   use_tax bool Include taxes in the price (allowed values: 0|1 )   use_reduction bool Include reduction associated to the specific price (allowed values: 0|1 )   only_reduction bool Only display the reduction associated to the specific price (allowed values: 0|1 )   use_ecotax bool Include eco tax in the price (allowed values: 0|1 )    You can define multiple specific prices in the same request, which is useful if you need prices with and without taxes: /api/products/2?price[my_price_tax_incl][use_tax]=1\u0026amp;price[my_price_tax_excl][use_tax]=0\nOr if you want the product price along with its reduction detail: /api/products/2?price[my_price][use_reduction]=1\u0026amp;price[my_reduction][only_reduction]=1\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": "Chapter 3 Testing This section describes how PrestaShop Core is covered by automatic tests.\n Introduction   How to create your own unit tests   How to execute tests   How to create your own symfony controller tests   How to create your own Behat tests   UI tests   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/hooks/",
	"title": "Theme Hooks",
	"tags": [],
	"description": "",
	"content": "Create hooks available in Front Office This section of the documentation is only about front office hooks: display and action.\nCreating a dynamic hook When your module or theme calls a hook, PrestaShop executes it.\nThis is how it is called from a PHP file:\n\u0026lt;?php Hook::exec(\u0026#39;MyCustomHook\u0026#39;); This is how it is called from a Smarty template:\n{hook h=\u0026#39;MyCustomHook\u0026#39;} Register the hook to make it visible and reusable If you add a hook call, it is better to register it.\nThis will enable Back Office user to:\n see it in the hooks list be able to plug some modules on it (in Position page) allow other modules to listen to this hook being called and add some extra behavior  You can register your hook from your theme\u0026rsquo;s theme.yml file:\nglobal_settings:hooks:custom_hooks:- name:displayFooterBeforetitle:displayFooterBeforedescription:Add a widget area above the footerYou can also register your hook from a module:\n\u0026lt;?php // Create the function for the MyCustomHook hook public function MyCustomHook($params) { // method body }  // Register the MyCustomHook hook Hook::register(\u0026#39;MyCustomHook\u0026#39;); // Call it from PHP Hook::exec(\u0026#39;MyCustomHook\u0026#39;); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/hooks/use-hooks-on-modern-pages/",
	"title": "Use hooks on modern pages",
	"tags": [],
	"description": "",
	"content": "Use hooks on modern pages You know you can already customize your PrestaShop store thanks to many hooks: the good news is that you can still use hooks like you did in the earlier versions of PrestaShop in modern pages.\nStarting from PrestaShop 1.7.3, you can access the modern Services Container into your modules and so on access powerful and customizable features available in Symfony:\n Twig, the most popular templating engine; Swiftmailer, a feature-rich mailer; Doctrine ORM and Doctrine DBAL to manage your database; Filesystem and Finder libraries to manage all filesystem operations; Monolog for every logging operations; Serializer library for whom who need to manipulate Json and Xml formats\u0026hellip;  Of course, you also have access to every service used by the Core of PrestaShop. This means that you can rely on all services defined in PrestaShopBundle/config/ folder, except from the ones declared in adapter folder: they will be removed at some point.\nIf you don\u0026rsquo;t know what a service is, have a look at the Symfony documentation about the service container. Better modules on modern pages Let\u0026rsquo;s say your customer want an xml export button directly available from list of products on Product Catalog page: such a common need regarding the number of related modules in the Store.\nHow hard it can be to develop a module that provide this button? Well, it\u0026rsquo;s not! Let\u0026rsquo;s do this feature together.\nFirst step: select the right hook Accessing the Product Catalog page in debug mode we can access the list of available hooks in the debug toolbar:\n moduleRoutes displayBackOfficeHeader displayBackOfficeTop actionAdminControllerSetMedia displayDashboardToolbarTopMenu displayDashboardTop hookdisplayDashboardToolbarIcons displayBackOfficeFooter displayAdminNavBarBeforeEnd displayAdminAfterHeader actionDispatcherBefore actionDispatcherAfter  As we need to act on Dashboard but after the header, in the icons toolbar (with others export options) hookdisplayDashboardToolbarIcons sounds like the hook we are looking for.\nSecond step: create and register the Hook Create a new module called foo and register the hook. You should end up with this kind of code in your module:\n\u0026lt;?php // foo.php  /* ... */ /** * Module installation. * * @return bool Success of the installation */ public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;displayDashboardToolbarIcons\u0026#39;); } /** * Add an \u0026#34;XML export\u0026#34; action in Product Catalog page. * * @return bool Success of the installation */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams[\u0026#39;route\u0026#39;] === \u0026#39;admin_product_catalog\u0026#39;) { // to be continued  } }  The route property is only available for modern pages. To find out the route for a given page, look at the Debug toolbar. Third step: create your own product serializer At this point, this is basic PHP code we need to produce. We need to retrieve the list of products from database, and serialize them into XML and dump into a file sent to the user.\nUsing Doctrine (DBAL) to retrieve data Even if using old way to retrieve data is still valid (Product::getProducts or through the webservice), we\u0026rsquo;d like to introduce a best practice here: using a repository and get rid of the Object model. This has a lot of advantages, you rely on database instead of model and you\u0026rsquo;ll have better performances and control on your data.\n\u0026lt;?php // src/Repository/ProductRepository.php namespace Foo\\Repository; use Doctrine\\DBAL\\Connection; class ProductRepository { /** * @var Connection the Database connection. */ private $connection; /** * @var string the Database prefix. */ private $databasePrefix; public function __construct(Connection $connection, $databasePrefix) { $this-\u0026gt;connection = $connection; $this-\u0026gt;databasePrefix = $databasePrefix; } /** * @param int $langId the lang id * @return array the list of products */ public function findAllbyLangId(int $langId) { $prefix = $this-\u0026gt;databasePrefix; $productTable = \u0026#34;${prefix}product\u0026#34;; $productLangTable = \u0026#34;${prefix}product_lang\u0026#34;; $query = \u0026#34;SELECT p.* FROM ${productTable}p LEFT JOIN ${productLangTable}pl ON (p.`id_product` = pl.`id_product`) WHERE pl.`id_lang` = :langId\u0026#34;; $statement = $this-\u0026gt;connection-\u0026gt;prepare($query); $statement-\u0026gt;bindValue(\u0026#39;langId\u0026#39;, $langId); $statement-\u0026gt;execute(); return $statement-\u0026gt;fetchAll(); } } And declare your repository as a service:\n# modules/foo/config/services.ymlservices:product_repository:class:Foo\\Repository\\ProductRepositoryarguments:[\u0026#39;@doctrine.dbal.default_connection\u0026#39;,\u0026#39;%database_prefix%\u0026#39;]Prestashop automatically checks if modules have a config/services.yml file and will autoload it for you. In order to force Prestashop to parse the file, you need to clear the cache:\n./bin/console cache:clear --no-warmup You can now use it in your module (and everywhere in PrestaShop modern pages!):\n\u0026lt;?php // foo.php  /* ... */ /** * Get the list of products for a specific lang. */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams[\u0026#39;route\u0026#39;] === \u0026#39;admin_product_catalog\u0026#39;) { $products = $this-\u0026gt;get(\u0026#39;product_repository\u0026#39;)-\u0026gt;findAllByLangId(1); dump($products); } } In Product Catalog Page you should see the list of Products in debug toolbar in \u0026ldquo;Dump\u0026rdquo; section:\nUsing the Symfony components to create an XML export file Now we retrieve the product list from our module and that we are able to display the information into the back office, we could already create our XML file with raw PHP. Let\u0026rsquo;s see how we can do it using the components provided by Symfony \u0026ldquo;out of box\u0026rdquo;.\n\u0026lt;?php // foo.php  /* ... */ /** * Creates an XML file with list of products in \u0026#34;upload\u0026#34; folder. * * @return bool Success of the installation */ public function hookDisplayDashboardToolbarIcons($hookParams) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $hookParams[\u0026#39;route\u0026#39;] === \u0026#39;admin_product_catalog\u0026#39;) { $products = $this-\u0026gt;get(\u0026#39;product_repository\u0026#39;)-\u0026gt;findAllByLangId(1); $productsXml = $this-\u0026gt;get(\u0026#39;serializer\u0026#39;)-\u0026gt;serialize( $products, \u0026#39;xml\u0026#39;, [ \u0026#39;xml_root_node_name\u0026#39; =\u0026gt; \u0026#39;products\u0026#39;, \u0026#39;xml_format_output\u0026#39; =\u0026gt; true, ] ); $this-\u0026gt;get(\u0026#39;filesystem\u0026#39;)-\u0026gt;dumpFile(_PS_UPLOAD_DIR_.\u0026#39;products.xml\u0026#39;, $productsXml); } }  Note: the serializer service is not enabled in PrestaShop 1.7.3 but will be enabled in 1.7.4. If you really want to enable it in 1.7.3, uncomment the following configuration line in your services.yml file of your Shop. # app/config/services.ymlservices:# Enables the serializerframework:serializer:{enable_annotations:true}Render the icon using Twig templating engine Now we have serialized our products, it\u0026rsquo;s time to render an Icon link with the file to download!\nWe could (of course) use Smarty to render a template, but it\u0026rsquo;s a chance to discover Twig which is also available as a service. First, let\u0026rsquo;s refactor and finalize our hook call:\n\u0026lt;?php /** * Make products export in XML. * * @param $params array */ public function hookDisplayDashboardToolbarIcons($params) { if ($this-\u0026gt;isSymfonyContext() \u0026amp;\u0026amp; $params[\u0026#39;route\u0026#39;] === \u0026#39;admin_product_catalog\u0026#39;) { $products = $this-\u0026gt;getProducts(1); $productsXml = $this-\u0026gt;serializeProducts($products); $filepath = _PS_ROOT_DIR_.\u0026#39;/products.xml\u0026#39;; $this-\u0026gt;writeFile($productsXml, $filepath); return $this-\u0026gt;get(\u0026#39;twig\u0026#39;)-\u0026gt;render(\u0026#39;@Modules/Foo/download_link.twig\u0026#39;, [ \u0026#39;filepath\u0026#39; =\u0026gt; _PS_BASE_URL_.\u0026#39;/products.xml\u0026#39;, ]); } }  We have extracted business logic into specific functions. And now, the template:\n{# in views/PrestaShop/Foo/download_link.twig #}\u0026lt;a id=\u0026#34;desc-product-export\u0026#34; class=\u0026#34;list-toolbar-btn\u0026#34; href=\u0026#34;{{ filepath }}\u0026#34; download\u0026gt; \u0026lt;b data-toggle=\u0026#34;pstooltip\u0026#34; class=\u0026#34;label-tooltip\u0026#34; data-original-title=\u0026#34;{{ \u0026#34;Export XML\u0026#34;|trans({}, \u0026#39;Module.Foo\u0026#39;) }}\u0026#34; data-html=\u0026#34;true\u0026#34; data-placement=\u0026#34;top\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;material-icons\u0026#34;\u0026gt;cloud_upload\u0026lt;/i\u0026gt; \u0026lt;/b\u0026gt; \u0026lt;/a\u0026gt;  We have used a key for translation, making our own translations available in back office when using Twig. And \u0026ldquo;voila!\u0026rdquo;, the module could be of course improved with so many features, adding filters on export for instance, using the request hook parameter and updating the Product repository.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sell/techvalidation-checklist/",
	"title": "Validation checklist",
	"tags": [],
	"description": "",
	"content": "Module validation checklist First of all, the submitted addon must pass the validator. Some reports will lead to an automatic decline if found. The following rules are manually checked by the modules team.\nCommon rules Code review Module structure is followed The module respected the expected structure.\nLicense is compatible A module and its dependencies must be compatible with the OSL (core) and AFL (modules and themes) licenses used to manage and distribute the PrestaShop open source project. Compatible licences are:\n Apache license AFL MIT BSD ISC EUPL  Additionally, distribution licenses like CC-0 or CC-by-sa are appropriate for artwork (e.g: icons, pictures, fonts, but not only)\nCore tables are untouched Module may create all the table they need in the database. However altering core table is forbidden.\nIn case you wanted to add columns for an existing table, the workaround is to create a new table with a foreign key targetting the primary key of the core table.\nOther modules are not altered Modifying core or other modules files is not allowed.\nFile storage in proper directory Module may add / modify some files on the shop. To avoid issues with file permissions, we recommend storing files in the var/%env% directory.\nUse of iFrames is limited to highly secured websites The use of iframes is highly discouraged for security reasons, although they are implemented in different part of the core like in Payment Modules.\n  Using an iframe authorizes to load content from a site that is not controlled by the PrestaShop app. This is the same problem as authorizing to load javascript files from an external source. If the source is being hacked, the attacker could potentially exploit other failures to take control of all the shops that would have installed the module.\n  Therefore we need to check what your processes are, to ensure the security of the content that will be injected by this iframe into all the shops that will install the module. When submitting your module, the validation team will review the reasons why an iFrame is needed for this business and what are the measures taken by the provider to prevent attacks.\n  Module does not rely on external assets The zip you send to PrestaShop Addons must be totally self-sufficient.\nAll the content needed by the module to work properly must be present in the archive. No external content should be downloaded by the module after installation.\nSupport goes though the PrestaShop Marketplace When a module is published on the marketplace, we provide a unique way for all customer to get new updates and to contact the maintainer of the different modules \u0026amp; themes they bought.\nInserting links to an external platform would probably make things easier for a seller, but it would prevent us to help customers and/or seller in case of dispute.\nSQL requests variables are sanitized We examine every SQL request to make sure you did cast your variables. Use (int) for integers and pSQL() for strings.\nMore details:\n Using the DBQuery class Executing your SQL requests  Calls from external services are secured If you have PHP files to handle ajax or external calls, make sure to secure that file. To do so, create a unique token during the module\u0026rsquo;s installation and use it during the call verification.\nMethods with security risks are not used Using serialize() / unserialize() is forbidden, as they are a security risk if you do not control the data going through these methods. They may lead to remote code execution, so we recommend using json_encode() / json_decode() instead.\nThe archive has only one module Module included in another one are difficult to review \u0026amp; can\u0026rsquo;t have their own release process.\nEach module has to be uploaded on the marketplace separately, even if they only work together.\nA file index.php exists in each folder To prevent someone to reach the content of a repository without, a file index.php has to be found in each folder.\nAs we deal with a security risk on some environments, we strongly recommend you comply with this rule. An \u0026ldquo;autoindex\u0026rdquo; tool allows you to add in each folder.\nHTML code is written in templates Use Smarty / Twig templates to display HTML code to respect PrestaShop patterns (MVC architecture) and build a code easy to maintain.\n More details in displaying content.  Code is written in English PrestaShop provides a e-commerce software ready use in many languages. The code and displayed texts are written in English, then translated if the user switches to another language.\nLike for PrestaShop, the code submitted on the marketplace has to be written in English, even if the only user of this code is likely to from only one country or language. A lang unknown by the reviewer would make the validation impossible to do.\nRisk of conflicts between modules is low  Configuration keys  Configuration data is shared between the shop and every module installed. This is convenient if your need to get a value from another part of the shop, but include some risks if two modules stores some data in the same key.\nToo avoid conflicts, configuration keys must be prefixed by the module name. For instance, using a configuration key in the module TheModule would be:\n\u0026lt;?php Configuration::get(\u0026#39;THE_MODULE_PAYMENT_METHODS_ORDER\u0026#39;); Configuration::updateValue(\u0026#39;THE_MODULE_PAYMENT_METHODS_ORDER\u0026#39;, [...]); instead of\n\u0026lt;?php Configuration::get(\u0026#39;PAYMENT_METHODS_ORDER\u0026#39;); Configuration::updateValue(\u0026#39;PAYMENT_METHODS_ORDER\u0026#39;, [...]);  Classes  This also applies to classes defined outside a namespace. Having the module name as a prefix will reduce the risk of colision between classes.\nAjax / Cron tasks are secured \u0026amp; in a controller All the AJAX and CRON files must be protected with a unique and secured token to avoid any security issues (outside attacks,\u0026hellip;). Even the front controllers must be secured with a secured token when you use AJAX in it.\nAJAX and CRON scripts must be placed in a controller and not in a separate script to call on its own. For more details:\n Documentation Original issue leading to the use of ModuleFrontControllers  Code in hook is run only when needed Several hooks are called on all pages of the back-office or front-office. When a module is registered on one of them, it may impact the page performance on low-end servers if it runs too much code.\nWe ask to keep the code running in your hooks light, and filter the pages you module runs on if necessary.\nExamples:\n Module filtering the creation of orders from another module  \u0026lt;?php /** * Hook executed at the order confirmation */ public function hookOrderConfirmation($params) { # If created by another module, return.  if ($params[\u0026#39;order\u0026#39;]-\u0026gt;module !== $this-\u0026gt;name) { return false; } // [...]  }  Filter for a hook called on all BO pages:  \u0026lt;?php /** * Display content ONLY in the admin payment controller */ public function hookDisplayAdminAfterHeader() { $currentController = $this-\u0026gt;context-\u0026gt;controller-\u0026gt;controller_name; if (\u0026#39;AdminPayment\u0026#39; !== $currentController) { return false; } // [...]  // return $this-\u0026gt;display(...)  } Debug statements are cleaned All the debug tests have to be removed.\nExample : var_dump($a), dump($a), console.log(‘a’)\u0026hellip;\nCommented code is removed To have a code easier to maintain / review, you must remove the commented lines of code. Code comments are welcome of course!\nCommented code to be removed:\n\u0026lt;?php public function hookPaymentOptions($params) { // if (false === $this-\u0026gt;active) { // \u0026lt;-- never called, to be removed  // return false;  // }  if (false === $this-\u0026gt;merchantIsValid()) { return false; } // if (false === $this-\u0026gt;checkCurrency($params[\u0026#39;cart\u0026#39;])) // {  // return false;  // }  // if (false === $this-\u0026gt;isPaymentStep()) {  // return false;  // }  // [...]  return $payment_options; } Encouraged code comments:\n\u0026lt;?php /** * Add payment option at the checkout in the front office * * @param array $params return by the hook * * @return array|false all payment option available */ public function hookPaymentOptions($params) { // [...]  return $payment_options; } Empty \u0026amp; generated files are removed As they have no consequences in the module execution, empty files can be removed before submission. Generated files such as log files, invoice or other documents in PDFs etc. should be removed as well, as they:\n increase the weight of your submissions, add a risk of overwritten files when deployed on a shop, aren\u0026rsquo;t needed to run the module, could contain some personal information.  Documentation is provided Documentation is found in the docs/ folder of the module, and in a format widly used (PDF is recommended, avoid ZIP files which need an additional process of extraction).\nFunctional review No PHP errors is thrown in debug mode A module must be tested on a Prestashop with debug mode enabled in order to spot the slightest mistake. Validation teams always have this mode enabled and if an alert is raised then the module will be rejected.\nOn production mode, only PHP errors will be detected as they prevent the page to be fully executed. On development mode, all other levels of messages such as notices \u0026amp; warnings are triggered.\nPayment modules rules We do have extra rules for Payment Modules as this type of modules require higher security. Note that there are some modules which create the Order with a pending order status during the payment processing (1), while others wait for the payment system\u0026rsquo;s approval to create it (2). But none of them create an order before the customer passed the payment service (bank, PayPal\u0026hellip;).\n  Make sure you double check the id_cart before creating the order.\n The purpose is to make sure another customer cannot validate a cart which isn\u0026rsquo;t his.    if (2), make sure the amount you use to validateOrder() comes from the external payment system. Do not use Cart-\u0026gt;getOrderTotal();\n For security reasons, always proceed as explained.    For (2), when receiving a call to process the payment, make sure you double check the source of the call using a signature or a token. Those values must not be known of all.\n  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/widgets/",
	"title": "Widgets",
	"tags": [],
	"description": "",
	"content": "Widgets Widget is an advanced concept introduced on PrestaShop 1.7, extending hooks feature.\nLimitation of hooks In their basic use, a display hook will be shown at a specific place in the template. If a module wants to display the same additional content on several places, whatever the merchant chose, it still has to register and implement all the possible hooks.\nWith widgets, module developers can display content everywhere the module is asked to do so. When a module implements widgets in its code, it allows:\n a theme to call the module directly with {widget name=\u0026quot;\u0026lt;module_name\u0026gt;\u0026quot;} the core to fallback on it if a registered hook is called but its method hook\u0026lt;hook_name\u0026gt;() does not exist.  Make a module widgets compliant In order to be widget-compliant, a module needs to follow two steps:\nImplement interface Before calling a module for widgets, the core must be sure your module has this feature available. This can be done by implementing the interface PrestaShop\\PrestaShop\\Core\\Module\\WidgetInterface (Source code).\nDeclare mandatory methods As soon as a module implements the WidgetInterface, two methods must be declared:\n\u0026lt;?php public function renderWidget($hookName, array $configuration); public function getWidgetVariables($hookName, array $configuration); The method renderWidget() is the entrypoint for the core in order to get the generated view (fetch smarty template). The method getWidgetVariables() returns the variables you want to assign to smarty.\nThe parameters sent to both functions are the same:\n $hookName: providing the hook name allows the module to have a different behavior according to it.  null when the module is called directly from the widget system. Name of the hook when a non-implemented hook is called.   $configuration: This is the equivalent of the parameter $params when a hook is called.  Call Widgets Once the module has implemented the method renderWidget(), there are two ways to call it.\nThe old way, with hooks The first one is by triggering a hook manually registered to the module, but not implemented by it.\n From a PHP class  \u0026lt;?php Hook::exec($hook_name)  From a Smarty template  {hook h=\u0026#39;\u0026lt;hook_name\u0026gt;\u0026#39;}The method called with be different regarding the module content:\n  Using widget from hooks   With widget The function renderWidget() of a specific module can be called directly:\n From a Smarty template (recommended)  \u0026lt;!-- Generic call --\u0026gt; {widget name=\u0026#39;\u0026lt;module_name\u0026gt;\u0026#39;}\u0026lt;!-- Call with a hook name --\u0026gt; {widget name=\u0026#39;\u0026lt;module_name\u0026gt;\u0026#39; hook=\u0026#39;\u0026lt;hook_name\u0026gt;\u0026#39;} From a PHP class  \u0026lt;?php Hook::coreRenderWidget(Module $module, $hook_name, $params); The hook name sent to renderWidget will depend on the value provided to the optional hook parameter.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/adding-configuration-page/",
	"title": "Adding a configuration page",
	"tags": [],
	"description": "",
	"content": "Adding a configuration page Your module can get a \u0026ldquo;Configure\u0026rdquo; link in the back office module list, and therefore let the user change some settings. This \u0026ldquo;Configure\u0026rdquo; link appears with addition of the getContent() method to your main class. This is a standard PrestaShop method: its sole existence sends a message to the back office, saying \u0026ldquo;there\u0026rsquo;s a configuration page in this module, display the configuration link\u0026rdquo;.\nBut having a getContent() public method in the MyModule object only makes the \u0026ldquo;Configure\u0026rdquo; link appear; it does not create the configuration page out of nowhere. We are going to explain how to create one, where we will be able to edit the content of the MYMODULE_NAME variable that we stored in the ps_configuration data table.\nThe getContent() method First, here is the complete code for the getContent() method:\n\u0026lt;?php public function getContent() { $output = null; if (Tools::isSubmit(\u0026#39;submit\u0026#39;.$this-\u0026gt;name)) { $myModuleName = strval(Tools::getValue(\u0026#39;MYMODULE_NAME\u0026#39;)); if ( !$myModuleName || empty($myModuleName) || !Validate::isGenericName($myModuleName) ) { $output .= $this-\u0026gt;displayError($this-\u0026gt;l(\u0026#39;Invalid Configuration value\u0026#39;)); } else { Configuration::updateValue(\u0026#39;MYMODULE_NAME\u0026#39;, $myModuleName); $output .= $this-\u0026gt;displayConfirmation($this-\u0026gt;l(\u0026#39;Settings updated\u0026#39;)); } } return $output.$this-\u0026gt;displayForm(); } The getContent() method is the first one to be called when the configuration page is loaded. Therefore, we use it to first update any value that might have been submitted by the form that the configuration page contains.\nHere is a line by line explanation:\n Tools::isSubmit() is a PrestaShop-specific method, which checks if the indicated form has been validated. In this case, if the configuration form has not yet been validated, the whole if() block is skipped and PrestaShop will only use the last line, which displays the configuration with the current values, as generated by the displayForm() method. Tools::getValue() is a PrestaShop-specific method, which retrieve the content of the POST or GET array in order to get the value of the specified variable. In this case, we retrieve the value of the MYMODULE_NAME form variable, turn its value into a text string using the strval() method, and stores it in the $myModuleName PHP variable. We then check for the existence of actual content in $myModuleName, including the use of Validate::isGenericName(). The Validate object contains many data validation methods, among which is isGenericName(), a method that helps you keep only strings that are valid PrestaShop names – meaning, a string that does not contain special characters, for short. If any of these checks fail, the configuration will open with an error message, indicating that the form validation failed. The $output variable, which contains the final rendition of the HTML code that makes the configuration page, thus begins with an error message, created using PrestaShop\u0026rsquo;s displayError() method. This method returns the correct HTML code for our need, and since that code is first in $output, this means the configuration will open with that message. If all these checks are successful, this means we can store the value in our database. As we saw earlier in this tutorial, the Configuration object has just the method we need: updateValue() will store the new value for MYMODULE_NAME in the configuration data table. To that end, we add a friendly message to the user, indicating that the value has indeed been saved: we use PrestaShop\u0026rsquo;s displayConfirmation() method to add that message as the first data in the $output variable – and therefore, at the top of the page. Finally, we use the custom displayForm() method (which we are going to create and explain in the next section) in order to add content to $output (whether the form was submitted or not), and return that content to the page. Note that we could have included the code for displayForm() right within getContent(), but chose to separate the two for readability and separation of concerns.  This form-validation code is nothing new for PHP developers, but uses some of the PrestaShop methods that you will very regularly use.\nDisplaying the form The configuration form itself is displayed with the displayForm() method. Here is its code, which we are going to explain after the jump:\n\u0026lt;?php public function displayForm() { // Get default language  $defaultLang = (int)Configuration::get(\u0026#39;PS_LANG_DEFAULT\u0026#39;); // Init Fields form array  $fieldsForm[0][\u0026#39;form\u0026#39;] = [ \u0026#39;legend\u0026#39; =\u0026gt; [ \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Settings\u0026#39;), ], \u0026#39;input\u0026#39; =\u0026gt; [ [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Configuration value\u0026#39;), \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;MYMODULE_NAME\u0026#39;, \u0026#39;size\u0026#39; =\u0026gt; 20, \u0026#39;required\u0026#39; =\u0026gt; true ] ], \u0026#39;submit\u0026#39; =\u0026gt; [ \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Save\u0026#39;), \u0026#39;class\u0026#39; =\u0026gt; \u0026#39;btn btn-default pull-right\u0026#39; ] ]; $helper = new HelperForm(); // Module, token and currentIndex  $helper-\u0026gt;module = $this; $helper-\u0026gt;name_controller = $this-\u0026gt;name; $helper-\u0026gt;token = Tools::getAdminTokenLite(\u0026#39;AdminModules\u0026#39;); $helper-\u0026gt;currentIndex = AdminController::$currentIndex.\u0026#39;\u0026amp;configure=\u0026#39;.$this-\u0026gt;name; // Language  $helper-\u0026gt;default_form_language = $defaultLang; $helper-\u0026gt;allow_employee_form_lang = $defaultLang; // Title and toolbar  $helper-\u0026gt;title = $this-\u0026gt;displayName; $helper-\u0026gt;show_toolbar = true; // false -\u0026gt; remove toolbar  $helper-\u0026gt;toolbar_scroll = true; // yes - \u0026gt; Toolbar is always visible on the top of the screen.  $helper-\u0026gt;submit_action = \u0026#39;submit\u0026#39;.$this-\u0026gt;name; $helper-\u0026gt;toolbar_btn = [ \u0026#39;save\u0026#39; =\u0026gt; [ \u0026#39;desc\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Save\u0026#39;), \u0026#39;href\u0026#39; =\u0026gt; AdminController::$currentIndex.\u0026#39;\u0026amp;configure=\u0026#39;.$this-\u0026gt;name.\u0026#39;\u0026amp;save\u0026#39;.$this-\u0026gt;name. \u0026#39;\u0026amp;token=\u0026#39;.Tools::getAdminTokenLite(\u0026#39;AdminModules\u0026#39;), ], \u0026#39;back\u0026#39; =\u0026gt; [ \u0026#39;href\u0026#39; =\u0026gt; AdminController::$currentIndex.\u0026#39;\u0026amp;token=\u0026#39;.Tools::getAdminTokenLite(\u0026#39;AdminModules\u0026#39;), \u0026#39;desc\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Back to list\u0026#39;) ] ]; // Load current value  $helper-\u0026gt;fields_value[\u0026#39;MYMODULE_NAME\u0026#39;] = Tools::getValue(\u0026#39;MYMODULE_NAME\u0026#39;, Configuration::get(\u0026#39;MYMODULE_NAME\u0026#39;)); return $helper-\u0026gt;generateForm($fieldsForm); } While this might look like a huge block of code for a single value to change, this block actually uses some of PrestaShop\u0026rsquo;s method to make it easier to build forms, most notably the HelperForm object.\nDiving in displayForm() Let\u0026rsquo;s run down that method:\n Using the Configuration::get() method, we retrieve the value of the currently chosen language (\u0026quot;PS_LANG_DEFAULT\u0026quot;). For security reasons, we cast the variable into an integer using (int). In preparation for the generation of the form, we must build an array of the various titles, textfields and other form specifics.\nTo that end, we create the $fieldsForm variable, which will contain a multidimensional array. Each of the arrays it features contains the detailed description of the tags the form must contain. From this variable, PrestaShop will render the HTML form as it is described.\nIn this example, we define three tags (\u0026lt;legend\u0026gt;, \u0026lt;input\u0026gt; and \u0026lt;submit\u0026gt;) and their attributes using arrays. The format is quite easy to get: the legend and submit arrays simply contain the attributes to each tag, while the input contains as many tags are needed, each being in turn an array which contains the necessary attributes. For instance:  \u0026lt;?php \u0026#39;input\u0026#39; =\u0026gt; [ [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Configuration value\u0026#39;), \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;MYMODULE_NAME\u0026#39;, \u0026#39;size\u0026#39; =\u0026gt; 20, \u0026#39;required\u0026#39; =\u0026gt; true ] ] \u0026hellip;generates the following HTML tags:\n\u0026lt;label\u0026gt;Configuration value \u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;margin-form\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;MYMODULE_NAME\u0026#34; class=\u0026#34;\u0026#34; type=\u0026#34;text\u0026#34; size=\u0026#34;20\u0026#34; value=\u0026#34;my friend\u0026#34; name=\u0026#34;MYMODULE_NAME\u0026#34;\u0026gt; \u0026lt;sup\u0026gt;*\u0026lt;/sup\u0026gt; \u0026lt;div class=\u0026#34;clear\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; As you can see, PrestaShop is quite clever, and generates all the code that is needed to obtain a useful form.\nNote that the value of the main array is actually retrieved later in the form generation code.\nWe then create an instance of the HelperForm class. This section of the code is explained in the next section of this chapter. Once the HelperForm settings are all in place, we generate the form based on the content of the $fieldsForm variable.  Using HelperForm HelperForm is one of the helper methods that were added with PrestaShop 1.5, along with HelperOptions, HelperList, HelperView and HelperHelpAccess. They enable you to generate standard HTML elements for the back office as well as for module configuration pages. You can get more information about Helper classes in the \u0026ldquo;Helpers\u0026rdquo; chapter of this developer guide, with a page dedicated to HelperForm.\nHere is our sample code, as a reminder:\n\u0026lt;?php $helper = new HelperForm(); // Module, Token and currentIndex $helper-\u0026gt;module = $this; $helper-\u0026gt;name_controller = $this-\u0026gt;name; $helper-\u0026gt;token = Tools::getAdminTokenLite(\u0026#39;AdminModules\u0026#39;); $helper-\u0026gt;currentIndex = AdminController::$currentIndex.\u0026#39;\u0026amp;configure=\u0026#39;.$this-\u0026gt;name; // Language $helper-\u0026gt;default_form_language = $defaultLang; $helper-\u0026gt;allow_employee_form_lang = $defaultLang; // title and Toolbar $helper-\u0026gt;title = $this-\u0026gt;displayName; $helper-\u0026gt;show_toolbar = true; // false -\u0026gt; remove toolbar $helper-\u0026gt;toolbar_scroll = true; // yes - \u0026gt; Toolbar is always visible on the top of the screen. $helper-\u0026gt;submit_action = \u0026#39;submit\u0026#39;.$this-\u0026gt;name; $helper-\u0026gt;toolbar_btn = [ \u0026#39;save\u0026#39; =\u0026gt; [ \u0026#39;desc\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Save\u0026#39;), \u0026#39;href\u0026#39; =\u0026gt; AdminController::$currentIndex.\u0026#39;\u0026amp;configure=\u0026#39;.$this-\u0026gt;name.\u0026#39;\u0026amp;save\u0026#39;.$this-\u0026gt;name. \u0026#39;\u0026amp;token=\u0026#39;.Tools::getAdminTokenLite(\u0026#39;AdminModules\u0026#39;), ], \u0026#39;back\u0026#39; =\u0026gt; [ \u0026#39;href\u0026#39; =\u0026gt; AdminController::$currentIndex.\u0026#39;\u0026amp;token=\u0026#39;.Tools::getAdminTokenLite(\u0026#39;AdminModules\u0026#39;), \u0026#39;desc\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;Back to list\u0026#39;) ] ]; // Load current value $helper-\u0026gt;fields_value[\u0026#39;MYMODULE_NAME\u0026#39;] = Tools::getValue(\u0026#39;MYMODULE_NAME\u0026#39;, Configuration::get(\u0026#39;MYMODULE_NAME\u0026#39;)); return $helper-\u0026gt;generateForm($fieldsForm); Our example uses several of HelperForm\u0026rsquo;s attributes: they need to be set before we generate the form itself from the $fieldsForm variable:\n $helper-\u0026gt;module: requires the instance of the module that will use the form. $helper-\u0026gt;name_controller: requires the name of the module. $helper-\u0026gt;token: requires a unique token for the module. getAdminTokenLite() helps us generate one. $helper-\u0026gt;currentIndex: $helper-\u0026gt;default_form_language: requires the default language for the shop. $helper-\u0026gt;allow_employee_form_lang: requires the default language for the shop. $helper-\u0026gt;title: requires the title for the form. $helper-\u0026gt;show_toolbar: requires a boolean value – whether the toolbar is displayed or not. $helper-\u0026gt;toolbar_scroll: requires a boolean value – whether the toolbar is always visible when scrolling or not. $helper-\u0026gt;submit_action: requires the action attribute for the form\u0026rsquo;s \u0026lt;submit\u0026gt; tag. $helper-\u0026gt;toolbar_btn: requires the buttons that are displayed in the toolbar. In our example, the \u0026ldquo;Save\u0026rdquo; button and the \u0026ldquo;Back\u0026rdquo; button. $helper-\u0026gt;fields_value[]: this is where we can define the value of the named tag.  Finally, after all is set and done, we can call the generateForm() method, which will take care of putting it all together and, as its name says, generate the form that the user will use to configure the module\u0026rsquo;s settings.\nHere is the rendition of the form as it is presently written – which you can see by yourself by clicking on the \u0026ldquo;Configure\u0026rdquo; link for the module in the back office:\nChange the value to whichever you like, click on the \u0026ldquo;Save\u0026rdquo; button, then go reload the homepage: your module is indeed updated with the new string!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/advanced-use/",
	"title": "Advanced use",
	"tags": [],
	"description": "",
	"content": "Advanced tutorials These tutorials are related to more advanced and specific uses of the Webservice API\n Additional list parameters   Image management   Specific prices   Manage Configuration   Manage Multishop   Multilingual Fields   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/forms/admin-forms/",
	"title": "Alter Configuration Back Office forms",
	"tags": [],
	"description": "",
	"content": "Alter configuration forms on modern pages  One of the most common tasks for the PrestaShop developers is to alter the data and make it manageable for customers. In PrestaShop 1.6, a specific Form framework was created to help developers. In PrestaShop 1.7, the system has changed as we now rely on the Symfony Form component.\nThis system only works with pages from the \u0026ldquo;Configure\u0026rdquo; section of your back office.\nIf you want to customize an entity form, you\u0026rsquo;re looking for Grid and identifiable object form hooks usage example.\n Let\u0026rsquo;s see an example on how to add, populate, validate and persist a new form field in PrestaShop 1.7.\nCreate the module and register the hooks \u0026lt;?php # /modules/module_name/module_name.php  public function hookActionAdministrationPageForm(\u0026amp;$hookParams) { $formBuilder = $hookParams[\u0026#39;form_builder\u0026#39;]; $uploadQuotaForm = $formBuilder-\u0026gt;get(\u0026#39;upload_quota\u0026#39;); $uploadQuotaForm-\u0026gt;add( \u0026#39;description\u0026#39;, TextType::class, [ \u0026#39;data\u0026#39; =\u0026gt; \u0026#39;A description\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; \u0026#39;Description\u0026#39; ] ); } public function hookActionAdministrationPageSave(\u0026amp;$hookParams) { // retrieve and validate the data  dump($hookParams[\u0026#39;form_data\u0026#39;][\u0026#39;upload_quota\u0026#39;][\u0026#39;description\u0026#39;]); // if the data is invalid, populate `errors` array  dump($hookParams[\u0026#39;errors\u0026#39;]); } The form field should be available in the selected form, can be validated and persisted in the database if valid using the provided hooks. If you access the Administration page in Back Office, you should see the new form field:\nTemplating Of course, you can override every template to improve again the rendering of the form (the Back Office theme may be/will be improved in future versions)\n# /modules/module_name/views/PrestaShop/Admin/AdvancedParameters/administration.html.twig {% block administration_form_upload_quota %} \u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;card-header\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;material-icons\u0026#34;\u0026gt;file_upload\u0026lt;/i\u0026gt; {{ \u0026#39;Upload quota\u0026#39;|trans }} \u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;card-block\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-text\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; {{ ps.label_with_help((\u0026#39;Maximum size for attached files\u0026#39;|trans), (\u0026#39;Set the maximum size allowed for attachment files (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).\u0026#39;|trans({\u0026#39;%size%\u0026#39;: \u0026#39;PS_ATTACHMENT_MAXIMUM_SIZE\u0026#39;|configuration}, \u0026#39;Admin.Advparameters.Help\u0026#39;))) }} {{ form_errors(uploadQuotaForm.max_size_attached_files) }} {{ form_widget(uploadQuotaForm.max_size_attached_files) }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; {{ ps.label_with_help((\u0026#39;Maximum size for a downloadable product\u0026#39;|trans), (\u0026#39;Define the upload limit for a downloadable product (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).\u0026#39;|trans({\u0026#39;%size%\u0026#39;: \u0026#39;PS_LIMIT_UPLOAD_FILE_VALUE\u0026#39;|configuration}, \u0026#39;Admin.Advparameters.Help\u0026#39;))) }} {{ form_errors(uploadQuotaForm.max_size_downloadable_product) }} {{ form_widget(uploadQuotaForm.max_size_downloadable_product) }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; {{ ps.label_with_help((\u0026#34;Maximum size for a product\u0026#39;s image\u0026#34;|trans), (\u0026#39;Define the upload limit for an image (in megabytes). This value has to be lower or equal to the maximum file upload allotted by your server (currently: %size% MB).\u0026#39;|trans({\u0026#39;%size%\u0026#39;: \u0026#39;PS_LIMIT_UPLOAD_IMAGE_VALUE\u0026#39;|configuration}, \u0026#39;Admin.Advparameters.Help\u0026#39;))) }} {{ form_errors(uploadQuotaForm.max_size_product_image) }} {{ form_widget(uploadQuotaForm.max_size_product_image) }} \u0026lt;/div\u0026gt; {# Do what you need to do, I\u0026#39;m really bad at designing pages ^o^ #} \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; {{ form_label(uploadQuotaForm.description) }} {{ form_widget(uploadQuotaForm.description) }} {{ form_errors(uploadQuotaForm.description) }} \u0026lt;/div\u0026gt; {{ form_rest(uploadQuotaForm) }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-footer\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;d-flex justify-content-end\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;{{ \u0026#39;Save\u0026#39;|trans({}, \u0026#39;Admin.Actions\u0026#39;) }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %} Handle form error in the product page form If we want to manage errors of the product page, adding text in controller-\u0026gt;errors (like in the legacy controllers) is not working, we have to add your error in a specific syntax and return a json array of errors.\nAssuming we want to notify an error when validating the Product form on the field with the id form_step6_myfield, this is the correct method to display an error message to the user.\nIn the hook (actionProductUpdate, actionAdminProductsControllerSaveAfter, \u0026hellip;):\n\u0026lt;?php // add error Context::getContext()-\u0026gt;controller-\u0026gt;errors[\u0026#39;step6_myfield\u0026#39;] = [$this-\u0026gt;l(\u0026#39;Syntax error in field\u0026#39;)]; // return error if (Context::getContext()-\u0026gt;controller-\u0026gt;errors) { http_response_code(400); die(json_encode(Context::getContext()-\u0026gt;controller-\u0026gt;errors)); } \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;form_step6_myfield\u0026#34; name=\u0026#34;whatever\u0026#34; /\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/",
	"title": "Controllers",
	"tags": [],
	"description": "",
	"content": "Controllers In the previous chapters, we saw how to add content in the existing pages of the front and back office with hooks \u0026amp; widgets.\nAs soon as a module needs to implement more than a configuration page, building controllers will offer a dedicated space for your features. In a MVC architecture, a Controller manages the synchronization events between the View and the Model, and keeps them up to date. It receives all the user events and triggers the actions to perform.\nIf an action needs data to be changed, the Controller will “ask” the Model to change the data, and in turn the Model will notify the View that the data has been changed, so that the View can update itself. Module controllers will behave like the core ones thanks the class inheritance:\n  Controller classes inheritance   The core classes can be found in the /classes/controller folder.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/prestashop-webservice-lib/create-resource/",
	"title": "Create a resource",
	"tags": [],
	"description": "",
	"content": "Create a resource Creation workflow The creation workflow is a bit more complex than reading some data from the API, mainly because we rarely manage data via XML format. In most use cases the user is presented with a human understandable component, like a form, and the data entered is then processed. Besides we need to make sure that the XML sent to the webservice is understandable and complete.\nAs we explained in a previous tutorial the webservice provides two resource schemas. For creation we are going to use the blank schema which is an empty representation of a resource. This empty XML will be filled with our data and then sent to the webservice using the add() method.\n  Create Resource via Webservice   You can update this schema using the source XML file importable in services like draw.io. Retrieve the blank schema We already saw that the get method can be used to retrieve either a list or a specific resource (with the resource and id parameters) but it can only be used to get a specific url\n   Key Value     url blank schema url    \u0026lt;?php try { // creating webservice access  $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); // call to retrieve the blank schema  $blankXml = $webService-\u0026gt;get([\u0026#39;url\u0026#39; =\u0026gt; \u0026#39;http://example.com/api/customers?schema=blank\u0026#39;]); } catch (PrestaShopWebserviceException $ex) { // Shows a message related to the error  echo \u0026#39;Other error: \u0026lt;br /\u0026gt;\u0026#39; . $ex-\u0026gt;getMessage(); } Fill the schema and create new resource Now that you have the empty XML structure you can fill it with your data, once it is done you will use the add() method to create the new resource.\nRemember that each resource has its own validation rules (required fields, field types and formats, \u0026hellip;), if you don\u0026rsquo;t respect these rules the webservice will refuse the creation. To know the details a resource validation rules you can use the synopsis schema (e.g. http://example.com/api/customers?schema=synopsis)    Key Value     resource customers   postXml XML content (string)    \u0026lt;?php $customerFields = $blankXml-\u0026gt;customer-\u0026gt;children(); $customerFields-\u0026gt;firstname = \u0026#39;John\u0026#39;; $customerFields-\u0026gt;lastname = \u0026#39;DOE\u0026#39;; $customerFields-\u0026gt;email = \u0026#39;john.doe@unknown.com\u0026#39;; $customerFields-\u0026gt;passwd = \u0026#39;password1234\u0026#39;; $createdXml = $webService-\u0026gt;add([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;, \u0026#39;postXml\u0026#39; =\u0026gt; $blankXml-\u0026gt;asXML(), ]); $newCustomerFields = $createdXml-\u0026gt;customer-\u0026gt;children(); echo \u0026#39;Customer created with ID \u0026#39; . $newCustomerFields-\u0026gt;id . PHP_EOL; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/structure/",
	"title": "Database structure",
	"tags": [],
	"description": "",
	"content": "Maintaining the database Database structure definition Global definition The database structure of PrestaShop can be found in install/data/db_structure.sql (1.7.3.x releases example).\nIt is used one time, during the installation of PrestaShop. It contains the structure of almost all tables. If a table needs to be added or modified, this the file you should open.\nTable in DB but not in db_structure.sql With PrestaShop 1.7, some tables have been migrated to doctrine entities (i.e stocks). If their ObjectModel (= legacy) equivalent does not exist, the entity is probably only managed by Doctrine.\nIn that case, updating the table can be done by modifying the related entity stored in src/PrestaShopBundle/Entity/.\nDatabase content The default database content is stored in XML files in install/data/xml/. There is one file per entity (= table).\nThese files are used during the PrestaShop installation as well.\nStructure and content upgrades Defining changes Once PrestaShop is installed, the default structure and content files we saw are not used anymore.\nIf a new release of PrestaShop must bring changes to the existing database, an upgrade file must be created along the db_structure.sql update. This SQL file will be stored in the folder /install/upgrade/sql/.\nIts name is the PS version on which the change will be applied.\nFor instance, here is the file 1.7.3.0.sql, used by shops upgrading to 1.7.3.0 or later:\n[...] UPDATE `PREFIX_tab` SET `position` = 0 WHERE `class_name` = \u0026#39;AdminZones\u0026#39; AND `position` = \u0026#39;1\u0026#39;; UPDATE `PREFIX_tab` SET `position` = 1 WHERE `class_name` = \u0026#39;AdminCountries\u0026#39; AND `position` = \u0026#39;0\u0026#39;; /* PHP:ps_1730_add_quick_access_evaluation_catalog(); */; /* PHP:ps_1730_move_some_aeuc_configuration_to_core(); */; ALTER TABLE `PREFIX_product` ADD `low_stock_threshold` INT(10) NULL DEFAULT NULL AFTER `minimal_quantity`; [...] In there we can read the SQL queries to execute when upgrading to 1.7.3.0. Each of them alters the structure and/or modify the existing data. In case you have complex algorithms to run, you can call PHP code with the PHP: keyword.\nTo make the code callable, a dedicated file has to be created in /install/upgrade/php/ with a function in it. This file and function must have the same name as we saw in the SQL upgrade file.\nIf we reuse the previous example, we will find the corresponding file /install/upgrade/php/ps_1730_add_quick_access_evaluation_catalog.php:\n\u0026lt;?php function ps_1730_add_quick_access_evaluation_catalog() { // Code inserting values in database  [...] } PrestaShop does not expect these functions to return anything. It will always consider it went well.\nApplying changes Applying the changes on your database can be done:\n by reinstalling the shop from a previous version of PrestaShop, by copying the new files and calling the PHP script install/upgrade/upgrade.php  PrestaShop lists the upgrade files waiting to be applied, by selecting the names fitting between the configuration property PS_VERSION_DB and the constant _PS_INSTALL_VERSION_ defined in install/install_version.php.\nIn the first part of this article, we talked about entities being managed only by Doctrine. Applying the changes on the database is done with the following command:\nphp bin/console prestashop:schema:update-without-foreign  Use php app/console instead of php bin/console for versions prior to 1.7.4  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": "Forms From PrestaShop 1.7, fields are managed in FormField class and display is set in themes/\u0026lt;themeName\u0026gt;/templates/_partials/form-fields.tpl template.\nThe useful methods to manage this fields are:\n setName: Set the name of field setType: Set the type of field (text, checkbox\u0026hellip;). Read list below setRequired: Set if the field is required or not setLabel: Set the label of the field setValue: Set the field value setAvailableValues: Set the available values for the field, to select among other things addAvailableValue: Add an available value for the field setMaxLength: Maximum length of the field setConstraint: Add a validation constraint to the field, call methods are those of the Validation class (ex isEmail)  Here are all the possible types of fields:\n\u0026lt;?php return [ // Standard text field  (new FormField) -\u0026gt;setName(\u0026#39;first_name\u0026#39;) -\u0026gt;setType(\u0026#39;text\u0026#39;) -\u0026gt;setRequired(true) -\u0026gt;setValue(\u0026#34;John\u0026#34;) -\u0026gt;setMaxLength(\u0026#34;128\u0026#34;) -\u0026gt;setLabel($this-\u0026gt;trans(\u0026#39;Your first name\u0026#39;)), // File field  (new FormField) -\u0026gt;setName(\u0026#39;file_upload\u0026#39;) -\u0026gt;setType(\u0026#39;file\u0026#39;) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Upload a document\u0026#39;)), // Select field  (new FormField) -\u0026gt;setName(\u0026#39;select_field\u0026#39;) -\u0026gt;setType(\u0026#39;select\u0026#39;) -\u0026gt;setAvailableValues([\u0026#39;key\u0026#39; =\u0026gt; \u0026#39;value 1\u0026#39;, \u0026#39;key2\u0026#39; =\u0026gt; \u0026#39;value2\u0026#39;]) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Select type\u0026#39;)), // Country select field (like select but add a \u0026#39;js js-country\u0026#39; class)  (new FormField) -\u0026gt;setName(\u0026#39;country_field\u0026#39;) -\u0026gt;setType(\u0026#39;countrySelect\u0026#39;) -\u0026gt;setAvailableValues([\u0026#39;key\u0026#39; =\u0026gt; \u0026#39;value 1\u0026#39;, \u0026#39;key2\u0026#39; =\u0026gt; \u0026#39;value2\u0026#39;]) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Country select\u0026#39;)), // Checkbox field  (new FormField) -\u0026gt;setName(\u0026#39;checkbox_field\u0026#39;) -\u0026gt;setType(\u0026#39;checkbox\u0026#39;) -\u0026gt;setValue(1) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Checkbox type\u0026#39;)), // Radio buttons field  (new FormField) -\u0026gt;setName(\u0026#39;radio_field\u0026#39;) -\u0026gt;setType(\u0026#39;radio-buttons\u0026#39;) -\u0026gt;setAvailableValues([\u0026#39;key\u0026#39; =\u0026gt; \u0026#39;value 1\u0026#39;, \u0026#39;key2\u0026#39; =\u0026gt; \u0026#39;value2\u0026#39;]) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Radio buttons type\u0026#39;)), // Date field  (new FormField) -\u0026gt;setName(\u0026#39;date_field\u0026#39;) -\u0026gt;setType(\u0026#39;date\u0026#39;) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Date\u0026#39;)), // Birthday field  (new FormField) -\u0026gt;setName(\u0026#39;birthday_field\u0026#39;) -\u0026gt;setType(\u0026#39;birthday\u0026#39;) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Birthday\u0026#39;)), // Password field  (new FormField) -\u0026gt;setName(\u0026#39;password_field\u0026#39;) -\u0026gt;setType(\u0026#39;password\u0026#39;) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Password\u0026#39;)), // Email field  (new FormField) -\u0026gt;setName(\u0026#39;email_field\u0026#39;) -\u0026gt;setType(\u0026#39;email\u0026#39;) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Email type\u0026#39;)), // Phone field  (new FormField) -\u0026gt;setName(\u0026#39;phone_field\u0026#39;) -\u0026gt;setType(\u0026#39;phone\u0026#39;) -\u0026gt;setLabel($this-\u0026gt;l(\u0026#39;Phone type\u0026#39;)), // Hidden field  (new FormField) -\u0026gt;setName(\u0026#39;hidden_field\u0026#39;) -\u0026gt;setType(\u0026#39;hidden\u0026#39;) -\u0026gt;setValue(\u0026#39;My hidden value\u0026#39;) ]; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/extend-grid-with-javascript/",
	"title": "How to extend a Grid with Javascript extensions",
	"tags": [],
	"description": "",
	"content": "How to extend a grid with Javascript extensions Introduction Javascript grid extensions supplement grid behavior and enhance user experience. For example, most grids contains SortingExtension which provides sorting by columns functionality, BulkActionCheckboxExtension which enables interactive selection of bulk actions and so on. But the fact is that most of grids will not necessarily need all features, so by using extensions we encourage to easily add or remove grid feature while loading only necessary javascript code. In this tutorial we will learn how to use these extensions.\nGetting started To start we will need to have a plain grid already created in php side (you can find more docs about grid in The Grid component page. After following the Grid documentation directions you should now have a fully working php grid. As an example we will use a grid that display taxes items.\n  The twig template should look like this:\n### src/PrestaShopBundle/Resources/views/Admin/Improve/International/Tax/index.html.twig {% block content %} \u0026lt;div class=\u0026#34;row justify-content-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-lg-12\u0026#34;\u0026gt; {% include \u0026#39;@PrestaShop/Admin/Common/Grid/grid_panel.html.twig\u0026#39; with {\u0026#39;grid\u0026#39;: taxGrid} %} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {% endblock %} {% block javascripts %} {{ parent() }} \u0026lt;script src=\u0026#34;{{ asset(\u0026#39;themes/default/js/bundle/pagination.js\u0026#39;) }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {% endblock %}   And this is how it looks in browser:\n    Taxes grid example   Although the grid looks complete, none of the actions are working yet because the javascript behavior is not enabled.\nEnabling javascript   Create javascript file for your page. In our example we create index.js in admin-dev/themes/new-theme/js/pages/tax/index.js.\n  Add an entry point in webpack.config.js. In our example we add an entry point in admin-dev/themes/new-theme/.webpack/common.js.\n### admin-dev/themes/new-theme/.webpack/common.js module.exports = { entry: { ### adding taxes page entry point tax: \u0026#39;./js/pages/tax\u0026#39;, }, output: { path: path.resolve(__dirname, \u0026#39;../public\u0026#39;), filename: \u0026#39;[name].bundle.js\u0026#39;, },   Add your compiled file path to html script tag in twig template.\n### src/PrestaShopBundle/Resources/views/Admin/Improve/International/Tax/index.html.twig // ... {% block javascripts %} {{ parent() }} ## Adding script tag with path to compiled js file \u0026lt;script src=\u0026#34;{{ asset(\u0026#39;themes/new-theme/public/tax.bundle.js\u0026#39;) }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;{{ asset(\u0026#39;themes/default/js/bundle/pagination.js\u0026#39;) }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {% endblock %}   Adding extensions   Import and initialize Grid component\n### admin-dev/themes/new-theme/js/pages/tax/index.js ### 1. import the grid component import Grid from \u0026#39;../../components/grid/grid\u0026#39;; const $ = window.$; $(() =\u0026gt; { ### 2. initialize the grid component by providing grid id const taxGrid = new Grid(\u0026#39;tax\u0026#39;); });   As you can see in example above we are importing Grid component from admin-dev/themes/new-theme/js/components/grid/grid.js (note that the admin-dev part might differ, as it depends on PrestaShop installation). Next - initiating the grid component by declaring const taxGrid = new Grid('tax');. In this case the argument 'tax' represents the id of our grid.\nThe id provided to Grid component must be the same as in TaxGridDefinitionFactory.php\nNow when you need specific extension, just import it from admin-dev/themes/new-theme/js/components/grid/extension and add it to your grid - taxGrid.addExtension(new SortingExtension());. In case you need more than one list per page, you can just declare another variable of another list and add extensions the same way.\n### admin-dev/themes/new-theme/js/pages/tax/index.js import Grid from \u0026#39;../../components/grid/grid\u0026#39;; ### import extension import SortingExtension from \u0026#39;../../components/grid/extension/sorting-extension\u0026#39;; const $ = window.$; $(() =\u0026gt; { const taxGrid = new Grid(\u0026#39;tax\u0026#39;); ### add extension to grid taxGrid.addExtension(new SortingExtension()); }); After adding all needed extensions, our index.js should look like this:\n### admin-dev/themes/new-theme/js/pages/tax/index.js import Grid from \u0026#39;../../components/grid/grid\u0026#39;; import SortingExtension from \u0026#39;../../components/grid/extension/sorting-extension\u0026#39;; import FiltersResetExtension from \u0026#39;../../components/grid/extension/filters-reset-extension\u0026#39;; import ReloadListActionExtension from \u0026#39;../../components/grid/extension/reload-list-extension\u0026#39;; import ColumnTogglingExtension from \u0026#39;../../components/grid/extension/column-toggling-extension\u0026#39;; import SubmitRowActionExtension from \u0026#39;../../components/grid/extension/action/row/submit-row-action-extension\u0026#39;; import SubmitBulkExtension from \u0026#39;../../components/grid/extension/submit-bulk-action-extension\u0026#39;; import BulkActionCheckboxExtension from \u0026#39;../../components/grid/extension/bulk-action-checkbox-extension\u0026#39;; import ExportToSqlManagerExtension from \u0026#39;../../components/grid/extension/export-to-sql-manager-extension\u0026#39;; const $ = window.$; $(() =\u0026gt; { const taxGrid = new Grid(\u0026#39;tax\u0026#39;); taxGrid.addExtension(new ExportToSqlManagerExtension()); taxGrid.addExtension(new ReloadListActionExtension()); taxGrid.addExtension(new SortingExtension()); taxGrid.addExtension(new FiltersResetExtension()); taxGrid.addExtension(new ColumnTogglingExtension()); taxGrid.addExtension(new SubmitRowActionExtension()); taxGrid.addExtension(new SubmitBulkExtension()); taxGrid.addExtension(new BulkActionCheckboxExtension()); }); The last thing to do is to run the compiler. More about compiler and npm commands here: https://devdocs.prestashop.com/1.7/development/compile-assets/.\nIn our example we open command line, cd to {{Our prestashop root directory}}/admin-dev/themes/new-theme and type the following command:\n npm run build (for production)  OR\n npm run dev (for development)  Wait until compiling finishes and test the grid. Grid extensions are now working.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/templating/admin-views/",
	"title": "How to override Back Office views",
	"tags": [],
	"description": "",
	"content": "How to override Back Office views  Since PrestaShop 1.7, the back office is being progressively migrated to the Symfony framework. Even though modules are no longer allowed to override a complete controller like before (it was highly discouraged anyway), we have introduced new powerful and more efficient ways to customize the Back Office.\nAs part of this migration, PrestaShop is switching its templating engine from Smarty to Twig. Twig is very popular in the PHP/Symfony world, it\u0026rsquo;s well-documented and it\u0026rsquo;s also one of the most efficient engines out there.\nThis means that once all the pages have been migrated, the whole Back Office will be Twig-based. This engine has allowed us to enable some powerful new features for module developers on modern pages.\nOverride templates Let\u0026rsquo;s say we want to improve the Product Listing page of the back office.\nOur Customer want a better Listing view: the \u0026ldquo;Price\u0026rdquo; column should be at position 2 and the \u0026ldquo;Reference\u0026rdquo; column to be removed. How can we do that? It\u0026rsquo;s quite simple.\nIdentify the template to override First we need to identify which Twig template(s) is (are) rendered. Using the Debug mode, select the \u0026ldquo;Twig metrics\u0026rdquo; block in the Symfony Debug toolbar. You\u0026rsquo;ll see the list of Twig templates used to render the page. In our case, we are interested in the template \u0026ldquo;@PrestaShop/Admin/Product/catalog.html.twig\u0026rdquo;.\nOverride the template in the module: a simple \u0026ldquo;Hello world!\u0026rdquo; Now we have found the right template, let\u0026rsquo;s override it inside a module. In a module called foo let\u0026rsquo;s create the related template. As the template is located inside the PrestaShop/Admin/Product/CatalogPage folder, we need to create the same path.\nSo Let\u0026rsquo;s create a file named catalog.html.twig in the modules/foo/views/PrestaShop/Admin/Product/CatalogPage/catalog.html.twig folder: we could re-use the one in the src/PrestaShopBundle/Resources/views/Admin/Product/CatalogPage folder, but let\u0026rsquo;s start with a very simple override.\nNote that we use PrestaShopBundle instead of @PrestaShop to be sure we extend the original file.\n{% extends \u0026#39;PrestaShopBundle:Admin/Product/CatalogPage:catalog.html.twig\u0026#39; %}{% block product_catalog_filters %}Hello world! {% endblock %}Access the product Listing page and \u0026ldquo;voila\u0026rdquo;, we have overridden the filter block. Now we can adapt it to remove \u0026ldquo;Reference\u0026rdquo; column. For instance, remove \u0026ldquo;Reference\u0026rdquo; and \u0026ldquo;Search Ref.\u0026rdquo; table headers, and we should have this view:\nWell, it\u0026rsquo;s not that good\u0026hellip; it\u0026rsquo;s because the columns are also rendered by the template list.html.twig. We must override it to remove the \u0026ldquo;Reference\u0026rdquo; column.\nLet\u0026rsquo;s create the file named list.html.twig in the modules/foo/views/PrestaShop/Admin/Product/CatalogPage/Lists folder with the content of original block product_catalog_form_table_row located in the src/PrestaShopBundle/Resources/views/Admin/Product/CatalogPage/Lists folder.\nWe only have to remove the \u0026ldquo;Reference\u0026rdquo; row in this template and we are good.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute-pull-requests/create-pull-request/",
	"title": "How to push your changes to GitHub",
	"tags": [],
	"description": "",
	"content": "Hot to publish your contribution to GitHub Once your changes sound good and tests pass on your local computer, you can contribute to the open source project by submitting these changes as a Pull Request on GitHub.\nFirst you need to push your branch on GitHub:\ngit push origin add-emoticons-support  You will need to use your GitHub credentials. Now you can create your Pull Request on GitHub. If you don\u0026rsquo;t know how to do it, you can read GitHub documentation.\nIf you find this process quite complex, the following articles can help you:\n The SIMPLEST way to make a pull request The github workflow explained  Do not forget to complete the contribution table, this is really important for the Core Team to really understand what is the value of your contribution. See our contribution guidelines Syncing your fork PrestaShop Core is a really active project with more than 30 contributions accepted per week, so your fork will become outdated really fast. To make your own copy up to date with the original project, only a few commands are required:\nYou need to execute these commands at the root of your copy/fork. git remote add ps https://github.com/PrestaShop/PrestaShop.git git fetch ps git rebase -i ps/develop git push -f origin develop What we have done here? We have added the location of the original project to git so he can retrieve the latest commits, and then we apply this \u0026ldquo;history\u0026rdquo; to our local project. Note, here we have updated the develop branch of the PrestaShop project and the same commands can be used to refresh every git branch.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/javascript-events/",
	"title": "Javascript events",
	"tags": [],
	"description": "",
	"content": "JavaScript events Javascript architecture PrestaShop 1.7 has reworked a lot of javascript code, almost rewriting everything.\nIt\u0026rsquo;s recommended to read more about PrestaShop asset management before continuing. A default store loads a lot less files in 1.7 compared to 1.6, there are no specific files per page for instance. The 2 new important files you have to master are:\n   File Content     core.js Loads jQuery3, makes ajax calls, defines core methods that all frontend should use   theme.js Bundles all theme specific code and libraries    jQuery is loaded by the core, so each theme will have jQuery v2 available. Do not redefine it. Events Dispatch an event The best way to trigger an event is to use the prestashop object. Here is a simple example:\nprestashop.emit( \u0026#39;product updated\u0026#39;, { dataForm: someSelector.serializeArray(), productOption: 3 } ); Dispatched events PrestaShop will dispatch many events from core.js so your code can rely on it:\n   Event Name Description     updateCart On the cart page, everytime something happens (change quantity, remove product and so on) the cart is reloaded by ajax call. After the cart is updated, this event is triggered.   updatedAddressForm In the address form, some input will trigger ajax calls to modify the form (like country change), after the form is updated, this event is triggered.   updateDeliveryForm During checkout, if the delivery address is modified, this event will be trigged.   changedCheckoutStep Each checkout step submission will fire this event.   updateProductList On every product list page (category, search results, pricedrop and so on), the list is updated via ajax calls if you change filters or sorting options. Each time the DOM is reloaded with new product list, this event is triggered.   clickQuickView If your theme handles it, this event will be trigged when use click on the quickview link.   updateProduct On the product page, selecting a new combination will reload the DOM via ajax calls. After the update, this event is fired.   updatedProduct On the product page, selecting a new combination will reload the DOM via ajax calls. After the update, this event is fired.   handleError This event is fired after a fail of POST request. Have the eventType as first parameter.   updateFacets On every product list page (category, search results, pricedrop and so on), the list is updated via ajax calls if you change filters or sorting options. Each time the facets is reloaded, this event is triggered.   responsive update While browser is resized, this event is fired with a mobile parameter.    Triggering delegated events We use event delegation to make sure that the events are still attached after the DOM was modified (like after an ajax call).\nHere is a simple way to trigger a delegated event.\nconst body = $(\u0026#39;body\u0026#39;); // Our events are usually attached to the body  const event = jQuery.Event(\u0026#39;click\u0026#39;); event.target = body.find(\u0026#39;.js-theClassYouNeed\u0026#39;); body.trigger(event); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/kpi-blocks/",
	"title": "KPI block in Admin pages",
	"tags": [],
	"description": "",
	"content": "How to add a KPI block in admin pages  A KPI block (also called KPI row) is shown here:\n  KPI Block   You can follow these steps to easily add a KPI row to a modern page:\n  Define your KPI classes:\n You can use one of existing KPI classes, from PrestaShop\\PrestaShop\\Adapter\\Kpi namespace, You can create new classes - they must implement the PrestaShop\\PrestaShop\\Core\\Kpi\\KpiInterface    Define a KPI row factory service in src/PrestaShopBundle/Resources/config/services/core/kpi.yml\nExample from translations page:\nprestashop.core.kpi_row.factory.translations_page:class:PrestaShop\\PrestaShop\\Core\\Kpi\\Row\\KpiRowFactoryarguments:- \u0026#39;@prestashop.adapter.kpi.enabled_languages\u0026#39;- \u0026#39;@prestashop.adapter.kpi.main_country\u0026#39;- \u0026#39;@prestashop.adapter.kpi.translations\u0026#39; The KPI row factory accepts an unlimited number of arguments, each argument being a KPI that will be built into a KPI row.   Build the KPI row in your controller\u0026rsquo;s action and assign it to twig by returning it:\n\u0026lt;?php public function showSettingsAction(Request $request) { // Create the KPI row factory service  $kpiRowFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.kpi_row.factory.your_page\u0026#39;); return [ // Assign the built KPI row to the view  \u0026#39;kpiRow\u0026#39; =\u0026gt; $kpiRowFactory-\u0026gt;build(), ... ]; }   The final step is to render the KPI row with Twig, using renderKpiRow method from CommonController and passing it to the previously assigned kpiRow variable:\n{# This also works in Admin module controllers #}{% block translations_kpis_row %}\u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; {{ render(controller( \u0026#39;PrestaShopBundle:Admin\\\\Common:renderKpiRow\u0026#39;, { \u0026#39;kpiRow\u0026#39;: kpiRow } )) }}\u0026lt;/div\u0026gt; {% endblock %}  Alter an existing Kpi row  A hook allows you to alter the list of an existing Kpi row of the Back Office.\nThis hook is dynamic and is dispatched after the Kpi row identifier.\nFor instance, with a Kpi row identified by \u0026ldquo;foo\u0026rdquo;:\n\u0026lt;?php // we are in a module public function hookActionFooKpiRowModifier(array $params) { var_dump($params[\u0026#39;kpis\u0026#39;]); // access the complete list  unset($params[\u0026#39;kpis\u0026#39;][0]); // remove the first item  $params[\u0026#39;kpis\u0026#39;][] = new YourOwnKpi(...); } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/advanced-use/manage-configuration/",
	"title": "Manage Configuration",
	"tags": [],
	"description": "",
	"content": "Manage Configuration You can manage your shop configuration thanks to the API, in this example we will set the PS_MULTISHOP_FEATURE_ACTIVE to true (which enables multishop mode).\nAPI call First check if the configuration already exists by using filters and display parameters /api/configurations/?display=[id,name,value]\u0026amp;filter[name]=[PS_MULTISHOP_FEATURE_ACTIVE]\nCreate configuration If the configuration doesn\u0026rsquo;t exist yet, you will receive an empty list:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;configurations\u0026gt; \u0026lt;/configurations\u0026gt; \u0026lt;/prestashop\u0026gt; So you need to POST on the configuration API /api/configurations/ to create this new value\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;value\u0026gt;1\u0026lt;/value\u0026gt; \u0026lt;name\u0026gt;PS_MULTISHOP_FEATURE_ACTIVE\u0026lt;/name\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/prestashop\u0026gt; Update configuration If it is already defined you will receive a list with the searched configuration:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;configurations\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[411]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;value\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[PS_MULTISHOP_FEATURE_ACTIVE]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/configurations\u0026gt; \u0026lt;/prestashop\u0026gt; So you need to update it via a PUT using the configuration ID: /api/configurations/411\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;id\u0026gt;411\u0026lt;/id\u0026gt; \u0026lt;value\u0026gt;1\u0026lt;/value\u0026gt; \u0026lt;name\u0026gt;PS_MULTISHOP_FEATURE_ACTIVE\u0026lt;/name\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/prestashop\u0026gt;  The API being a simple CRUD it lacks logic on resources and doesn\u0026rsquo;t check for existing values, so be sure to check the existence of the configuration and use the appropriate action POST|PUT if you want to avoid duplicates. PHP Webservice lib \u0026lt;?php require_once(\u0026#39;./vendor/autoload.php\u0026#39;); try { $webServiceUrl = \u0026#39;http://example.com/\u0026#39;; $webServiceKey = \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;; $webService = new PrestaShopWebservice($webServiceUrl, $webServiceKey, false); $configurationName = \u0026#39;PS_MULTISHOP_FEATURE_ACTIVE\u0026#39;; $configurationValue = 1; // Start by checking if the configuration is present and get its ID  $xml = $webService-\u0026gt;get([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;configurations\u0026#39;, \u0026#39;filter[name]\u0026#39; =\u0026gt; \u0026#39;[\u0026#39;. $configurationName . \u0026#39;]\u0026#39;, ]); $configurationId = null; if ($xml-\u0026gt;configurations-\u0026gt;configuration-\u0026gt;count() \u0026gt; 0) { $configurationId = (int) $xml-\u0026gt;configurations-\u0026gt;configuration[0]-\u0026gt;attributes()[\u0026#39;id\u0026#39;]; } // Get the base XML, either a blank one or the existing one  if (null === $configurationId) { $configurationXml = $webService-\u0026gt;get([\u0026#39;url\u0026#39; =\u0026gt; $webServiceUrl . \u0026#39;api/configurations?schema=blank\u0026#39;]); } else { $configurationXml = $webService-\u0026gt;get([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;configurations\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; $configurationId, ]); } // Update values  $configurationXml-\u0026gt;configuration[0]-\u0026gt;name = $configurationName; $configurationXml-\u0026gt;configuration[0]-\u0026gt;value = $configurationValue; } catch (PrestaShopWebserviceException $e) { echo \u0026#39;Error:\u0026#39; . $e-\u0026gt;getMessage() . PHP_EOL; } // Either create new configuration or update it if (null === $configurationId) { try { $webService-\u0026gt;add([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;configurations\u0026#39;, \u0026#39;postXml\u0026#39; =\u0026gt; $configurationXml-\u0026gt;asXML(), ]); echo \u0026#39;Successfully created configuration \u0026#39; . $configurationName . \u0026#39; = \u0026#39; . $configurationValue . PHP_EOL; } catch (PrestaShopWebserviceException $e) { echo \u0026#39;Error while adding the configuration:\u0026#39; . $e-\u0026gt;getMessage() . PHP_EOL; } } else { try { $webService-\u0026gt;edit([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;configurations\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; $configurationId, \u0026#39;putXml\u0026#39; =\u0026gt; $configurationXml-\u0026gt;asXML(), ]); echo \u0026#39;Successfully updated configuration \u0026#39; . $configurationName . \u0026#39; = \u0026#39; . $configurationValue . PHP_EOL; } catch (PrestaShopWebserviceException $e) { echo \u0026#39;Error while updating the configuration:\u0026#39; . $e-\u0026gt;getMessage() . PHP_EOL; } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/",
	"title": "PrestaShop modules",
	"tags": [],
	"description": "",
	"content": "Chapter 4 PrestaShop modules PrestaShop\u0026rsquo;s extensibility revolves around modules, which are small programs that make use of PrestaShop\u0026rsquo;s functionalities and changes them or add to them in order to make PrestaShop easier to use or more tailored to the merchant\u0026rsquo;s needs.\n Introduction   Getting started   Extension concepts   Payment modules   Testing   Core changes   Selling your modules on the Addons Marketplace   Sample modules   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/templating/",
	"title": "Templating",
	"tags": [],
	"description": "",
	"content": "Templates  How to override Back Office views   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/displaying-content-in-front-office/",
	"title": "Displaying content on the front office",
	"tags": [],
	"description": "",
	"content": "Displaying content on the front office As it is, the module does not do much. In order to display something on the front office, we have to add support for a few hooks. This is done by implementing the hooks' methods, and that was actually done in the install() method we wrote earlier, using the registerHook() method:\n\u0026lt;?php public function install() { if (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); } return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;leftColumn\u0026#39;) \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;actionFrontControllerSetMedia\u0026#39;) \u0026amp;\u0026amp; Configuration::updateValue(\u0026#39;MYMODULE_NAME\u0026#39;, \u0026#39;my friend\u0026#39;); } As you can see, we make it so that the module is hooked to the \u0026ldquo;leftColumn\u0026rdquo; and \u0026ldquo;actionFrontControllerSetMedia\u0026rdquo; hooks. In addition to this, we will add code for the \u0026ldquo;rightColumn\u0026rdquo; hook.\nAttaching code to a hook requires a specific method for each:\n hookDisplayLeftColumn(): will hook code into the left column – in our case, it will fetch the MYMODULE_NAME module setting and display the module\u0026rsquo;s template file, mymodule.tpl, which must be located in the /views/templates/hook/ folder. hookDisplayRightColumn(): will simply do the same as hookDisplayLeftColumn(), but for the right column. hookActionFrontControllerSetMedia(): will add a link to the module\u0026rsquo;s CSS file, /views/css/mymodule.css and module\u0026rsquo;s JS file, /views/js/mymodule.js.  \u0026lt;?php public function hookDisplayLeftColumn($params) { $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign([ \u0026#39;my_module_name\u0026#39; =\u0026gt; Configuration::get(\u0026#39;MYMODULE_NAME\u0026#39;), \u0026#39;my_module_link\u0026#39; =\u0026gt; $this-\u0026gt;context-\u0026gt;link-\u0026gt;getModuleLink(\u0026#39;mymodule\u0026#39;, \u0026#39;display\u0026#39;) ]); return $this-\u0026gt;display(__FILE__, \u0026#39;mymodule.tpl\u0026#39;); } public function hookDisplayRightColumn($params) { return $this-\u0026gt;hookDisplayLeftColumn($params); } public function hookActionFrontControllerSetMedia() { $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerStylesheet( \u0026#39;mymodule-style\u0026#39;, $this-\u0026gt;_path.\u0026#39;views/css/mymodule.css\u0026#39;, [ \u0026#39;media\u0026#39; =\u0026gt; \u0026#39;all\u0026#39;, \u0026#39;priority\u0026#39; =\u0026gt; 1000, ] ); $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerJavascript( \u0026#39;mymodule-javascript\u0026#39;, $this-\u0026gt;_path.\u0026#39;views/js/mymodule.js\u0026#39;, [ \u0026#39;position\u0026#39; =\u0026gt; \u0026#39;bottom\u0026#39;, \u0026#39;priority\u0026#39; =\u0026gt; 1000, ] ); } We are using the Context ($this-\u0026gt;context) to change a Smarty variable: Smarty\u0026rsquo;s assign() method makes it possible for us to set the template\u0026rsquo;s name variable with the value of the MYMODULE_NAME setting stored in the configuration database table.\nThe actionFrontControllerSetMedia hook is not part of the visual header, but enables us to put assets after code in the \u0026lt;head\u0026gt; tag of the generated HTML file. This is very useful for JavaScript or CSS files. To add a link to our CSS file in the page\u0026rsquo;s \u0026lt;head\u0026gt; tag, we use the registerStylesheet() method, which generates the correct \u0026lt;link\u0026gt; tag to the CSS file indicated in parameters. To add our JS script in the page, we use the registerJavascript() method, which generates the correct \u0026lt;script\u0026gt; tag.\nSave your file, and already you can hook your module\u0026rsquo;s template into the theme, move it around and transplant it (even though there is not template file for the moment): go to the \u0026ldquo;Positions\u0026rdquo; page from the \u0026ldquo;Modules\u0026rdquo; menu in the back office, then click on the \u0026ldquo;Transplant a module\u0026rdquo; button (top right of the page).\nIn the transplantation form:\n Find \u0026ldquo;My module\u0026rdquo; in the \u0026ldquo;Module\u0026rdquo; drop-down list. Choose \u0026ldquo;(displayLeftColumn) Left column blocks\u0026rdquo; in the \u0026ldquo;Hook into\u0026rdquo; drop-down list. Click \u0026ldquo;Save\u0026rdquo;.  It is useless to try to attach a module to a hook for which it has no implemented method.\nThe \u0026ldquo;Positions\u0026rdquo; page should reload, with the following message: \u0026ldquo;Module transplanted successfully to hook\u0026rdquo; (or maybe \u0026ldquo;This module has already been transplanted to this hook. \u0026ldquo;). Congratulations! Scroll down the \u0026ldquo;Positions\u0026rdquo; page, and you should indeed see your module among the other modules in the \u0026ldquo;Left column blocks\u0026rdquo; list. Move it to the top of the list by drag\u0026rsquo;n\u0026rsquo;dropping the module\u0026rsquo;s row.\nThe module is now attached to the left column\u0026hellip; but without any template to display, it falls short of doing anything useful: if you reload the homepage, the left column simply displays a message where the module should be, saying \u0026ldquo;No template found for module mymodule\u0026rdquo;.\nDisplaying content Now that we have access to the left column, we should display something there for the customer to see.\nThe visible part of the module is defined in .tpl files placed in specific View folders:\n /views/templates/front/: front office features. /views/templates/admin/: back office features. /views/templates/hook/: features hooked to a PrestaShop (so can be displayed either on the front office or the back office).  Template files can have just about any name. It there is only one such file, it is good practice to give it the same name as the folder and main file: mymodule.tpl.\nIn the case of this tutorial, the module will be hooked to the left column. Therefore, the TPL files that are called from the column\u0026rsquo;s hook should be placed in /views/templates/hook/ in order to work properly.\nAs said earlier, the content to be displayed in the theme should be stored in .tpl template files placed in a specific folder: /views/templates/front/. Template files can have just about any name. It there is only one such file, it is good practice to give it the same name as the folder and main file: mymodule.tpl.\nWe will create the mymodule.tpl file, which was passed as a parameter of the display() method in our module\u0026rsquo;s code, in the hookDisplayHome() method. When calling a template from within a hook, PrestaShop looks for that template file in the /views/templates/hook/ folder (in the module\u0026rsquo;s folder), which you must create yourself.\nIn PrestaShop 1.4, the module\u0026rsquo;s template files were to be placed at the root of the module\u0026rsquo;s folder.\nFor compatibility reasons, template files can still reside in the root folder in PrestaShop 1.5 and 1.6, although the sub-folders of /views/templates/ are now the recommended locations. If you intend your module to also work in PrestaShop 1.4, you should keep your files at the root.\nHere is our template file, located at /views/templates/hook/mymodule.tpl:\n\u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026#34;mymodule_block_home\u0026#34; class=\u0026#34;block\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;{l s=\u0026#39;Welcome!\u0026#39; mod=\u0026#39;mymodule\u0026#39;}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;block_content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{$my_module_link}\u0026#34; title=\u0026#34;Click this link\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt; This is just regular HTML code\u0026hellip; except for a few Smarty calls:\n The {l s='xxx' mod='yyy'} call is PrestaShop-specific method that enables you to register the string in the module\u0026rsquo;s translation panel. The s parameter is the string, while the mod parameter must contain the module\u0026rsquo;s identifier (in the present case, \u0026ldquo;mymodule\u0026rdquo;). We only use this method once here for readability reasons, but in practice it should be used on all of the template\u0026rsquo;s strings. The {if}, {else} and {/if} statements are Smarty conditionals. In our example, we check that the $my_module_name Smarty variable exists (using PHP\u0026rsquo;s isset() function, which considered as trusted by Smarty) and that it is not empty. If it goes well, we display the content of that variable; if not, we display \u0026ldquo;World\u0026rdquo;, in order to have \u0026ldquo;Hello World\u0026rdquo;. The {$my_module_link} variable in the link\u0026rsquo;s href attribute: this is a Smarty variable that we will create later on, which will point to PrestaShop\u0026rsquo;s root directory.  In addition to that, we are going to create a CSS file, and save it as /views/css/mymodule.css in the module\u0026rsquo;s folder (or any sub-folder you like to keep you CSS in):\ndiv#mymodule_block_home p { font-size: 150%; font-style:italic; } Save the template file in the module\u0026rsquo;s /views/templates/hook/ folder and the CSS file in the module\u0026rsquo;s /views/css/ folder, reload your shop\u0026rsquo;s homepage: the content of the template should appear on top of the left column, right below the shop\u0026rsquo;s logo (if you have indeed moved it at the top of the \u0026ldquo;Left Column\u0026rdquo; hook during the transplanting part).\nAs you can see, the theme applies its own CSS to the template we added:\n Our \u0026lt;h4\u0026gt; title becomes the block\u0026rsquo;s header, styled the same way as the other block titles. Our \u0026lt;div class=\u0026quot;block_content\u0026quot;\u0026gt; block has the same style as the other blocks on the page.  It is not pretty, but it works the way we want it to.\nDisabling the cache If you\u0026rsquo;ve followed this tutorial to the letter and still do not see anything appearing in the theme\u0026rsquo;s left column, it might be because PrestaShop has cached the previous templates, and is still serving these to you. Hence, you see the original version of the theme, without your changes.\nSmarty caches a compiled version of the homepage, for performance reasons. This is immensely helpful for production sites, but is useless for tests sites, where you may load the front-page very regularly in order to see the impact of your changes.\nWhen editing or debugging a theme on a test site, you should always disable the cache, in order to force Smarty to recompile templates on every page load. To that end, go to the \u0026ldquo;Advanced Parameters\u0026rdquo; menu, select the \u0026ldquo;Performance\u0026rdquo; page, then, in the \u0026ldquo;Smarty\u0026rdquo; section:\n Template cache. Choose \u0026ldquo;Disable the cache\u0026rdquo;. Cache. Disable it. Debug console. You can also open the console if you want to learn more about Smarty\u0026rsquo;s internals.  Do NOT disable the cache or enable the debug console on a production site, as it severely slows everything down! You should always perform all your tests in a test site, ideally on your own computer rather than online.\nIf you still can\u0026rsquo;t see the changes you made, you might have forgotten to register actionFrontControllerSetMedia hook.\nEmbedding a template in the theme The link that the module displays does not lead anywhere for now. Let\u0026rsquo;s create the display.php file that it targets, with a minimal content, and put it in: modules/yourmodule/controllers/front/.\nWelcome to this page! Click the \u0026ldquo;Click me!\u0026rdquo; link: the resulting page is just that raw text, without anything from the theme. We would like to have this text embedded in the theme, so let\u0026rsquo;s see how to do just that.\nAs you would expect, we have to create a template file in order to use the theme\u0026rsquo;s style. Let\u0026rsquo;s create the display.tpl file, which will contain the basic \u0026ldquo;Welcome to my shop!\u0026rdquo; line, and will be called by display.php. That display.php file will be rewritten into a front-end controller in order to properly embed our basic template within the theme\u0026rsquo;s header, footer, columns, etc.\nNOTE: You should strive to use explicit and recognizable names for your template files, so that you can find them quickly in the back office – which is a must when using the translation tool.\nHere are our two files:\n display.php  \u0026lt;?php class mymoduledisplayModuleFrontController extends ModuleFrontController { public function initContent() { parent::initContent(); $this-\u0026gt;setTemplate(\u0026#39;module:mymodule/views/templates/front/display.tpl\u0026#39;); } }  display.tpl  Welcome to my shop! Let\u0026rsquo;s explore display.php, our first PrestaShop front-end controller, stored in the /controllers/front folder of the module\u0026rsquo;s main folder.\nA front-end controller must be a class that extends the ModuleFrontController class. That controller must have one method: initContent(), which calls the parent class' initContent() method\u0026hellip; \u0026hellip;which then calls the setTemplate() method with our display.tpl file.\nsetTemplate() is the method that will take care of embedding our one-line template into a full-blown page, with proper header, footer and sidebars.\nUntil PrestaShop 1.4, developers who wanted to embed a template file into the site\u0026rsquo;s theme had to use PHP\u0026rsquo;s include() calls to include each portion of the page. Here is the equivalent code for display.php:\n// This file must be placed at the root of the module\u0026#39;s folder. global $smarty; include(\u0026#39;../../config/config.inc.php\u0026#39;); include(\u0026#39;../../header.php\u0026#39;); $smarty-\u0026gt;display(dirname(__FILE__).\u0026#39;/display.tpl\u0026#39;); include(\u0026#39;../../footer.php\u0026#39;); As you can see, this is not necessary anymore since PrestaShop 1.5: you can and should use a front-end controller, and both the controller (Controller) and its template (View) should share the same name: display.php is tied to display.tpl.\nSave both files in their respective folders, and reload your shop\u0026rsquo;s homepage, then click on the \u0026ldquo;Click me!\u0026rdquo;, and voilà ! You have your link. With just a few lines, the end result is already much better, with the \u0026ldquo;Welcome\u0026rdquo; line neatly placed between header, footer and columns!\nIt is only a first step, but this gives you an idea of what is possible if you follow the templating rules. Using Smarty\nSmarty is a PHP template engine, and is used by PrestaShop\u0026rsquo;s theming system. It is a free and open-source projet, hosted at https://www.smarty.net/.\nIt parses template .tpl files, looking for dynamic elements to replace with their contextual equivalents, then send the generated result to the browser. Those dynamic elements are indicated with curly brackets: { ... }. Programmers can create new variables and use them in TPL files; PrestaShop adds its own set of variables.\nFor instance, we can create the $my_module_message variable in PHP right in the hookDisplayLeftColumn() method, and have it displayed by our template file:\n mymodule.php  \u0026lt;?php public function hookDisplayLeftColumn($params) { $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;assign( [ \u0026#39;my_module_name\u0026#39; =\u0026gt; Configuration::get(\u0026#39;MYMODULE_NAME\u0026#39;), \u0026#39;my_module_link\u0026#39; =\u0026gt; $this-\u0026gt;context-\u0026gt;link-\u0026gt;getModuleLink(\u0026#39;mymodule\u0026#39;, \u0026#39;display\u0026#39;), \u0026#39;my_module_message\u0026#39; =\u0026gt; $this-\u0026gt;l(\u0026#39;This is a simple text message\u0026#39;) // Do not forget to enclose your strings in the l() translation method  ] ); return $this-\u0026gt;display(__FILE__, \u0026#39;mymodule.tpl\u0026#39;); } From there on, we can ask Smarty to display the content of this variable in our TPL file.\n mymodule.tpl  {$my_module_message} PrestaShop adds its own set of variables. For instance, {$hook_left_column} will be replaced with the content for the left column, meaning the content from all the modules that have been attached to the left column\u0026rsquo;s hook.\nAll Smarty variables are global. You should therefore pay attention not to name your own variable with the name of an existing Smarty variable, in order to avoid overwriting it. It is good practice to avoid overly simple names, such as {$products}, and to prefix it with your module\u0026rsquo;s name, or even your own name or initials, such as: {$henryb_mymodule_products}.\nHere is a list of Smarty variables that are common to all template pages:\n   File / folder Description     $urls.base_url Site URL.   $urls.current_url Current page URL.   $urls.shop_domain_url Shop URL.   $urls.img_ps_url URL for PrestaShop\u0026rsquo;s image folder.   $urls.img_cat_url URL for the categories images folder.   $urls.img_lang_url URL for the languages images folder.   $urls.img_prod_url URL for the products images folder.   $urls.img_manu_url URL for the manufacturers images folder.   $urls.img_sup_url URL for the suppliers images folder.   $urls.img_ship_url URL for the carriers (shipping) images folder.   $urls.img_url URL for the theme\u0026rsquo;s images folder.   $urls.css_url URL for the theme\u0026rsquo;s CSS folder.   $urls.js_url URL for the theme\u0026rsquo;s JavaScript folder.   $module_template_dir URL for the current theme\u0026rsquo;s folder.   $module_dir URL the modules folder.   mail_dir (deprecated) URL for the mail templates folder.   $urls.pic_url URL for the pictures upload folder.   $language.iso_code ISO code for the current language.   come_from (deprecated) URL for the visitor\u0026rsquo;s origin.   $shop.name Shop name.   cart_qties (deprecated) Number of products in the cart.   $cart The cart.   currencies (deprecated) The various available currencies.   id_currency_cookie (deprecated) ID of the current currency.   $currency Currency object (currently used currency).   cookie (deprecated) User cookie.   $language The various available languages.   $customer.is_logged Indicates whether the visitor is logged to a customer account.   $page.page_name Page name.   $customer.firstname Client firstname (if logged in).   $customer.lastname Client lastname (if logged in).   priceDisplay (deprecated) Price display method (with or without taxes\u0026hellip;).   roundMode (deprecated) Rounding method in use.   use_taxes (deprecated) Indicates whether taxes are enabled or not.    There are many other contextual hooks. If you need to display all of the current page\u0026rsquo;s Smarty variables, add the following call:\n{debug} If you need to display a variable, add the following call:\n{dump($variableName)} Comments are based on asterisk:\n{* This string is commented out *} {* This string is too! *} Unlike with HTML comments, commented-out Smarty code is not present in the final output file.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/doctrine/",
	"title": "Doctrine",
	"tags": [],
	"description": "",
	"content": "Doctrine  From the 1.7.6 version of PrestaShop we integrate support of Doctrine services and entities for modules. Doctrine is a powerful ORM allowing you to manage your database data via objects. It offers an abstract layer allowing you to perform insert/update actions via a simple $entity-\u0026gt;setData('update') call. But you can also create your own repositories to fetch specific data via left join, add conditions and so on\u0026hellip;\nDoctrine is the default ORM integrated with Symfony which is why we added it for modules in legacy context. If you want more details about Doctrine and its features you can check their documentation or the Symfony documentation. PrestaShop is currently using Doctrine version 2.5.\nModule integration We meant to make the Doctrine integration the simplest possible, which is why we favored the annotation mapping which allows you to specify your database structure directly in your entity classes. We also used a simple convention, you simply need to put your entities in the src/Entity folder of your module and PrestaShop will automatically scan them for all installed modules.\nTo work correctly you will need to define a namespace for your entity classes using Composer, you can find more details about namespace setup in Setup composer page.\nDefine an Entity Here is a simple example of a ProductComment entity:\n\u0026lt;?php // modules/yourmodule/src/Entity/ProductComment.php namespace YourCompany\\YourModule\\Entity; use Doctrine\\Common\\Collections\\ArrayCollection; use Doctrine\\ORM\\Mapping as ORM; /** * @ORM\\Table() * @ORM\\Entity() */ class ProductComment { /** * @var int * * @ORM\\Id * @ORM\\Column(name=\u0026#34;id_product_comment\u0026#34;, type=\u0026#34;integer\u0026#34;) * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;) */ private $id; /** * @var int * * @ORM\\Column(name=\u0026#34;id_product\u0026#34;, type=\u0026#34;integer\u0026#34;) */ private $productId; /** * @var string * * @ORM\\Column(name=\u0026#34;customer_name\u0026#34;, type=\u0026#34;string\u0026#34;, length=64) */ private $customerName; /** * @var string * * @ORM\\Column(name=\u0026#34;title\u0026#34;, type=\u0026#34;string\u0026#34;, length=64) */ private $title; /** * @var string * * @ORM\\Column(name=\u0026#34;content\u0026#34;, type=\u0026#34;text\u0026#34;) */ private $content; /** * @var int * * @ORM\\Column(name=\u0026#34;grade\u0026#34;, type=\u0026#34;integer\u0026#34;) */ private $grade; /** * @return int */ public function getId() { return $this-\u0026gt;id; } /** * @return int */ public function getProductId() { return $this-\u0026gt;productId; } /** * @param int $productId * * @return ProductComment */ public function setProductId($productId) { $this-\u0026gt;productId = $productId; return $this; } /** * @return string */ public function getCustomerName() { return $this-\u0026gt;customerName; } /** * @param string $customerName * * @return ProductComment */ public function setCustomerName($customerName) { $this-\u0026gt;customerName = $customerName; return $this; } /** * @return string */ public function getTitle() { return $this-\u0026gt;title; } /** * @param string $title * * @return ProductComment */ public function setTitle($title) { $this-\u0026gt;title = $title; return $this; } /** * @return string */ public function getContent() { return $this-\u0026gt;content; } /** * @param string $content * * @return ProductComment */ public function setContent($content) { $this-\u0026gt;content = $content; return $this; } /** * @return int */ public function getGrade() { return $this-\u0026gt;grade; } /** * @param int $grade * * @return ProductComment */ public function setGrade($grade) { $this-\u0026gt;grade = $grade; return $this; } /** * @return array */ public function toArray() { return [ \u0026#39;id_product\u0026#39; =\u0026gt; $this-\u0026gt;getProductId(), \u0026#39;id_product_comment\u0026#39; =\u0026gt; $this-\u0026gt;getId(), \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;getTitle(), \u0026#39;content\u0026#39; =\u0026gt; $this-\u0026gt;getContent(), \u0026#39;customer_name\u0026#39; =\u0026gt; $this-\u0026gt;getCustomerName(), \u0026#39;grade\u0026#39; =\u0026gt; $this-\u0026gt;getGrade(), ]; } } Creating the database Although Doctrine includes a few tools including a command to help you build your database we strongly warn about NOT using them, they automatically include lots of foreign keys which are not compatible with the PrestaShop database structure.\nSo you will need to create your database tables on your module installation the way you used to, with SQL script for example. Doctrine uses a convention to match the database tables and your entities, it converts your camel case class name into a snake case table name. And on top of that PrestaShop automatically adds the database prefix you defined. So assuming you used ps_ as a prefix the matching will be:\n   Class name Table name     ProductComment ps_product_comment   ProductCommentList ps_product_comment_list    Although you must not use doctrine tools to affect your database directly, they can be handful to help you generate you SQL files. You can use this command ./bin/console doctrine:schema:update --dump-sql which will output (but not execute) the SQL queries required to update your database.\nYou can use this as a base to create your own SQL scripts, but remember not to modify PrestaShop core database structure and to clean the foreign key statements (unless you are ABSOLUTELY sure of what you are doing).\n Using Doctrine Saving an Entity Now that your Entity is managed and your database structure is up to date you can start creating/updating data in your database. Here is an example in a legacy controller:\n\u0026lt;?php // modules/yourmodule/controllers/front/PostComment.php use YourCompany\\YourModule\\Entity\\ProductComment; use Doctrine\\ORM\\EntityManagerInterface; class YourModulePostCommentModuleFrontController extends ModuleFrontController { public function display() { $id_product = (int) Tools::getValue(\u0026#39;id_product\u0026#39;); $comment_title = Tools::getValue(\u0026#39;comment_title\u0026#39;); $comment_content = Tools::getValue(\u0026#39;comment_content\u0026#39;); $customer_name = Tools::getValue(\u0026#39;customer_name\u0026#39;); $grade = Tools::getValue(\u0026#39;grade\u0026#39;); /** @var EntityManagerInterface $entityManager */ $entityManager = $this-\u0026gt;container-\u0026gt;get(\u0026#39;doctrine.orm.entity_manager\u0026#39;); //Create product comment  $productComment = new ProductComment(); $productComment -\u0026gt;setProductId($id_product) -\u0026gt;setTitle($comment_title) -\u0026gt;setContent($comment_content) -\u0026gt;setCustomerName($customer_name) -\u0026gt;setGrade($grade) ; //This call adds the entity to the EntityManager scope (now it knows the entity exists)  $entityManager-\u0026gt;persist($productComment); //This call validates all previous modification (modified/persisted entities)  //This is when the database queries are performed  $entityManager-\u0026gt;flush(); $this-\u0026gt;ajaxRender(json_encode([ \u0026#39;success\u0026#39; =\u0026gt; true, \u0026#39;product_comment\u0026#39; =\u0026gt; $productComment-\u0026gt;toArray(), ])); } } Fetching your Entities An Entity repository is the service that will allow you to fetch your entities from the database. Doctrine already offers some generic repository, and what\u0026rsquo;s more? You don\u0026rsquo;t even need to create it yourself you simply get it via the entity manager.\n\u0026lt;?php // modules/yourmodule/controllers/front/ListComments.php use YourCompany\\YourModule\\Entity\\ProductComment; use Doctrine\\ORM\\EntityManagerInterface; class YourModuleListCommentsModuleFrontController extends ModuleFrontController { public function display() { $id_product = (int) Tools::getValue(\u0026#39;id_product\u0026#39;); /** @var EntityManagerInterface $entityManager */ $entityManager = $this-\u0026gt;container-\u0026gt;get(\u0026#39;doctrine.orm.entity_manager\u0026#39;); $productCommentRepository = $entityManager-\u0026gt;getRepository(ProductComment::class); //The repository has automatic methods available, it is able to creating query conditions  //based on the name of the function you used  /* ** The repository has automatic methods available, it is able to creating query conditions ** based on the name of the function you used. An equivalent way to make this call could be: ** ** $productComments = $productCommentRepository-\u0026gt;findBy([\u0026#39;productId\u0026#39; =\u0026gt; $id_product]); */ $productComments = $productCommentRepository-\u0026gt;findByProductId($id_product); $serializedComments = []; foreach ($productComments as $productComment) { $serializedComments[] = $productComment-\u0026gt;toArray(); } $this-\u0026gt;ajaxRender(json_encode($serializedComments)); } } If you need more information about how to use an entity repository you can read the Symfony documentation where you will also find examples for more advanced queries (with more conditions, joins, \u0026hellip;).\nExample If you want a more advanced example you can have a look at the ProductComments module, additionally to what you read here it also defines custom repositories which use the Doctrine query builder to fetch array data directly (without using Entities). As well as some examples of associations between Entities.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/modify-grid-in-module/",
	"title": "How to modify an existing Grid in a module",
	"tags": [],
	"description": "",
	"content": "  How to modify an existing Grid in a module If you need to modify an existing Grid, like inverting two columns for instance, this is really easy to do it in a module thanks to the available hooks.\nBusiness use case In this tutorial, we will try to improve the user experience of the Customers listing Grid (this page will be available in 1.7.6).\nThinking about it, we could improve the current grid to highlight business-driven information:\n we could remove the \u0026ldquo;Social title\u0026rdquo;, not really interesting if our business is not \u0026ldquo;gender\u0026rdquo; specific, we could remove the \u0026ldquo;Partner offers\u0026rdquo; column, as it doesn\u0026rsquo;t bring any useful information, and also remove the \u0026ldquo;Active\u0026rdquo; column, for the same reason;  We could also add a new column about the number of orders per customer and re-organize a little bit all the columns.\nLet\u0026rsquo;s see together how to do that with PrestaShop.\nRemoving columns and filters from a Grid Thanks to the available hooks, it\u0026rsquo;s super easy to remove columns from a grid!\nAs stated in the documentation, for each grid with the id {id} a list of hooks is available to alter the grid.\nFirst, we will use the hook able to alter the Definition of the grid: the Definition is a specific object where we define:\n the columns, the filters, the grid actions, and the grid bulk actions;  We need to register a hook into a module (let\u0026rsquo;s name it customers for the sake of the example).\nThe Customers Grid id is \u0026ldquo;customer\u0026rdquo;, you can find this information in the associated class: CustomerGridDefinitionFactory.\n\u0026lt;?php /** * Hooks allows to modify Customer grid definition. * This hook is a right place to add/remove columns or actions (bulk, grid). * * @param array $params */ public function hookActionCustomerGridDefinitionModifier(array $params) { /** @var GridDefinitionInterface $definition */ $definition = $params[\u0026#39;definition\u0026#39;]; /** @var ColumnCollection */ $columns = $definition-\u0026gt;getColumns(); } Once we have registered the hook, we can alter the columns:\n remove the existing ones, add new ones, and position them precisely;  \u0026lt;?php /** @var ColumnCollection */ $columns = $definition-\u0026gt;getColumns(); $columns-\u0026gt;remove(\u0026#39;social_title\u0026#39;) -\u0026gt;remove(\u0026#39;active\u0026#39;) -\u0026gt;remove(\u0026#39;optin\u0026#39;) ; Afer the activation of the module, the grid should looks like this:\nIt\u0026rsquo;s not really nice\u0026hellip; because we also need to delete the related search filters!\nLet\u0026rsquo;s do that:\n\u0026lt;?php /** @var FilterCollection $filters */ $filters = $definition-\u0026gt;getFilters(); $filters-\u0026gt;remove(\u0026#39;social_title\u0026#39;) -\u0026gt;remove(\u0026#39;active\u0026#39;) -\u0026gt;remove(\u0026#39;optin\u0026#39;) ; And this time, our grid is awesome!\nRe-ordering grid columns and filters When adding a new column, it\u0026rsquo;s super easy to position it in a grid.\nThe ColumnCollection class have two functions for that:\n addAfter($columnId, ColumnInterface $column) addBefore($columnId, ColumnInterface $column)  If you need to insert a new column \u0026ldquo;$newColumn\u0026rdquo; after a specific column with the id \u0026ldquo;name\u0026rdquo;, this is how you can do that:\n\u0026lt;?php $newColumn = new DataColumn(\u0026#39;example\u0026#39;) ... $columns-\u0026gt;addAfter(\u0026#39;name\u0026#39;, $newColumn); The operation is more difficult with an existing column. We need to remove and add it again to the right position:\n\u0026lt;?php $columns-\u0026gt;remove(\u0026#39;the_column_we_need_to_move\u0026#39;); $columnWeNeedToMove = new ... // we create the column $columns-\u0026gt;addBefore(\u0026#39;sales\u0026#39;, $columnWeNeedToMove); Re-ordering filters? There is a good news here: filters are linked to the columns thanks to the function setAssociatedColumn of the FilterInterface contract.\nThis means that you don\u0026rsquo;t need to re-order filters when you re-order columns: great!\nIf you don\u0026rsquo;t define a new filter when creating a new column, you won\u0026rsquo;t be able to search using this column as a filter.\nBut\u0026hellip; what if you want to make this column searchable as most of the existing ones?\nAlso, you may wondering at this moment how PrestaShop is able to fill the column data?\nFill the column data and configure the filter Each grid is defined by a Definition and a Grid Query Builder.\nThe Grid Query Builder have the responsibility of providing two query builders: the Search query builder and the Count query builder.\nWith these query builders, the Grid Query Builder is able to retrieve and filter data from the database to fill the columns of the Grid using the filters criterion.\nThanks to the Count query builder, the pagination system works out of the box so you don\u0026rsquo;t need to implement your own.\nUsing a hook, we can alter both of them to - for example - retrieve new information and fill a new column.\nQueryBuilder configuration We want to retrieve the number of orders for each customer.\nTo alter the QueryBuilder, we have a hook named action{GridId}GridQueryBuilderModifier. This is how you can fill the column data to retrieve the number of orders from a customers:\n\u0026lt;?php public function hookActionCustomerGridQueryBuilderModifier(array $params) { $searchQueryBuilder = $params[\u0026#39;search_query_builder\u0026#39;]; $searchQueryBuilder-\u0026gt;addSelect(\u0026#39;COUNT(o.id_order) as nb_orders\u0026#39;) -\u0026gt;from(_DB_PREFIX_.\u0026#39;orders o\u0026#39;) ; $countQueryBuilder = $params[\u0026#39;count_query_builder\u0026#39;]; // So the pagination and the number of customers  // retrieved will be right.  $countQueryBuilder-\u0026gt;addSelect(\u0026#39;COUNT(o.id_order) as nb_orders\u0026#39;) -\u0026gt;from(_DB_PREFIX_.\u0026#39;orders o\u0026#39;) ; }  The result column name (here nb_orders) must be the same of the field option of the related column: this is how the mapping of data works. Once the new hook is registered and the module activated, you should see the \u0026ldquo;Customers\u0026rdquo; grid customized according to the use cases we have listed in the introduction: great!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Fundamentals of PrestaShop Development PrestaShop was conceived so that third-party modules could easily build upon its foundations, making it an extremely customizable e-commerce software.\nPrestaShop’s customization is based on three possibilities:\n Themes, Modules, Overriding.  Themes are explored in full in the Designer Guide.\nModules and the override system are explored in this Developer Guide, starting with the “Concepts” section below. You can learn more about each in the following chapters:\nBy default, PrestaShop is provided with more than 100 modules, enabling you to launch your online business quickly and for free.\nMore than 3000 modules are also available on the Addons marketplace. These additional modules were built by the PrestaShop company or members of the PrestaShop community, and are sold at affordable prices. As a developer, you can also share your modules on this site, and receive 70% of the amounts associated with the sale of your creations. Sign up now!\n Concepts You should be familiar with PHP and Object-Oriented Programming before attempting to write your own module.\nYou can learn PHP here:\n Getting started on PHP documentation Learning PHP on CodeCademy  You can learn Object-Oriented programming here:\n Object-oriented programming on Wikipedia Object oriented php for beginners  A module is an extension to PrestaShop that enables any developer to add the following:\n Provide additional functionality to PrestaShop. View additional items on the site (product selection, etc.). Communicate with other e-commerce services (buying guides, payment platforms, logistics, etc.).  Overriding is a system in itself. PrestaShop uses completely object-oriented code. One of the advantages of this is that, with the right code architecture, you can easily replace or extend parts of the core code with your own custom code, without having to touch the core code. Your code thus overrides the core code, making PrestaShop behave as you prefer it to. It is not recommended to use an override in a module that you intend to distribute (for instance through the PrestaShop Addons marketplace), and they are forbidden in partner modules. Keep them for your own shop.\nPrestaShop’s technical architecture MVC as the root Until PrestaShop 1.6, PrestaShop was based on a 3-tier architecture:\n Object/data. Database access is controlled through files in the “classes” folder. Data control. User-provided content is controlled by files in the root folder. Design. All of the theme’s files are in the “themes” folder.  This is the same principle as the Model\u0026gt;View\u0026gt;Controller (MVC) architecture, only in a simpler and more accessible way.\nA 3-tier architecture has many advantages:\n It’s easier to read the software’s code. Developers can add and edit code faster. Graphic designer and HTML integrators can work with the confines of the /themes folder without having to understand or even read a single line of PHP code. Developers can work on additional data and modules that the HTML integrators can make use of.  Model A model represents the application’s behavior: data processing, database interaction, etc.\nIt describes or contains the data that have been processed by the application. It manages this data and guarantees its integrity.\nView A view is the interface with which the user interacts.\nIts first role is to display the data that has been provided by the model. Its second role is to handle all the actions from the user (mouse click, element selection, buttons, etc.), and send these events to the controller.\nThe view does not do any processing; it only displays the result of the processing performed by the model, and interacts with the user.\nController The Controller manages synchronization events between the Model and the View, and updates both as needed. It receives all the user events and triggers the actions to perform.\nIf an action needs data to be changed, the Controller will “ask” the Model to change the data, and in turn the Model will notify the View that the data has been changed, so that the View can update itself.\nMoving forward with Symfony While all versions of PrestaShop up to 1.6 took pride in only using a custom architecture, it was decided to incorporate the Symfony PHP framework starting with PrestaShop 1.7.\nThe driving idea is that we want our code to be more robust, more modular, and fully testable. The 1.6 architecture, inherited from version 1.5 and years of PrestaShop development, is not getting any younger, and its age is really starting to show.\nUsing a proven and popular open-source framework will allow us to focus on our core business code (managing a cart, handling orders, calculating prices and taxes, generating invoices, etc.) with greater efficiency, while enjoying the stability of a globally recognized framework.\nIn the documentation, we will refer to the 1.6 framework as the \u0026ldquo;legacy\u0026rdquo; framework, as this is a popular designation used in the software world.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/advanced-use/manage-multishop/",
	"title": "Manage Multishop",
	"tags": [],
	"description": "",
	"content": "Manage Multishop In order to use web services when the multishop feature is enabled, you can use the regular API requests and add the id_shop parameter (or the id_group_shop parameter for overriding by group).\nEnable Multishop The Multishop can be enabled via the PS_MULTISHOP_FEATURE_ACTIVE configuration value, here is a tutorial to manage configuration via API.\nList shops Once you have several instances you can access to the shop list and their IDs.\n   Result API call PHP Webservice lib options     List shops /api/shops/ $opt = [\n'resource' = 'shops'\n];     Define shop specific override To deal with shop specific values you can use the regular APIs and specify the shop or shop_group you are targeting. They can be used for read and/or write operations.\n   Key Value     id_shop Shop id   id_group_shop Shop group id    Create shop You can refer to the tutorial explaining how to create a resource or update a resource to add/update a shop. It also will need a shop_url otherwise using its id_shop will result in a redirection by the API.\n\u0026lt;?php require_once(\u0026#39;./vendor/autoload.php\u0026#39;); $webServiceUrl = \u0026#39;http://example.com/\u0026#39;; $webServiceKey = \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;; $webService = new PrestaShopWebservice($webServiceUrl, $webServiceKey, false); // Check shop presence $shopName = \u0026#39;Additional shop\u0026#39;; $searchedShop = $webService-\u0026gt;get([\u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;shops\u0026#39;, \u0026#39;filter[name]\u0026#39; =\u0026gt; $shopName]); $shopId = null; if ($searchedShop-\u0026gt;shops-\u0026gt;shop-\u0026gt;count() \u0026gt; 0) { $shopId = (int) $searchedShop-\u0026gt;shops-\u0026gt;shop[0]-\u0026gt;attributes()[\u0026#39;id\u0026#39;]; echo \u0026#39;Shop already exists\u0026#39; . PHP_EOL; die(1); } // Create shop $blankXml = $webService-\u0026gt;get([\u0026#39;url\u0026#39; =\u0026gt; $webServiceUrl . \u0026#39;api/shops?schema=blank\u0026#39;]); $shopXml = $blankXml-\u0026gt;shop[0]; $shopXml-\u0026gt;name = \u0026#39;Additional shop\u0026#39;; $shopXml-\u0026gt;id_shop_group = 1; // Default shop group $shopXml-\u0026gt;id_category = 2; // Default category Root $shopXml-\u0026gt;theme_name = \u0026#39;classic\u0026#39;; $shopXml-\u0026gt;active = 1; $createdShop = $webService-\u0026gt;add([\u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;shops\u0026#39;, \u0026#39;postXml\u0026#39; =\u0026gt; $blankXml-\u0026gt;asXML()]); $shopId = (int) $createdShop-\u0026gt;shop-\u0026gt;id; echo \u0026#39;Successfully created shop \u0026#39; . $shopId . PHP_EOL; // Create shop url $blankXml = $webService-\u0026gt;get([\u0026#39;url\u0026#39; =\u0026gt; $webServiceUrl . \u0026#39;api/shop_urls?schema=blank\u0026#39;]); $shopUrlXml = $blankXml-\u0026gt;shop_url[0]; $shopUrlXml-\u0026gt;id_shop = $shopId; $shopUrlXml-\u0026gt;active = 1; $shopUrlXml-\u0026gt;main = 1; $shopUrlXml-\u0026gt;domain = \u0026#39;example.com\u0026#39;; $shopUrlXml-\u0026gt;domain_ssl = \u0026#39;example.com\u0026#39;; $shopUrlXml-\u0026gt;physical_uri = \u0026#39;/\u0026#39;; $shopUrlXml-\u0026gt;virtual_uri = \u0026#39;/additional\u0026#39;; $createdShopUrl = $webService-\u0026gt;add([\u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;shop_urls\u0026#39;, \u0026#39;postXml\u0026#39; =\u0026gt; $blankXml-\u0026gt;asXML()]); $shopUrlId = (int) $createdShopUrl-\u0026gt;shop_url-\u0026gt;id; echo \u0026#39;Successfully created shop url \u0026#39; . $shopUrlId . PHP_EOL; Update your webservice key permissions At this point if you still use the same webservice key it will probably not have the permission to edit this new shop, you can edit your webservice key in the BackOffice and associate it with your new shop.\nAssociate content to shop A new shop has no content associated at first, so you have to assign each content you want in your shop one by one. There is no association API, however we can use the update API by sending the same content and specifying the id_shop parameter, this will update the association without changing the resource content.\n\u0026lt;?php require_once(\u0026#39;./vendor/autoload.php\u0026#39;); $webServiceUrl = \u0026#39;http://example.com/\u0026#39;; $webServiceKey = \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;; $webService = new PrestaShopWebservice($webServiceUrl, $webServiceKey, false); $shopName = \u0026#39;Additional shop\u0026#39;; $searchedShop = $webService-\u0026gt;get([\u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;shops\u0026#39;, \u0026#39;filter[name]\u0026#39; =\u0026gt; $shopName]); $shopId = null; if ($searchedShop-\u0026gt;shops-\u0026gt;shop-\u0026gt;count() \u0026gt; 0) { $shopId = (int) $searchedShop-\u0026gt;shops-\u0026gt;shop[0]-\u0026gt;attributes()[\u0026#39;id\u0026#39;]; } else { echo \u0026#39;No shop found: \u0026#39; . $shopName . PHP_EOL; exit(1); } $copiedResources = [ \u0026#39;content_management_system\u0026#39;, \u0026#39;contacts\u0026#39;, ]; foreach ($copiedResources as $resourceName) { echo \u0026#39;Start cloning \u0026#39; . $resourceName . PHP_EOL; // List all resources  $listXml = $webService-\u0026gt;get([\u0026#39;resource\u0026#39; =\u0026gt; $resourceName]); $resourceNodes = $listXml-\u0026gt;$resourceName-\u0026gt;children(); foreach ($resourceNodes as $listNode) { // Get single resource  $resourceId = (int) $listNode-\u0026gt;attributes()[\u0026#39;id\u0026#39;]; $resourceXml = $webService-\u0026gt;get([\u0026#39;resource\u0026#39; =\u0026gt; $resourceName, \u0026#39;id\u0026#39; =\u0026gt; $resourceId]); try { // Update resource with same content but shop ID defined, this will update the association without changing the resource content  $updatedResource = $webService-\u0026gt;edit([\u0026#39;resource\u0026#39; =\u0026gt; $resourceName, \u0026#39;id\u0026#39; =\u0026gt; $resourceId, \u0026#39;putXml\u0026#39; =\u0026gt; $resourceXml-\u0026gt;asXML(), \u0026#39;id_shop\u0026#39; =\u0026gt; $shopId]); echo sprintf(\u0026#39;Successfully copied resource %s[%s] to shop %s\u0026#39;, $resourceName, $resourceId, $shopId) . PHP_EOL; } catch (PrestaShopWebserviceException $e) { echo sprintf(\u0026#39;Error cloning %s[%s] to shop %s: \u0026#39;, $resourceName, $resourceId, $shopId) . $e-\u0026gt;getMessage() . PHP_EOL; } } }  This example voluntarily deals with a simple resource that doesn\u0026rsquo;t have complicated relationships or special webservice fields, this way we can use the API result as an XML input directly. Some more complex resources (categories, products, \u0026hellip;) are not as straightforward, and you\u0026rsquo;ll need to use a less generic code to clean the extra fields or copy them into a blank schema. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/",
	"title": "Themes",
	"tags": [],
	"description": "",
	"content": "Chapter 5 Themes The default PrestaShop install offers the neutral \u0026ldquo;Classic theme\u0026rdquo;, enabling sellers to quickly and freely start their activity, whatever their business line.\nMore than 3000 themes are available at the PrestaShop Addons marketplace. They were created either by members of the PrestaShop community or the PrestaTeam, and are sold at reasonable prices – some are even free.\nAs a graphic designer/web developer, you too can put your themes up for sale on the PrestaShop Addons marketplace, and earn up to 70% of the selling price.\n Getting started with theme development   Theme development reference   Distribution   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/prestashop-webservice-lib/update-resource/",
	"title": "Update a resource",
	"tags": [],
	"description": "",
	"content": "Update a resource Update workflow The update workflow is quite similar to the creation workflow, the main difference is that the initial input is not a blank XML but an existing one, so we use the get() method to get a prefilled XML, and then we can update its fields.\n  Update Resource via Webservice   You can update this schema using the source XML file importable in services like draw.io. Retrieve the resource \u0026lt;?php try { // creating webservice access  $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); // call to retrieve customer with ID 2  $xml = $webService-\u0026gt;get([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; 2, // Here we use hard coded value but of course you could get this ID from a request parameter or anywhere else  ]); } catch (PrestaShopWebserviceException $ex) { // Shows a message related to the error  echo \u0026#39;Other error: \u0026lt;br /\u0026gt;\u0026#39; . $ex-\u0026gt;getMessage(); } Fill the schema and update resource Quite similar to the resource creation, except we can update only some fields (since the others are already present) and we use the edit() method.\n   Key Value     resource customers   id resource_id (int)   putXml XML content (string)    \u0026lt;?php $customerFields = $xml-\u0026gt;customer-\u0026gt;children(); $customerFields-\u0026gt;firstname = \u0026#39;John\u0026#39;; $customerFields-\u0026gt;lastname = \u0026#39;DOE\u0026#39;; $updatedXml = $webService-\u0026gt;edit([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; (int) $customerFields-\u0026gt;id, \u0026#39;putXml\u0026#39; =\u0026gt; $xml-\u0026gt;asXML(), ]); $customerFields = $updatedXml-\u0026gt;customer-\u0026gt;children(); echo \u0026#39;Customer updated with ID \u0026#39; . $customerFields-\u0026gt;id . PHP_EOL;  This example voluntarily deals with a simple resource that doesn\u0026rsquo;t have complicated relationships or special webservice fields, this way we can use the API result as an XML input directly. Some more complex resources (categories, products, \u0026hellip;) are not as straightforward, and you\u0026rsquo;ll need to use a less generic code to clean the extra fields or copy them into a blank schema. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/prestashop-webservice-lib/delete-resource/",
	"title": "Delete a resource",
	"tags": [],
	"description": "",
	"content": "Delete a resource To delete a resource you only need its ID, then you can use the delete() method.\n   Key Value     resource customers   id resource_id (int)    Using PrestaShopWebservice::delete \u0026lt;?php try { $webService = new PrestaShopWebservice(\u0026#39;http://example.com/\u0026#39;, \u0026#39;ZR92FNY5UFRERNI3O9Z5QDHWKTP3YIIT\u0026#39;, false); $id = 2; $webService-\u0026gt;delete([ \u0026#39;resource\u0026#39; =\u0026gt; \u0026#39;customers\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; $id, // Here we use hard coded value but of course you could get this ID from a request parameter or anywhere else  ]); echo \u0026#39;Customer with ID \u0026#39; . $id . \u0026#39; was successfully deleted\u0026#39; . PHP_EOL; } catch (PrestaShopWebserviceException $e) { echo \u0026#39;Error:\u0026#39; . $e-\u0026gt;getMessage(); } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/enabling-auto-update/",
	"title": "Enabling the Auto-Update",
	"tags": [],
	"description": "",
	"content": "Enabling the Auto-Update Since PrestaShop 1.5, it is possible to have your module auto-update: once a new version is available, PrestaShop suggests an \u0026ldquo;Update\u0026rdquo; button to the user. Clicking this button will trigger a series of methods, each leading closer to the latest version of your module.\nIn order to bring auto-update support to your module, you need three main things:\n Clearly indicate the module\u0026rsquo;s version number in its constructor method: $this-\u0026gt;version = '1.1'; Create an /upgrade sub-folder in the module\u0026rsquo;s folder. Add an auto-update PHP script for each new version.  Each script should contain a main method named upgrade_module_x_y_z, where x_y_z corresponds to the version the module is being upgraded to. It receives a single parameter, an instance of your Module.\nScript name Your script must be named upgrade, followed by a dash (-) and the version number, like upgrade-x.y.z.php.\nFor example:\n upgrade-1.2.3.php   For example:\n\u0026lt;?php /** * File: /upgrade/upgrade-1.1.php */ function upgrade_module_1_1($module) { // Process Module upgrade to 1.1  // ....  return true; // Return true if success. } \u0026hellip;and then:\n\u0026lt;?php /** * File: /upgrade/upgrade-1.2.php */ function upgrade_module_1_2($module) { // Process Module upgrade to 1.2  // ....  return true; // Return true if succes.  } Each method should bring the necessary changes to the module\u0026rsquo;s files and database data in order to reach the latest version.\nWhen upgrading a module, PrestaShop will crawl the module\u0026rsquo;s upgrade folder, and execute each upgrade script sequentially, starting from the first one whose version number is greater than the currently installed one. It is therefore highly advised to number your module\u0026rsquo;s versions sequentially, following the Semantic Versioning Specification.\nExample using the scripts above:\n   When upgrading from\u0026hellip; Target version Executed scripts     1.0.0 1.1.0 - upgrade-1.1.php   1.0.0 1.2.0 - upgrade-1.1.php\n- upgrade-1.2.php   1.1.0 1.2.0 - upgrade-1.2.php    Script examples Here is the /upgrade/upgrade-1.4.9.php file from the gamification module:\n\u0026lt;?php if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } function upgrade_module_1_4_9($object) { return Db::getInstance()-\u0026gt;execute( \u0026#39;CREATE TABLE IF NOT EXISTS `\u0026#39;._DB_PREFIX_.\u0026#39;tab_advice` ( `id_tab` int(11) NOT NULL, `id_advice` int(11) NOT NULL, PRIMARY KEY (`id_tab`, `id_advice`) ) ENGINE=\u0026#39;._MYSQL_ENGINE_.\u0026#39; DEFAULT CHARSET=utf8;\u0026#39; ); } The homeslider module\u0026rsquo;s install-1.2.1.php file does even more:\n\u0026lt;?php if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } function upgrade_module_1_2_1($object) { return Db::getInstance()-\u0026gt;execute( \u0026#39;UPDATE \u0026#39;._DB_PREFIX_.\u0026#39;homeslider_slides_lang SET \u0026#39;.homeslider_stripslashes_field(\u0026#39;title\u0026#39;).\u0026#39;, \u0026#39;.homeslider_stripslashes_field(\u0026#39;description\u0026#39;).\u0026#39;, \u0026#39;.homeslider_stripslashes_field(\u0026#39;legend\u0026#39;).\u0026#39;, \u0026#39;.homeslider_stripslashes_field(\u0026#39;url\u0026#39;) ); } function homeslider_stripslashes_field($field) { $quotes = array(\u0026#39;\u0026#34;\\\\\\\u0026#39;\u0026#34;\u0026#39;, \u0026#39;\u0026#34;\\\u0026#39;\u0026#34;\u0026#39;); $dquotes = array(\u0026#39;\\\u0026#39;\\\\\\\\\u0026#34;\\\u0026#39;\u0026#39;, \u0026#39;\\\u0026#39;\u0026#34;\\\u0026#39;\u0026#39;); $backslashes = array(\u0026#39;\u0026#34;\\\\\\\\\\\\\\\\\u0026#34;\u0026#39;, \u0026#39;\u0026#34;\\\\\\\\\u0026#34;\u0026#39;); return \u0026#39;`\u0026#39;.bqSQL($field).\u0026#39;` = replace(replace(replace(`\u0026#39;.bqSQL($field).\u0026#39;`, \u0026#39;.$quotes[0].\u0026#39;, \u0026#39;.$quotes[1].\u0026#39;), \u0026#39;.$dquotes[0].\u0026#39;, \u0026#39;.$dquotes[1].\u0026#39;), \u0026#39;.$backslashes[0].\u0026#39;, \u0026#39;.$backslashes[1].\u0026#39;)\u0026#39;; } Adding/updating modules or hooks between versions If the new version of your module adds or update its hooks, you should make sure to update them too.\nIndeed, since the hooks are (usually) defined when the module is installed, PrestaShop will not install the module again in order to include the new hooks' code, so you have to use the upgrade methods:\nFor instance, here\u0026rsquo;s the install-1.2.php file from the blockbestseller module:\n\u0026lt;?php if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } function upgrade_module_1_2($object) { return ($object-\u0026gt;registerHook(\u0026#39;addproduct\u0026#39;) \u0026amp;\u0026amp; $object-\u0026gt;registerHook(\u0026#39;updateproduct\u0026#39;) \u0026amp;\u0026amp; $object-\u0026gt;registerHook(\u0026#39;deleteproduct\u0026#39;) \u0026amp;\u0026amp; $object-\u0026gt;registerHook(\u0026#39;actionOrderStatusPostUpdate\u0026#39;)); } How to test-run an upgrade Here\u0026rsquo;s how to test that your upgrade scripts work correctly.\nLet\u0026rsquo;s assume that you are working on a module that you already have it installed in your development shop, and you\u0026rsquo;re on version 1.0.0. On the upcoming version 1.1.0 that you are currently developing, you need to update your database schema.\nSince the version that you are planning to update to is 1.1.0, the first thing would be to create an upgrade script for that version:\n\u0026lt;?php // File: /upgrade/upgrade-1.1.0.php  if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } function upgrade_module_1_1_0($module) { // do your thing here  return true; } Now, update your module version to 1.1.0:\n\u0026lt;?php class my_module extends Module { public function __construct() { $this-\u0026gt;name = \u0026#39;my_module\u0026#39;; $this-\u0026gt;version = \u0026#39;1.1.0\u0026#39;; // \u0026lt;--- previously 1.0.0  } } Then, in your PrestaShop backoffice, go to Modules \u0026gt; Module Manager and find your module. Since you have updated its version, PrestaShop will notice that there\u0026rsquo;s an update available for it and prompt you to upgrade it. Press the \u0026ldquo;Upgrade\u0026rdquo; button, and PrestaShop will invoke your upgrade script.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/customize-templates/",
	"title": "How to customize the Grid templates",
	"tags": [],
	"description": "",
	"content": "How to customize the Grid templates The Grid component is highly extensible from a structural and data point of view, but sometimes you need to customize how a grid, a row or a specific column is rendered.\nFor instance, let\u0026rsquo;s take a look at the Logs page of the PrestaShop Back Office. You can see that the \u0026ldquo;Employee\u0026rdquo; column have a specific rendering:\n  Logs grid of PrestaShop with specific employee Column   In this tutorial, we will learn how to customize the rendering of every part of a Grid:\n Templating architecture in Twig Column \u0026amp; Column headers customization Row customization  Templating architecture in Twig The templating of the component Grid is using Twig in PrestaShop 1.7. As the component enforces a strict separation between the data and the rendering you never define template names or UI elements when defining a new Grid.\nWe have created a Twig layer that is able to render Grid using the information from Grid that is formatted in Grid presenter.\nThis means that, by implementing your own presenter, you can control the data sent to the user. How it works under the hood? Each element of the Grid have its own Twig template:\nGrid ├── Actions │ ├── Bulk │ ├── Grid │ └── Row ├── Blocks │ ├── bulk_actions.html.twig │ ├── bulk_actions_select_all.html.twig │ ├── EmptyState │ ├── grid_actions.html.twig │ ├── pagination.html.twig │ ├── Table │ └── table.html.twig ├── Columns │ ├── Content │ └── Header ├── grid.html.twig └── grid_panel.html.twig Let\u0026rsquo;s detail every part of this architecture:\nGrid Actions templating Grid actions templates are responsible of the rendering of all the Grid actions:\n The Bulk actions; The Grid actions; The Row actions;  Structure of grid blocks in PrestaShop 1.7.6 version:\nActions ├── Bulk │ ├── delete_categories.html.twig │ ├── delete_customers.html.twig │ └── submit.html.twig ├── Grid │ ├── link.html.twig │ ├── simple.html.twig │ └── submit.html.twig └── Row ├── delete_category.html.twig ├── delete_customer.html.twig ├── link.html.twig └── submit.html.twig As you can see, every action defined at any Grid Level (Bulk, Grid or Row) will be rendered using its own template.\nLike we are already able to do with the main Back Office templates, in modules you can define and override existing templates and adapt them to your needs.\nyour-module/ ├── ... ├── your-module.php └── views/PrestaShop/Admin/Common/Grid/Blocks/Table/filters_row.html.twig # Override of the filters row template The Grid Blocks In this folder, you will retrieve most of the reusable blocks of the Grid component.\nStructure of grid actions in PrestaShop 1.7.6 version:\nBlocks ├── bulk_actions.html.twig ├── bulk_actions_select_all.html.twig ├── EmptyState │ ├── _default.html.twig │ └── supplier.html.twig ├── grid_actions.html.twig ├── pagination.html.twig ├── Table │ ├── empty_row.html.twig │ ├── filters_row.html.twig │ └── headers_row.html.twig └── table.html.twig The templates have meaningful names so you will spot the reponsibility of most of them:\n The bulk actions templates are responsible of the rendering of the parent container of the bulk action templates; The grid actions templates are responsible of the rendering of the parent container of the grid action templates; All table related templates are responsible of the rendering of the Table structure of the Grid (we could name it \u0026ldquo;Grid\u0026rdquo; too as you\u0026rsquo;re not forced to use an HTML table to render a Grid!); The empty state templates define the rendering of the Grid in case you have no data to render; Finally, the pagination template is responsible of\u0026hellip; guess what? the rendering of the pagination system! Obvious 😎.  Customize these templates when you want to alter the rendering of the structure of your Grids. The Columns Contents and Headers Most of the time, you want to customize the rendering of the columns. While we can re-order add or delete columns using hooks, the Twig layer allows you to alter the rendering of a column at Shop, Grid or even Column level.\nIt\u0026rsquo;s not a surprise that you will retrieve a template named after the available Column Types provided by the Core of PrestaShop! The Twig layer relies on the information sent by the Grid presenter to select the right Twig template to be rendered and to push the right information.\nThis is the content of this folder:\nColumns ├── Content │ ├── action.html.twig │ ├── badge.html.twig │ ├── bulk_action.html.twig │ ├── category_position.html.twig │ ├── data.html.twig │ ├── date_time.html.twig │ ├── employee_name_with_avatar.html.twig │ ├── image.html.twig │ ├── link.html.twig │ ├── position_handle.html.twig │ ├── position.html.twig │ ├── severity_level.html.twig │ └── toggle.html.twig └── Header └── Content ├── action.html.twig ├── default.html.twig └── position_handle.html.twig The templates of this folder are splitted into two subfolders:\n Content: contains the template for each type of Column; Header/Content: contains the template for each type of Column Header (in the current context, the column table header);  For each template, you can customize the rendering at different levels. There is a simple rule to guess which template will be rendered: {grid_id}_{column_id}_type_id where grid_id and column_id are not required.\n If you define the template {...}/Columns/Content/data.html.twig in your module, this template will be overriden for the Back Office; If you define the template {...}/Columns/Content/my_grid_data.html.twig in your module, this template will be overriden for the Grid defined with the id my_grid;  And what will happens if you define the following template? my-module/views/PrestaShop/Admin/Common/Grid/Columns/Content/my_grid_name_action.html.twig\nYou\u0026rsquo;re right, the template will be overriden only for the column type \u0026ldquo;action\u0026rdquo; with the id \u0026ldquo;name\u0026rdquo;. So extensible and powerful!\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/advanced-use/multilang-fields/",
	"title": "Multilingual Fields",
	"tags": [],
	"description": "",
	"content": "Multilingual / localized Fields Some entities have multilingual / localized fields, by default the API calls return the value for all languages installed in the Shop, but you might want to fine tune the expected result using the language parameter.\nLanguage parameter You can specify which fields you want for each resource using the display parameter.\n   Key Value Result     language 3 Single value    [3|5|...]  OR operator: list of possible values    [2,5] Interval operator: define interval of possible values       Result API call     Return product with ID 19 with translated fields for Language with id 3 /api/products/19?language=3    Return product with ID 19 with translated fields for Language with id 1 or 5 /api/products/19?language=[1|5]    Return product with ID 19 with translated fields for Language with id from 2 to 5 /api/products/19?language=[2,5]     This parameter is not managed by the PHP Webservice lib. XML output When using output_format=XML (or default output)\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[19]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_manufacturer xlink:href=\u0026#34;http://local.prestashop-develop/api/manufacturers/1\u0026#34;\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_category_default xlink:href=\u0026#34;http://local.prestashop-develop/api/categories/8\u0026#34;\u0026gt;\u0026lt;![CDATA[8]]\u0026gt;\u0026lt;/id_category_default\u0026gt; ... \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34; xlink:href=\u0026#34;http://local.prestashop-develop/api/languages/1\u0026#34;\u0026gt;\u0026lt;![CDATA[Customizable mug]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34; xlink:href=\u0026#34;http://local.prestashop-develop/api/languages/2\u0026#34;\u0026gt;\u0026lt;![CDATA[Mug personnalisable]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34; xlink:href=\u0026#34;http://local.prestashop-develop/api/languages/1\u0026#34;\u0026gt;\u0026lt;![CDATA[\u0026lt;p\u0026gt;\u0026lt;span style=\u0026#34;font-size:10pt;font-style:normal;\u0026#34;\u0026gt;\u0026lt;span style=\u0026#34;font-size:10pt;font-style:normal;\u0026#34;\u0026gt;Customize your mug with the text of your choice. A mood, a message, a quote... It\u0026#39;s up to you! Maximum number of characters:\u0026lt;/span\u0026gt;\u0026lt;span style=\u0026#34;font-size:10pt;font-style:normal;\u0026#34;\u0026gt; ---\u0026lt;/span\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34; xlink:href=\u0026#34;http://local.prestashop-develop/api/languages/2\u0026#34;\u0026gt;\u0026lt;![CDATA[\u0026lt;p\u0026gt;\u0026lt;span style=\u0026#34;font-size:10pt;font-style:normal;\u0026#34;\u0026gt;Personnalisez votre mug avec le texte de votre choix. Une humeur, un message, une citation... À vous de choisir ! Nombre maximum de caractères : --- Diamètre : 8,2cm / Hauteur : 9,5cm / Poids : 0.43kg. Passe au lave-vaisselle.\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/description\u0026gt; ... \u0026lt;/product\u0026gt; \u0026lt;/prestashop\u0026gt; JSON output When using output_format=JSON (or default output)\n{ \u0026#34;product\u0026#34;: { \u0026#34;id\u0026#34;: 19, \u0026#34;id_manufacturer\u0026#34;: \u0026#34;1\u0026#34;, ... \u0026#34;name\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Customizable mug\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;Mug personnalisable\u0026#34; } ], \u0026#34;description\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;1\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026lt;p\u0026gt;\u0026lt;span style=\\\u0026#34;font-size:10pt;font-style:normal;\\\u0026#34;\u0026gt;\u0026lt;span style=\\\u0026#34;font-size:10pt;font-style:normal;\\\u0026#34;\u0026gt;Customize your mug with the text of your choice. A mood, a message, a quote... It\u0026#39;s up to you! Maximum number of characters:\u0026lt;/span\u0026gt;\u0026lt;span style=\\\u0026#34;font-size:10pt;font-style:normal;\\\u0026#34;\u0026gt; ---\u0026lt;/span\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\u0026#34; }, { \u0026#34;id\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026lt;p\u0026gt;\u0026lt;span style=\\\u0026#34;font-size:10pt;font-style:normal;\\\u0026#34;\u0026gt;Personnalisez votre mug avec le texte de votre choix. Une humeur, un message, une citation... À vous de choisir ! Nombre maximum de caractères : --- Diamètre : 8,2cm / Hauteur : 9,5cm / Poids : 0.43kg. Passe au lave-vaisselle.\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\u0026#34; } ], ... } } Special case for single language When you only have one language in your shop (or if you specified only one via the language parameter), the format of localized fields is different, and a single value is returned:\n{ \u0026#34;product\u0026#34;: { \u0026#34;id\u0026#34;: 19, \u0026#34;id_manufacturer\u0026#34;: \u0026#34;1\u0026#34;, ... \u0026#34;name\u0026#34;: \u0026#34;Customizable mug\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026lt;p\u0026gt;\u0026lt;span style=\\\u0026#34;font-size:10pt;font-style:normal;\\\u0026#34;\u0026gt;\u0026lt;span style=\\\u0026#34;font-size:10pt;font-style:normal;\\\u0026#34;\u0026gt;Customize your mug with the text of your choice. A mood, a message, a quote... It\u0026#39;s up to you! Maximum number of characters:\u0026lt;/span\u0026gt;\u0026lt;span style=\\\u0026#34;font-size:10pt;font-style:normal;\\\u0026#34;\u0026gt; ---\u0026lt;/span\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;, ... } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/overrides/",
	"title": "Overrides",
	"tags": [],
	"description": "",
	"content": "Overrides Overriding is a way to \u0026ldquo;override\u0026rdquo; class files and controller files. PrestaShop\u0026rsquo;s ingenious class auto-loading function makes the \u0026ldquo;switch\u0026rdquo; to other files fairly simple. Thanks to PrestaShop\u0026rsquo;s fully object-oriented code, you can rely on object inheritance to modify and add new behaviors, using the properties and methods of the various existing classes.\nImportant note There are limitations and risks of using overrides. Keep them for your own shop. Overrides in PrestaShop are exclusive. This means that if your module overrides one of PrestaShop’s behaviors, another module will not be able to use that behavior properly, or override it in an predictable way.\nTherefore, overrides should only be used for your own local modules, when you have a specific need that cannot be applied with it.\nIt is not recommended to use an override in a module that you intend to distribute (for instance through the PrestaShop Addons marketplace), and they are forbidden in partner modules.\nAlternatives to overrides Before creating an override, check the existing features can help you:\nHooks There are many events triggered on each controller of PrestaShop. They can be used for displaying additional content or executing module actions.\nSee the hooks chapter for more details.\nClasses If a class does not make what a module expects, you can extend it in a module for improvement.\nFor instance you could have a single Tools class for core and module helper methods:\n\u0026lt;?php class MyCustomTools extends Tools { /** * Adding a new method for the example */ public static function array_pluck(array $data, \u0026#39;property\u0026#39;) { // [...]  } } Once included in another file, all these following method would be callable:\n\u0026lt;?php MyCustomTools::array_pluck($data, \u0026#39;id\u0026#39;); MyCustomTools::getValue(\u0026#39;userId\u0026#39;); // Defined in Tools MyCustomTools::getShopDomain(); // Defined in Tools Controllers Core controllers can be reused in a module as well, without being erased, thanks to inheritance.\nThis allows a controller to be maintained easily, with its own identity but with the parent features.\nSee the controllers chapter for more details.\nService overrides PrestaShop is migrating to Symfony, and the parts migrated rely on Symfony container which enables service overrides and decorations. This is similar to overrides but avoids class erasing.\nSee the Symfony services chapter for more details.\nContributing Sometimes, the existing features may not be enough for your needs. An event can be missing, or a controller method should be probably better in a dedicated class to be accessible.\nIf you think some changes in the core would be useful for the community, we encourage you to suggest them on the PrestaShop source code with a pull request.\nBy doing so, you may cover long-term needs the core developers probably don\u0026rsquo;t know about.\nClass \u0026amp; controller override If you don\u0026rsquo;t have any other choice, classes and controllers are usually built following a certain norm.\nHere is the core Product class and controller:\n /classes/Product.php. The class is called ProductCore. /controllers/front/ProductController.php. The controller class is called ProductControllerCore.  You will need to create a PHP file and place it either of the override folders of a module. Indeed, since PrestaShop 1.5, these files can be stored within a module and their management will follow it.\nOverriding a class does not mean to copy paste the whole file content. As long as you extend the core equivalent class, you are free to override only one method or as many as you need.\nOverriding a class In order to override the Product class, your file needs to be called Product.php and must feature a Product class that then extends ProductCore class.\nThe file should be placed in this module location:\n/modules/\u0026lt;module_name\u0026gt;/override/classes/Product.php.\nIt will be copied in /override/classes/Product.php during the module installation, and removed automatically on uninstall.\nOverriding a controller In order to override the ProductController class, your file needs to be called ProductController.php and must feature a ProductController class that then extends ProductControllerCore class.\nThe file should be placed in this module location:\n/modules/\u0026lt;module_name\u0026gt;/override/controllers/front/ProductController.php.\nIt will be copied in /override/controllers/front/ProductController.php during the module installation, and removed automatically on uninstall.\nExample Let\u0026rsquo;s consider the file /modules/\u0026lt;module_name\u0026gt;/override/classes/controllers/FrontController.php, overriding only one method of the core file.\n\u0026lt;?php /* * With this override, you have a new Smarty variable called \u0026#34;currentController\u0026#34; available in header.tpl * This allows you to use a different header if you are on a product page, category page or home. */ class FrontController extends FrontControllerCore { public function initHeader() { self::$smarty-\u0026gt;assign(\u0026#39;currentController\u0026#39;, get_class($this)); return parent::initHeader(); } } Theme template override Overriding a theme from a module is NOT possible, and never will. If you need this, you have to look instead at the parent/child theme feature.\nHowever, a module template or asset can be overriden by a theme, but this is not covered by this chapter specific to modules development.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/",
	"title": "The PrestaShop Webservice API",
	"tags": [],
	"description": "",
	"content": "Chapter 6 The PrestaShop Webservice API PrestaShop enables merchants to give third-party tools access to their shop\u0026rsquo;s database through a CRUD API, otherwise called a web service.\n Getting Started   Tutorials   Reference   Cheat sheet   Webservice Resources   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/",
	"title": "Contribute",
	"tags": [],
	"description": "",
	"content": "Chapter 7 Contribute PrestaShop is a community project, made by hundreds of developers collaborating around the world. You can get involved too!\n How to use GitHub to report an issue   Contribution guidelines   How to contribute code changes   How to improve the documentation   How to test Pull Requests and branches   How contributions are handled   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/composer/",
	"title": "External dependencies &amp; autoload with Composer",
	"tags": [],
	"description": "Learn how to migrate your current shop (1.6 or previous version) to PrestaShop 1.7",
	"content": "Composer Composer is a tool known in the PHP ecosystem to manage the dependencies of a project. It has been originally added in PrestaShop 1.7 to handle the inclusion of the Symfony framework and the native modules. As composer is compatible with PHP 5.3, it can be used in a module even compatible with previous major versions of PrestaShop.\nFrom a single configuration file, a module will benefit of these features:\n Autoload of your classes, namespaced or not Check the environment complies with the requirements Download of external PHP dependencies  References:\n Composer homepage Documentation Learn more about autoload  Install composer If Composer is not installed in you environment, this can be done via their website getcomposer.org. We recommend to store the binary in a folder available in your system or user path, to avoid looking for it at each command.\nSetup composer in a module You need setup composer in your module before create the services. Create the file \u0026lt;module name\u0026gt;/composer.json and paste:\n{ \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;your name\u0026gt;/\u0026lt;module name\u0026gt;\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026lt;module description\u0026gt;\u0026#34;, \u0026#34;authors\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;your name\u0026gt;\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;\u0026lt;your email\u0026gt;\u0026#34; } ], \u0026#34;require\u0026#34;: { \u0026#34;php\u0026#34;: \u0026#34;\u0026gt;=5.6.0\u0026#34; }, \u0026#34;autoload\u0026#34;: { \u0026#34;psr-4\u0026#34;: { \u0026#34;\u0026lt;YourNamespace\u0026gt;\\\\\u0026#34;: \u0026#34;src/\u0026#34; }, \u0026#34;classmap\u0026#34;: [ \u0026#34;\u0026lt;file\u0026gt;.php\u0026#34;, \u0026#34;classes/\u0026#34; ], \u0026#34;exclude-from-classmap\u0026#34;: [] }, \u0026#34;config\u0026#34;: { \u0026#34;preferred-install\u0026#34;: \u0026#34;dist\u0026#34;, \u0026#34;prepend-autoloader\u0026#34;: false }, \u0026#34;type\u0026#34;: \u0026#34;prestashop-module\u0026#34;, \u0026#34;author\u0026#34;: \u0026#34;\u0026lt;???\u0026gt;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;\u0026lt;???\u0026gt;\u0026#34; } Autoloading Classes To make a class automatically loaded in memory as soon as you reference it in your code, you should add in the list autoload.classmap the file it is stored in.\nNamespaced classes The classes defined in a namespace can be detected if you ask Composer to scan a folder in autoload.psr-4.\nIn YourNamespace add your namespace. The convention for namespaces used by PrestaShop is PrestaShop\\\\Module\\\\ModuleName as our base namespace, you can either follow this convention or adapt it to your business YourCompany\\\\YourModuleName.\nGenerate the autoloader Then in console in your module root run command composer dump-autoload. This will generate a vendor folder contain an autoload.php file which allows the use of your namespace or the classes defined in the classmap.\nYou can also use composer to include some dependencies in your module, you can find more information about composer on Composer page.\nImportant notes Disable prepend-autoloader\nIt is required for you to disable the prepend autoloader feature. By default the module dependencies would be defined before the core ones, which would result in overriding them. If you want the PrestaShop core system to work correctly you must not override its dependencies. Which is why you need to always add in your composer.json file:\n\u0026#34;config\u0026#34;: {\u0026#34;prepend-autoloader\u0026#34;: false} Don\u0026rsquo;t forget to include your vendor folder in your release package\nComposer is responsible for downloading your dependencies and creating the autoloader file that your module will need to work properly. Therefore, remember to run composer dump-autoload -o --no-dev before you create your package, and make sure you include the vendor directory in it.\n Don\u0026rsquo;t include development dependencies in your release package\nDevelopment-only libraries like PHPUnit can pose a security threat in production environments. Make sure that these libraries are imported as \u0026ldquo;dev dependencies\u0026rdquo; (require-dev) so that they aren\u0026rsquo;t included when you create your release package. If in doubt, double-check that they aren\u0026rsquo;t in the vendor directory when creating your release package.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/module-translation/",
	"title": "Module translation",
	"tags": [],
	"description": "",
	"content": "Module translation Your module\u0026rsquo;s wordings are written in English, but internationalization is very important. Translating your module to as many languages as possible makes it more usable for people from non-english speaking cultures.\nIdeally, you should translate your module in all the languages that are installed on your shop. This can be a tedious task, but a whole system has been put in place in order to help you out.\nPrestaShop provides an interface so that merchants can translate any wordings in their shop, including your module\u0026rsquo;s. This section can be found in under International \u0026gt; Translations.\nThe process of preparing your module for translation is called internationalization, or i18n.\nMaking your module translatable PrestaShop provides a simple way to translate your wordings. It needs two things:\n A way of being made aware whenever a wording is used on your module. A list of wordings used on your module, translated in a given language.  The first thing you have to do is make your wordings translatable. This requires adapting your module\u0026rsquo;s code in such a way that all wordings are processed trough the translation system, so that they can be displayed in the desired language.\nPrestaShop 1.7 introduced a new translation system, which is available for third party modules as of 1.7.6. Modules that need to be compatible with previous versions can use the previous, \u0026ldquo;classic\u0026rdquo; translation system.\nWhich one will you use?\n New translation system 1.7.6   Classic translation system  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/create-custom-grid-action/",
	"title": "How to create a custom Grid Action",
	"tags": [],
	"description": "",
	"content": "How to create a custom Grid Action Do you know how to do it? Please feel free to contribute to the docs! "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/",
	"title": "Scale",
	"tags": [],
	"description": "",
	"content": "Chapter 7 How to make PrestaShop scale Scaling your PrestaShop installation is something we hope every merchant will need, because it means their business is growing.\nHopefully, there are plenty of advices in these pages that will help.\nScalings Before doing anything to your PrestaShop setup, there are several things you need to know.\nFirst, be aware that there are several ways to scale any application, PrestaShop incuded.\nVertical scaling The most used one is called vertical scaling, where you boost your server\u0026rsquo;s performance : you add some RAM, some CPU, increase the disks IOs performances, and so on. It can be quick and easy if your hoster allows it and does not require any change in your application setup and configuration.\nHowever, this method is not the most efficient one, as doubling the server\u0026rsquo;s resources will not necessarily double its oberved performances.\nIn addition, the monetary cost of vertical scaling may not be linear. Depending on your hosting company, your mileage may vary.\nIn some cases, doubling your server capacity may cost you more than twice its original price.\nHorizontal scaling Generally, the most efficient way to scale an application\u0026rsquo;s performance remains adding more servers.\nIt may not be as simple as it sounds, as PrestaShop requires many files being shared (or at least synchronized) across the instances, but it\u0026rsquo;s not that hard when you have figured it out.\nAlso, once you have set up your first server, setting additional ones should be far easier.\nThe good thing is that, though requiring more sweat at first, horizontal scaling is better in terms of performances. Done well, adding a second server may easily double your application performance, if not more.\nFurther than LAMP Another way to scale your shop is to introduce other systems to improve your performances. Here is a quicklist of what can be used:\n Using a HTTP accelerator such as Varnish for Front Office Using an in-memory data structure store such as Redis to store sessions Use Elasticsearch or a solution built on it for processing customer searches Use a Content Delivery Network (CDN) for static files  Note: services like a CDN or HTTP accelerator are useful in a production environment, not in a development environment.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": "Services  Symfony Services You have the ability to modify the Symfony container configuration from a module. This means that\n You have the possibility to define your own Symfony services from your modules. You have the possibility to modify existing Symfony services declaration from your modules, which is somehow an Override mechanism  Create and declare a new Symfony service First we strongly advise you to use namespaces \u0026amp; autoloading in your module, which can be done thanks to composer. A dedicated chapter is available to learn more about Composer and to set it up.\nDefine your service At first you will need to create a class for your service of course:\n\u0026lt;?php // modules/yourmodule/src/YourService.php namespace YourCompany\\YourModule; use Symfony\\Component\\Translation\\TranslatorInterface; class YourService { /** @var TranslatorInterface */ private $translator; /** @var string */ private $customMessage; /** * @param string $customMessage */ public function __construct( TranslatorInterface $translator, $customMessage ) { $this-\u0026gt;translator = $translator; $this-\u0026gt;customMessage = $customMessage; } /** * @return string */ public function getTranslatedCustomMessage() { return $this-\u0026gt;translator-\u0026gt;trans($this-\u0026gt;customMessage, [], \u0026#39;Modules.YourModule\u0026#39;); } } Now that your namespace is setup, you can define your services in the config/services.yml file of your module.\n# yourmodule/config/services.ymlservices:_defaults:public:trueyour_company.your_module.your_service:class:YourCompany\\YourModule\\YourServicearguments:- \u0026#34;@translator\u0026#34;- \u0026#34;My custom message\u0026#34;This will then allow you to get your service from the Symfony container, like in your modern controllers:\n\u0026lt;?php // modules/yourmodule/src/Controller/DemoController.php namespace YourCompany\\YourModule\\Controller; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; class DemoController extends FrameworkBundleAdminController { public function demoAction() { $yourService = $this-\u0026gt;get(\u0026#39;your_company.your_module.your_service\u0026#39;); return $this-\u0026gt;render(\u0026#39;@Modules/yourmodule/templates/admin/demo.html.twig\u0026#39;, [ \u0026#39;customMessage\u0026#39; =\u0026gt; $yourService-\u0026gt;getTranslatedCustomMessage(), ]); } }  If you need more details about dependency injection and how services work in the Symfony environment we recommend you to read their documentation about the Service Container. Override an existing Symfony service The container definition can be modified by a module, which enables you to override an existing Symfony service being used in PrestaShop.\nThis is a mechanism similar to PrestaShop standard overrides, but the main benefit is that the php code stays unmodified. This prevents issues linked to code definition or autoloading failures.\nAs you can read it from the Symfony documentation, there are 2 ways to modify an existing service:\nOverride the service When you choose to override a service, this means that you replace the service by another one. The previous service is not usable anymore. Every other part of the code where this service is used will use the new version.\nTo do it: you declare your new service using the old service name. So if you want to override the service prestashop.core.b2b.b2b_feature with your own implementation, you write in config/services.yml :\nprestashop.core.b2b.b2b_feature:class:\u0026#39;YourCompany\\YourModule\\YourService\u0026#39;That\u0026rsquo;s done. The service registered under the name prestashop.core.b2b.b2b_feature is now your service. The previous prestashop.core.b2b.b2b_feature is gone.\nDecorate the service When you choose to decorate a service, this means that you make everybody use your service but you keep the old service available. The previous service has been given a new name and can still be used. Every other part of the code where this service was used will use the new version.\nTo do it: you declare your new service using the \u0026lsquo;decorates\u0026rsquo; keyword. So if you want to decorates the service prestashop.core.b2b.b2b_feature with my own implementation, you write in config/services.yml :\nmymodule.my_own_b2b_feature_service:class:\u0026#39;YourCompany\\YourModule\\YourService\u0026#39;decorates:\u0026#39;prestashop.core.b2b.b2b_feature\u0026#39;That\u0026rsquo;s done. The service registered under the name prestashop.core.b2b.b2b_feature is now your service. The previous prestashop.core.b2b.b2b_feature implementation is still available under the name mymodule.my_own_b2b_feature_service.inner.\nThis means that in your container you can access 3 services now:\n mymodule.my_own_b2b_feature_service your service prestashop.core.b2b.b2b_feature is now an alias for mymodule.my_own_b2b_feature_service (see service aliases) so the other services which rely on it now use your implementation mymodule.my_own_b2b_feature_service.inner is the previous implementation, still available  The decoration strategy can be very useful if:\n you want some areas of your code to use the new service, some others to use the old service you want to use the old service in the implementation of the new service  Indeed sometimes what you want is to modify a small part of the behavior of a class. So why replace it entirely ? You can reuse the existing behavior and modify only the needed part:\n\u0026lt;?php // modules/yourmodule/src/YourService.php namespace YourCompany\\YourModule; class YourService { private $decoratedService; /** * @param DecoratedService $decoratedService */ public function __construct($decoratedService) { $this-\u0026gt;decoratedService = $decoratedService; } /** * We want to modify the behavior of the function getTranslatedCustomMessage * without replacing the whole DecoratedService implementation * * @return string */ public function getTranslatedCustomMessage() { $unmodifiedOutput = $this-\u0026gt;decoratedService-\u0026gt;getTranslatedCustomMessage(); $modifiedOutput = $this-\u0026gt;modifyTheOutput($unmodifiedOutput); return $modifiedOutput; } } This is only possible with service decoration, not service override, because the previous service is still available.\nFinding the right service The Symfony command php ./bin/console debug:container will provide you with a list of all the registered services.\nMaintaining compatibility What happens, however, if the service you have overriden or decorated is used somewhere else ? You have to make sure your modifications are still compatible with this place in order not to break any existing behavior.\nEven worse: what if another part of the code especially requires this class, like this:\n\u0026lt;?php /** * @param ASpecificClass $service */ public function __construct(ASpecificClass $service) { // ...  } Here, this constructor will crash if you provide something else than an instance of ASpecificClass to it.\nIn order to avoid this crash, 2 options are available:\nPrestaShop classes rely more and more on interfaces. So if this code has been built with the idea of customization/extension in mind, instead of public function __construct(ASpecificClass $service) you should have:\n\u0026lt;?php /** * @param MyInterface $service */ public function __construct(MyInterface $service) { // ...  } Your new service, which overrides or decorates the previous service, only needs to implement the interface to be compatible with it.\nIf however no interface was used here, you probably need to extend the previous class, ASpecificClass, instead.\nAs you can see, interfaces lay the ground for easy extension and customization, that is why we use them more and more in the Core codebase and we recommand you use them as well !\nServices in Legacy environment  Being able to declare services for Symfony environment is a nice feature when you use modern controllers, however when you are on front office or in a legacy page in the back office (meaning a page that has not been migrated yet with Symfony) you can\u0026rsquo;t access the Symfony container or your services.\nSince the version 1.7.6 you can now define your services and access them in the legacy environment. We manage a light container for this environment (PrestaShop\\PrestaShop\\Adapter\\ContainerBuilder) which is accessible from legacy containers.\nTo define your services you need to follow the same principle as Symfony services, but this time you need to place your definition files in sub folders:\n config/admin/services.yml will define the services accessible in the back office (in legacy environment AND Symfony environment) config/front/services.yml will define the services accessible in the front office  Accessing your services You can then access your services from any legacy controllers (in which the container is automatically injected):\n\u0026lt;?php // modules/yourmodule/controllers/front/Demo.php class YourModuleDemoModuleFrontController extends ModuleFrontController { public function display() { ... $yourService = $this-\u0026gt;get(\u0026#39;your_company.your_module.front.your_service\u0026#39;); ... } } \u0026lt;?php // modules/yourmodule/controllers/admin/demo.php // Legacy controllers have no namespace class YourModuleDemoModuleAdminController extends ModuleAdminController { public function display() { ... $yourService = $this-\u0026gt;get(\u0026#39;your_company.your_module.admin.your_service\u0026#39;); ... } } But you can also access them from your module, to display its content or in hooks:\n\u0026lt;?php // modules/yourmodule/yourmodule.php class yourmodule { public function getContent() { ... // The controller here is the ADMIN one so only admin services are accessible  $yourService = $this-\u0026gt;context-\u0026gt;controller-\u0026gt;getContainer()-\u0026gt;get(\u0026#39;your_company.your_module.admin.your_service\u0026#39;); ... } public function hookDisplayFooterProduct($params) { ... // The controller here is the FRONT one so only front services are accessible  $yourService = $this-\u0026gt;context-\u0026gt;controller-\u0026gt;getContainer()-\u0026gt;get(\u0026#39;your_company.your_module.front.your_service\u0026#39;); ... } } Environments Keep in mind that the legacy container is a light version of the full Symfony container so you won\u0026rsquo;t have access to all the Symfony components. But you will be able to use the Doctrine service as well as a few few core services from PrestaShop.\nFor more details about available services you can check in \u0026lt;PS_ROOT_DIR\u0026gt;/config/services/ folder which services are available in admin or front. Be careful and always keep in mind in which context/environment you are calling your service.\nHere is a quick summary so that you know where you should define your services:\n   Definition file Symfony Container Front Legacy Container Admin Legacy Container Available services     config/services.yml Yes No No All symfony components and PrestaShopBundle services   config/admin/services.yml Yes No Yes Doctrine, services defined in \u0026lt;PS_ROOT_DIR\u0026gt;/config/services/admin folder   config/front/services.yml Yes Yes No Doctrine, services defined in \u0026lt;PS_ROOT_DIR\u0026gt;/config/services/front folder    Define a service on both front and admin Sometimes services are only useful in a particular context (back-office or front-office), but sometime you also need them on both (a Doctrine repository is a good example). You could easily define the same services in both environment but it\u0026rsquo;s very modular and can create errors in case of modifications.\nAn easy trick is to create a common definition file which will then be included by each environment:\n# yourmodule/config/common.ymlservices:_defaults:public:trueyour_company.your_module.common.open_service:class:YourCompany\\YourModule\\YourServicearguments:- \u0026#39;@your_company.your_module.common.open_dependency\u0026#39;your_company.your_module.common.open_dependency:class:YourCompany\\YourModule\\YourServiceDependencyThen you can include this file in the environment you wish (front, admin, Symfony);\n# yourmodule/config/services.ymlimports:- {resource:./common.yml }# yourmodule/config/admin/services.ymlimports:- {resource:../common.yml }# yourmodule/config/front/services.ymlimports:- {resource:../common.yml }"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/symfony/",
	"title": "Symfony extension concepts",
	"tags": [],
	"description": "",
	"content": "Symfony extension concepts PrestaShop modules acts as Symfony bundles, extension points are added continuously in each minor version:\n   Version Symfony features     1.7.3 Twig templates and Services   1.7.4 Configuration Forms and Console commands   1.7.5 Modern controllers and Security   1.7.6 Doctrine ORM and Entity forms   1.7.7 Controllers as services    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/create-custom-column-type/",
	"title": "How to create a custom Column Type",
	"tags": [],
	"description": "",
	"content": "How to create a custom Column Type Do you know how to do it? Please feel free to contribute to the docs! "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/",
	"title": "The PrestaShop Project",
	"tags": [],
	"description": "",
	"content": "Chapter 9 The PrestaShop Project As a major open source project, openness is at PrestaShop\u0026rsquo;s heart – and this goes beyond just code. This section aims to provide information about the PrestaShop Project, how it\u0026rsquo;s governed, its processes, and more.\nIn this section  Code of Conduct   Maintainer\u0026#39;s guide   Release   Security policy   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/badge/",
	"title": "BadgeColumn reference",
	"tags": [],
	"description": "",
	"content": "BadgeColumn Type  This basic BadgeColumn displays a raw field data in Grid, associated with a badge.\nAvailable options    Properties Type Expected value     field string required Record field name which column displays.   badge_type string default: success Indicates which field of the row contains the image source. (Allowed values: success, info, danger, warning)    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BadgeColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $badgeColumn = new BadgeColumn(\u0026#39;total_spent\u0026#39;); $badgeColumn-\u0026gt;setName(\u0026#39;Sales\u0026#39;); $badgeColumn-\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;total_spent\u0026#39;, \u0026#39;badge_type\u0026#39; =\u0026gt; \u0026#39;success\u0026#39;, \u0026#39;empty_value\u0026#39; =\u0026gt; \u0026#39;--\u0026#39;, ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($badgeColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/coding-standards/",
	"title": "Coding standards",
	"tags": [],
	"description": "",
	"content": "Coding standards Consistency is important, even more so when writing open-source code, since the code belongs to millions of eyeballs, and bug-fixing relies on these teeming millions to actually locate bugs and understand how to solve them.\nThis is why, when writing anything for PrestaShop, be it a theme, a module or a core patch, you should strive to follow the following guidelines. They are the ones that PrestaShop\u0026rsquo;s developers adhere to, and following them is the surest way to have your code be elegantly integrated in PrestaShop.\nIn short, code consistency helps keeping the code readable and maintainable.\nGeneral conventions All files containing code MUST:\n Use only UTF-8 without BOM. Use the Unix LF (linefeed) line ending. End with a single blank line.  PHP code conventions PHP files MUST follow the PSR-2 standard alongside Symfony standards.\nAlthough Yoda conditions are suggested, they are not enforced. Making your code follow our coding standards PHP CS Fixer has been configured for the PrestaShop project to help developers to comply with these conventions.\nYou can run it using the following command:\nphp ./vendor/bin/php-cs-fixer fix The prestashop specific configuration file can be found here. Also, you can also use the provided git pre-commit sample in order to make sure you never forget to make your code compliant!\nStrict typing  Starting on 1.7.7, all new PHP code should be strictly typed.\nThis means that all new methods must specify a type for all parameters as well as the return type. Similarly, all new classes except interfaces must enforce type strictness via declare:\n\u0026lt;?php /** 2007-2020 PrestaShop SA and Contributors... */ declare(strict_types=1); namespace Foo\\Bar; class MyClass { public function doStuff(string $foo, array $bar): void { } }  It\u0026rsquo;s important to have all classes declare type strictness. Since PHP 7 is still inherently weakly typed, it\u0026rsquo;s not enough to have your class declare type strictness to make it enforce type strictness. If the class consuming your code does not enforce type strictness as well, methods called by it will have their parameters silently coerced into the specified type instead of being type checked. Read this article for more details and examples. Deprecations Following Symfony conventions, method and class deprecations in PrestaShop must be noted by adding the appropriate Phpdoc as well as a deprecation error:\n\u0026lt;?php /** * @deprecated Since 1.7.6.0, use AnotherClass::someNewMethod() instead. */ public function someOldMethod() { @trigger_error( sprintf( \u0026#39;%s is deprecated since version 1.7.6.0. Use %s instead.\u0026#39;, __METHOD__, AnotherClass::class . \u0026#39;::someNewMethod()\u0026#39; ), E_USER_DEPRECATED ); } Javascript code conventions Javascript files MUST follow the Airbnb Javascript style guide.\nHTML, CSS (Sass), Twig \u0026amp; Smarty code conventions HTML, CSS (Sass), Twig and Smarty files MUST follow the Mark Otto\u0026rsquo;s coding standards. Mark is the creator of the Bootstrap framework.\nTo help developers to comply with these conventions, Stylelint, a stylesheet linter, has been configured in the PrestaShop project. You can find the configuration file on this repository.\nSame as if you want to compile assets, you need NodeJS and NPM to run Stylelint.\nStarting on 1.7.8  , you can run the linter like this:\nnpm run scss-lint You can fix auto-fixable errors using this command:\nnpm run scss-fix License information All PrestaShop files MUST start with the PrestaShop license block:\nCore files /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Open Software License (OSL 3.0) * that is bundled with this package in the file LICENSE.md. * It is also available through the world-wide-web at this URL: * https://opensource.org/licenses/OSL-3.0 * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * DISCLAIMER * * Do not edit or add to this file if you wish to upgrade PrestaShop to newer * versions in the future. If you wish to customize PrestaShop for your * needs please refer to https://devdocs.prestashop.com/ for more information. * * @author PrestaShop SA and Contributors \u0026lt;contact@prestashop.com\u0026gt; * @copyright Since 2007 PrestaShop SA and Contributors * @license https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0) */ Module files /** * Copyright since 2007 PrestaShop SA and Contributors * PrestaShop is an International Registered Trademark \u0026amp; Property of PrestaShop SA * * NOTICE OF LICENSE * * This source file is subject to the Academic Free License (AFL 3.0) * that is bundled with this package in the file LICENSE.md. * It is also available through the world-wide-web at this URL: * https://opensource.org/licenses/AFL-3.0 * If you did not receive a copy of the license and are unable to * obtain it through the world-wide-web, please send an email * to license@prestashop.com so we can send you a copy immediately. * * @author PrestaShop SA and Contributors \u0026lt;contact@prestashop.com\u0026gt; * @copyright Since 2007 PrestaShop SA and Contributors * @license https://opensource.org/licenses/AFL-3.0 Academic Free License (AFL 3.0) */ "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/",
	"title": "Column Types reference",
	"tags": [],
	"description": "",
	"content": "Column Types reference  The most important part of a Grid definition is defining columns. PrestaShop already comes with a list of predefined column types that you can use in your own Grids.\nSupported Types Basic columns  DataColumn DateTimeColumn ImageColumn ToggleColumn BadgeColumn 1.7.6   LinkColumn 1.7.6    Action columns  ActionColumn BulkActionColumn PositionColumn  Employee columns  EmployeeNameWithAvatarColumn  Status columns  SeverityLevelColumn  Use case example \u0026lt;?php // /modules/my-module/src/Grid/MyGridDefinitionFactory.php namespace MyModule\\Grid; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BulkActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\RowActionCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\LinkRowAction; /** * How to define the Grid\u0026#39;s columns? * You can adapt this example or look at the existing ones * in PrestaShop\u0026#39;s Core. */ class MyGridDefinitionFactory extends AbstractGridDefinition { /** * {@inheritdoc} */ protected function getColumns() { return (new ColumnCollection()) -\u0026gt;add( (new BulkActionColumn(\u0026#39;delete_stuff\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;bulk_field\u0026#39; =\u0026gt; \u0026#39;id_stuff\u0026#39;, ]) ) -\u0026gt;add( (new DataColumn(\u0026#39;id_stuff\u0026#39;)) -\u0026gt;setName(\u0026#39;ID\u0026#39;) -\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;id_stuff\u0026#39;, ]) ) -\u0026gt;add( (new ActionColumn(\u0026#39;actions\u0026#39;)) -\u0026gt;setName(\u0026#39;Actions\u0026#39;) -\u0026gt;setOptions([ \u0026#39;actions\u0026#39; =\u0026gt; (new RowActionCollection()) -\u0026gt;add( (new LinkRowAction(\u0026#39;delete\u0026#39;)) -\u0026gt;setIcon(\u0026#39;delete\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;delete_stuff\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;stuffId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;id_stuff\u0026#39;, \u0026#39;confirm_message\u0026#39; =\u0026gt; \u0026#39;Delete selected item?\u0026#39;, ]) ), ]) ) ; } }  You need to create a custom Column Type? We got you covered! "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/commands/",
	"title": "Commands",
	"tags": [],
	"description": "",
	"content": "Commands  Since version 1.7 of PrestaShop, everyone have access to the PrestaShop console using the following instruction in a terminal:\n./bin/console\nSince v1.7.5, you can add and provide your own commands into the PrestaShop console using modules.\nIf you load and use PrestaShop Core legacy classes such as an ObjectModel within a Command context, you might run into issues. This is a known limitation of the Commands. Removing this limitation is being explored for future PS versions. Let\u0026rsquo;s see an example of a really common task when we usually use CRON scripts: you want to export your products into an XML file in order to import them into an another platform (a PIM or an ERP).\nYou could rely on the webservices, but they are not really easy to configure. This is how you can do it using a PrestaShop command.\nCreate a command into the module You need to create the file and register it as a \u0026ldquo;command\u0026rdquo;.\nSetup composer First you need to setup your composer file, you will find more info about it in Setup composer\nCreation of the command At this moment, the only requirement is that you PHP file needs to be a class that extends Symfony\\Component\\Console\\Command. Let\u0026rsquo;s create ExportCommand file:\n\u0026lt;?php // your-module/src/Command/ExportCommand.php namespace YourCompany\\YourModule\\Command; use Symfony\\Component\\Console\\Command\\Command; use Symfony\\Component\\Console\\Input\\InputInterface; use Symfony\\Component\\Console\\Output\\OutputInterface; class ExportCommand extends Command { protected function configure() { // The name of the command (the part after \u0026#34;bin/console\u0026#34;)  $this-\u0026gt;setName(\u0026#39;your-module:export\u0026#39;); } protected function execute(InputInterface $input, OutputInterface $output) { // Here your business logic.  $output-\u0026gt;write(\u0026#39;Export done!\u0026#39;); } } Registration of the command Now, in order to make this really simple command available in the console, we register it in the services.yml file:\n# your-module/config/services.ymlservices:your_company.your_module.export_command:class:YourCompany\\YourModule\\Command\\ExportCommandtags:- {name:\u0026#39;console.command\u0026#39;}The command should be now available using ./bin/console your-module:export.\nLearn more about the PrestaShop Console We use the Symfony Console with nothing specific to PrestaShop.\nYou can learn everything about this component in their documentation in version 3.4.\nTo sum up, there is a list of useful links:\n Create a new command; Manage the Command arguments; Manage the Command output; How to inject dependencies in a Command; How to test a Command;  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/domain/cqrs/",
	"title": "CQRS - Commands and Queries",
	"tags": [],
	"description": "",
	"content": "CQRS - Commands and Queries What is CQRS? CQRS stands for Command Query Responsibility Segregation. In brief, the CQRS pattern suggests to separate \u0026ldquo;write\u0026rdquo; and \u0026ldquo;read\u0026rdquo; models, which it refers to as Commands and Queries. In a web application like a CMS, we perform either \u0026ldquo;read\u0026rdquo; operations which return information to the user or \u0026ldquo;write\u0026rdquo; operations which modify the data managed by the application.\nWhy using CQRS in PrestaShop? During Back Office migration to Symfony, PrestaShop needs a way to access and alter data on the new Symfony pages without multiplying the sources of truth, and without accessing ObjectModel (e.g. Product, Category) directly.\nCommands and Queries allow us to isolate the controllers from the data source, which can be later replaced by something else while leaving behind a nice API.\nThis implementation proposes a \u0026ldquo;top-down\u0026rdquo; design, which inverses the classic data-driven design. It starts on a page and the actions performed in it, and then trickles down layer by layer, finishing on the data layer.\nDifference between legacy \u0026amp; new architectures In legacy architecture, controller is calling ObjectModel directly, without providing clear API or separation between read and write model, thus highly coupling data layer with controller. See legacy architecture\u0026rsquo;s schema below.\n  Legacy architecture   Fortunately, by implementing CQRS it allows PrestaShop to quickly build new API, but still use legacy ObjectModel by implementing Adapter handlers. This approach enables us to drop ObjectModel and replace it with something else later without breaking new API (Commands \u0026amp; Queries). See new architecture\u0026rsquo;s schema below:\n  New architecture using CQRS   CQRS Principles in PrestaShop  All input validation SHOULD be done during the object construction. All objects SHOULD be immutable unless it\u0026rsquo;s impractical to do so. The Core\\Domain namespace describes business objects, actions and messages. It DOES NOT contain behavior (at least for now).  Command and CommandHandler principles  Any alteration on the state of the application MUST be performed through a Command. A Command describes a single action. It DOES NOT perform it. A Command receives only primitive types on input (int, float, string, bool and array). For every Command there MUST be at least one CommandHandler whose role is to execute that Command. A CommandHandler MUST be placed in the Adapter namespace as long as it has legacy dependencies. A CommandHandler SHOULD NOT return anything on success, and SHOULD throw a typed Exception on failure. The \u0026ldquo;no return on success\u0026rdquo; rule can be broken only when creating entities. A CommandHandler MUST use the existing ObjectModel for writes as long as those classes exist. A CommandHandler MUST implement an interface containing a single public method like this:  \u0026lt;?php public function handle(NameOfTheCommand $command); Query and QueryHandler principles  Data retrieval SHOULD always go through a Query. A Query describes a single data query. It DOES NOT perform it. A Query receives only primitive types on input (int, float, string, bool and array). For every Query there MUST be at least one QueryHandler whose role is to execute that Query and return the resulting data set. A QueryHandler SHOULD return a typed object, and SHOULD throw a typed Exception on failure. A QueryHandler SHOULD use the existing ObjectModel for reads as long as it\u0026rsquo;s reasonable to do so (in particular for CUD operations in BO migration). A QueryHandler MUST be placed in the Adapter namespace as long as they have legacy dependencies. A QueryHandler SHOULD return data objects that make sense to the domain, and SHOULD NOT leak internal objects. A QueryHandler MUST implement an interface containing a single public method and a typed return like this:  \u0026lt;?php /** * @param NameOfTheQuery $query * * @return TypeOfReturn */ public function handle(NameOfTheQuery $query); Command and Query buses Command bus is a pattern used to map Commands and Queries to CommandHandlers and QueryHandlers. PrestaShop defines it\u0026rsquo;s own CommandBusInterface and implements it using Tactician command bus library.\nPrestaShop uses 2 commands buses:\n CommandBus - for dispatching Commands only QueryBus - for dispatching Queries only  CQRS in Debug Toolbar To help you understand which command/queries are used on a page and how you can interact with them a profiler has been added in the Symfony debug toolbar.\n  CQRS Debug Toolbar   It shows you a quick resume of the CQRS commands/queries used on the page, you can then have more details in the Symfony profiler page:\n  CQRS Profiler   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/data/",
	"title": "DataColumn reference",
	"tags": [],
	"description": "",
	"content": "DataColumn Type  The most basic column is DataColumn. It is used to display raw field data in Grid.\nAvailable options    Properties Type Expected value     field string required The record field name that the column displays.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $dataColumn = new DataColumn(\u0026#39;id_product\u0026#39;); $dataColumn-\u0026gt;setName(\u0026#39;ID\u0026#39;); $dataColumn-\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;id_product\u0026#39;, ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($dataColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/datetime/",
	"title": "DateTimeColumn reference",
	"tags": [],
	"description": "",
	"content": "DateTimeColumn Type  You can use this column type in your Grid to format datetime values. It is common to get datetime values (e.g. Created at, Updated at \u0026amp; etc.) from the database and format them before displaying.\nAvailable options    Properties Type Expected value     field string required The record field name that the column displays.   format string default: Y-m-d H:i:s The format to use when formatting datetime values.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\DateTimeColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $dateTimeColumn = new DateTimeColumn(\u0026#39;datetime\u0026#39;); $dateTimeColumn-\u0026gt;setName(\u0026#39;Created at\u0026#39;); $dateTimeColumn-\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;date_add\u0026#39;, // the field name that has a datetime value  \u0026#39;format\u0026#39; =\u0026gt; \u0026#39;Y/d/m H:i:s\u0026#39;, // define a custom format for the datetime ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($dateTimeColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/faq/",
	"title": "Frequently Asked Questions",
	"tags": [],
	"description": "",
	"content": "Chapter 10 Frequently Asked Questions This sections aims to becomes the source of truth for the PrestaShop community when it does to questions such as \u0026ldquo;I want to develop a module X how do I do THIS in PrestaShop\u0026rdquo;\nIf someone asked you such a question about PrestaShop and you know the answer please don\u0026rsquo;t send them your answer by email but fill a pull request to complete this section and send them the link to the answer here.\n I need help   Product FAQ   Shipping FAQ   Upgrade FAQ   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/getting-started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Getting Started About CRUD \u0026amp; REST The PrestaShop web service uses the REST architecture in order to be available on as many platforms as possible, since the HTTP protocol and XML files are understood by most platforms, if not all.\nCRUD is an acronym that stands for \u0026ldquo;Create, Read, Update, and Delete\u0026rdquo;. These are the four basic operations for managing data in an application.\nREST defines roughly a style of software architecture, which promotes the use of HTTP methods when building web application, instead of custom methods or protocols such as SOAP or WSDL. It defines several rules, including one that is similar to CRUD, which is described below.\n HTTP has several methods that can perform processing on data as defined in the REST architecture, among which are 4 main methods:\n   HTTP/REST CRUD SQL     POST Create INSERT   GET Read SELECT   PUT Update UPDATE   DELETE Delete DELETE    Enabling \u0026amp; Creating an access to the webservice Reach the dedicated page.\nAccessing the webservice Now that your access key is generated you can test your store\u0026rsquo;s webservice, its endpoint is located in the /api/ folder at the root of your installation of Prestashop. The quickest way to test your API is to use your browser:\n If PrestaShop is installed at the root of your server, you can access the API here: http://example.com/api/ If PrestaShop is installed in a subfolder of your server, you can access the API here: http://example.com/prestashop/api/  The endpoint /api is reachable if URL is correctly rewritten to use it. For httpd, this is done by the .htaccess which means you need to make sure httpd is processing this file (it needs mod_rewrite enabled and VirtualHost must have AllowOverride All). The shop should prompt you for a username and a password to enter. The username is the authentication key you created and there is no password to enter.\nThe second and more appropriate way to access the API is to include your access key in the url, this will prevent you from entering any user name. This is also the recommended way to call the API from a javascript client, or any application. Here is an example, assuming your access API key is UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX:\n At the root of the server: https://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/api/ In a subfolder of the server: https://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/prestashop/api/  To test/call your APIs we recommend you use an API client such as Insomnia or Postman, it is easier to call the APIs than with a browser, especially for write actions. As you noticed no password nor authentication process is required to access the APIs which is why you need to be extra careful with you access key rights and how (and to whom) you disclose them. Using your webservice API Describe a resource When you call the root /api url you will get a summary of the available APIs you can call with your access token. In this example we see that we have all rights on the /api/addresses API:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;api shopName=\u0026#34;Prestashop\u0026#34;\u0026gt; \u0026lt;addresses xlink:href=\u0026#34;http://example.com/api/addresses\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; \u0026lt;description xlink:href=\u0026#34;http://example.com/api/addresses\u0026#34; get=\u0026#34;true\u0026#34; put=\u0026#34;true\u0026#34; post=\u0026#34;true\u0026#34; delete=\u0026#34;true\u0026#34; head=\u0026#34;true\u0026#34;\u0026gt; The Customer, Brand and Customer addresses\u0026lt;/description\u0026gt; \u0026lt;schema xlink:href=\u0026#34;http://example.com/api/addresses?schema=blank\u0026#34; type=\u0026#34;blank\u0026#34;/\u0026gt; \u0026lt;schema xlink:href=\u0026#34;http://example.com/api/addresses?schema=synopsis\u0026#34; type=\u0026#34;synopsis\u0026#34;/\u0026gt; \u0026lt;/addresses\u0026gt; \u0026lt;/api\u0026gt; \u0026lt;/prestashop\u0026gt; Each API comes with two schema APIs:\n /api/RESOURCE?schema=synopsis returns basic info on the API format, the name of fields and their type /api/RESOURCE?schema=blank will return a default blank data which you could use as a base for your write actions  Both calls are very much alike, only synopsis contains more information about the data format and types:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id_customer format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_manufacturer format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_warehouse format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_country required=\u0026#34;true\u0026#34; format=\u0026#34;isUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state format=\u0026#34;isNullOrUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;alias required=\u0026#34;true\u0026#34; maxSize=\u0026#34;32\u0026#34; format=\u0026#34;isGenericName\u0026#34;\u0026gt;\u0026lt;/alias\u0026gt; \u0026lt;company maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isGenericName\u0026#34;\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;lastname required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isName\u0026#34;\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isName\u0026#34;\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;vat_number format=\u0026#34;isGenericName\u0026#34;\u0026gt;\u0026lt;/vat_number\u0026gt; \u0026lt;address1 required=\u0026#34;true\u0026#34; maxSize=\u0026#34;128\u0026#34; format=\u0026#34;isAddress\u0026#34;\u0026gt;\u0026lt;/address1\u0026gt; \u0026lt;address2 maxSize=\u0026#34;128\u0026#34; format=\u0026#34;isAddress\u0026#34;\u0026gt;\u0026lt;/address2\u0026gt; \u0026lt;postcode maxSize=\u0026#34;12\u0026#34; format=\u0026#34;isPostCode\u0026#34;\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city required=\u0026#34;true\u0026#34; maxSize=\u0026#34;64\u0026#34; format=\u0026#34;isCityName\u0026#34;\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;other maxSize=\u0026#34;300\u0026#34; format=\u0026#34;isMessage\u0026#34;\u0026gt;\u0026lt;/other\u0026gt; \u0026lt;phone maxSize=\u0026#34;32\u0026#34; format=\u0026#34;isPhoneNumber\u0026#34;\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;phone_mobile maxSize=\u0026#34;32\u0026#34; format=\u0026#34;isPhoneNumber\u0026#34;\u0026gt;\u0026lt;/phone_mobile\u0026gt; \u0026lt;dni maxSize=\u0026#34;16\u0026#34; format=\u0026#34;isDniLite\u0026#34;\u0026gt;\u0026lt;/dni\u0026gt; \u0026lt;deleted format=\u0026#34;isBool\u0026#34;\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add format=\u0026#34;isDate\u0026#34;\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd format=\u0026#34;isDate\u0026#34;\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/prestashop\u0026gt; Read a resource Each resource comes with an XLink argument. Using XLink, you will be able to access your various resources. XLink associates an XML file to another XML file via a link. From our root API example we can see that we have access to http://example.com/api/addresses which will return the list of Addresses:\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;addresses\u0026gt; \u0026lt;address id=\u0026#34;2\u0026#34; xlink:href=\u0026#34;http://example.com/api/addresses/2\u0026#34;/\u0026gt; \u0026lt;address id=\u0026#34;3\u0026#34; xlink:href=\u0026#34;http://example.com/api/addresses/3\u0026#34;/\u0026gt; \u0026lt;address id=\u0026#34;1\u0026#34; xlink:href=\u0026#34;http://example.com/api/addresses/1\u0026#34;/\u0026gt; \u0026lt;address id=\u0026#34;4\u0026#34; xlink:href=\u0026#34;http://example.com/api/addresses/4\u0026#34;/\u0026gt; \u0026lt;/addresses\u0026gt; \u0026lt;/prestashop\u0026gt;  You can notice that a resource API url always follow the same pattern:\n http://example.com/api/RESOURCE_NAME list a type of resource http://example.com/api/RESOURCE_NAME/ID_RESOURCE will return the information of the specified resource   Here is what a resource API call could look like (in this case http://example.com/api/addresses/1):\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_customer xlink:href=\u0026#34;http://example.com/api/customers/1\u0026#34;\u0026gt;\u0026lt;![CDATA[1]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_manufacturer\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_country xlink:href=\u0026#34;http://example.com/api/countries/8\u0026#34;\u0026gt;\u0026lt;![CDATA[8]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;alias\u0026gt;\u0026lt;![CDATA[Mon adresse]]\u0026gt;\u0026lt;/alias\u0026gt; \u0026lt;company\u0026gt;\u0026lt;![CDATA[My Company]]\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;lastname\u0026gt;\u0026lt;![CDATA[DOE]]\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname\u0026gt;\u0026lt;![CDATA[John]]\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;vat_number\u0026gt;\u0026lt;/vat_number\u0026gt; \u0026lt;address1\u0026gt;\u0026lt;![CDATA[16, Main street]]\u0026gt;\u0026lt;/address1\u0026gt; \u0026lt;address2\u0026gt;\u0026lt;![CDATA[2nd floor]]\u0026gt;\u0026lt;/address2\u0026gt; \u0026lt;postcode\u0026gt;\u0026lt;![CDATA[75002]]\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city\u0026gt;\u0026lt;![CDATA[Paris ]]\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;other\u0026gt;\u0026lt;/other\u0026gt; \u0026lt;phone\u0026gt;\u0026lt;![CDATA[0102030405]]\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;phone_mobile\u0026gt;\u0026lt;/phone_mobile\u0026gt; \u0026lt;dni\u0026gt;\u0026lt;/dni\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[0]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[2019-01-15 22:46:55]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[2019-01-15 22:46:55]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/prestashop\u0026gt; Available parameters You can add these GET parameters to your request to modify the READ response:\n display to control which fields are returned filter to control which items are returned language to control which language values are returned  Control returned fields with \u0026ldquo;display\u0026rdquo; The display parameter can be used to return all fields when used with the full value: http://example.com/api/addresses/?display=full.\nYou can also ask for certain fields if you use a list of fields names in brackets: http://example.com/api/addresses/?display=[id,lastname,firstname,phone_mobile]\nThis parameter can only be used for listings, not for individual records. If you want individual record with specific fields, you need to use both display and filter parameters. A response obtained with \u0026ldquo;display\u0026rdquo; other than \u0026ldquo;full\u0026rdquo; can\u0026rsquo;t be used in a PUT (update) request, because the WebserviceRequest class validation for fields is the same for POST (create) and PUT (update).\nThis should be fixed in a near future with a yet-to-come-pull-request introducing the PATCH method!\n Control returned items with \u0026ldquo;filter\u0026rdquo; The EQUAL operator is used when you need to get specific items. For exemple, if you want the addresses for customer #1, you can filter your GET request with the filter parameter: http://example.com/api/addresses?filter[id_customer]=1\nThe LIKE operator is used when you need to search for items. For exemple, if you want the addresses with cities starting with \u0026ldquo;SAINT\u0026rdquo;: http://example.com/api/addresses?filter[city]=[saint]%\nThe AND operator is used when you need to get items matching several criteria: http://example.com/api/addresses?filter[city]=[paris|lyon]\nOther operators can be used, such as:\n NOT EQUAL (single value): http://example.com/api/customers?filter[firstname]=![hubert] (apologies to all Huberts) NOT EQUAL (multiple values): http://example.com/api/customers?filter[firstname]=![hubert|leon|gaspard] (apologies again\u0026hellip;) GREATER THAN: http://example.com/api/customers?filter[birthday]=\u0026gt;[2000-00-00%2000:00:00] (millenials only 🙂) LOWER THAN: http://example.com/api/customers?filter[birthday]=\u0026lt;[2000-00-00%2000:00:00] (previous century only 😄)  This can be used in combination with the display parameter! Let\u0026rsquo;s say you want to get the mobile phone numbers of customers #1, #7 and #42: http://example.com/api/addresses?filter[id_customer]=[1|7|42]\u0026amp;display=[phone_mobile]\nYou can also filter by dates! A typical example would be a routine in an ERP fetching the orders since the last call: http://example.com/api/orders?display=full\u0026amp;date=1\u0026amp;filter[date_add]=[2019-11-14%2013:00:00,2019-11-14%2014:00:00]. In this exemple, we request the orders created on 2019-11-14 between 1pm and 2pm.\nPay attention to:\n The url-encoded space (%20) in the datetime values The date=1 parameter used to allow date filtering The dates range, with an inclusive first member and an exclusive last member (from 13:00:00 to 13:59:59)   Special parameters The date=1 parameter must be used to allow date filtering (see exemple above).\nThe limit=0,100 parameter can be used to limit the number of returned items (similar to MySQL\u0026rsquo;s LIMIT clause).\nThe sort=[field1_ASC,field2_DESC] parameter can be used to sort the results (similar to MySQL\u0026rsquo;s ORDER BY clause, with underscore to separate the field name and the order way).\nThe language=1 or language=[1|2] parameter can be used to return only these languages for translatable fields (eg: product description, category name, etc.).\nThe sendemail=1 parameter can be used if you need to change the state of an order AND you want the emails to be sent to the customer: you will have to do a POST on http://example.com/api/order_histories?sendemail=1\nCreate a resource To create a resource, you simply need to GET the XML blank data for the resource (example /api/addresses?schema=blank), fill it with your changes, and send POST HTTP request with the whole XML as body content to the /api/addresses/ URL.\nPrestaShop will take care of adding everything in the database, and will return an XML file indicating that the operation has been successful, along with the ID of the newly created customer.\nUpdate a resource To edit an existing resource: GET the full XML file for the resource you want to change (example /api/addresses/1), edit its content as needed, then send a PUT HTTP request with the whole XML file as a body content to the same URL again.\nUsing JSON instead of XML The Web services can also output JSON instead of XML. To enable JSON output you have two choices:\nQuery parameter Add one of the following parameters to your query string:\n output_format=JSON io_format=JSON  Example:\nhttps://UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX@example.com/api/?output_format=JSON HTTP header Add the one of the following headers to your HTTP request:\n Io-Format: JSON Output-Format: JSON  Example:\nGET /api/ HTTP/1.1 Host: example.com Output-Format: JSON Authorization: Basic UCCLLQ9N2ARSHWCXLT74KUKSSK34BFKX "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/",
	"title": "Getting started",
	"tags": [],
	"description": "",
	"content": "Getting started Quick start Modules must follow some guidelines to work on PrestaShop.\nIf you want to get started quickly, with a ready-to-use module template, you can use the module generator available on the PrestaShop Validator.\nIt provides an easy way to generate a payment (for PS 1.6 and below) or shipping module, with the basic structure, the default properties customized and the most common use cases covered (hook, upgrade\u0026hellip;).\nOther skeletons have been created to help you creating specific modules, as given in the following references list.\nReferences:\n Generate a module on PrestaShop Validator Skeleton of a Payment module for PrestaShop 1.7 Skeleton of a module using CQRS feature (More details about CQRS)  Tutorial: Understanding your first module Before you start writing code for your PrestaShop module, you should be aware that the PrestaShop team uses a specific set of coding conventions (or coding standards, coding norm, etc.).\nAs Wikipedia puts it, \u0026ldquo;Coding conventions are a set of guidelines for a specific programming language that recommend programming style, practices and methods for each aspect of a piece program written in this language\u0026rdquo;, and \u0026ldquo;Good procedures, good methodology and good coding standards can be used to drive a project such that the quality is maximized and the overall development time and development and maintenance cost is minimized.\u0026rdquo;.\nPrestaShop\u0026rsquo;s own standards are available at this page: Coding standards. You should read it in order to make sure that the code you produce fits correctly with the overall code of the PrestaShop project. Configuring your IDE hints or using automated tools like PHPCodeSniffer can help you make sure you follow the standards properly.\n Let\u0026rsquo;s create a simple first module; this will enable us to better describe its structure. We will name it \u0026ldquo;My module\u0026rdquo;.\nFirst, create the module\u0026rsquo;s folder, in the /modules folder. It should have the same name as the module, with no space, only alphanumerical characters, the hyphen and the underscore, all in lowercase: /mymodule.\nThis folder must contain the main file, a PHP file of the same name as the folder, which will handle most of the processing: mymodule.php.\nThat is enough for a very basic module, but obviously more files and folders can be added later.\nThe constant test The main mymodule.php file must start with the following test:\n\u0026lt;?php if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } This checks for the existence of an always-existing PrestaShop constant (its version number), and if it does not exist, it stops the module from loading. The sole purpose of this is to prevent malicious visitors to load this file directly.\nNote that, as required by the PrestaShop Coding Standards (see above), we do not use a PHP closing tag.\nThe main class The main file must contain the module\u0026rsquo;s main class (along with other classes if needed). PrestaShop uses Object-Oriented programming, and so do its modules.\nThat class must bear the same name as the module and its folder, in CamelCase (see https://en.wikipedia.org/wiki/CamelCase). In our example: MyModule. Furthermore, that class must extend the Module class, in order to inherit all its methods and attributes.\n\u0026lt;?php if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } class MyModule extends Module { } It can just as well extend any class derived from Module, for specific needs: PaymentModule, ModuleGridEngine, ModuleGraph, etc.\nAt this stage, if you place the module\u0026rsquo;s folder on the /modules folder, the module can already be seen in the \u0026ldquo;Modules\u0026rdquo; page in the back office, in the \u0026ldquo;Other modules\u0026rdquo; section – albeit with no real name nor thumbnail.\nThe constructor method Now, let\u0026rsquo;s fill the class' code block with the essential constructor lines. A constructor is a function in a class that is automatically called when you create a new instance of a class with new. In the case of a PrestaShop, the constructor class is the first method to be called when the module is loaded by PrestaShop. This is therefore the best place to set most of its details.\n\u0026lt;?php if (!defined(\u0026#39;_PS_VERSION_\u0026#39;)) { exit; } class MyModule extends Module { public function __construct() { $this-\u0026gt;name = \u0026#39;mymodule\u0026#39;; $this-\u0026gt;tab = \u0026#39;front_office_features\u0026#39;; $this-\u0026gt;version = \u0026#39;1.0.0\u0026#39;; $this-\u0026gt;author = \u0026#39;Firstname Lastname\u0026#39;; $this-\u0026gt;need_instance = 0; $this-\u0026gt;ps_versions_compliancy = [ \u0026#39;min\u0026#39; =\u0026gt; \u0026#39;1.6\u0026#39;, \u0026#39;max\u0026#39; =\u0026gt; _PS_VERSION_ ]; $this-\u0026gt;bootstrap = true; parent::__construct(); $this-\u0026gt;displayName = $this-\u0026gt;l(\u0026#39;My module\u0026#39;); $this-\u0026gt;description = $this-\u0026gt;l(\u0026#39;Description of my module.\u0026#39;); $this-\u0026gt;confirmUninstall = $this-\u0026gt;l(\u0026#39;Are you sure you want to uninstall?\u0026#39;); if (!Configuration::get(\u0026#39;MYMODULE_NAME\u0026#39;)) { $this-\u0026gt;warning = $this-\u0026gt;l(\u0026#39;No name provided\u0026#39;); } } } Let\u0026rsquo;s examine each line from this first version of the MyModule class\u0026hellip;\n\u0026lt;?php // This line defines the class constructor function. $this-\u0026gt;name = \u0026#39;mymodule\u0026#39;; $this-\u0026gt;tab = \u0026#39;front_office_features\u0026#39;; $this-\u0026gt;version = \u0026#39;1.0\u0026#39;; $this-\u0026gt;author = \u0026#39;Firstname Lastname\u0026#39;; This section assigns a handful of attributes to the class instance (this):\n \u0026lsquo;name\u0026rsquo; attribute. This attributes serves as an internal identifier. The value MUST be the name of the module\u0026rsquo;s folder. Do not use special characters or spaces, and keep it lower-case. \u0026lsquo;tab\u0026rsquo; attribute. The title for the section that shall contain this module in PrestaShop\u0026rsquo;s back office modules list. You may use an existing name, such as seo, front_office_features or analytics_stats, or a custom one. In this last case, a new section will be created with your identifier. We choose \u0026ldquo;front_office_features\u0026rdquo; because this first module will mostly have an impact on the front-end. \u0026lsquo;version\u0026rsquo; attribute. The version number for the module, displayed in the modules list. You can use as many level of version as you need (i.e \u0026lsquo;1\u0026rsquo;, \u0026lsquo;1.0\u0026rsquo;, \u0026lsquo;1.0.3\u0026rsquo;, \u0026lsquo;0.97.5.2\u0026rsquo;) but keep in mind to follow the Semantic Versioning Specification. \u0026lsquo;author\u0026rsquo; attribute. This is displayed as-is in the PrestaShop modules list.  Here is the list of available \u0026ldquo;Tab\u0026rdquo; attributes, and their corresponding section in the \u0026ldquo;Modules\u0026rdquo; page:\n   \u0026ldquo;Tab\u0026rdquo; attribute Module section     administration Administration   advertising_marketing Advertising \u0026amp; Marketing   analytics_stats Analytics \u0026amp; Stats   billing_invoicing Billing \u0026amp; Invoices   checkout Checkout   content_management Content Management   dashboard Dashboard   emailing E-mailing   export Export   front_office_features Front Office Features   i18n_localization I18n \u0026amp; Localization   market_place Market Place   merchandizing Merchandizing   migration_tools Migration Tools   mobile Mobile   others Other Modules   payments_gateways Payments \u0026amp; Gateways   payment_security Payment Security   pricing_promotion Pricing \u0026amp; Promotion   quick_bulk_update Quick / Bulk update   search_filter Search \u0026amp; Filter   seo SEO   shipping_logistics Shipping \u0026amp; Logistics   slideshows Slideshows   smart_shopping Smart Shopping   social_networks Social Networks    Let\u0026rsquo;s continue with the next line in this block of code:\n\u0026lt;?php $this-\u0026gt;need_instance = 0; $this-\u0026gt;ps_versions_compliancy = [ \u0026#39;min\u0026#39; =\u0026gt; \u0026#39;1.5\u0026#39;, \u0026#39;max\u0026#39; =\u0026gt; \u0026#39;1.6\u0026#39; ]; $this-\u0026gt;bootstrap = true; This section handles the relationship with the module and its environment (namely, PrestaShop):\n need_instance. Indicates whether to load the module\u0026rsquo;s class when displaying the \u0026ldquo;Modules\u0026rdquo; page in the back office. If set at 0, the module will not be loaded, and therefore will spend less resources to generate the \u0026ldquo;Modules\u0026rdquo; page. If your module needs to display a warning message in the \u0026ldquo;Modules\u0026rdquo; page, then you must set this attribute to 1. ps_versions_compliancy. Indicates which version of PrestaShop this module is compatible with. In the example above, we explicitly write that this module will only work with PrestaShop 1.5.x, and no other major version. bootstrap. Indicates that the module\u0026rsquo;s template files have been built with PrestaShop 1.6\u0026rsquo;s bootstrap tools in mind – and therefore, that PrestaShop should not try to wrap the template code for the configuration screen (if there is one) with helper tags.  Next, we call the constructor method from the parent PHP class:\n\u0026lt;?php parent::__construct(); This will trigger a lot of actions from PrestaShop that you do not need to know about at this point. Calling the parent constructor method must be done after the creation of the this-\u0026gt;name variable and before any use of the this-\u0026gt;l() translation method.\nThe next section deals with text strings, which are encapsulated in PrestaShop\u0026rsquo;s translation method, l():\n\u0026lt;?php $this-\u0026gt;displayName = $this-\u0026gt;l(\u0026#39;My module\u0026#39;); $this-\u0026gt;description = $this-\u0026gt;l(\u0026#39;Description of my module.\u0026#39;); $this-\u0026gt;confirmUninstall = $this-\u0026gt;l(\u0026#39;Are you sure you want to uninstall?\u0026#39;); if (!Configuration::get(\u0026#39;MYMODULE_NAME\u0026#39;)) { $this-\u0026gt;warning = $this-\u0026gt;l(\u0026#39;No name provided.\u0026#39;); } These lines respectively assign:\n A name for the module, which will be displayed in the back office\u0026rsquo;s modules list. A description for the module, which will be displayed in the back office\u0026rsquo;s modules list. A message, asking the administrator if he really does want to uninstall the module. To be used in the installation code. A warning that the module doesn\u0026rsquo;t have its MYMODULE_NAME database value set yet (this last point being specific to our example, as we will see later).  The constructor method is now complete. You are free to add more to it later if necessary, but this the bare minimum for a working module.\nNow go to your back office, then in the Modules page (found at \u0026ldquo;Modules\u0026rdquo; \u0026gt; \u0026ldquo;Modules \u0026amp; Services\u0026rdquo;) choose the Selection tab. The module is visible in the modules list, with its information displayed – and no icon for now.\nYou can install the module, but it does not do anything yet.\nWhen you click on the \u0026ldquo;Install\u0026rdquo; button for your module, it will display a module window saying that your module is Untrusted.\nThe only way to make your module Trusted is to distribute it through the PrestaShop Addons marketplace (with a unique identifying key), or to become a PrestaShop partner. Other trusted modules are the native ones.\nTo install the module, click the \u0026ldquo;Proceed with installation\u0026rdquo; on this screen.\nBuilding the install() and uninstall() methods Some modules have more needs than just using PrestaShop\u0026rsquo;s features in special ways. Your module might need to perform actions on installation, such as checking PrestaShop\u0026rsquo;s settings or to registering its own settings in the database. Likewise, if you changed things in the database on installation, it is highly recommended to change them back (or remove them) when uninstalling the module.\nThe install() and uninstall() methods make it possible to control what happens when the store administrator installs or uninstalls the module. They must be included in the main class' block of code (in our example, the MyModule class) – at the same level as the constructor method.\nThe install() method Here is the bare minimum for the install() method:\n\u0026lt;?php public function install() { return parent::install(); } In this first and extremely simplistic incarnation, this method does the minimum needed: return true returned by the Module class' install() method, which returns either true if the module is correctly installed, or false otherwise. As it is, if we had not created that method, the superclass' method would have been called instead anyway, making the end result identical. Nevertheless, we must mention this method, because it will be very useful once we have to perform checks and actions during the module\u0026rsquo;s installation process: creating SQL tables, copying files, creation configuration variables, etc.\nSo for example how you can expand the install() method to perform installation checks. In the following example, we perform the following tasks during installation:\n Check that the Multistore feature is enabled, and if so, set the current context to all shops on this installation of PrestaShop. Check that the module parent class is installed. Check that the module can be attached to the leftColumn hook. Check that the module can be attached to the header hook. Create the MYMODULE_NAME configuration setting, setting its value to \u0026ldquo;my friend\u0026rdquo;.  \u0026lt;?php public function install() { if (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); } if (!parent::install() || !$this-\u0026gt;registerHook(\u0026#39;leftColumn\u0026#39;) || !$this-\u0026gt;registerHook(\u0026#39;header\u0026#39;) || !Configuration::updateValue(\u0026#39;MYMODULE_NAME\u0026#39;, \u0026#39;my friend\u0026#39;) ) { return false; } return true; } If any of the lines in the testing block fails, the method returns false and the installation does not happen.\nThe uninstall() method Here is the bare minimum for the uninstall() method:\n\u0026lt;?php public function uninstall() { return parent::uninstall(); } Building on this foundation, we want an uninstall() method that would delete the data added to the database during the installation ( MYMODULE_NAME configuration setting). This method would look like this:\n\u0026lt;?php public function uninstall() { if (!parent::uninstall() || !Configuration::deleteByName(\u0026#39;MYMODULE_NAME\u0026#39;) ) { return false; } return true; } The Configuration object As you can see, our three blocks of code (__construct(), install() and uninstall()) all make use of a new object, Configuration.\nThis is a PrestaShop-specific object, built to help developers manage their module settings. It stores these settings in PrestaShop\u0026rsquo;s database without require to use SQL queries. Specifically, this object handles data from the ps_configuration database table.\nThe main methods So far, we\u0026rsquo;ve used three methods, to which we\u0026rsquo;ll add a fourth one in the list below:\n Configuration::get('myVariable'): retrieves a specific value from the database. Configuration::getMultiple(array('myFirstVariable', 'mySecondVariable', 'myThirdVariable')): retrieves several values from the database, and returns a PHP array. Configuration::updateValue('myVariable', $value): updates an existing database variable with a new value. If the variable does not yet exist, it creates it with that value. Configuration::deleteByName('myVariable'): deletes the database variable.  There are many more, such as getInt() or hasContext(), but these four are the ones you will use the most.\nNote that when using updateValue(), the content of $value can be anything, be it a string, a number, a serialized PHP array or a JSON object. As long as you properly code the data handling function, anything goes. For instance, here is how to handle a PHP array using the Configuration object:\n\u0026lt;?php // Storing a serialized array. Configuration::updateValue(\u0026#39;MYMODULE_SETTINGS\u0026#39;, serialize(array(true, true, false))); // Retrieving the array. $configuration_array = unserialize(Configuration::get(\u0026#39;MYMODULE_SETTINGS\u0026#39;)); As you can see, this in a very useful and easy-to-use object, and you will certainly use it in many situations. Most native modules use it too for their own settings.\nHandling the multistore feature What is a module compatible with the multistore feature? It is a module that can be configured differently from one store to another. Also the same module can have a shared configuration between all shops. Finally, the module must be able to be activated on one shop and deactivated on another.\nBy default, all these methods work within the confines of the current store context, whether PrestaShop is using the multistore feature or not.\nHowever, it is possible to work outside of the current context and impact other known stores. This is done using three optional parameters, which are not presented in the list above:\n id_lang: enables you to force the language with which you want to work. id_shop_group: enables you to indicate the shop group of the target store. id_shop: enables you to indicate the id of the target store.  By default, these three parameters use the values of the current context, but you can use them to target other stores.\nNote that it is not recommended to change the default values of these variables, even more so if the module you are writing is to be used on other stores than your own. They should only be used if the module is for your own store, and you know the id and shop group of all of your shops.\nRetrieving external values from the ps_configuration data table You are not limited to your own variables: PrestaShop stores all its own configuration settings in the ps_configuration table. There are literally hundreds of settings, and you can access them just as easily as you would access your own. For instance:\n Configuration::get('PS_LANG_DEFAULT'): retrieves the ID for the default language. Configuration::get('PS_TIMEZONE'): retrieves the name of the current timezone, in standard TZ format (see: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). Configuration::get('PS_DISTANCE_UNIT'): retrieves the default distance unit (\u0026ldquo;km\u0026rdquo; for kilometers, etc.). Configuration::get('PS_SHOP_EMAIL'): retrieves the main contact e-mail address. Configuration::get('PS_NB_DAYS_NEW_PRODUCT'): retrieves the number of days during which a newly-added product is considered \u0026ldquo;New\u0026rdquo; by PrestaShop.  Dive into the ps_configuration table in order to discover many other settings!\nThe Shop object Another of install()\u0026rsquo;s lines is this:\n\u0026lt;?php if (Shop::isFeatureActive()) { Shop::setContext(Shop::CONTEXT_ALL); } As said earlier, here we check that the Multistore feature is enabled, and if so, set the current context to all shops on this installation of PrestaShop.\nThe Shop object helps you manage the multistore feature. We will not dive in the specifics here, but will simply present the two methods that are used in this sample code:\n Shop::isFeatureActive(): This simply checks whether the multistore feature is active or not, and if at least two stores are presently activated. Shop::setContext(Shop::CONTEXT_ALL): This changes the context in order to apply coming changes to all existing stores instead of only the current store.  The Context is explained in more details in the \u0026ldquo;Using the Context Object\u0026rdquo; chapter of this Developer Guide.\nThe icon file To put the finishing touch to this basic module, you should add an icon, which will be displayed next to the module\u0026rsquo;s name in the back office modules list. In case your module is made for a prominent service, having that service\u0026rsquo;s logo visible brings trust. Make sure you do not use a logo already used by one of the native modules, or without authorization from the owner of the logo/service.\nThe icon file must respect these requirements:\n It must be placed on the module\u0026rsquo;s main folder. 32*32 PNG image. Named logo.png. Tip: There are many free 32*32 icon libraries available. Here are a few: https://www.fatcow.com/free-icons (very close to the FamFamFam one) or http://www.iconarchive.com/show/danish-royalty-free-icons-by-jonas-rask.html (Danish Royalty Free)  Installing the module Now that all basics are in place, reload the back office\u0026rsquo;s \u0026ldquo;Modules\u0026rdquo; pages, in the \u0026ldquo;Front office features\u0026rdquo; section, you should find your module. Install it (or reset it if it is already installed).\nDuring the module\u0026rsquo;s installation, PrestaShop automatically creates a small config.xml file in the module\u0026rsquo;s folder, which stores the configuration information. You should be very careful when editing by hand.\nKeeping things secure Once your module is online, its files could be accessed by anyone from the Internet. Even if they cannot trigger anything but PHP errors, you might want to prevent this from happening.\nYou can achieve this by adding an index.php file at the root of any module folder you create. Here is a suggestion for what to put in the file.\n\u0026lt;?php header(\u0026#39;Expires: Mon, 26 Jul 1997 05:00:00 GMT\u0026#39;); header(\u0026#39;Last-Modified: \u0026#39; . gmdate(\u0026#39;D, d M Y H:i:s\u0026#39;) . \u0026#39; GMT\u0026#39;); header(\u0026#39;Cache-Control: no-store, no-cache, must-revalidate\u0026#39;); header(\u0026#39;Cache-Control: post-check=0, pre-check=0\u0026#39;, false); header(\u0026#39;Pragma: no-cache\u0026#39;); header(\u0026#39;Location: ../\u0026#39;); exit; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/backup/",
	"title": "How to backup PrestaShop",
	"tags": [],
	"description": "",
	"content": "How to backup PrestaShop Before starting anything, you must think first about safety. Any modification made on a shop could break it, so you must make sure all your data has been backed up before going further. This basically implies saving two things: your files and your database.\nWe will give you all the details you may need to run an upgrade, but we can’t be held responsible for any damage caused to your shop during the process. That’s why we strongly recommend you to follow this backup step.\nFile backup The first elements to backup are the files on the web server where you have deployed your PrestaShop. The PrestaShop folder not only contains the source code, but also your modules \u0026amp; themes, pictures, and all other resources needed to run your shop successfully.\nCopy files To complete this step, your shop folder must be copied somewhere else. Although it can be simply copied on another folder on your server, making an additional copy of your files on another computer is a nice additional security measure. To do so, connect to your server using an FTP, SSH or RDP connection (depending on your server and hosting provider), copy the files in another location, then download them on your computer. Note that depending on the number of files and your internet connection, this may take a few hours to complete. But if you’re an advanced user and have a complete access to your server, the next part may help you go faster.\nBonus: Compress your files before download As said before, downloading the whole PrestaShop folder one file at a time will take a long time to complete. If you can run commands on your server, you can make a backup faster by compressing the whole content in a single archive file, then downloading this file locally.\n  On Windows-based servers, this requires a remote desktop access. Once logged on your remote environment, use the Windows explorer to reach your www folder and compress all its content into a ZIP file.\n  On Linux-based servers, you need to access your server terminal using SSH. Once logged in, reach your folder and use the following command to create a TAR file:\n  tar -czf \u0026lt;file_name\u0026gt;.tar \u0026lt;folder_to_save\u0026gt; For instance:\ntar -czf backup.tar /var/www/html When your archive is ready, you may copy it on your computer.\nDatabase backup The database on which PrestaShop runs must be saved as well. There are many ways to get a dump of the database content, and we cannot cover all of them. Feel free to use your tools, we just cover the main ones here. You can consider your dump is complete when you get a SQL file with the structure AND the content of each table in it.\nUsing MySQL client in command line Using mysqldump is the most straightforward way to make a full backup of a specific database. In a Windows or Linux terminal, run the following command to create a file dump.sql with your database structure \u0026amp; data:\nmysqldump yourdbname \u0026gt; dump.sql With yourdbname an example name for the PrestaShop database.\nYour server is likely to require credentials. These details can also be provided as parameters:\nmysqldump -h\u0026lt;IP_or_hostname\u0026gt; -u\u0026lt;user\u0026gt; -p db1 \u0026gt; dump.sql If you do not remember your database name or credentials, you can find them in your configuration files:\n PrestaShop 1.6: config/settings.inc.php PrestaShop 1.7: app/config/parameters.php  More details about backup \u0026amp; recoveries with MySQL binaries can be found on the official documentation.\nPhpMyAdmin (web interface) PhpMyAdmin, provided by several hosting providers, offers another way to get a complete dump of your database.\nLog on your PhpMyAdmin interface, select the database where PrestaShop is installed and chose the “export” tab.\n  Exporting a database in SQL format   We advise to select the “custom” method, as it offers more options to customize your dump. Make sure all your tables, views, etc are selected for backup. To get the same file content as the mysqldump method, the following options should be checked as well:\n Use LOCK TABLES statement Add DROP TABLE / VIEW / PROCEDURE / FUNCTION / EVENT / TRIGGER statement  Click of “Go”, wait for the dump to be generated, then download it.\nOther MySQL clients As said at the beginning of this chapter, there are a lot of ways to connect to a MySQL server. Many different softwares also provide a dump or export option as well.\n MySQL Workbench: https://dev.mysql.com/doc/workbench/en/wb-migration-wizard.html Navicat MySQL: https://www.navicat.com/manual/online_manual/en/navicat/win_manual/#/dump_execute_sql Adminer, a very easy to use and complete MySQL client in php: https://www.adminer.org/ Sequel Pro (Mac): https://www.sequelpro.com/ \u0026hellip;  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/create-empty-state/",
	"title": "How to create an Empty state",
	"tags": [],
	"description": "",
	"content": "How to create an Empty state  Grid component allows developer to configure Empty state to make empty grid look more appealing for user.\nCreating an Empty state By default, when Grid is empty user sees it as:\n  Empty Suppliers grid   Unfortunately, it\u0026rsquo;s not very engaging, so let\u0026rsquo;s create Empty state for it! There are a few steps you have to follow:\n You have to create a template for it and put it in src/PrestaShopBundle/Resources/views/Admin/Common/Grid/Blocks/EmptyState directory, so Grid component can locate it. Your Empty state template must be named after Grid id (e.g. if your Grid\u0026rsquo;s ID is supplier then template name must be supplier.html.twig).  In Empty state template you can put whatever you want to: an image, some helpful text, a form \u0026hellip; but it\u0026rsquo;s a good practice to describe what data grid displays. See Suppliers grid empty state as an example below.\n  Empty state in Suppliers grid   If your Grid does not define it\u0026rsquo;s own Empty state template, then it uses _default.html.twig template that can be found at src/PrestaShopBundle/Resources/views/Admin/Common/Grid/Blocks/EmptyState. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/how-to-create-your-own-unit-tests/",
	"title": "How to create your own unit tests",
	"tags": [],
	"description": "",
	"content": "How to create your own unit tests or add tests to PrestaShop Unit tests are great if you want to validate the behavior of a single unit of code. By \u0026ldquo;unit of code\u0026rdquo; we usually mean a class although it could also be a script.\nCreating a Unit test Everything is explained in the PHPUnit 5.7 documentation.\nFor unit tests, we strongly encourage you to base your test on the PHPUnit\u0026rsquo;s TestCase class only.\nFor instance:\n\u0026lt;?php namespace Tests\\Unit\\Foo; use PHPUnit\\Framework\\TestCase; class BarTest extends TestCase { /* ... */ } Unit tests should be located into tests/Unit folder and follow the same path as the tested class: if a class is located into src/Core/Foo/Baz, the unit test should be into tests/Unit/Core/Foo/Baz folder.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/how/edit-on-github/",
	"title": "How to edit a page on GitHub",
	"tags": [],
	"description": "",
	"content": "How to edit a page on GitHub Editing a page on GitHub is the most straight-forward way of contributing content to PrestaShop DevDocs.\n The good: you don\u0026rsquo;t need to have anything installed. The bad: even if GitHub provides a preview of your markdown code, you won\u0026rsquo;t be able to see exactly how it will look like on the site (for instance, shortcodes aren\u0026rsquo;t interpreted by the GitHub preview).  For this tutorial, you will need a GitHub account (free). If you don\u0026rsquo;t have one, you can create it for free.\nTo start, click on the \u0026ldquo;Improve this page\u0026rdquo; at the top right of the page you want to improve.\nFork (first time only) The first time you edit this project, you will see a message prompting you to create a fork of the documentation on GitHub:\nOnce you click on the \u0026ldquo;Fork this repository\u0026rdquo; button, you can proceed to edit the file.\nEditing the file You\u0026rsquo;ll now be able to edit the file using the GitHub editor. Remember that pages are written using Markdown, a lightweight markup language.\nWhen you are done, scroll down to the bottom of the page to submit your changes. Writing a message explaining what you changed will help everyone keep track of history:\nIncidentally, once your change is merged, this description will appear at the bottom of the page:\nOnce you click on \u0026ldquo;Propose this change\u0026rdquo;, you\u0026rsquo;ll be able to see a diff of your changes compared to the current version.\nCreating a Pull Request Click on \u0026ldquo;Create Pull Request\u0026rdquo; to start drafting a new Pull Request.\nConfirm the creation by clicking again on \u0026ldquo;Create Pull Request\u0026rdquo;.\nThat\u0026rsquo;s it, your Pull Request has been created! The team will review it, and once it is approved and merged it will be available for everyone.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/how-to-launch-tests/",
	"title": "How to execute tests",
	"tags": [],
	"description": "",
	"content": "How to execute the PrestaShop automatic test suite Executing Unit/integration test suites At least four test suites are available, testing different parts of PrestaShop:\n Legacy tests: heritage from PrestaShop 1.6: mix of unit, integration and functional tests; Legacy controllers: added to help with the Symfony migration, ensures that old Back Office controllers are still runnable; Admin tests: specific to PrestaShop 1.7, tests src/Core and src/Adapter classes; Symfony specific tests: specific to PrestaShop 1.7, test classes from src/PrestaShopBundle  Each suite needs a specific PHPUnit configuration. This is why each test suite has a specific composer command:\n composer phpunit-legacy composer phpunit-controllers composer phpunit-admin composer phpunit-sf  You can execute the entire PHPUnit test suites using the composer test-all command. Executing the Functional test suites This is thoroughly explained in the Puppeteer tests Readme file.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/mail-templates/extend-a-layout-from-module/",
	"title": "How to extend a layout in a theme from a module",
	"tags": [],
	"description": "",
	"content": "How to extend a layout in a theme from a module Sometimes you may want to use the provided email theme but you would like to add some information or change the header/footer. One of the advantages of new theme layouts is that they use Twig so you can take advantage of its extension and blocks features.\nLayout {% extends \u0026#39;@MailThemes/modern/core/order_conf.html.twig\u0026#39; %}{% block content %}{{ parent() }}\u0026lt;table width=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34; style=\u0026#34;border-collapse: collapse; mso-table-lspace: 0pt; mso-table-rspace: 0pt; direction: ltr; font-size: 0px; padding: 0 50px; text-align: center; vertical-align: top;\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;font-family:Open sans, arial, sans-serif;font-size:14px;line-height:25px;text-align:left;color:#555454;\u0026#34;\u0026gt; {{ \u0026#39;Thank you for purchasing this product on our store. Feel free to leave us a review if you are happy of this product:\u0026#39;|trans({}, \u0026#39;EmailsBody\u0026#39;, locale)|raw }}\u0026lt;a href=\u0026#34;{shop_url}/post_review\u0026#34;\u0026gt;{{ \u0026#39;Post a review\u0026#39;|trans({}, \u0026#39;EmailsBody\u0026#39;, locale)|raw }}\u0026lt;/a\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; {% endblock %}Using the hook Now you need to add your layout to the theme\u0026rsquo;s layout collection, in order to do so you will use the actionListMailThemes hook.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCatalogInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollectionInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeInterface; class my_email_theme_module { public function install() { return parent::install() // This class constant contains \u0026#39;actionListMailThemes\u0026#39;  \u0026amp;\u0026amp; $this-\u0026gt;registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function uninstall() { return parent::uninstall() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function enable() { return parent::enable() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function disable() { return parent::disable() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } /** * @param array $hookParams */ public function hookActionListMailThemes(array $hookParams) { if (!isset($hookParams[\u0026#39;mailThemes\u0026#39;])) { return; } /** @var ThemeCollectionInterface $themes */ $themes = $hookParams[\u0026#39;mailThemes\u0026#39;]; $theme = $themes-\u0026gt;getByName(\u0026#39;modern\u0026#39;); if (!$theme) { return; } // First parameter is the layout name, second one is the module name (empty value matches the core layouts)  $orderConfLayout = $theme-\u0026gt;getLayouts()-\u0026gt;getLayout(\u0026#39;order_conf\u0026#39;, \u0026#39;\u0026#39;); if (null === $orderConfLayout) { return; } //The layout collection extends from ArrayCollection so it has more feature than it seems..  //It allows to REPLACE the existing layout easily  $orderIndex = $theme-\u0026gt;getLayouts()-\u0026gt;indexOf($orderConfLayout); $theme-\u0026gt;getLayouts()-\u0026gt;offsetSet($orderIndex, new Layout( $orderConfLayout-\u0026gt;getName(), __DIR__ . \u0026#39;/mails/layouts/order_conf.html.twig\u0026#39;, \u0026#39;\u0026#39; )); } } You can then go to the \u0026ldquo;Design \u0026gt; Email Theme\u0026rdquo; page and preview the modern order_conf layout.\n  Your order_conf layout has been extended\u0026#39; layout list   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute-reporting-issues/",
	"title": "How to use GitHub to report an issue",
	"tags": [],
	"description": "",
	"content": "How to use GitHub to report an issue PrestaShop is using GitHub to track bugs and issues. This is the best place to describe bugs you are witnessing on your PrestaShop installation, and have the developers try to fix it.\nCreating your account To participate, you need to create an account to use the bug tracker.\nCreate your account here.\nFill all fields and validate your account request, then follow the different steps.\nOnce your account is validated, click here to log in.\nCreating an issue You can now create your first issue:\n Go to the list of issues Click on the \u0026ldquo;New issue\u0026rdquo; button on the right. Choose between a \u0026ldquo;Bug report\u0026rdquo;, or a \u0026ldquo;Feature request\u0026rdquo;, and click on \u0026ldquo;Get started\u0026rdquo;  A text editor appears:\nTo fill the required information, just use the text editor. You can use the \u0026ldquo;preview\u0026rdquo; tab to see how your issue will be published.\nThere are four main sections:\n Describe the bug, a clear and concise description of what the bug is. To Reproduce, describe the different steps and information to reproduce the issue. Screenshots, add screenshots in this section. Additional information, like your version of PHP and Mysql and your server configuration. Click the \u0026ldquo;Submit new issue\u0026rdquo; button when you are done.  Best practices for writing an issue When writing a bug report, please use these guidelines:\n Make sure you can reproduce your bug every time. Make sure your software is up to date.  Ideally, test an in-development version to see whether your bug has already been fixed.   Search the Forge to see whether your bug has already been reported. Write a clear summary. Write precise steps to reproduce. Be specific and verbose: do not fear to give details on how you did reproduce the bug.  After your steps, precisely describe the observed result and the expected result.    These are inspired by Mozilla\u0026rsquo;s own guidelines.\nGitHub provides very good documentation about how to write issues with its flavoured Markdown. It is possible to highlight code syntax, add pictures, or even to link issues and pull requests.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/image/",
	"title": "ImageColumn reference",
	"tags": [],
	"description": "",
	"content": "ImageColumn Type  This column is used to display an image from a row. You need to specify which field of the row contains the image source.\nAvailable options    Properties Type Expected value     src_field string required Indicates which field of the row contains the image source    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ImageColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $imageColumn = new ImageColumn(\u0026#39;flag\u0026#39;); $imageColumn-\u0026gt;setName(\u0026#39;Flag\u0026#39;); $imageColumn-\u0026gt;setOptions([ \u0026#39;src_field\u0026#39; =\u0026gt; \u0026#39;flag\u0026#39;, ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($imageColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/introduction/",
	"title": "Introduction to PrestaShop&#39;s Architecture",
	"tags": [],
	"description": "",
	"content": "Introduction to PrestaShop\u0026rsquo;s Architecture PrestaShop is a big project, with several moving parts. In this article you will learn how they are structured and how they work together.\nPart of this article was originally published in 2019 as a blog post. It has been updated and adapted for documentation purposes here. Overview   Basic overview of PrestaShop 1.7\u0026#39;s architecture   PrestaShop\u0026rsquo;s architecture can be separated in two main logical sections, represented as blue columns in the figure above:\n The Front Office (or \u0026ldquo;FO\u0026rdquo;) – the public-facing site of a shop, The Back Office (or \u0026ldquo;BO\u0026rdquo;) – where merchants manage their shop.  Each of these sections can be themselves separated in two parts, which are common to all web applications:\n The front-end – the part that essentially runs in the browser, The back-end – which runs in the server.  This separation has been depicted using a dotted horizontal line.\nBack-end If we analyze how the back-end is structured, we can find some common elements to BO and FO:\n Database Core Business Modules  Like most traditional web applications, PrestaShop is heavily Database-driven. This means that all data is stored there. Regardless of whether it\u0026rsquo;s used in the BO or FO, the database is the Single Source of Truth.\nIn the figure above, the database has been placed a little outside the diagram to point out to the fact that it\u0026rsquo;s a system of its own that could be on a separate server, in a cluster, etc. The purple cloud depicted above the Database is what we call the Core Business. It\u0026rsquo;s the big ensemble of code that manages what makes PrestaShop PrestaShop, also referred as \u0026ldquo;business logic\u0026rdquo;. It includes models, controllers, helper classes, and the like.\nPrestaShop controllers will generally output HTML pages, but on some cases they can output JSON or even XML. The structure of those pages is defined by Themes (depicted as pink blocks overlapping both the front-end and the back-end), which transform controller-provided data into HTML. This is true both for the FO and BO.\nAlthough PrestaShop 1.7 is bundled with default themes for FO and BO, only the FO supports third-party themes.\nPrestaShop provides two API interfaces:\n BO API – used to serve information to VueJS-based pages (currently Translations and Stock management), Web services – used to integrate 3rd party services.  While Web services can output XML or JSON data, the BO API is JSON-only.\nFinally, Modules are independent, optional packages that can extend and customize PrestaShop in many ways. They interact with the Core either by hooking into extension points which are placed throughout the code, or by replacing core components with their own.\nWhile in this diagram we have placed Modules on the Back-end side, they can actually have an impact on Front-end as well. Front-end On the front side, implementations can vary a lot depending on the theme. Some themes are HTML-based and rely on little amount of scripting. Other themes are more advanced and Javascript-heavy.\nThis is discussed in further detail in the Themes section.\nThe Core Business stack While controllers will be different in BO and FO, pretty much all of PrestaShop\u0026rsquo;s PHP code is shared between those two environments. This code is split in four logical subsystems:\n Legacy code – located in /classes and /controllers Core code – located in /src/Core Adapter code – located in /src/Adapter Symfony code (or \u0026ldquo;PrestaShop Bundle\u0026rdquo;) – located in /src/PrestaShopBundle  The Legacy subsystem contains the historical, non-namespaced code inherited from previous versions. It\u0026rsquo;s progressively being replaced since 1.6.1 by the Core subsystem, which uses namespaces and is based on SOLID principles.\nThe Adapter subsystem acts as a bridge to legacy classes, which are often static, in order to allow them to be injected in Core classes.\nFinally, the Symfony-based subsystem called PrestaShop Bundle is a Symfony bundle that contains Symfony-specific functionality like controllers, forms, views, etc.\nIn the following figure, we can appreciate the four subsystems described above:\n  The core business stack   Interaction between subsystems While this separation may seem excessively complex, it belongs to a transition phase that is necessary to allow the project to move forward progressively. Here\u0026rsquo;s how.\nNotice the dotted yellow zone labeled temporary code. It means that code within that zone will sooner or later be moved to the Core or PrestaShop Bundle stack. Once the zone it\u0026rsquo;s empty, it will be deleted. Of course, such a change won\u0026rsquo;t be done in a minor version, so you can expect these four stacks to be present for the whole lifetime of 1.7.\nIf you look closely at the relationships between each stack, you\u0026rsquo;ll see that code outside the temporary code zone does not interact directly with legacy classes. As explained before, the Adapter layer sits between the Legacy and the \u0026ldquo;new\u0026rdquo; code to ease up the transition of code from the Legacy stack to the Core stack.\nHow does that work? Whenever a Core (or PrestaShopBundle) class needs something provided by a Legacy class, instead of using the Legacy class directly, it delegates that task to an Adapter, which itself uses the Legacy class (see Adapter pattern).\nHere\u0026rsquo;s where it gets interesting. Generally, these Adapters implement an interface declared in Core (even though it hasn\u0026rsquo;t always been the case, new classes do). Making consumers of that Adapter depend on the interface instead of the Adapter class itself (see Dependency Inversion principle) will allow to reimplement Adapter classes in Core progressively, without having to change the existing code that depends on them.\nWhy not use the Legacy class directly?\nMost legacy classes are static, and since by definition they cannot be injected, it would result in coupled, untestable code. In addition, the ones that are not static generally still have too many responsibilities (see Single responsibility principle) and/or too many public methods or properties (see Open/closed principle), so they cannot be made to implement a proper interface.\n Controllers PrestaShop is based on the Model-View-Controller (MVC) pattern, where Controllers are in charge of handling requests and returning responses, ideally delegating the hard work on dedicated services.\nControllers are divided in two big families: those that handle requests in FO, and those that handle requests in BO.\n  Core controllers   Controllers can belong to either the Legacy subsystem or to the PrestaShop Bundle. The first ones are referred to as \u0026ldquo;legacy controllers\u0026rdquo; and the latter as \u0026ldquo;Symfony controllers\u0026rdquo;. However, Symfony controllers are only available in BO.\nFO Controllers FO controllers are all based on the FrontController class. Modules can declare FO controllers of their own, which must extend the ModuleFrontController class (which is based on FrontController as well).\nBO Controllers BO controllers are a little more complex, since they can be either legacy or Symfony based.\nLegacy BO controllers are based on the AdminController class, whereas Symfony controllers are based on the FrameworkBundleAdminController class. Modules can declare BO controllers of their own, and they can be either legacy or symfony based as well. Legacy module controllers must extend the ModuleAdminController class (which is based on AdminController), and Symfony modules must simply extend FrameworkBundleAdminController.\nFinally, some BO pages like Stocks and Translation are API based. These controllers are based on the ApiController class.\nAs the migration to Symfony progresses, legacy BO controllers are being migrated from the legacy stack to the PrestaShop Bundle stack. Once the BO migration is complete, there will no longer be any legacy controller in the BO.\nThere are no controllers for Web services. This system is mainly configuration-based and very tightly coupled to ObjectModel. Comparison table    Family Subsystem Type Base controller class     FO Legacy Native FrontController   Module ModuleFrontController (based on FrontController)   BO Legacy Native AdminController   Module ModuleAdminController (based on AdminController)   Symfony Native FrameworkBundleAdminController   Native (BO API) ApiController   Module FrameworkBundleAdminController    Themes Legacy controllers use Smarty for templating, while Symfony controllers use Twig.\nThere are two kinds of themes in PrestaShop: FO themes and BO themes.\nFO themes FO themes define the appearance of the Front Office.\nPrestaShop comes bundled with a default FO theme, called \u0026ldquo;Classic\u0026rdquo;, but merchant can choose to use a different theme. Hundreds of them are available for download on the Addons Marketplace.\nSince FO themes work on top of legacy controllers, they are based on the Smarty templating engine. They all integrate a shared core javascript library which is called core.js, which has jQuery 3 bundled in (or jQuery 2 before 1.7.7  ).\nClassic is based on Bootstrap 4 alpha 5. A great number of themes are based on it using the Child theme feature.\nUnfortunately, Classic cannot be updated to recent Bootstrap versions due to big breaking changes introduced by Bootstrap since the original release of PrestaShop 1.7.0. Additionally, FO themes can redefine the layout of modules by overriding their templates.\nBO themes BO themes define the appearance of the Back Office.\nEven though BO themes are not interchangeable, PrestaShop comes bundled with two of them: default and new theme.\nSo why are there two? Legacy controllers are based on Smarty, like FO controller. Symfony controllers, conversely, are based on the Twig templating engine. As a result, there\u0026rsquo;s a theme for each one: legacy controllers use the default theme, while Symfony ones use the new theme. As controllers are progressively being migrated to Symfony, templates are moved from the default to the new theme and converted from Smarty to Twig.\nIn addition, the default theme is based on Bootstrap 3, while the new theme is based on PrestaShop\u0026rsquo;s UI kit (available on GitHub), which itself is based on Bootstrap 4. They both integrate jQuery 3 since 1.7.7  .\nOn previous 1.7 versions, the default theme was based on jQuery 1. Mixed Smarty and Twig Here\u0026rsquo;s what was said when announcing the architecture of 1.7:\n Twig is Symfony\u0026rsquo;s templating language. In version 1.7, it will be used for all pages that are rewritten to use Symfony [\u0026hellip;], but NOT for the global interface (menu, header, etc.) nor the non-rewritten pages, which will still use Smarty. The two templating engines will be available, side by side, during the transition phase.\n This means that the global interface is handled by the default theme, even in Symfony pages. Because they use both Twig and Smarty, this partially explains why some Symfony pages may sometimes be slower than legacy ones.\nRest assured, this is a temporary issue which will be solved when everything has been migrated to Twig and Symfony.\n Finally, there\u0026rsquo;s Vue pages. Vue pages are hybrid: half-Symfony, half-API based BO pages. In those pages, the page\u0026rsquo;s skeleton is first rendered by a Symfony controller (therefore, based on the new theme), and then a VueJS application takes over in the browser and draws its content based on data sent by the BO API.\nAs stated before, currently only the Stock management and Translation pages are built on this technology. Even though we think that this is the way of the future, we find that going down this path in minor version releases would produce too many major extensibility and backwards incompatibility issues. Therefore, there will probably be no new Vue/BO API pages in 1.7.\nModules The Modules system provides a plug-in approach to added functionality. As explained before, it mainly relies on specific extension points called \u0026ldquo;Hooks,\u0026rdquo; but their influence and deeply rooted relationships can go much further than that.\nIf you look at the Modules block at the center of the figure at the top of the page, you\u0026rsquo;ll notice that there are lots of arrows coming and going from it. Let\u0026rsquo;s explore these relationships.\nLike we said, the main path for Module integration is Hooks, which are placed throughout the system. Modules can attach to them in order to provide or alter features.\nThere are two types of hooks:\n Display hooks – Integrated mainly (but not exclusively) in templates, they allow modules to inject content that will be displayed somewhere in a page. Action hooks – Allow modules to be informed of something happening in the system, and optionally alter the system\u0026rsquo;s behavior by modifying provided data.  The module system provides several other features:\n Module controllers – Modules can add new routes and custom pages in the FO or BO. Payment options – Payment modules can add payment options in the checkout process. Declaring and sharing services – Since 1.7.4, modules can use and declare Symfony services.  Modules can also be used to customize PrestaShop:\n Class override system – This system allows a module to replace any class in the Legacy stack. BO template overrides – Allows to replace templates from the new theme in the BO. Service overrides – Since 1.7.4, modules can replace Core services with their own. CSS and JS injection – Modules can also inject style and javascript code into a page.  In addition, modules can be customized by Themes. Themes supporting a given module can override the module\u0026rsquo;s own FO templates in order to improve their integration.\nAs you can see, the module system has many features, making modules very powerful. Modules have full access to the Core system, and even if modules submitted to the Addons Marketplace go through a quality and security review process, integration can go very deep into the Core. This power comes with a cost: the deeper the integration and customization, the more risk of upgrade and interoperability issues there is.\nDetailed diagram Now you know PrestaShop is much more complex than it can seem to be at first sight.\nRemember the overview at the top of the article? Have a look at this more detailed version now:\n  Comprehensive overview   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/link/",
	"title": "LinkColumn reference",
	"tags": [],
	"description": "",
	"content": "LinkColumn Type  This LinkColumn displays a raw field data encapsulated in a link (very useful for adding an edition link on a name, for example).\nAvailable options    Properties Type Expected value     field string required The record field name that the column displays.   route string required The route used to generate the link url.   route_param_name string required The parameter name used by the route to generate the url.   route_param_field string required The record field containing the route parameter.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\LinkColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $linkColumn = new LinkColumn(\u0026#39;name_link\u0026#39;); $linkColumn-\u0026gt;setName(\u0026#39;Name\u0026#39;); $linkColumn-\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;name\u0026#39;, \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_category_edit\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;categoryId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;id_category\u0026#39;, ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($linkColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/strategy/",
	"title": "Migration project and strategy",
	"tags": [],
	"description": "",
	"content": "This is a summary of the current Migration Strategy. It provides an overview of our current vision, in the end of this year 2020, of the Symfony Migration project.\nDifferent kind of pages Back-Office pages can be classified in four categories:\n Configuration / Settings Form pages  These pages allow the user to modify configuration settings in PrestaShop.\nListing pages  These pages allow the user to browse PrestaShop content using listings. These listings usually provide some actions the user can trigger, such as \u0026ldquo;enable/disable\u0026rdquo;, \u0026ldquo;delete\u0026rdquo;, \u0026ldquo;bulk delete\u0026rdquo;.\nAdd/Edit Form pages  These pages allow the user to create or edit records from PrestaShop data model (example: create/edit customers).\nOther pages  There are some pages that are unique: Carriers Edit page, Dashboard, Customer Service page \u0026hellip;\nSometimes a page will have mixed content. For example there are pages that provide two listings or one listing and one configuration form.\nWhere we started from In legacy pages, most of the time, these Back-office pages were structured following standard MVC PrestaShop model:\n smarty templates (View) a Controller with sometimes a lot of logic in it (Controller) some business logic classes (Model) ObjectModel classes with lot of logic in it (Model)  We believe PrestaShop project has grown too big to follow this 3-layers model, rather fitted for small applications. We have chosen to introduce more architecture layers.\nThe beginning of the Migration project: Configuration Form The Migration project started by migrating Configuration Form pages.\nThe chosen structure to handle such pages was the following:\n A View layer: Twig template, rendering manually the Symfony form A Controller layer: Symfony Controller empty of business logic (following the \u0026ldquo;Thin Controller, Fat Model\u0026rdquo; principle), in charge of controlling the View, formatting data, handling security and routing In Model layer: Symfony Form is built and managed by a FormHandler Also part of the Model layer, DataProvider is in charge of data retrieval and saving the data  Since the DataProvider interacts with ObjectModel, it belongs to Adapter namespace.\nPhase 2: listings For migrating Listing pages, the Grid component was built.\nThe chosen layer structure to handle such pages was the following:\n View layer: Twig template, using Grid Twig template Symfony Controller layer empty of business logic, in charge of controlling the View, formatting data, handling security and routing In Application layer, we have the Grid component which requires a GridDefinition configures the Grid and a GridFactory to build it Data is provided by a QueryBuilder, able to handle filters for search requests. This is the Model layer.  If the Grid provides some actions, they are handled by dedicated Controller Actions.\nHow Grid interacts with the legacy Model The QueryBuilder ignores ObjectModel and use a Doctrine Connection to query directly the database. So there is no interaction with legacy code.\nHowever the Grid Actions use ObjectModel, for example to enable/disable a Category status. In the beginning we used Adapter classes to handle these, but we could see that once again we were coupling legacy code with migrated code.\nThis is when we decided to introduce CQRS.\nPhase 3: CQRS We wanted to build a strong frontier between migrated code and legacy code. Since re-writing all the code would be too long, we needed to continue relying on the business logic legacy code to power PrestaShop.\nWe however wanted to interact with it in a way that would allow us, in the future, to easily unplug it and replace it with a new implementation.\nSo we decided to introduce CQRS and a Domain.\nCQRS was introduced into PrestaShop architecture in the following manner:\nThe Application layer (Forms, Controllers, Views \u0026hellip;) dispatches Queries and Commands to the Domain to be handled, unaware of the inner workings of this domain.\nInside the domain are QueryHandlers and CommandHandlers that handle dispatched Queries and Commands. For now, they do use PrestaShop legacy business logic to handle it. This means classes like ObjectModel, Cart, Product are still being used inside migrated pages.\nThe communication between the two layers is performed by CommandBus and QueryBus, which carry the Commands and Queries.\nSince the Handlers use legacy logic, they belong to the Adapter namespace. In the future they will be replaced with new implementations. The replacement will be very easy: a new Handler will be plugged in, previous Handler will be removed. No modification will be required in the code.\nSo the structure for a Grid action, using CQRS, is the following:\n Symfony Controller layer empty of business logic, in charge of controlling the View, formatting data, handling security and routing The Controller dispatches a Command to perform the action Command goes through the CommandBus and is handled by a Handler Handler, in Domain (= Model layer) performs the business logic needed  So \u0026ldquo;migrating a Grid action\u0026rdquo; means to \u0026ldquo;move the legacy logic into a Handler and building a Symfony layer on top of it\u0026rdquo;\nPhase 4 : Add/Edit Form pages These pages are form leveraging the concepts of CQRS.\nYou can read more about it by clicking on this link.\n View layer: Twig template, rendering manually the Symfony form Symfony Controller layer empty of business logic, in charge of controlling the View, formatting data, handling security and routing Application layer:   Symfony Form is built by a FormBuilder and managed by a FormHandler a FormDataProvider is in charge of data retrieval a FormDataHandler is in charge of validating and dispatching a Command to perform the action  Domain / Model layer:   Command goes through the CommandBus and is handled by a Handler Handler performs the business logic needed  So \u0026ldquo;migrating a legacy Add/Edit page\u0026rdquo; means to \u0026ldquo;move the legacy logic into a Handler and building a Symfony Form on top of it with its management logic\u0026rdquo;.\nForm Theme We dont want to render manually Form inputs, so we now aim to build a Twig Form Theme allowing us to render all of our Symfony forms with a single block\n{{ form_widget(form) }} Towards a Core domain Between phase 1 and phase 4, two years passed. Two years where we experimented, explored, struggled and we got the hang of what was needed for PrestaShop to move forward.\nWe now have a better understanding of what the direction we are aiming for. We now know we want to build a full Core Domain for the future of PrestaShop.\nThe future PrestaShop architecture is based on 5 key elements:\n  Future architecture overview    Core Domain Front-end applications Contracts and Tools (SDKs) APIs Extensions  The Core sits in the back-end and is at the center of it all. It accounts for all the business needs and use cases that PrestaShop is capable of doing (managing products, shopping carts, orders, etc.). The Core is domain-oriented, meaning that it is built around business use cases, expressed in an ubiquitous language. The Core is also master of its own Domain; in order to let it be the guardian of system-wide coherence, it has to be isolated from other services and be the only one capable of performing state transitions. Other services can only interact with the Core through well-defined interfaces, that we call the Core API. Incidentally, this also means that Core behavior can be extended, not modified, by other services or at least not in a way that it puts system coherence at risk. In addition, the Core is designed to be easily testable and is covered by automated tests.\nIn the future architecture, the Back Office (BO) and the Front Office (FO) are independent front-end applications, each one running entirely on the browser. They are fully component-based (our framework of choice is VueJs, and built using separate toolsets called Software Development Kits (SDKs): one for the FO, one for the BO. These SDKs would not only include reusable components, but also bidirectional communication channels based on stable contracts, both within the front-end application (events) as well as with the back-end (through APIs). The BO SDK also integrates the UI Kit, which provides an uniform style for the whole Back Office.\nThe Core and FO/BO applications communicate through two separate APIs, namely the FO API and the BO API. These APIs serve two distinct purposes: while the FO API is public and designed to serve customer-facing applications (e.g. the FO application, but also other custom clients, like mobile apps or Point of Sales in physical stores), the BO API is protected by access rights (much like the current Web services) and is meant to power the BO application, as well as third party integrations like ERPs. In order to maximize forward compatibility, APIs and SDKs are versioned.\nOf course, the future architecture supports Extensions, which can be placed all over the system. Modules can hook on to existing features or add new ones, either on the front-end applications as well as in the back-end (for data processing). On the front-end, Modules are based on the FO/BO SDKs, whereas server-side they are built on top of the Back-end SDK. While Front-end SDKs allow Modules to interact with front-end applications and retrieve data through PrestaShop\u0026rsquo;s APIs, the Back-end SDK provides access to the Core API, which allows Modules to query data directly from the Core, perform state transitions, extend existing API endpoints and even create new ones. In order to ensure system stability, Extensions can only interact with PrestaShop through APIs and SDKs.\nFinally, Themes are a particular kind of extension that sits on top of the front-end application and that defines the layout and style for components provided by the application, FO SDK, and any installed Modules.\nMigration as an introduction to the Core Our Handlers started as \u0026ldquo;place where we put the legacy code we dont have the time to migrate now\u0026rdquo;. They must now become interfaces for the Core domain, defining the future API endpoints. You could think of them as Controllers for the Domain, and consequently they will become empty of business logic, only focused on validating incoming Commands and Queries and formatting the data in both directions.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/hook/register-new-hook/",
	"title": "Register a new hook",
	"tags": [],
	"description": "",
	"content": "How to register a new Hook in PrestaShop This is basically three steps:\n dispatch the hook in the code (in templates or PHP classes/files); update the hooks xml definition of Installer; update the hooks table for \u0026ldquo;Auto Upgrade\u0026rdquo; system;  Dispatching hooks Most of the time, you will dispatch the hook using an instance of HookDispatcher. It can be retrieved from the service container and/or injected, as it\u0026rsquo;s done for example in Form Handlers:\n\u0026lt;?php final class FormHandler extends AbstractFormHandler { /* [...] */ public function getForm() { $formBuilder = $this-\u0026gt;formFactory-\u0026gt;createBuilder() -\u0026gt;add(\u0026#39;general\u0026#39;, GeneralType::class) -\u0026gt;add(\u0026#39;upload_quota\u0026#39;, UploadQuotaType::class) -\u0026gt;add(\u0026#39;notifications\u0026#39;, NotificationsType::class) -\u0026gt;setData($this-\u0026gt;formDataProvider-\u0026gt;getData()) ; $this-\u0026gt;hookDispatcher-\u0026gt;dispatchWithParameters( \u0026#39;displayAdministrationPageForm\u0026#39;, [\u0026#39;form_builder\u0026#39; =\u0026gt; \u0026amp;$formBuilder] ); return $formBuilder-\u0026gt;setData($formBuilder-\u0026gt;getData())-\u0026gt;getForm(); } /* [...] */ } Hooks definition file During the installation, hooks listed in the install-dev/data/xml/hook.xml file are stored on database and made available in PrestaShop. Even if this step is not a requirement – hooks can be declared from templates or generated dynamically – it\u0026rsquo;s a good practice to do it. Also, every hook registered in Database will be displayed in the Hook debugger, so it will help the developer figure out which hooks are available.\nEach hook has a name, a title and a definition. They are identified by an additional id attribute in XML, which is the same as its name.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;entity_hook\u0026gt; \u0026lt;fields id=\u0026#34;name\u0026#34;\u0026gt; \u0026lt;field name=\u0026#34;name\u0026#34;/\u0026gt; \u0026lt;field name=\u0026#34;title\u0026#34;/\u0026gt; \u0026lt;field name=\u0026#34;description\u0026#34;/\u0026gt; \u0026lt;/fields\u0026gt; \u0026lt;entities\u0026gt; \u0026lt;hook id=\u0026#34;...\u0026#34;\u0026gt; \u0026lt;name\u0026gt;...\u0026lt;/name\u0026gt; \u0026lt;title\u0026gt;...\u0026lt;/title\u0026gt; \u0026lt;description\u0026gt;...\u0026lt;/description\u0026gt; \u0026lt;/hook\u0026gt; \u0026lt;hook id=\u0026#34;actionMaintenancePageFormSave\u0026#34;\u0026gt; \u0026lt;name\u0026gt;actionMaintenancePageFormSave\u0026lt;/name\u0026gt; \u0026lt;title\u0026gt;Processing Maintenance page form\u0026lt;/title\u0026gt; \u0026lt;description\u0026gt;This hook is called when the Maintenance Page form is processed\u0026lt;/description\u0026gt; \u0026lt;/hook\u0026gt; \u0026lt;/entities\u0026gt; \u0026lt;/entity_hook\u0026gt; \u0026lt;/xml\u0026gt;  Always add new hooks at the bottom of the list, as hooks are registered sequentially. Prepare database update for auto upgrades The last step is to describe the update process for the auto upgrade module – essentially, the insertion of new hooks in hooks table. Locate the X.Y.Z.sql file that refers to the PrestaShop version that will include your change: for instance, if the release expected to include this change is 1.7.5.0, locate that file in install-dev/upgrade/sql folder.\nThis process is explained here: Structure and content upgrades Then add the corresponding SQL commands to add new hooks:\nINSERT IGNORE INTO `PREFIX_hook` (`id_hook`, `name`, `title`, `description`, `position`) VALUES (NULL, \u0026#39;displayAdministrationPageForm\u0026#39;, \u0026#39;Manage Administration Page form fields\u0026#39;, \u0026#39;This hook adds, update or remove fields of the Administration Page form\u0026#39;, \u0026#39;1\u0026#39;), (NULL, \u0026#39;actionMaintenancePageFormSave\u0026#39;, \u0026#39;Processing Maintenance page form\u0026#39;, \u0026#39;This hook is called when the Maintenance Page form is processed\u0026#39;, \u0026#39;1\u0026#39;); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/setting-up-your-local-environment/",
	"title": "Setting up your local environment",
	"tags": [],
	"description": "",
	"content": "Setting up your local environment Now that you intend to building a theme for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your files on your online server in order to test your changes. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Having a local environment is the essential first step in the path of web development.\nThe following content assumes you’re a developer and you want to create a theme or a module. Installing PrestaShop We advise you to install PrestaShop using Git and Composer.\nOpen a command line on your (empty) working directory, then:\n  Clone PrestaShop\ngit clone https://github.com/PrestaShop/PrestaShop.git   Install dependencies\ncomposer install   Using git you can choose your PrestaShop version:\ngit checkout 1.7.2.0 Also we would warn you to test your final result with a zip release, just for safety (since vendor version might be slightly different).\nIf you haven’t done it yet, we strongly recommend you to read our article Set Up Your Git For Contributing Building your .gitignore file A gitignore file is a must-have for any Git-versioned project, as it specifies intentionally untracked files that Git should ignore.\nWhat to ignore Generally, you shouldn’t version the following types of files:\n Temporary files (such as cache files) Generated files (such as minified CSS or retrieved XML files) Files with credentials or personal information (such as settings.inc.php) OS and IDE-related files (such as .DS_Store or .idea/) assets/css/* assets/js/* node_modules/  We suggest that you build your own using https://gitignore.io.\nIf you are building a full project for a client, you can read our article on building a gitignore for PrestaShop. Create your theme from the Classic Theme When you want to create a theme, the best way is to use the Classic theme (included with PrestaShop) as a base.\nCreate a new folder under themes/, and copy the contents of classic in it.\nCreate your theme.yml file First of all, you need to rename config/theme.dist.yml to config/theme.yml and edit it according to the name of your theme.\nname:YOUR_THEME_DIRECTORY_NAMEdisplay_name:YOUR THEME NAMEversion:1.0.0author:name:\u0026#34;PrestaShop Team\u0026#34;email:\u0026#34;pub@prestashop.com\u0026#34;url:\u0026#34;https://www.prestashop.com\u0026#34;meta:compatibility:from:1.7.3.0to:~"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/system-requirements/",
	"title": "System requirements for PrestaShop 1.7",
	"tags": [],
	"description": "",
	"content": ".h-version-titles th:not(:first-child) { text-align: center; } .support-yes, .example-yes { background-color: #8ce48c; text-align: center; } .support-no, .example-no { background-color: #e89b9b; } .example-yes, .example-no { display: inline-block; width: 1.1rem; height: 1.1rem; margin-bottom: -2px; }  System requirements for PrestaShop 1.7 PrestaShop needs the following server configuration in order to run:\n System: Unix, Linux or Windows. Web server: Apache Web Server 2.2 or any later version. PHP: We recommend PHP 7.1 or later. See the compatibility chart below for more details. MySQL: 5.6 minimum, a recent version is recommended. Server RAM: The more the merrier. We recommend setting the memory allocation per script (memory_limit) to a minimum of 256M.  PrestaShop can also work with Nginx 1.0 or later.\nHow to verify your server meets PrestaShop\u0026rsquo;s requirements You can use our system requirements tool to easily check if your environment fulfills PrestaShop\u0026rsquo;s requirements. Here\u0026rsquo;s how:\n Download the latest version from GitHub. Extract the zip file. Upload the phppsinfo.php file to your server and put it inside your current shop\u0026rsquo;s directory or the one where you intend to install it. Open it up on your browser (http://your-domain.com/path-to-your-prestashop/phppsinfo.php). Type in the login and password if prompted (use prestashop for both).  You\u0026rsquo;ll get a web page detailing requirements and recommendations, and how your server does compared to them:\n  System requirements tool   PHP requirements PHP compatibility chart     PHP Version  PrestaShop Version \u0026le;\u0026nbsp;5.1 5.2 5.3 5.4 5.5 5.6 7.0 7.1 7.2 7.3 7.4 \u0026ge;\u0026nbsp;8.0     1.6.1.x No Yes Yes Yes Yes Yes Yes  Recommended version  No No No No   1.7.0 ~ 1.7.3 No No No Yes Yes Yes Yes  Recommended version  No No No No   1.7.4 No No No No No Yes Yes  Recommended version  No No No No   1.7.5 ~ 1.7.6 No No No No No Yes Yes Yes  Recommended version  No No No   1.7.7 No No No No No No No Yes Yes  Recommended version  No No   1.7.8 No No No No No No No Yes Yes Yes  Recommended version  No    Legend:\n = Recommended version Yes = Supported No = Not supported\nPrestaShop needs a few additions to PHP and MySQL in order to fully work. Make sure that your PHP configuration has the following extensions and settings configured:\nExtensions  CURL. The Client URL extension is used to download remote resources like modules and localization packages. DOM. The DOM extension is needed to parse XML documents. PrestaShop uses it for various functionalities, like the Store Locator. It is also used by some modules, as well as the pear_xml_parse library. Fileinfo. The File information extension is used to find out the file type of uploaded files. GD. The GD extension is used to create thumbnails for the images that you upload. Intl. The Internationalization extension is used to display localized data, such as amounts in different currencies. Mbstring. The Multibyte string extension to perform string operations everywhere. Zip. The Zip extension is used to expand compressed files such as modules and localization packages.  Settings  allow_url_fopen enabled. This directive enables PrestaShop to access remote files, which is an essential part of the payment process, among others things. It is therefore imperative to have it set to On.  Here is a section of the php.ini file (the configuration file for PHP):\nextension = php_mysql.dll extension = php_gd2.dll allow_url_fopen = On allow_url_include = Off "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/templates-layouts/",
	"title": "Templates &amp; layouts",
	"tags": [],
	"description": "",
	"content": "Templates \u0026amp; layouts PrestaShop template file are based on the Smarty 3 template engine.\nAll template files must be stored in the theme\u0026rsquo;s templates/ subfolder. For instance, the default theme has its template files in the following folder: /themes/classic/templates.\nDirectory structure Templates are then split between various subfolders.\n /_partials/ Code shared accross the whole site like header, footer or notifications. /catalog/ Product page, product/brand/supplier listing, search result and such. /checkout/ Cart, delivery options, payement options, order confirmations and such. /cms/ All the static content: contact, sitemap, CMS pages and such. /customer/ Everything about the customer\u0026rsquo;s account and its data. /errors/ All the error templates: not found, server error, forbidden and such. /layouts/ The theme layouts: 1, 2 or more columns, full width, everything is possible.  Template files should be written so that a single .tpl can generate a whole HTML page \u0026ndash; unless they are inside a _partials folder or subfolder (see our coding standard, linked from the Prologue chapter of this documentation).\nTemplates We make a clear difference between templates and layout.\n A template extends a layout. The layout hold the global organization of the page A template a specify to a feature: the product page for example  There are many templates is a PrestaShop theme, the main ones includes:\n index.tpl for the home page catalog/product.tpl for the product page catalog/listing/product-list.tpl for any product list page checkout/cart.tpl for the detailed cart checkout/checkout.tpl for the checkout process  Specific templates If you\u0026rsquo;re working on a big store in many languages you may need to change the layout of the page depending on the language.\nFor example you want a different product page for american customers and japanese ones. In this case you simply have to create new template product.tpl and place it in the right folder.\nWhen searching for a template, PrestaShop will check many location to determine which file should be used. It make it very easy to have different template for a given locale or a specific entity id.\nWith the product page, the core will check the following locations (in order) and return the first template found:\nExample with a product with ID = 3 and locale = en-US\n en-US/catalog/product-3.tpl catalog/product-3.tpl en-US/catalog/product.tpl catalog/product.tpl  Another example with category template for the category with ID = 9 and locale = en-US.\n en-US/catalog/listing/category-9.tpl catalog/listing/category-9.tpl en-US/catalog/listing/category.tpl catalog/listing/category.tpl en-US/catalog/listing/product-list.tpl catalog/listing/product-list.tpl  This feature is mostly made for developer working on a custom template for a customer.\nLayouts The layout is the organisation of the page, the way in which the parts of your design are arranged. The typical example is the sidebar: is there a sidebar on your category page or is your product listing is taking the whole space.\nWith PrestaShop 1.7, user are given the ability to change the layout of each page independantly. As a template developer, it\u0026rsquo;s your role to ensure your theme is compatible.\nWhat\u0026rsquo;s in a layout file The layout is the very top level of the template inheritance tree. Basically it hold the opening and closing \u0026lt;html\u0026gt; tags.\nTypical layout files look like the following snippet. This one is a full one\nRemember to define as many blocks as possible. \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;{$language.iso_code}\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {block name=\u0026#39;head\u0026#39;} {include file=\u0026#39;_partials/head.tpl\u0026#39;} {/block} \u0026lt;/head\u0026gt; \u0026lt;body id=\u0026#34;{$page.page_name}\u0026#34; class=\u0026#34;{$page.body_classes|classnames}\u0026#34;\u0026gt; {hook h=\u0026#39;displayAfterBodyOpeningTag\u0026#39;} \u0026lt;main\u0026gt; \u0026lt;header id=\u0026#34;header\u0026#34;\u0026gt; {block name=\u0026#39;header\u0026#39;} {include file=\u0026#39;_partials/header.tpl\u0026#39;} {/block} \u0026lt;/header\u0026gt; \u0026lt;section id=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; {block name=\u0026#39;breadcrumb\u0026#39;} {include file=\u0026#39;_partials/breadcrumb.tpl\u0026#39;} {/block} {block name=\u0026#34;left_column\u0026#34;} \u0026lt;div id=\u0026#34;left-column\u0026#34;\u0026gt; {if $page.page_name == \u0026#39;product\u0026#39;} {hook h=\u0026#39;displayLeftColumnProduct\u0026#39;} {else} {hook h=\u0026#34;displayLeftColumn\u0026#34;} {/if} \u0026lt;/div\u0026gt; {/block} {block name=\u0026#34;content_wrapper\u0026#34;} \u0026lt;div id=\u0026#34;content-wrapper\u0026#34;\u0026gt; {block name=\u0026#34;content\u0026#34;} \u0026lt;p\u0026gt;Hello world! This is HTML5 Boilerplate.\u0026lt;/p\u0026gt; {/block} \u0026lt;/div\u0026gt; {/block} \u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;footer id=\u0026#34;footer\u0026#34;\u0026gt; {block name=\u0026#34;footer\u0026#34;} {include file=\u0026#34;_partials/footer.tpl\u0026#34;} {/block} \u0026lt;/footer\u0026gt; \u0026lt;/main\u0026gt; {hook h=\u0026#39;displayBeforeBodyClosingTag\u0026#39;} {block name=\u0026#39;javascript_bottom\u0026#39;} {include file=\u0026#34;_partials/javascript.tpl\u0026#34; javascript=$javascript.bottom} {/block} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; From there, each part of the theme will do its job and replace content inside these bricks, keeping the same organization.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/templating-with-twig/",
	"title": "Templating with Twig",
	"tags": [],
	"description": "",
	"content": "Templating with Twig This is mostly the easy part. Legacy pages use Smarty while modern pages use Twig. These templating engines are actually similar in many ways.\nFor instance, this is a legacy template:\n\u0026lt;span class=\u0026#34;employee_avatar_small\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;img\u0026#34; alt=\u0026#34;\u0026#34; src=\u0026#34;{$employee_image}\u0026#34; /\u0026gt; \u0026lt;/span\u0026gt; {$employee_name}  All of the legacy templates are located in the admin-dev/themes/default/template/controller folder \u0026hellip; and here is a possible migration of it to Twig:\n\u0026lt;span class=\u0026#34;employee_avatar_small\u0026#34;\u0026gt; \u0026lt;img class=\u0026#34;img\u0026#34; alt=\u0026#34;{{ employee.name }}\u0026#34; src=\u0026#34;{{ employee.image }}\u0026#34; /\u0026gt; \u0026lt;/span\u0026gt; {{ employee.name }}The syntax of both engines is really similar. Find out more about Twig by reading the Twig documentation.\nHelpers All our custom helpers have been ported from Smarty to Twig:\n   Smarty Twig     { l s='foo' d='domain' } {{ 'foo'|trans({}, 'domain') }}    { hook h='hookName' } {{ renderhook('hookName') }}   {$link-\u0026gt;getAdminLink('AdminAccess')} {{ getAdminLink('LegacyControllerName') }}    Macros Macros/functions are specific to the modern pages to help with recurrent blocks:\n form_label_tooltip(name, tooltip, placement) Renders a form label (by name) with an informational tooltip on rollover. check(variable) Checks if a variable is defined and not empty. tooltip(text, icon, position) Renders a tooltip with information in roll hover (doesn\u0026rsquo;t render a label). infotip(text)\\ warningtip(text) Renders information and warning tips (more like alert messages). label_with_help(label, help) Renders a label with a help box beside it.   Bootstrap Legacy templates use Bootstrap 3 while modern pages use the PrestaShop UI Kit that is based on Bootstrap 4. This means that you\u0026rsquo;ll need to update some markup (especially CSS classes).\nIf you aren\u0026rsquo;t familiar with Bootstrap 4, check out their article on migrating to v4, which explains the major changes from v3 to v4. jQuery Since we use the jQuery version that is bundled with Bootstrap, old pages use jQuery 1.11 and new ones jQuery 3.3. In addition to this, javascript from old pages was included as separate files without any compilation, while new pages we use modules which are compiled and bundled using Webpack.\nDepending on the page you are migrating, this task may be straightforward or more complex.\nTranslations Be careful when copying translatable wordings, you must use the exact same strings in order to keep the translation working. Example:\n\u0026lt;?php // legacy controller $this-\u0026gt;trans(\u0026#39;Before activating the webservice, you must be sure to: \u0026#39;, array(), \u0026#39;Admin.Advparameters.Help\u0026#39;); \u0026hellip; must become:\n{{ \u0026#39;Before activating the webservice, you must be sure to: \u0026#39;|trans({}, \u0026#39;Admin.Advparameters.Help\u0026#39;) }}Manage modern assets with Webpack PrestaShop uses Webpack to build and bundle static assets in PrestaShop, like Javascript and stylesheets.\nThe root folder for the modern theme is /admin-dev/themes/new-theme. To find out more, read How to compile assets.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/distribution/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": "Testing What makes a theme valid When you\u0026rsquo;re trying to select a theme in the backoffice, PrestaShop will test if your theme is valid. It won\u0026rsquo;t install if the theme isn\u0026rsquo;t valid.\nA theme is valid if it contains some files and some configuration keys.\nRequired files Here is the complete list of required files:\n preview.png config/theme.yml assets/js/theme.js assets/css/theme.css templates/_partials/form-field.tpl templates/catalog/product.tpl templates/catalog/listing/product-list.tpl templates/checkout/cart.tpl templates/checkout/checkout.tpl templates/cms/category.tpl templates/cms/page.tpl templates/customer/address.tpl templates/customer/addresses.tpl templates/customer/guest-tracking.tpl templates/customer/guest-login.tpl templates/customer/history.tpl templates/customer/identity.tpl templates/index.tpl templates/customer/my-account.tpl templates/checkout/order-confirmation.tpl templates/customer/order-detail.tpl templates/customer/order-follow.tpl templates/customer/order-return.tpl templates/customer/order-slip.tpl templates/errors/404.tpl templates/errors/forbidden.tpl templates/checkout/cart-empty.tpl templates/cms/sitemap.tpl templates/cms/stores.tpl templates/customer/authentication.tpl templates/customer/registration.tpl templates/contact.tpl  Required configuration keys Your configuration file config/theme.yml (read more about this file) must details some configuration keys.\nHere is the list of keys PrestaShop will look for. The dot represent the nesting.\n name display_name version author.name meta.compatibility.from meta.available_layouts global_settings.image_types.cart_default global_settings.image_types.small_default global_settings.image_types.medium_default global_settings.image_types.large_default global_settings.image_types.home_default global_settings.image_types.category_default theme_settings.default_layout  How to use PrestaShop Automated Test Suite PrestaShop 1.7 comes with an automated test suite used to develop Classic. You should use them to ensure your theme is fully compatible with PrestaShop\u0026rsquo;s feature.\nYou need nodejs, npm, java and Chrome installed on your machine.\nThe test suite is destructive. Do not run it in production. Prepare your store for the tests:\n cd tests/Selenium npm install Install PrestaShop, preferably with 2 languages (though tests should ideally be language and settings agnostic) Copy tests/Selenium/settings.dist.js to tests/Selenium/settings.js and customize according to your setup Once PrestaShop is installed, run php prepare-shop.php. WARNING: never do this on a production shop because it will edit existing products without asking for your permission.  The test suite uses Selenium,\nwebdriver.io allows you to perform almost any action a browser would do using a fluent promise-based API. You will need some familiarity with promises to make the most of the tool.\nAdd a new test If you want to create a custom test, there are a few things you should know. Tests are contained in the specs subfolder.\nUntil we can do more documentation, please have a look at the existing tests and at the WebDriver.io API.\nIf you need to add general purpose helper functions for your tests, they should go in commands/init.js.\nIf you need fixtures for your tests, please use the ones from the default installation or provide a script that installs them.\nDo not hard-code things such as product ids in your tests: instead abstract them behind a name and put them in the fixtures.js file.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/testing/resources/",
	"title": "Testing Resources",
	"tags": [],
	"description": "",
	"content": "Testing Resources Docker images Docker isolate your application in containers, making their isolation and deployment easier. If you\u0026rsquo;re confident with using it, we created several images for easier deployment of PrestaShop:\n https://hub.docker.com/r/prestashop/prestashop/, in which all PrestaShop releases between 1.4 and 1.7 can be found. Covers most needs and is perfect for a quick start. https://hub.docker.com/r/prestashop/prestashop-git/, containing the git repository content with different PHP version. For advanced users. https://hub.docker.com/r/prestashop/base/, containing the required stack to run PrestaShop, without the core files. Recommended if you already have the shop files on your disk.  Please note we try to follow best practices, and MySQL service is NOT provided with these images. You have to deploy your own server in a dedicated container.\nWhen your environment is ready, it\u0026rsquo;s time to configure it before running tests.\nModule management in command line  Managing your modules was only possible from the administration interface. Continuous integration of modules may require preliminary steps like their installation, that\u0026rsquo;s why we added a simple way to manage them in command line.\nphp bin/console prestashop:module --help Usage: prestashop:module \u0026lt;action\u0026gt; \u0026lt;module name\u0026gt; [\u0026lt;file path\u0026gt;] Arguments: action Action to execute (Allowed actions: install / uninstall / enable / disable / enable_mobile / disable_mobile / reset / upgrade / configure). module name Module on which the action will be executed file path YML file path for configuration  Use php app/console instead of php bin/console for versions prior to 1.7.4  Basic actions The basic actions are the same as you can see on the module list and only require the module name.\n install uninstall enable disable enable_mobile disable_mobile reset upgrade  Example:\nphp bin/console prestashop:module install paypal  Use php app/console instead of php bin/console for versions prior 1.7.4  Multishop In case you want to run your action for a specific shop or shop group, you have two optionnal parameters --id_shop=\u0026lt;id\u0026gt; and --id_shop_group=\u0026lt;id\u0026gt; which modifies the current shop context before calling the actual command.\nConfiguration This feature allows an automatic configuration of your module but DOES NOT display the configuration page.\nThis feature is intended for developers wishing to test their modules after an installation without having to pass the configuration screen, or a PrestaShop agency who has a generic configuration to set on every shops. With only one command, we expect a module to be totally functional for tests or production.\nIf we reuse the previous command, we could expect something like this:\nphp bin/console prestashop:module configure \u0026lt;module name\u0026gt; [\u0026lt;YML file path\u0026gt;]  Use php app/console instead of php bin/console for versions prior 1.7.4  Source of data configuration When not provided, we use by default a file self_config.yml stored in the module root folder. You can use another file by setting the \u0026lt;YML file path\u0026gt;.\nFormat supported We are going to make it simple and allow only file extension: yaml.\nExample:\n# This file is an example of data configuration which can be applied to a module# Data to be updated in Configuration tableconfiguration:update:# Option 1: having a pair key/valuePAYPAL_SANDBOX:1PAYPAL_API_CARD:0# Option 2: use \u0026#34;value\u0026#34; subkey. Will allow to use additional keys laterPAYPAL_SANDBOX:value:1multilang:false# Question: how to handle multi lang values ?delete:- \u0026#34;PAYPAL_ONBOARDING\u0026#34;# SQL files to executesql:- file:\u0026#34;path/to/file1.sql\u0026#34;# But key is optional- \u0026#34;path/to/file2.sql\u0026#34;- \u0026#34;sql/default-config.sql\u0026#34;# File to copy from local disk or websitefiles:- source:\u0026#34;/path/to/source/file.txt\u0026#34;dest:\u0026#34;/module/path/docs/file.txt\u0026#34;- source:\u0026#34;https://www.domain.wow/uri/of/file\u0026#34;dest:\u0026#34;/module/path/docs/another_file.txt\u0026#34;# Fox complex configuration data, allow PHP code to be executedphp:- file:\u0026#34;path/to/file.php\u0026#34;# Must have a class which implements interface PrestaShop\\PrestaShop\\Adapter\\Module\\Configuration\\ModuleComplexConfigurationInterfaceparams:- myParam1:1- oneArrayParam:- \u0026#34;value1\u0026#34;- \u0026#34;value2\u0026#34;- withSpecificKey:\u0026#34;value3\u0026#34;Core Functional tests PrestaShop provides its own test suite, running with puppeteer. It covers the features of PrestaShop and grows each time a bug is resolved or a feature is added.\nThese tests are launched every time a change is suggested to the core, but you can also run them with your module installed. This will ensure your module code does not break a critical feature of the core.\nThis section will be completed when these tests will be available on a dedicated repository. In the meantime you can already reach them on GitHub, in the tests/puppeteer folder of PrestaShop files.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/toggle/",
	"title": "ToggleColumn reference",
	"tags": [],
	"description": "",
	"content": "ToggleColumn Type  This ToggleColumn is used to display booleans, it will display an icon instead of the value. If the user clicks on it, this triggers a toggle of the boolean value.\nAvailable options    Properties Type Expected value     field string required The record field name that the column displays.   primary_field string required The record field name that the column displays.   route string required The route used to generated link url.   route_param_name string required The parameter name used by the route to generate the url.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ToggleColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $toggleColumn = new ToggleColumn(\u0026#39;active\u0026#39;); $toggleColumn-\u0026gt;setName(\u0026#39;Enabled\u0026#39;); $toggleColumn-\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;active\u0026#39;, \u0026#39;primary_field\u0026#39; =\u0026gt; \u0026#39;id_customer\u0026#39;, \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_customers_toggle_status\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;customerId\u0026#39;, ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($toggleColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/translation/",
	"title": "Translation",
	"tags": [],
	"description": "",
	"content": "Translation One of the main needs for localization is translating wordings to the another language. PrestaShop is capable of translating wordings to any language, as long as it has the appropriate translations available.\nPrestaShop 1.7 features a new translation system, based on the Symfony Translation component.\nThis documentation is intended for Core and Native module translation.\nIf you are a module developer, read the module translation documentation instead.\n Overview The translation system is less complicated than it can seem to be at first glance. To start working with it, you should get familiarized with the following concepts:\n Wording (Also called \u0026ldquo;message\u0026rdquo;). An abstraction of a phrase that will be translated to any given language. It\u0026rsquo;s usually written as plain English, in order to make it easier to understand. Translation Domain A group of wordings. Organizing messages in groups allows for an improved contextualization of wordings ([Read more][translation-domains]). Message Catalogue A collection of wordings in a given language. Each supported language has its own catalogue which contains translations for all the wordings in that language. Default Message Catalogue The base message catalogue on which the translated message catalogues are based. This is where we add new wordings. Catalogue Resource A data source containing a catalogue. It can be an in-memory array, a database, a group of files\u0026hellip; Translator A service that allows translating wordings to a given language.  How to translate wordings This section provides an quick reference on how to use the Translator. For more information, read Symfony\u0026rsquo;s documentation on Using the Translator. PHP files To translate wordings in PHP files, you first need an instance of the Translator service (explained below). Then, you can use the trans() method to translate your wording:\n\u0026lt;?php echo $translator-\u0026gt;trans(\u0026#39;This product is no longer available.\u0026#39;, [], \u0026#39;Shop.Notifications.Error\u0026#39;); The trans() method takes three arguments:\n $id – The wording you want to translate. Keep in mind that it has to be exactly the same as the one in the default catalogue, or the translation won\u0026rsquo;t work. $parameters – An array of replacements, if any. (Learn more about translation placeholders). $domain – The [translation domain][translation-domains] for that wording.  Be aware that in Symfony-based Admin controllers, the second and third arguments have been swapped in order to allow $replacements to be optional. For more, see FrameworkBundleAdminController. Inside controllers Controllers include a helper method named trans() that calls the translator internally:\n\u0026lt;?php // legacy controllers $this-\u0026gt;trans(\u0026#39;This product is no longer available.\u0026#39;, [], \u0026#39;Shop.Notifications.Error\u0026#39;); // Symfony-based controllers (FrameworkBundleAdminController) $this-\u0026gt;trans(\u0026#39;This product is no longer available.\u0026#39;, \u0026#39;Shop.Notifications.Error\u0026#39;, []); Outside controllers If you are outside a controller, and after careful consideration you think you absolutely need some stuff translated, then you can add it as a dependency of your class:\n\u0026lt;?php // SomeService.php  namespace PrestaShop\\PrestaShop\\Core\\Foo\\Bar; use Symfony\\Component\\Translation\\TranslatorInterface; class SomeService { private $translator; public function __construct(TranslatorInterface $translator) { $this-\u0026gt;translator = $translator; } } Then, inject it into your service using the Dependency Container:\n# services.ymlprestashop.core.foo.bar.some_service:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Foo\\Bar\\SomeService\u0026#39;arguments:- \u0026#39;@translator\u0026#39;And finally, use the translator at will:\n\u0026lt;?php // SomeService.php  $this-\u0026gt;translator-\u0026gt;trans(\u0026#39;This product is no longer available.\u0026#39;, [], \u0026#39;Shop.Notifications.Error\u0026#39;); Smarty templates In .tpl files, use the l (lower case \u0026ldquo;L\u0026rdquo;) macro:\n\u0026lt;div\u0026gt;{l s=\u0026#39;This product is no longer available.\u0026#39; d=\u0026#39;Shop.Notifications.Error\u0026#39;}\u0026lt;/div\u0026gt; If you have have replacements to peform in your wording, then there are two options:\n  Anonymous placeholders (eg. %s)\n\u0026lt;div\u0026gt;{l s=\u0026#39;List of products by supplier %s\u0026#39; sprintf=[$supplier.name] d=\u0026#39;Shop.Theme.Catalog\u0026#39;}\u0026lt;/div\u0026gt;   Named placeholders (eg. %my_placeholder%)\n\u0026lt;div\u0026gt;{l s=\u0026#39;There are %products_count% items in your cart.\u0026#39; sprintf=[\u0026#39;%products_count%\u0026#39; =\u0026gt; $cart.products_count] d=\u0026#39;Shop.Theme.Checkout\u0026#39;}\u0026lt;/div\u0026gt;   Twig templates In .twig files, you can use the trans filter from Twig:\n\u0026lt;div\u0026gt;{{ \u0026#39;Sort by\u0026#39;|trans({}, \u0026#39;Admin.Actions\u0026#39;) }}\u0026lt;/div\u0026gt; For information on more advanced features, head on to the Symfony translator component documentation.\nRead more  Translation Domains   Native module translation   Tips and tricks   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/translation/translation-domains/",
	"title": "Translation Domains",
	"tags": [],
	"description": "",
	"content": "Translation Domains Sometimes wordings may seem vague when seen out of context. For example, \u0026ldquo;Delete\u0026rdquo;. Just like that, we can imagine what is it used for, but we don\u0026rsquo;t really have much information about it. What are we deleting? From a translator standpoint, this is very hard, because not only do we not know where it\u0026rsquo;s supposed to be used, but it could be used in several places, with different meanings.\nDepending on the language, it will be more or less easy to translate it just vaguely enough so that the phrase makes sense in every one of those different contexts.\nTranslation Domains bring an answer to this problem. By allowing to separate wordings in contextual groups, if the same wording appears in more than one domain, then it can be have a different translation in each one of them. This way, translators are better able to adapt the meaning of each wording to the specific context in which they appear.\nThis feature was originally described in this blog post and has been updated here. Understanding the Domains' structure Domains have been organized in 5 major sections: Shop, Admin, Modules, Email and Install. All the PrestaShop translatable strings are spread across these 5 domains, according to the following definition:\n   Domain Description     Admin Back office and content aimed at merchants   Email Emails sent from the shop   Install Content from the installation wizard   Modules Native modules   Shop Default theme, front office and content aimed at customers    These are called \u0026ldquo;first-level\u0026rdquo; domains. Domains are further broken down in at least two and up to three levels or \u0026ldquo;subdomains\u0026rdquo;, for example:\nShop.Theme.Checkout There are two exceptions to this rule: Installer and messages have only one level. The latter contains all wordings that did not have any domain assigned at the time of release of 1.7.0 and thus have been kept for backwards compatibility.\nIn the end a domain like Shop.Theme.Checkout corresponds to a specific folder in Crowdin, where you\u0026rsquo;ll find all the strings from the default theme, related to the checkout process (funnel, shopping cart, etc.).\nDomains are stored as XLIFF files in PrestaShop, with one file per subdomain. See the full list here. Read below for more details on how we organized domains and what they contain.\nInstall This is the easiest one, there\u0026rsquo;s only one domain: Install. It\u0026rsquo;s the content from the installation wizard.\nModules For modules, it\u0026rsquo;s rather simple. We still have a \u0026ldquo;Modules\u0026rdquo; folder (first-level), which contains either a file or folder for each module: this the second level. The third level is here to say whether the string appears in the front office (Shop) or the back office (Admin).\nShop For the front office, it\u0026rsquo;s a little bit more complex. Any string related to the front office goes into the Shop domain. That\u0026rsquo;s the first level. Then it\u0026rsquo;s split in various sections, mostly functional. Here\u0026rsquo;s how it works for the second level:\n   Domain Strings     Emails The emails sent from the shop to a customer (order confirmation, account creation, etc.)   PDF The PDFs sent to a customer (invoice, delivery slip, credit slip, etc.)   Theme The strings attached to the default theme \u0026ldquo;Classic\u0026rdquo;.   Demo The content from the demo products and demo pages (\u0026ldquo;About us\u0026rdquo;, \u0026ldquo;Terms and conditions of use\u0026rdquo;, etc.). If you remove the de content, you shouldn\u0026rsquo;t need any of these strings.   Navigation Most of the meta titles and page names from the default theme.   Notifications The warning, error or success messages that can appear in the shop.   Forms The forms available in the shop (\u0026ldquo;Contact us\u0026rdquo; page, addresses, etc.)    Each of this domain can be further divided to provide even more context.\nShop.Theme    Domain Strings     Catalog All the strings needed to display your catalog (product page, categories, etc.).   Customer Account Anything related to the management of a customer account and the orders.   Checkout Everything related to the act of buying - i.e. if you\u0026rsquo;re in catalog mode, you shouldn\u0026rsquo;t need these strings.   Actions All the call-to-actions, buttons or links that you find on the shop and that aren\u0026rsquo;t specific to a page or context.    Shop.Demo    Domain Strings     Catalog Content for demo product and categories (descriptions).   Pages Content inside the demo pages (formerly known as CMS pages).    Shop.Notifications Notifications are split according to their level of alert: Info, Error, Warning or Success. They are the messages showing up on your shop.\nShop.Forms    Domain Strings     Labels The form labels   Errors Its corresponding errors (distinct from the theme errors, these one are specific to the form and will display inline)   Help Hints to help users fill in the form (special characters, etc.).    Admin Now, let\u0026rsquo;s see how things are organized for the strings from the back office.\n   Domain Strings     Actions All the call-to-actions, buttons or links that you find on the back office, and that are quite generic (\u0026ldquo;Save\u0026rdquo;, \u0026ldquo;Add \u0026ldquo;Delete\u0026rdquo;, etc.). Again, if it applies to one page and one functional domain only, then this is not the domain to use.   Advanced Parameters Content from the \u0026ldquo;Advanced Settings\u0026rdquo; section. Note the lower case \u0026ldquo;p\u0026rdquo; in Admin.Advparameters   Catalog Strings from the \u0026ldquo;Catalog\u0026rdquo; section.   Dashboard Strings from the Dashboard page.   Design Strings from the \u0026ldquo;Design\u0026rdquo; section.   Global Anything which doesn\u0026rsquo;t fall in the below categories, but is still related to the back office, that can be found in a lot occurrences (\u0026ldquo;Max\u0026rdquo;, \u0026ldquo;Settings\u0026rdquo;, \u0026ldquo;Enabled\u0026rdquo;, etc.) AND in different parts of the software too. If a string is specific to a given page, then it shouldn\u0026rsquo;t be in the global domain.   International Strings form the \u0026ldquo;International\u0026rdquo; section.   Login Strings from the Login screen.   Modules Strings from the Modules page.   Navigation The structure shared by all pages of the back office.   Notifications All the warning, error or success messages that can appear in the back office.They must be general notification applying to any part of the software (e.g. \u0026ldquo;Settings updated\u0026rdquo;). In case you have a specific notification (\u0026ldquo;Friendly URLs are currently disabled\u0026rdquo;), then it should fall under the notification subdomain for its functional domain (here Admin.Catalog.Notification).   Orders \u0026amp; Customers Strings for the \u0026ldquo;Orders\u0026rdquo;, \u0026ldquo;Customers\u0026rdquo; and \u0026ldquo;Customer Service\u0026rdquo; sections from the back office. Note the lower case \u0026ldquo;c\u0026rdquo; in Admin.Orderscustomers.   Payment Strings from the \u0026ldquo;Payment\u0026rdquo; section.   Shipping Strings from the \u0026ldquo;Shipping\u0026rdquo; section.   Shop Parameters Content from the \u0026ldquo;Shop Parameters\u0026rdquo; section. Note the lower case \u0026ldquo;p\u0026rdquo; in Admin.Shopparameters.   Stats Content from the \u0026ldquo;Stats\u0026rdquo; section.    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-guidelines/writing-a-good-commit-message/",
	"title": "Writing a good commit message",
	"tags": [],
	"description": "",
	"content": "Writing a good commit message Commit names should give an idea of the nature and context of the change that has been done. The more details, the better! The commit name should be as unique and recognizable as your commit itself. There are multitude of articles on the web regarding commit messages, here are two that you can find useful: How to Write a Git Commit Message and What makes a good commit message?.\nBad commit messages give pretty much no context:\n add cli new fix useless code fix code review comments  A good commit message explains what is done, and why. Here\u0026rsquo;s an example:\nMake Source.indexOf(ByteString) significantly faster Previously the algorithm that did this was extremely inefficient, and had worst case runtime of O(N * S * S) for N is size of the bytestring and S is the number of segments. The new code runs in O(N * S). It accomplishes this by not starting each search at the first segment, which could occur many times when called by RealBufferedSource. Some tips:\n Separate subject from body with a blank line Limit the subject line to 50 characters Capitalize the subject line Use the body to explain what and why vs. how  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/actions-reference/",
	"title": "Actions reference",
	"tags": [],
	"description": "",
	"content": "Grid Actions reference Grid Actions are tasks available for your grid for common actions.\nSimpleGridAction This action allows to add a label to the Grid Actions block. Then you can manage the behavior when clicking on this label using Javascript for example.\n\u0026ldquo;Refresh list\u0026rdquo;, \u0026ldquo;Show SQL query\u0026rdquo; and \u0026ldquo;Export to SQL Manager\u0026rdquo; actions are created using SimpleGridAction actions.    Properties Expected value     Id A string   Type simple   Name A string   Icon A string    LinkGridAction This action will create a labelized link into the Grid actions block.\n   Properties Expected value(s)     Id A string   Type link   Name A string   Icon A string   Options route    route_params   Requirements route   Defaults route_params =\u0026gt; []   Allowed Types route (string)    route_params (array)    SubmitGridAction This action will create a submittable label into the Grid actions block.\n   Properties Expected value(s)     Id A string   Type submit   Name A string   Icon A string   Options submit_route    submit_method    confirm_message   Requirements submit_route   Defaults submit_method =\u0026gt; \u0026lsquo;POST\u0026rsquo;    confirm_message =\u0026gt; null   Allowed Types submit_route (string)    confirm_message (string or null)   Allowed Values submit_method =\u0026gt; (\u0026lsquo;POST\u0026rsquo; or \u0026lsquo;GET\u0026rsquo;)    Row Actions reference Grid Row Actions are tasks available in a Grid row when defining a column that supports tasks.\nLinkRowAction Very similar to the LinkGridAction, but capable to manage User accesses on the content.\n   Properties Expected value(s)     Id A string   Type link   Name A string   Icon A string   Options route    route_param_name    route_param_field    confirm_message    accessibility_checker    clickable_row   Requirements route    route_param_name    route_param_field   Defaults confirm_message =\u0026gt; ''    accessibility_checker =\u0026gt; null    clickable_row =\u0026gt; false   Allowed Types route (string)    route_param_name (string)    route_param_field (string)    confirm_message (string)    accessibility_checker (callable or null or instance of AccessibilityCheckerInterface)    clickable_row (boolean)    SubmitRowAction Very similar to the SubmitGridAction, but capable to manage User accesses on the content.\n   Properties Expected value(s)     Id A string   Type submit   Name A string   Icon A string   Options route    route_param_name    route_param_field    confirm_message    accessibility_checker    method   Requirements route    route_param_name    route_param_field   Defaults confirm_message =\u0026gt; ''    accessibility_checker =\u0026gt; null    method =\u0026gt; \u0026lsquo;POST\u0026rsquo;   Allowed Types route (string)    route_param_name (string)    route_param_field (string)    method (string)    confirm_message (string)    accessibility_checker (callable or null or instance of AccessibilityCheckerInterface)    DeleteCustomerRowAction This row action will delete the Customer in Sell \u0026gt; Customers page.\n   Properties Expected value(s)     Id A string   Type delete_customer   Name A string   Icon A string   Options customer_id_field    customer_delete_route   Requirements customer_id_field    customer_delete_route   Defaults customer_id_field (string)    customer_delete_route =\u0026gt; (string)    DeleteCategoryRowAction This row action will delete the Category in Catalog \u0026gt; Categories page.\n   Properties Expected value(s)     Id A string   Type delete_category   Name A string   Icon A string   Options category_id_field    category_delete_route   Requirements category_id_field    category_delete_route   Defaults category_id_field (string)    category_delete_route =\u0026gt; (string)    Use case example \u0026lt;?php // /modules/my-module/src/Grid/MyGridDefinitionFactory.php namespace MyModule\\Grid; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\GridActionCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Type\\SubmitGridAction; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\RowActionCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\LinkRowAction; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Row\\Type\\SubmitRowAction; /** * How to define the Grid\u0026#39;s actions? * You can adapt this example or look at the existing ones * in PrestaShop\u0026#39;s Core. */ class MyGridDefinitionFactory extends AbstractGridDefinition { /** * {@inheritdoc} */ protected function getGridActions() { return (new GridActionCollection()) -\u0026gt;add( (new SubmitGridAction(\u0026#39;delete_all_email_logs\u0026#39;)) -\u0026gt;setName(\u0026#39;Erase all\u0026#39;) -\u0026gt;setIcon(\u0026#39;delete\u0026#39;) -\u0026gt;setOptions([ \u0026#39;submit_route\u0026#39; =\u0026gt; \u0026#39;admin_logs_delete_all\u0026#39;, \u0026#39;confirm_message\u0026#39; =\u0026gt; \u0026#39;Are you sure?\u0026#39;, ]) ) ; } /** * {@inheritdoc} */ protected function getColumns() { return (new ColumnCollection()) -\u0026gt;add( (new ActionColumn(\u0026#39;actions\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Actions\u0026#39;, [], \u0026#39;Admin.Global\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;actions\u0026#39; =\u0026gt; (new RowActionCollection()) -\u0026gt;add( (new LinkRowAction(\u0026#39;edit\u0026#39;)) -\u0026gt;setName(\u0026#39;Edit\u0026#39;) -\u0026gt;setIcon(\u0026#39;edit\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;edit_stuff\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;stuffId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;stuffId\u0026#39;, // A click on the row will have the same effect as this action  \u0026#39;clickable_row\u0026#39; =\u0026gt; true, ]) ) -\u0026gt;add( (new SubmitRowAction(\u0026#39;delete\u0026#39;)) -\u0026gt;setName(\u0026#39;Delete\u0026#39;) -\u0026gt;setIcon(\u0026#39;delete\u0026#39;) -\u0026gt;setOptions([ \u0026#39;confirm_message\u0026#39; =\u0026gt; \u0026#39;Delete selected item?\u0026#39;, \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;delete_stuff\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;stuffId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;stuffId\u0026#39;, ]) ) ]) ) ; } }  You need to create a custom Bulk Action? We got you covered! "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/bulk-actions-reference/",
	"title": "Bulk Actions reference",
	"tags": [],
	"description": "",
	"content": "Bulk Actions reference You can define actions for every selected row of your grid. PrestaShop already comes with a list of common bulk actions that you can use in your own Grids.\nSubmitBulkAction This action will submit the data of your rows into a specific route.\n   Properties Expected value(s)     Type submit   Requirements submit_route   Defaults confirm_message =\u0026gt; null    submit_method =\u0026gt; \u0026ldquo;POST\u0026rdquo;   Allowed Types submit_route (string)    confirm_message (string or null)   Allowed Values submit_method (\u0026ldquo;POST\u0026rdquo; or \u0026ldquo;GET\u0026rdquo;)    DeleteCategoriesBulkAction This action will delete the selected Categories in Catalog \u0026gt; Categories page.\n   Properties Expected value(s)     Type delete_categories   Requirements categories_bulk_delete_route   Allowed Types submitcategories_bulk_delete_route_route (string)    DeleteCustomersBulkAction This bulk action will delete the selected Customers in Sell \u0026gt; Customers page.\n   Properties Expected value(s)     Type delete_customers   Requirements customers_bulk_delete_route   Allowed Types customers_bulk_delete_route (string)    Use case example \u0026lt;?php // /modules/my-module/src/Grid/MyGridDefinitionFactory.php namespace MyModule\\Grid; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\Type\\SubmitBulkAction; use PrestaShop\\PrestaShop\\Core\\Grid\\Action\\Bulk\\BulkActionCollection; /** * How to define the Grid\u0026#39;s bulk actions? * You can adapt this example or look at the existing ones * in PrestaShop\u0026#39;s Core. */ class MyGridDefinitionFactory extends AbstractGridDefinition { /** * {@inheritdoc} */ protected function getBulkActions() { return (new BulkActionCollection()) -\u0026gt;add( (new SubmitBulkAction(\u0026#39;enable_selection\u0026#39;)) -\u0026gt;setName(\u0026#39;Enable selection\u0026#39;) -\u0026gt;setOptions([ \u0026#39;submit_route\u0026#39; =\u0026gt; \u0026#39;submit_stuff\u0026#39;, ]) ) ; } }  You need to create a custom Bulk Action? We got you covered! "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/naming-conventions/",
	"title": "Naming conventions",
	"tags": [],
	"description": "",
	"content": "Conventions As with Coding standards naming consistency is very important in PrestaShop, thus there are conventions that every PrestaShop contributor should follow.\nNaming conventions At the moment naming conventions strictly applies for Back Office migration only. Controllers \u0026amp; actions PrestaShop controllers follow these naming conventions:\n Prefix controller with resource name in singular form (e.g. CustomerController, ProductController); Prefix index action with index. For Object controllers (e.g. CustomerController) it\u0026rsquo;s normally page with list of objects (e.g. Customers, Products) and for Configuration controllers (e.g. PerformanceController) it\u0026rsquo;s page with configuration form (e.g. Caching configuration, CCC configuration). Action name should be clear and concise (e.g. editAction(), savePrivateNoteAction() are good examples, but formAction() or processAction() is not and thus should be avoided).  We have some standard action names:\n indexAction : display the listing createAction : show language creation form page and handle its submit editAction : show language edit form page and handle its submit deleteAction : delete an item  For a complete example see code below.\n\u0026lt;?php // CustomerController.php  namespace PrestaShopBundle\\Controller\\Admin\\Sell\\Customer; // Controller name is prefixed with Customer in singular form class CustomerController { // Index page which is opened when  // user clicks \u0026#34;Improve \u0026gt; Sell \u0026gt; Customers\u0026#34; in side menu.  // It shows list of customers and KPIs.  public function indexAction() { } // Customer Edit page which is opened when  // user clicks \u0026#34;Edit\u0026#34; action on selected customer.  // It shows customer form with data that can be edited.  public function editAction($customerId, Request $request) { } // Deletes given customer.  // Does not show page, but returns flash message with redirect instead.  public function deleteAction($customerId, Request $request) { } // Transforms guest customer (customer without password)  // to customer with password.  // Does not show page, but returns flash message with redirect instead.  public function transformGuestToCustomerAction($customerId, Request $request) { } // Saves private note for customer, that can only be seen by admin in Back Office.  // Does not show page, but returns flash message with redirect instead.  public function savePrivateNoteAction($customerId, Request $request) { } // Toggle the status of given customer.  // Does not show page, but returns flash message with redirect instead.  public function toggleStatusAction($customerId) { } } Templates PrestaShop templates follow these naming conventions:\n Template name should match controller\u0026rsquo;s action name without action suffix. For example, if you have CustomerController:viewAction() action, then your template name should be view.html.twig.  \u0026lt;?php // CustomerController.php  namespace PrestaShopBundle\\Controller\\Admin\\Sell\\Customer; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController as AbstractAdminController; class CustomerController extends AbstractAdminController { // Our action name is \u0026#34;view\u0026#34;, thus our  // template name is \u0026#34;view.html.twig\u0026#34;.  public function viewAction() { $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Sell/Customer/view.html.twig\u0026#39;); } } For a default page, you should be following our standard action names. Applying this rule, this means you should have matching template names:\n index.html.twig create.html.twig edit.html.twig delete.html.twig  Routes and paths PrestaShop routes follow admin_{resources}_{action} naming structure and rules for it are:\n {resources} (object) name should be in plural form (e.g. customers, products, orders). {action} name should match controller\u0026rsquo;s action name. Route should define methods that it responds to (e.g. GET, POST). Suffix route\u0026rsquo;s URL path with {resources} (e.g. customers, products, orders) name. When route is defined for single resource (e.g. Customer, Product) then URL path should follow /{resources}/{id}/{action} naming (e.g. /customers/23/edit). When resource identifier (ID) is used in URL path then it should be prefixed with object name (e.g. /{customerId}/edit instead of /{id}/edit).  If we were to create CRUD routes for Customer, this is how it would look like:\n Index route admin_customers_index with URL /customers and responds to GET method. Create route admin_customers_create with URL /customers/new and responds to GET and POST methods. Edit route admin_customers_edit with URL /customers/{customerId}/edit  and responds to GET and POST methods. Delete route admin_customers_delete with URL /customers/{customerId}/delete and responds to POST method.  Example of implementation for Customer routes:\n# src/PrestaShopBundle/Resources/config/routing/admin/sell/customer/_customer.yml_catalog:resource:\u0026#34;customers.yml\u0026#34;# route urls defined in \u0026#34;customers.yml\u0026#34; file will be prefixed with \u0026#34;/customers\u0026#34;prefix:/customers/# src/PrestaShopBundle/Resources/config/routing/admin/sell/customer/customers.ymladmin_customers_index:path:/methods:[GET]defaults:_controller:PrestaShopBundle:Admin/Sell/Customer/Customer:indexadmin_customers_edit:path:/{customerId}/editmethods:[GET, POST]defaults:_controller:PrestaShopBundle:Admin/Sell/Customer/Customer:editrequirements:customerId:\\d+admin_customers_transform_guest_to_customer:path:/{customerId}/transform-guest-to-customermethods:[POST]defaults:_controller:PrestaShopBundle:Admin/Sell/Customer/Customer:transformGuestToCustomerrequirements:customerId:\\d+Service ids When registering service in YAML, its id should follow Fully-qualified class name. See example below.\n\u0026lt;?php // src/Core/Payment/PaymentOptionFormDecorator.php  namespace PrestaShop\\PrestaShop\\Core\\Payment; class PaymentOptionFormDecorator { // ... } services:# service id follows fully-qualified class nameprestashop.core.payment.payment_option_form_decorator:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Payment\\PaymentOptionFormDecorator\u0026#39;Named arguments Using the \u0026ldquo;named argument\u0026rdquo; syntax when declaring or updating services is forbidden.\nservices:# Goodfoo_bar:class:\u0026#39;Foo\\Bar\u0026#39;arguments:- \u0026#39;baz\u0026#39;# Wrongwrong_foo_bar:class:\u0026#39;Foo\\Bar\u0026#39;arguments:- $baz:\u0026#39;baz\u0026#39;Grid PrestaShop comes with a lot of Grids (Products, Customers, Orders \u0026amp; etc) and keeping consistency between them is very important, thats why it follows these naming conventions:\n Grid id should be in lowercase and written in snake_case  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/filter-types-reference/",
	"title": "Filter types reference",
	"tags": [],
	"description": "",
	"content": "Filter types reference Filter types are actually Symfony Form types used in the grid to filter columns. Each filter must be associated to a column present in the definition using the setAssociatedColumn function present in all Filter types.\nSearchAndResetType Usually inserted at last this button submit the POST filtering request, it then display a reset button to clear all the filters.\n   Properties Expected value(s)     Options reset_route    reset_route_params    redirect_route    redirect_route_params   Defaults reset_route =\u0026gt; null    reset_route_params =\u0026gt; []    redirect_route =\u0026gt; null    redirect_route_params =\u0026gt; []   Allowed Types reset_route (string, null)    reset_route_params =\u0026gt; []    redirect_route =\u0026gt; (string, null)    redirect_route_params =\u0026gt; []    CountryChoiceType Builds a country selector, it contains various options, but they are automatically filled with the list of country.\n   Properties Expected value(s)     Options choices    choice_attr    with_dni_attr    with_postcode_attr   Defaults choices =\u0026gt; []    choice_attr =\u0026gt; []    with_dni_attr =\u0026gt; boolean    with_postcode_attr =\u0026gt; boolean   Allowed Types choices =\u0026gt; []    choice_attr =\u0026gt; []    with_dni_attr =\u0026gt; boolean    with_postcode_attr =\u0026gt; boolean    DateRangeType Input adapted for date columns to select a range of dates (from/to).\n   Properties Expected value(s)     Options date_format   Defaults date_format =\u0026gt; \u0026lsquo;YYYY-MM-DD\u0026rsquo;   Allowed Types date_format =\u0026gt; string    YesAndNoChoiceType Input adapted for boolean columns that adds a toggle button.\n   Properties Expected value(s)     Options choices   Defaults choices =\u0026gt; [\u0026lsquo;Yes\u0026rsquo; =\u0026gt; 1, \u0026lsquo;No\u0026rsquo; =\u0026gt; 0] (translated)   Allowed Types choices =\u0026gt; []    ProfileChoiceType Builds a selector for Employee\u0026rsquo;s profile type, it contains various options but they are automatically filled with the list of profiles.\n   Properties Expected value(s)     Options choices   Defaults choices =\u0026gt; []   Allowed Types choices =\u0026gt; []    Use case example \u0026lt;?php // /modules/my-module/src/Grid/MyGridDefinitionFactory.php namespace MyModule\\Grid; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\Filter; use PrestaShop\\PrestaShop\\Core\\Grid\\Filter\\FilterCollection; use PrestaShopBundle\\Form\\Admin\\Type\\SearchAndResetType; use PrestaShopBundle\\Form\\Admin\\Type\\YesAndNoChoiceType; use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType; /** * How to define the Grid filters? * You can adapt this example or look at the existing ones * in PrestaShop Core. */ class MyGridDefinitionFactory extends AbstractGridDefinition { /** * {@inheritdoc} */ protected function getFilters() { return (new FilterCollection()) -\u0026gt;add( (new Filter(\u0026#39;id_category\u0026#39;, TextType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;id_category\u0026#39;) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;attr\u0026#39; =\u0026gt; [ \u0026#39;placeholder\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Search ID\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;), ], ]) ) -\u0026gt;add( (new Filter(\u0026#39;name\u0026#39;, TextType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;name\u0026#39;) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;attr\u0026#39; =\u0026gt; [ \u0026#39;placeholder\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Search name\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;), ], ]) ) -\u0026gt;add( (new Filter(\u0026#39;description\u0026#39;, TextType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;description\u0026#39;) -\u0026gt;setTypeOptions([ \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;attr\u0026#39; =\u0026gt; [ \u0026#39;placeholder\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Search description\u0026#39;, [], \u0026#39;Admin.Actions\u0026#39;), ], ]) ) -\u0026gt;add( (new Filter(\u0026#39;active\u0026#39;, YesAndNoChoiceType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;active\u0026#39;) ) -\u0026gt;add( (new Filter(\u0026#39;actions\u0026#39;, SearchAndResetType::class)) -\u0026gt;setAssociatedColumn(\u0026#39;actions\u0026#39;) -\u0026gt;setTypeOptions([ \u0026#39;reset_route\u0026#39; =\u0026gt; \u0026#39;admin_common_reset_search_by_filter_id\u0026#39;, \u0026#39;reset_route_params\u0026#39; =\u0026gt; [ \u0026#39;filterId\u0026#39; =\u0026gt; self::GRID_ID, ], \u0026#39;redirect_route\u0026#39; =\u0026gt; \u0026#39;admin_monitorings_index\u0026#39;, ]) ); } }  If you need more information about filtering grid you can read how to work with search form. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/pdf/",
	"title": "Pdf Files",
	"tags": [],
	"description": "",
	"content": "Pdf Files One of the interaction with the Customers involve sending mails, including pdf files.\nFor example, for every order you do on a Shop as a Customer we expect to receive an Invoice.\nWorking on what make a shop an unique experience, as a Developer you will be asked to customize every PDF files that PrestaShop can produce.\nYou can alter the rendering using the provided data or push the PDF Rendering to its best, introducing your very own information that will made your PDF files amazing.\nCustomize the PDF files templates All PDF generated by PrestaShop are using Smarty templates and TCPDF as PDF rendering engine.\nYou will find all theses templates in the pdf folder, for each use case managed natively by the Core.\nYou can alter the Core files OR override them by copying them on themes/\u0026lt;your-theme\u0026gt;/pdf folder.\nIt\u0026rsquo;s not possible to override a PDF template in a module. Delivery Slip Delivery Slips are available in Orders \u0026gt; Delivery Slips section of the Back Office.\nThe following files are used to generate the PDF file:\npdf ├── delivery-slip.addresses-tab.tpl ├── delivery-slip.payment-tab.tpl ├── delivery-slip.product-tab.tpl ├── delivery-slip.style-tab.tpl ├── delivery-slip.summary-tab.tpl └── delivery-slip.tpl Invoices Invoices are available in Orders \u0026gt; Invoices section of the Back Office and in Orders List section of the Customer Back Office.\nThe following files are used to generate the PDF file:\npdf ├── invoice.addresses-tab.tpl ├── invoice-b2b.tpl ├── invoice.note-tab.tpl ├── invoice.payment-tab.tpl ├── invoice.product-tab.tpl ├── invoice.shipping-tab.tpl ├── invoice.style-tab.tpl ├── invoice.summary-tab.tpl ├── invoice.tax-tab.tpl ├── invoice.total-tab.tpl └── invoice.tpl Merchandise Returns Order (or Merchandise) Returns are available in Orders \u0026gt; Merchandise Returns section of the Back Office.\nThe following files are used to generate the PDF file:\npdf ├── order-return.addresses-tab.tpl ├── order-return.conditions-tab.tpl ├── order-return.product-tab.tpl ├── order-return.summary-tab.tpl └── order-return.tpl Order Slips Order Slips are available in Orders \u0026gt; Order Slips section of the Back Office.\npdf ├── order-slip.payment-tab.tpl ├── order-slip.product-tab.tpl ├── order-slip.summary-tab.tpl ├── order-slip.total-tab.tpl └── order-slip.tpl Supply Orders  Since 1.7, Supply Orders are not available anymore in the Back Office but you can still \u0026ldquo;trigger\u0026rdquo; the generation of the PDF files.\npdf ├── supply-order.addresses-tab.tpl ├── supply-order-footer.tpl ├── supply-order-header.tpl ├── supply-order.product-tab.tpl ├── supply-order.tax-tab.tpl ├── supply-order.total-tab.tpl └── supply-order.tpl Common Templates These files are used by most of the previous files:\npdf ├── footer.tpl ├── header.tpl └── pagination.tpl Minimal Example: customize design of the Invoices {* /themes/your-theme/pdf/invoice.style-tab.tpl *}{assign var=color_header value=\u0026#34;#25B9D7\u0026#34;}{assign var=color_border value=\u0026#34;#3ED2F0\u0026#34;}{assign var=color_border_lighter value=\u0026#34;#DFF5F9\u0026#34;}{assign var=color_line_even value=\u0026#34;#FAFBFC\u0026#34;}{assign var=color_line_odd value=\u0026#34;#6C868E\u0026#34;}{assign var=font_size_text value=\u0026#34;12pt\u0026#34;}{assign var=font_size_header value=\u0026#34;12pt\u0026#34;}{assign var=font_size_product value=\u0026#34;12pt\u0026#34;}{assign var=height_header value=\u0026#34;25px\u0026#34;}{assign var=table_padding value=\u0026#34;7px\u0026#34;}You will get an Invoice would look like this:\n  Stylized Invoice example   Alter or Add information available into PDF templates A dynamic hook allows you to alter or add more information that will become available in the previous templates.\nThere is the list of available Template Classes in the Core:\n HTMLTemplateDeliverySlip HTMLTemplateInvoice HTMLTemplateOrderReturn HTMLTemplateOrderSlip HTMLTemplateSupplyOrderForm  If your shop is available for the European Union, the GDPR module must be installed.\nThis means you can generate another PDF thanks to the class named HTMLTemplatePSGDPRModule. This PDF will contain all the Customer Information.\n To guess the hook for each template, we can look at the HTMLTemplate abstract Class:\n\u0026lt;?php // l. 160 $template = ucfirst(str_replace(\u0026#39;HTMLTemplate\u0026#39;, \u0026#39;\u0026#39;, get_class($this))); $hook_name = \u0026#39;displayPDF\u0026#39; . $template; List of available Hooks    Concept Hook name     Invoice displayPDFInvoice   Invoice displayInvoiceLegalFreeText   Delivery Slip displayPDFDeliverySlip   Order Return displayPDFOrderReturn   Order Slip displayPDFOrderSlip   Supply Order displayPDFSupplyOrderForm   GDPR Archive displayPDFPSGDPRModule    Minimal Example: add an extra property to the Invoice In modules/your-module/your-module.php:\n\u0026lt;?php public function hookDisplayPDFInvoice($hookArgs) { $customer = $this-\u0026gt;context-\u0026gt;customer; $hookArgs[\u0026#39;object\u0026#39;]-\u0026gt;is_birthday = $this-\u0026gt;isBirthday($customer-\u0026gt;birthday); } // Naive implementation: don\u0026#39;t do that. private function isBirthDay(string $customerBirthday) { return date(\u0026#39;y-m-d\u0026#39;) == $customerBirthday; } In themes/your-theme/pdf/invoice.note-tab.tpl:\n{* ... keep the content ... *}{if $order_invoice-\u0026gt;is_birthday}\u0026lt;tr\u0026gt; \u0026lt;td colspan=\u0026#34;12\u0026#34;\u0026gt; {l s=\u0026#39;Happy Birthday !\u0026#39; d=\u0026#39;Modules.YourModule.Pdf\u0026#39; pdf=\u0026#39;true\u0026#39;}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {/if}You will get an Invoice would look like this:\n  Invoice with extra content example   Variables For each of these templates, Smarty variables are available.\nThere is the list of the variables available:\n {lastname} {firstname} {id_order} {order_name} {delivery_block_txt} {invoice_block_txt} {delivery_block_html} {invoice_block_html} {delivery_company} {delivery_firstname} {delivery_lastname} {delivery_address1} {delivery_address2} {delivery_city} {delivery_postal_code} {delivery_country} {delivery_state} {delivery_phone} {delivery_other} {invoice_company} {invoice_vat_number} {invoice_firstname} {invoice_lastname} {invoice_address2} {invoice_address1} {invoice_city} {invoice_postal_code} {invoice_country} {invoice_state} {invoice_phone} {invoice_other} {order_name} {date} {carrier} {payment} {products} {total_paid} {total_products} {total_discounts} {total_shipping} {total_wrapping} {total_tax_paid}  They are set in the PaymentModule:validateOrder function.\nThis is also the right place to dump them and figure out what they provide. Add or alter Smarty variables As always, you can hook into this email workflow and while there are multiples hooks that can fit this specific needs, the best one is named actionGetExtraMailTemplateVars.\nOnce you get the right hook, you will be able to alter or add extra variables:\n\u0026lt;?php // your-module/your-module.php  public function install() { ... $this-\u0026gt;registerHook(\u0026#39;actionGetExtraMailTemplateVars\u0026#39;); } public function hookActionGetExtraMailTemplateVars($hookArgs) { dump($hookArgs); // Adapted from PrestaShop Email Manager Module  $hookArgs[\u0026#39;extra_template_vars\u0026#39;][\u0026#39;{password}\u0026#39;] = \u0026#39;*******\u0026#39;; } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/localhost/",
	"title": "Installating a local environment",
	"tags": [],
	"description": "",
	"content": "Installing PrestaShop for development Now that you intend to develop for PrestaShop, you are better off keeping all your development work on your machine. The main advantage is that it makes it possible for you to entirely bypass the process of uploading your file on your online server in order to test it. Another advantage is that a local test environment enables you to test code without the risk of breaking your production store. Have a local environment is the essential first step in the path of web development.\nPrerequisites Read System Requirements.\nInstalling a local environment Installing any web-application locally requires that you first install the adequate environment, namely the Apache web server, the PHP language interpreter, the MySQL database server, and ideally a MySQL admin tool such as phpMyAdmin tool.\nThis is called an *AMP package: Apache+MySQL+PHP and the operating system, giving WAMP (Windows+Apache+MySQL+PHP), MAMP (Mac OS X+…) and LAMP (Linux+…). Since all of the items packaged are open-source, these installers are most of the time free.\nHere is a selection of free AMP installers:\n XAMPP (Windows, Mac OS X, Linux, Solaris) WampServer (Windows) EasyPHP (Windows) MAMP (Windows, Mac OS X) Laragon (Windows)  To install LAMP on your computer follow these steps (tested on Debian Buster).\n Update your system  apt update   Install MySQL  apt install default-mysql-server default-mysql-client   Install Apache server  apt install apache2   Install PHP  apt install libapache2-mod-php7.3 php7.3 php7.3-common php7.3-curl php7.3-gd php7.3-imagick php7.3-mbstring php7.3-mysql php7.3-json php7.3-xsl php7.3-intl php7.3-zip    Creating a database for your shop If you are installing PrestaShop on a web server, then you must create the database and give access to a privileged user. You will need this user\u0026rsquo;s credentials to configure PrestaShop during the installation process.\nUsing phpMyAdmin We assume you have root access to phpMyAdmin, and you\u0026rsquo;re using version 4.x.\n Sign in to phpMyAdmin as the root user Click User accounts, and then click on Add user account Fill the User name and the Password In the Database for user account, select Create database and Grant all privileges Create user and database and make sure the COLLATION of your database is utf8mb4_general_ci  From the command line The database must be created with 4-Byte UTF-8 encoding (utf8mb4_general_ci). For information on installation and configuring MySQL see the MySQL 5.6 documentation. Connect as root to your MySql server. In this example our root user is called adminusername:\n$ mysql -u adminusername -p Create the database and give it a name like \u0026ldquo;prestashop\u0026rdquo;:\n\u0026gt; CREATE DATABASE prestashop COLLATE utf8mb4_general_ci; Grant privileges to that database to a new user (the one that PrestaShop will use to connect to the database). Let\u0026rsquo;s call it \u0026ldquo;prestashopuser\u0026rdquo;.\n\u0026gt; CREATE USER \u0026#34;prestashopuser\u0026#34;@\u0026#34;hostname\u0026#34; IDENTIFIED BY \u0026#34;somepassword\u0026#34;; \u0026gt; GRANT ALL PRIVILEGES ON prestashop.* TO \u0026#34;prestashopuser\u0026#34;@\u0026#34;hostname\u0026#34;; In the example above,\n prestashop is the name of the new database hostname is usually localhost (127.0.0.1 or localhost), if you don\u0026rsquo;t know the value, check with a system adminitrator somepassword must be a strong password and of course, only known by you  Finally, flush privileges:\n\u0026gt; FLUSH PRIVILEGES; Downloading PrestaShop The source code of PrestaShop is hosted on the Official PrestaShop GitHub Repository.\nYou can find all the released versions of PrestaShop here: PrestaShop releases.\nNightly releases of PrestaShop are also generated daily. Their details can be found on a public Google Cloud storage.\nChoosing the right version for you PrestaShop comes in two \u0026ldquo;flavors\u0026rdquo;:\n Release package. A zip package, tuned for production environments. Development version. The raw source code as it is on the GitHub repository, including automated test suites, build scripts and source codes for assets that are otherwise compiled (like javascript and css files).  Prefer cloning the repository using git for the development version.\nIf you intend to work on PrestaShop itself, we suggest using Git to clone the source code of PrestaShop from the GitHub repository.\n Repository branches As stated above, if you decide to work on PrestaShop itself, it\u0026rsquo;s best to clone the PrestaShop repository and work using git. Depending on the version of PrestaShop you want to work on, you will need to choose the right branch:\n The develop branch contains the current work in progress for the next minor or major version.  This is the right branch to contribute new features, refactors, small bug fixes, etc.   The maintenance branches (1.6.1.x, 1.7.0.x, 1.7.1.x, 1.7.2.x, \u0026hellip;) contains all patches made for each minor version.  For example, the 1.7.2.x branch contains all patches from 1.7.2.0 to 1.7.2.5. Whenever a new minor or major version is ready for release, a new maintenance branch is created. For example, 1.7.0.x for version 1.7.0.0, 1.7.1.x for 1.7.1.0, 1.7.2.x for 1.7.2.0, and so forth. Only the most recent maintenance branch accepts new contributions     Clone the repository using Git or extract the zip package in a prestashop folder inside the document folder of the AMP installer you chose:\n XAMPP: C:\\xampp\\htdocs or /Applications/xampp/htdocs WampServer: C:\\wamp\\www EasyPHP: C:\\easyphp\\www MAMP: /Applications/MAMP/htdocs/  Download dependencies This step is only needed if you downloaded the development version. PHP dependencies Use composer to download the project\u0026rsquo;s dependencies:\ncd /path/to/prestashop composer install # or alternatively, since 1.7.8: make composer JavaScript and CSS dependencies PrestaShop uses NPM to manage dependencies and Webpack to compile them into static assets. You only need NodeJS 8.x (12.x maximum get it here), NPM will take care of it all.\ncd /path/to/prestashop make assets Alternatively, you can compile assets manually.\nSetting up file rights PrestaShop needs recursive write permissions on several directories:\n ./admin-dev/autoupgrade ./app/config ./app/logs ./app/Resources/translations ./cache ./config ./download ./img ./log ./mails ./modules ./themes ./translations ./upload ./var  You can set up the appropriate permissions using this command:\n$ chmod +w -R admin-dev/autoupgrade app/config app/logs app/Resources/translations cache config download img log mails modules themes translations upload var If you do not have some of the folders above, please create them before changing permissions. For example:\n$ mkdir log app/logs To ease up your life on a development environment, we suggest to make Apache run with your own user and group.\nNever do that in production! Carefully change permissions folder by folder instead. Installing PrestaShop Open the PrestaShop installer and follow its instructions.\nDepending on whether you downloaded a release package or cloned the repository, the route to the installer will be slightly different:\n Release package: http://127.0.0.1/prestashop/install Development version: http://127.0.0.1/prestashop/install-dev  You can read the Getting Started guide for more details.\nTroubleshooting Compile Error: Cannot declare class AppKernel, because the name is already in use You may find this error message the first time you open up the Back Office.\nThis problem may arise in case-insensitive file systems like MacOS due to a misconfiguration. Check your Apache configuration and make sure that the root directory path to your PrestaShop matches the capitalization of the actual system path exactly. A typical error is for example having a folder named /path/to/PrestaShop (capital P, capital S) and then configuring it in Apache as /path/to/Prestashop (missing the capital S).\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Installation  System requirements for PrestaShop 1.7   Installating a local environment   Configure Apache Http   Configure Nginx   Configuration   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": "Grid tutorials  How to use Bulk actions in Grid   How to use Grid Actions   How to use Row Actions   How to work with the Search Form   How to extend a Grid with Javascript extensions   How to modify an existing Grid in a module   How to customize the Grid templates   How to create a custom Grid Action   How to create a custom Column Type   How to create an Empty state   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/action/",
	"title": "ActionColumn reference",
	"tags": [],
	"description": "",
	"content": "ActionColumn Type  This column type allows adding actions to your Grid rows. The action targets the corresponding row. For more info about possible actions see Actions reference.\nAvailable options    Properties Type Expected value     actions array default: null List of actions assigned to each row.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\ActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $actionColumn = new ActionColumn(\u0026#39;actions\u0026#39;); $actionColumn-\u0026gt;setName(\u0026#39;Actions\u0026#39;); $actionColumn-\u0026gt;setOptions([ \u0026#39;actions\u0026#39; =\u0026gt; [ -\u0026gt;add((new LinkRowAction(\u0026#39;delete\u0026#39;)) -\u0026gt;setIcon(\u0026#39;delete\u0026#39;) -\u0026gt;setOptions([ \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_custom_route\u0026#39;, \u0026#39;route_param_name\u0026#39; =\u0026gt; \u0026#39;mailId\u0026#39;, \u0026#39;route_param_field\u0026#39; =\u0026gt; \u0026#39;id_mail\u0026#39;, \u0026#39;confirm_message\u0026#39; =\u0026gt; \u0026#39;Delete selected item?\u0026#39;, ]) ) ], ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($actionColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/bulk-action/",
	"title": "BulkActionColumn reference",
	"tags": [],
	"description": "",
	"content": "BulkActionColumn Type  This column type allows adding bulk action checkboxes to your Grid. This only adds the checkbox in the grid, you can then manage bulk actions via javascript.\nAvailable options    Properties Type Expected value     bulk_field string required: The record field name that will be used as the bulk action checkbox value.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\BulkActionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $bulkActionColumn = new BulkActionColumn(\u0026#39;bulk_action\u0026#39;); $bulkActionColumn-\u0026gt;setName(\u0026#39;\u0026#39;); // it is common to set an empty name for bulk action columns $bulkActionColumn-\u0026gt;setOptions([ \u0026#39;bulk_field\u0026#39; =\u0026gt; \u0026#39;id_product\u0026#39;, ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($bulkActionColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/httpd/",
	"title": "Configure Apache Http",
	"tags": [],
	"description": "",
	"content": "Configure Apache Httpd The following file is provided as an example configuration for your Apache server. It may be incomplete, and remember you must adapt it for your own server\u0026rsquo;s needs!\n In Apache 2.4, Order Allow,Deny has been replaced by Require all granted. We assume you are using Apache Http 2.4 or higher.\n With mod_php/PHP-CGI \u0026lt;VirtualHost *:80\u0026gt; # or 443 for SSL support ServerName example.com DocumentRoot /path/to/prestashop # SSLEngine on # SSLCertificateFile /etc/apache2/ssl/example.crt # SSLCertificateKeyFile /etc/apache2/ssl/example.key \u0026lt;Directory /path/to/prestashop\u0026gt; # enable the .htaccess rewrites AllowOverride All Options +Indexes Require all granted # Disable back office token # SetEnv _TOKEN_ disabled \u0026lt;/Directory\u0026gt; ErrorLog /var/log/apache2/prestashop.error.log CustomLog /var/log/apache2/prestashop.access.log combined \u0026lt;/VirtualHost\u0026gt; With PHP-FPM You first have to ensure you have the php-fpm binary and Apache\u0026rsquo;s FastCGI installed. On a Debian based, packages are libapache2-mod-fcgid and php7.1-fpm.\nAfter installating these packages, fpm service will automatically be started. PHP-FPM uses so-called pools to handle incoming FastCGI requests.\nHere\u0026rsquo;s an example:\n; a pool called www [www] user = www-data group = www-data ; use a unix domain socket listen = /var/run/php/php7.1-fpm.sock ; or listen on a TCP socket ; listen = 127.0.0.1:9000 You also need to enable few modules that are required for the configuration of multiple PHP versions with Apache.\na2enmod alias proxy proxy_fcgi Finally, configure the Apache VirtualHost to run with FPM/FastCGI. Don\u0026rsquo;t forget to edit this configuration to make it works.\n\u0026lt;VirtualHost *:80\u0026gt; # or 443 for SSL support ServerName example.com DocumentRoot /path/to/prestashop # SSLEngine on # SSLCertificateFile /etc/apache2/ssl/example.crt # SSLCertificateKeyFile /etc/apache2/ssl/example.key # Uncomment the following line to force Apache to pass the Authorization # header to PHP: required for \u0026#34;basic_auth\u0026#34; under PHP-FPM and FastCGI # # SetEnvIfNoCase ^Authorization$ \u0026#34;(.+)\u0026#34; HTTP_AUTHORIZATION=$1 # For Apache 2.4 or higher # Using SetHandler avoids issues with using ProxyPassMatch in combination # with mod_rewrite or mod_autoindex \u0026lt;FilesMatch \\.php$\u0026gt; # SetHandler proxy:fcgi://127.0.0.1:9000 SetHandler proxy:unix:/var/run/php/php7.1-fpm.sock|fcgi://dummy \u0026lt;/FilesMatch\u0026gt; DocumentRoot /path/to/prestashop \u0026lt;Directory /path/to/prestashop\u0026gt; # enable the .htaccess rewrites AllowOverride All Options +Indexes Require all granted # Disable back office token # SetEnv _TOKEN_ disabled \u0026lt;/Directory\u0026gt; ErrorLog /var/log/apache2/prestashop.error.log CustomLog /var/log/apache2/prestashop.access.log combined \u0026lt;/VirtualHost\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-guidelines/",
	"title": "Contribution guidelines",
	"tags": [],
	"description": "",
	"content": "Contribution guidelines The PrestaShop project receives dozens of contributions every week, and every single one of them is reviewed by project maintainers. The review process ensures that only changes that meet a certain quality standard are merged in the codebase.\nReady to contribute code? Here are the rules you need to follow to get your Pull Request (or \u0026ldquo;PR\u0026rdquo;) accepted.\nThe following guidelines apply to all code contributions to the project.\nNot following these rules may lead to your contribution being rejected by project maintainers.\n Work on a separate branch Each time you want to work on a contribution, create a local dedicated branch based on the appropriate project branch (described below). Using separate branches for your contributions will allow you to submit multiple contributions at the same time, and update your contributions easily during the code review process.\nChoose the right base branch Contributions should be based on the appropriate branch, depending on the nature of your change:\n Develop. New features, bug fixes, improvements. Contributions merged here will be released in the next minor or major release. Patch version branch (eg. 1.7.4.x). For critical bug fixes and regressions only. Contributions merged here will be released in a patch version.  Maintainers will only accept contributions to branches that are subject to new releases.\n If you find a bug on an unsupported version, make sure that bug is still present in the latest version. If the bug is still present, or if you\u0026rsquo;re in doubt, please submit your Pull Request on the develop branch. Maintainers will ask you to rebase your PR on the correct branch if necessary.  For more information, see Supported branches.\n Commits   Configure git to use your real name and email address. This helps maintainers give you credit for your work.\nConsider configuring your work email address, especially if you work on PrestaShop on your company\u0026rsquo;s time:\ngit config --global user.name \u0026#34;Your Name\u0026#34; git config --global user.email yourname@yourcompany.com   Make your commits atomic. This means including only one complete fix or change per commit.\nTypically, ask yourself if what you are doing is one or several tasks.\nAtomic commits make it easier to review, cherry-pick or revert changes (hopefully we\u0026rsquo;ll never have to do that!).   Write meaningful commit messages.\n  Use interactive staging when you have made several changes in the same file but not all those changes are meant to be in a single commit.\n  Avoid merge commits in your Pull Request. They make the commit history more difficult to understand, and they can lead to hidden changes which are not visible by reviewers. If you need to resolve conflicts with the base branch, rebase your branch instead.\n  Compiled assets Some source files like SCSS and JavaScript need to be compiled to work on a PrestaShop shop.\nWe used to require these compiled files to be committed and included in the same Pull Request as the source changes.\n In the 1.7.7.x branch, compiled assets are still required and should be committed. In the develop branch, assets are no longer versioned and should no longer be committed.  More information in this article.\n Make sure to follow these guidelines:\n Compile assets for production. Check that the assets you are compiled were built using the \u0026ldquo;prod\u0026rdquo; setting instead of the \u0026ldquo;dev\u0026rdquo; one. To find out more, read How to compile assets. Commit assets and sources separately. Submit your compiled assets in a separate commit from your source changes. This will be especially helpful when rebasing, because you can just drop the commit and avoid merge conflicts. One asset commit per Pull Request. Try to avoid recompiling and committing the assets more than once. If you need to make changes and you have already committed a previous build, use interactive rebase to remove the previous commit, then compile the assets.  Pull Requests Changes submitted through your Pull Request will be reviewed by PrestaShop maintainers.\nReviewing code is hard, takes a lot of time, and can be exhausting. Making your pull request as easy to review as possible will help in getting it accepted swiftly.\n  Take time to describe your change. Completing the Pull Request Form, explaining the reasons behind your technical choices as well as any part of the code that could be tricky to understand – these simple tasks can help maintainers understand your change and be confident about acceptiong them.\n  Avoid submitting very large PRs when it can be avoided. If you modified a lot of files or a very big number of lines, it is unlikely that you\u0026rsquo;re addressing a single issue: please try and submit one PR for each issue you solve. This way, a problem in one change won\u0026rsquo;t block other valid changes from being merged.\nA PR with a lot of changed lines will take a long time to review, and consequently the reviewer might miss possible issues. If your PR is too big, it may be rejected due to risk of regressions.\n  Keep an eye on your PRs. The longer it takes to merge a PR, the more it is likely that it will be blocked by merge conflicts. Whenever a Pull Request is rebased, it has to be reviewed again, thus increasing the time to merge, thus increasing the risk of conflicts\u0026hellip;\n  Tip: smaller, tested, and well-described changes are easier to review, easier to verify and easier to merge. Third party dependencies Adding third party software in the core or in a module can sometimes be faster and easier than developing it from scratch and then maintaining it. PrestaShop uses composer and NPM to manage such dependencies.\nBefore proposing to add a new dependency, make sure you do this:\n  Discuss with project maintainers. Explain why do you want to add this dependency and how it will help solve the project.\n  Consider the dependency\u0026rsquo;s stability. Recently created libraries may have not yet reached maturity and may have errors or introduce breaking changes regularly.\n  Consider the dependency\u0026rsquo;s support. If the dependency is maintained by a single person or lacks contributors, bugs may take a long time to be fixed. Similarly, the lower the number of people working on a project, the higher the risk of it getting abandoned.\n  Consider the dependency\u0026rsquo;s license. Dependencies included in PrestaShop must be compatible with PrestaShop\u0026rsquo;s license. Here\u0026rsquo;s a list.\n  Related topics  What happens after you submit a contribution  Read more  Writing a good commit message   Describing Pull Requests   Supported branches   Contribution guidelines for modules   Compatible licenses   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/forms/crud-forms/",
	"title": "CRUD Forms",
	"tags": [],
	"description": "",
	"content": "CRUD Forms Introduction In computer programming, CRUD is an acronym for the four basic functions of persistent storage: create, read, update, and delete.\nPrestaShop handles several logic objects, like Cart, Product, Order, Customer\u0026hellip; among many others. When such objects are stored using a unique identifier, we refer to them as identifiable objects.\nIn the Back Office, most identifiable objects are managed using forms and page listings that follow the CRUD pattern. When they do, we refer to those forms as CRUD Forms.\nSince CRUD forms share a lot of common behavior, PrestaShop provides a common pattern to handle them all the same way. It is based on four main elements, each responsible for a very specific task:\n A Form Builder, that initializes the form (using a provided Form Type). A Form Handler, that handles the form when it\u0026rsquo;s submitted. A Form Data Provider that provides data to prefill the form as it\u0026rsquo;s displayed. And a Form Data Handler that saves the submitted form data to the database.  PrestaShop already provides default implementations for the first two, so in most cases you\u0026rsquo;ll be able to reuse them instead of creating your own. Form Data Provider The Form Data Provider takes care of retrieving data to fill out a form. For that, it needs to implement two methods:\n getData(mixed $id): array Retrieves data for an edit form, using the given id to retrieve the object\u0026rsquo;s data. getDefaultData(): array Returns default data for a creation form.   Creating a Form Data Provider To create a Form data provider you must implement the following interface:\n\\PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider\\FormDataProviderInterface  In the example below, you can see a ContactFormDataProvider that queries the database (in this case, using ObjectModel) to retrieve data when a specific identifiable object id (in this case, Contact) is given, and that returns static data with defaults to use when creating a new element.\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider; use Contact; final class ContactFormDataProvider implements FormDataProviderInterface { /** * Get form data for given object with given id. * * @param int $id * * @return mixed */ public function getData($contactId) { $contactObjectModel = new Contact($contactId); // check that the element exists in db  if (empty($contactObjectModel-\u0026gt;id)) { throw new PrestaShopObjectNotFoundException(\u0026#39;Object not found\u0026#39;); } return [ \u0026#39;title\u0026#39; =\u0026gt; $contactObjectModel-\u0026gt;name, ]; } /** * Get default form data. * * @return mixed */ public function getDefaultData() { return [ \u0026#39;title\u0026#39; =\u0026gt; \u0026#39;service\u0026#39;, ]; } }  This example has been simplified for practical reasons.\nThe core actually uses the CQRS pattern to retrieve data, instead of ObjectModel. For more information, have a look at our recommended approach on how to use CQRS in forms.\n Don\u0026rsquo;t forget to register your class as a service, you will need it to use it with the Form builder.\n#src/PrestaShopBundle/Resources/config/services/core/form/form_data_provider.ymlprestashop.core.form.identifiable_object.data_provider.contact_form_data_provider:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider\\ContactFormDataProvider\u0026#39;Form Builder The Form Builder is used by controllers to build the form that will be shown to users.\nPrestaShop provides a default implementation for this object.\nIt should be enough for most use cases, so you don\u0026rsquo;t need to create it yourself! It also allows your form to be extended by modules.\n The common methods that you will be using are:\n getForm(array $data = [], array $options = []): FormInterface Generates and returns the Symfony form. Additional $data and $options can be used in your form type. getFormFor(mixed $id, array $data = [], array $options = []): FormInterface Generates and returns the Symfony form for an editable object which already exists and can be identified. Additional $data and $options can be used in your form type.   Using the Form Builder In most cases, you can simply reuse the default implementation. All you need to do is declare it as a service and configure it for your form\u0026rsquo;s needs, by specifying the appropriate Form type and Form data provider.\n#src/PrestaShopBundle/Resources/config/services/core/form/form_builder.ymlprestashop.core.form.identifiable_object.builder.contact_form_builder:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\Builder\\FormBuilder\u0026#39;factory:\u0026#39;prestashop.core.form.builder.form_builder_factory:create\u0026#39;arguments:- \u0026#39;PrestaShopBundle\\Form\\Admin\\Configure\\ShopParameters\\Contact\\ContactType\u0026#39;- \u0026#39;@prestashop.core.form.identifiable_object.data_provider.contact_form_data_provider\u0026#39;In the example above, we are declaring a specific service for this form based on PrestaShop\u0026rsquo;s implementation of the Form Builder:\nPrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\Builder\\FormBuilder  \u0026hellip;which is instantiated using the base factory:\nprestashop.core.form.builder.form_builder_factory:create \u0026hellip;using two specific arguments:\n The Form Type\u0026rsquo;s class name The Form Data Provider\u0026rsquo;s service name, that we declared previously.  Finally, use it in your controller:\n\u0026lt;?php public function createAction($contactId) { $contactFormBuilder = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.builder.contact_form_builder\u0026#39;); $contactForm = $contactFormBuilder-\u0026gt;getForm(); // no id as the element does not exist yet  return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/create.html.twig\u0026#39;, [ \u0026#39;contactForm\u0026#39; =\u0026gt; $contactForm-\u0026gt;createView(), ]); } public function editAction($contactId) { $contactFormBuilder = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.builder.contact_form_builder\u0026#39;); $contactForm = $contactFormBuilder-\u0026gt;getFormFor($contactId); return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/edit.html.twig\u0026#39;, [ \u0026#39;contactForm\u0026#39; =\u0026gt; $contactForm-\u0026gt;createView(), ]); } Form that is rendered following PretaShop\u0026rsquo;s UI kit should look like this:\n  Result of form builder   Form Data Handler The Form Data Handler is responsible for persisting the data submitted through your form. It implements the following methods:\n create(array $data): mixed Creates a new identifiable object using the provided data and returns the created object\u0026rsquo;s id. update(mixed $id, array $data): void Updates the object identified by $id using the provided data   Creating a Form Data Handler When creating your Form Data Handler you must implement the following interface:\n\\PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler\\FormDataHandlerInterface  In the example below, you can see a ConctactFormDataHandler that uses ObjectModel to create and update an instance of Contact:\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler; final class ContactFormDataHandler implements FormDataHandlerInterface { /** * Create object from form data. * * @param array $data * * @return mixed */ public function create(array $data) { $contactObjectModel = new Contact(); // add data to object model  // ...  $contactObjectModel-\u0026gt;save(); return $contactObjectModel-\u0026gt;id; } /** * Update object with form data. * * @param int $id * @param array $data */ public function update($id, array $data) { $contactObjectModel = new Contact(id); // update data to object model  // ...  $contactObjectModel-\u0026gt;update(); } }  This example has been simplified for practical reasons.\nThe core actually uses the CQRS pattern to retrieve data, instead of ObjectModel. For more information, have a look at our recommended approach on how to use CQRS in forms.\n Don\u0026rsquo;t forget to register your Form Data Handler as a service, you will need it to use it with your Form Handler.\n#src/PrestaShopBundle/Resources/config/services/core/form/form_data_handler.ymlprestashop.core.form.identifiable_object.data_handler.contact_form_data_handler:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler\\ContactFormDataHandler\u0026#39;Form Handler The Form Handler is in charge of validating, enriching and saving submitted form data, using the provided Form Data Handler.\nPrestaShop provides a default implementation for this object.\nIt should be enough for most use cases, so you don\u0026rsquo;t need to create it yourself! It also allows your form to be extended by modules.\n It provides two methods:\n handle(FormInterface $form): FormHandlerResultInterface Saves form data by creating new instance of the related identifiable object. handleFor($id, FormInterface $form): FormHandlerResultInterface Saves form data by updating the related object identified by $id.   Both methods return an instance of FormHandlerResultInterface that provides information about the process result:\n isValid(): bool Indicates whether the form contains errors or not isSubmitted(): bool Indicates if the form was submitted getIdentifiableObjectId(): mixed Returns the Id of the identifiable object created by the form submit, if applicable   Using the Form Handler Much like with the Form Builder, in most cases you can reuse the default implementation by declaring it as a service and configuring it according to your form\u0026rsquo;s needs:\n#src/PrestaShopBundle/Resources/config/services/core/form/form_handler.ymlprestashop.core.form.identifiable_object.handler.contact_form_handler:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\Handler\\FormHandler\u0026#39;factory:\u0026#39;prestashop.core.form.identifiable_object.handler.form_handler_factory:create\u0026#39;arguments:- \u0026#39;@prestashop.core.form.identifiable_object.data_handler.contact_form_data_handler\u0026#39;In the example above, we are declaring a specific service for this form handler, based on PrestaShop\u0026rsquo;s implementation of the Form Handler:\nPrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\Handler\\FormHandler \u0026hellip;wich is instantiated using the base factory:\nprestashop.core.form.identifiable_object.handler.form_handler_factory:create \u0026hellip;using the Form Data Handler that we declared previouly.\nFinally, you can use it in your controller like this:\n\u0026lt;?php public function createAction(Request $request) { $contactFormBuilder = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.builder.contact_form_builder\u0026#39;); $contactForm = $contactFormBuilder-\u0026gt;getForm(); $contactForm-\u0026gt;handleRequest($request); $contactFormHandler = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.handler.contact_form_handler\u0026#39;); $result = $contactFormHandler-\u0026gt;handle($contactForm); if (null !== $result-\u0026gt;getIdentifiableObjectId()) { $this-\u0026gt;addFlash(\u0026#39;success\u0026#39;, $this-\u0026gt;trans(\u0026#39;Successful creation.\u0026#39;, \u0026#39;Admin.Notifications.Success\u0026#39;)); return $this-\u0026gt;redirectToRoute(\u0026#39;admin_contacts_index\u0026#39;); } return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/create.html.twig\u0026#39;, [ \u0026#39;contactForm\u0026#39; =\u0026gt; $contactForm-\u0026gt;createView(), ]); } public function editAction($contactId, Request $request) { $contactFormBuilder = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.builder.contact_form_builder\u0026#39;); // we use getFormFor() instead of getForm() since we now have an id  $contactForm = $contactFormBuilder-\u0026gt;getFormFor($contactId); $contactForm-\u0026gt;handleRequest($request); $contactFormHandler = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.handler.contact_form_handler\u0026#39;); // we use handleFor() instead of handle() since we now have an id  $result = $contactFormHandler-\u0026gt;handleFor($contactId, $contactForm); if ($result-\u0026gt;isSubmitted() \u0026amp;\u0026amp; $result-\u0026gt;isValid()) { $this-\u0026gt;addFlash(\u0026#39;success\u0026#39;, $this-\u0026gt;trans(\u0026#39;Successful update.\u0026#39;, \u0026#39;Admin.Notifications.Success\u0026#39;)); return $this-\u0026gt;redirectToRoute(\u0026#39;admin_contacts_index\u0026#39;); } return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/edit.html.twig\u0026#39;, [ \u0026#39;contactForm\u0026#39; =\u0026gt; $contactForm-\u0026gt;createView(), ]); } Let\u0026rsquo;s analyze the create flow in the example above.\nFirst, we create the form using the FormBuilder:\n\u0026lt;?php $contactFormBuilder = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.builder.contact_form_builder\u0026#39;); $contactForm = $contactFormBuilder-\u0026gt;getForm(); Then, we merge the form\u0026rsquo;s data with the one from the Request (if submitted):\n\u0026lt;?php $contactForm-\u0026gt;handleRequest($request); Afterwards, we process the form (this will save the form in case it was sent, and do nothing otherwise), and save the result of the process for further analysis:\n\u0026lt;?php $contactFormHandler = $this-\u0026gt;get(\u0026#39;prestashop.core.form.identifiable_object.handler.contact_form_handler\u0026#39;); $result = $contactFormHandler-\u0026gt;handle($contactForm); Now, if the form was actually saved and everything went well, we can show a success message and redirect to the listing page:\n\u0026lt;?php if (null !== $result-\u0026gt;getIdentifiableObjectId()) { $this-\u0026gt;addFlash(\u0026#39;success\u0026#39;, $this-\u0026gt;trans(\u0026#39;Successful creation.\u0026#39;, \u0026#39;Admin.Notifications.Success\u0026#39;)); return $this-\u0026gt;redirectToRoute(\u0026#39;admin_contacts_index\u0026#39;); } Finally, if the form wasn\u0026rsquo;t submit or if something went wrong, we just show the form.\n\u0026lt;?php return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Configure/ShopParameters/Contact/Contacts/create.html.twig\u0026#39;, [ \u0026#39;contactForm\u0026#39; =\u0026gt; $contactForm-\u0026gt;createView(), ]); The edit flow works exactly the same, with minimal changes:\n-$contactFormBuilder-\u0026gt;getForm(); +$contactFormBuilder-\u0026gt;getFormFor($contactId); and\n-$contactFormHandler-\u0026gt;handle($contactForm); +$contactFormHandler-\u0026gt;handleFor($contactId, $contactForm);  This example has been simplified for practical reasons.\nThe core actually uses CQRS to handle data persistence, which raises a DomainException in case of a constraint error (for example, if the identifiable object you are trying to edit doesn\u0026rsquo;t exist). This is handled in the controller by wrapping the code in a try-catch block, then flashing an error message accordingly.\nFor more details, check out the ContactsController source code on GitHub.\n Summary as a schema The following schema depicts the complete form flow, including the Domain tier which uses the CQRS pattern. Learn more about it here.\n  Identifiable object forms schema   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/domain/data-transfer-objects/",
	"title": "Data Transfer Objects",
	"tags": [],
	"description": "",
	"content": "Data Transfer Objects PrestaShop is using Data Transfer Objects (or DTOs) in its codebase, in this section you learn how you can benefit from using DTOs as well.\nWhat is Data Transfer Object? Data Transfer Object is object (e.g. UserData) that contains data in a structured format. This means that DTO usually comes with getter methods or public properties for accessing it\u0026rsquo;s data. The main benefit of using DTOs is that you know what data it has.\nFor example, if DTO has method getName() you can be sure that name is there, unlike using arrays, when you never know if key name exists inside an array or not. By making effective use of DTOs you are also making your code more readable and maintainable.\nBenefits of using DTOs:\n Enables typehints. DTOs are valid because built (you cannot \u0026ldquo;skip\u0026rdquo; one of the keys). Helps isolate different parts of system.  Examples of Data Transfer Objects in PrestaShop PrestaShop extensively uses DTOs in it\u0026rsquo;s QueryHandlers (you can learn more about it in CQRS section). As an example, you can take a look at GetCustomerForEditingHandlerInterface below.\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryHandler; use PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\EditableCustomer; use PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\Query\\GetCustomerForEditing; interface GetCustomerForEditingHandlerInterface { /** * @param GetCustomerForEditing $query * * Handler returns EditableCustomer DTO instead of unstructured array, * thus allowing developer to know exactly what data can be accessed. * * @return EditableCustomer */ public function handle(GetCustomerForEditing $query); } Now imagine you are using implementation of GetCustomerForEditingHandlerInterface handler in your code.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Domain\\Customer\\QueryResult\\EditableCustomer; /** EditableCustomer $editableCustomer */ $editableCustomer = $handler-\u0026gt;handle($query); // You don\u0026#39;t need to add additional assertions to see if customer\u0026#39;s first name exists // as DTO explicity provides you it via getter method. $editableCustomer-\u0026gt;getFirstName(); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-guidelines/pull-requests/",
	"title": "Describing Pull Requests",
	"tags": [],
	"description": "",
	"content": "The Pull Request form When you create a new Pull Request, you will be presented with a form that looks like this:\nThe first step is to write a summary of your pull request\u0026rsquo;s purpose in its GitHub title.\nWriting a good title A Pull Request title should be short, but precise enough to describe the changes it introduces and how they impact the software.\nPlease respect the following rules:\n Be descriptive. Avoid laconic or non-descriptive sentences, like \u0026ldquo;Fix bug\u0026rdquo; or \u0026ldquo;Update file.php\u0026rdquo;. Write full sentences. Avoid writing sentences without verbs, like \u0026ldquo;Yaml standards\u0026rdquo;. Use the imperative mood (eg. \u0026ldquo;Add foo bar\u0026rdquo; instead of \u0026ldquo;Added\u0026hellip;\u0026quot; or \u0026ldquo;Adding\u0026rdquo;). This will help keep changelog style coherent. Don\u0026rsquo;t include references. Don\u0026rsquo;t add issue references like \u0026quot;#12314 Fix issue on\u0026hellip;\u0026quot; or tags like \u0026quot;[BO] Fix bug where\u0026hellip;\u0026quot;. The PR table is there for that.  Here are some good examples:\n Fix fatal error when trying to sign up on Chrome Prevent users from deleting their own profile on the users listing Reduce memory usage on the Front Office home Add button to close the welcome message on first login Migrate product page to Symfony  Why this is important?\nPull Requests titles are used to build the Changelog we publish on each release. Here\u0026rsquo;s an example.\n The Pull Request form Once you have chosen a title for your Pull Request, you are asked to fill out the Pull Request table. Filling it out properly is mandatory.\nAlong other reasons, it helps maintainers:\n Make sure that the change works as expected Track when a change fixes a known issue Track if a change introduced affects backwards compatibility (BC breaks) Build the change log (changes are grouped by type and category).  Let\u0026rsquo;s see what each of the rows is for.\nBranch This part is needed to cross-check that your PR targets the branch that you intended. Just write the name of the target branch, as explained in Supported branches.\nDescription Describing your change and the reasoning behind it is extremely important for it to be reviewed and approved. Explain, in as much detail as you can, what did you change and why.\nIf you need space, just write a short summary about your change in the table, then describe in more detail below it. You are also encouraged to add links, files, screenshots\u0026hellip; anything that can help reviewers understand why the change is needed, and why it\u0026rsquo;s valid.\nTip: If you find yourself short on inspiration, use this Pull Request as an example. Type \u0026amp; Category Type is used to describe what kind of a change your Pull Request is. Refer to the following table to choose the most appropriate:\n   Type Scope     bug fix The changes fix a bug.   improvement The changes improve an already existing feature (eg. cosmetic or UX changes, performance improvement, etc).   new feature The changes introduce a behavior that didn\u0026rsquo;t exist before (eg. add a button, a new page, a new block\u0026hellip;)   refacto The changes only refactor code, without changing any of its side effects.    The category is the main part of the project affected by your changes. Choose the code that most closely describes your change:\n   Code Scope     FO The changes impact the Front Office   BO The changes impact the Back Office   IN The changes impact the Installer   WS The changes impact the Web Services   CO The changes impact the Core (non-visible functionality)   LO The changes impact localization functionality   TE The changes impact automated tests   ME The changes only import a git branch into another (eg. merge maintenance branch into develop)   PM The changes are related to project management (eg. edit Github pull request form)    Remember, this is only needed for the Pull Request form, not for your commit messages. Why is this important?\nWe use type \u0026amp; category to group changes in the changelog.\n BC breaks It is very important to note if your change introduces backwards incompatible changes (also referred to as \u0026ldquo;backward compatiblity breaks\u0026rdquo; or \u0026ldquo;BC breaks\u0026rdquo;).\nHere are some examples of changes that can be considered breaking changes:\n Change any public method signature in any class (rename, change its return type or structure, remove a parameter, or change its type). Change any public property in any class. Rename, move, or delete any class or class namespace. Add new requirements (like dropping support for old versions of PHP or browsers, requiring new server-side libraries, etc.) Replace any subsystem (like updating libraries to new major versions or replacing a library with another).  Be aware that introducing a breaking change, even when justified, may force maintainers to reject your Pull Request. Deprecations If your code introduces deprecations, please note them here.\nFixed ticket If your Pull Request resolves an existing issue, please note it using the magic word \u0026ldquo;Fixes\u0026rdquo;, followed by the issue number, like this: Fixes #12314.\nUsing the appropriate syntax will link your Pull Request to that issue, and will automatically close it once your Pull Request is merged. If no issue is linked to your Pull Request, maintainers might ask you to create one. This helps the team track what goes in a release and the status of each individual change.\nHow to test In addition to being code reviewed, each individual contribution is manually verified by PrestaShop\u0026rsquo;s QA team. In order to effectively confirm that your change doesn\u0026rsquo;t introduce new errors, please describe how to best verify that your change does what you expect it to do. Feel free to write as much details as you can outside the table if needed.\nThink about tests!\nIncluding automated tests (unit, integration or functional) that verify your changes can singificantly increase the chances that your Pull Request is accepted.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/",
	"title": "Extension concepts",
	"tags": [],
	"description": "",
	"content": "Extension concepts  Configuration   Hooks   Widgets   Controllers   Forms   Templating   Doctrine   Overrides   External dependencies \u0026amp; autoload with Composer   Services   Symfony extension concepts   Commands   Pdf Files   Mail Templates   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/file-structure/",
	"title": "File structure",
	"tags": [],
	"description": "",
	"content": "File structure Here\u0026rsquo;s the typical directory structure of a PrestaShop install:\n. ├── admin ├── app ├── bin ├── cache ├── classes ├── config ├── controllers ├── docs ├── download ├── img ├── install ├── js ├── localization ├── mails ├── modules ├── override ├── pdf ├── src ├── tests ├── tests-legacy ├── themes ├── tools ├── translations ├── travis-scripts ├── upload ├── var ├── vendor └── webservice Folder reference /admin The admin directory contains the main endpoint to access the Back Office. When accessing this folder with your browser, you will be asked your employee credentials.\nFor an added security layer, consider protecting this folder with a .htaccess or .htpasswd file. This directory is named admin-dev when using PrestaShop from source code, and is renamed automatically when you install it from a ZIP package.\nIt contains the following subdirectories:\n /autoupgrade: scratch directory for the 1-click upgrade module /backups: contains database backups generated from the Back office /export: contains data export files /filemanager: sources for the Back office file manager /import: contains data import files /themes: contains the templates for two back office themes, default and new-theme.  /app This directory contains the configuration for the bundles and the framework.\nIt contains the following subdirectories:\n /config: configuration files for database, parameters, services, etc. /logs: execution logs /Resources: different resources for the software, most notably the /translations subdirectory which contains translation resources for all the installed languages. /test: reserved  This directory also includes the AppKernel.php file, which configures the Symfony application.\n/bin Contains executable binaries installed by the framework, such as the Symfony console.\n/cache Contains temporary cache files. No longer used by PrestaShop but kept for backwards compatibility.\n/classes Contains all the legacy classes, including:\n Object models Utility classes (like Db, Helper, Tools\u0026hellip;) Base controlllers (like FrontController, AdminController\u0026hellip;)  /config Contains bootstrapping and configuration files. Unless asked, you should never edit them, as they are directly handled by PrestaShop\u0026rsquo;s installer and back office.\n/controllers Contains controllers – as in Model-View-Controller (or MVC), the software architecture used by PrestaShop. Each file controls a specific part of PrestaShop.\nControllers are separated in two directories:\n /admin: contains legacy controllers for the Back Office /front: contains controllers for the Front Office  /docs Contains documentation files, licenses, sample import files, and more.\nYou should delete this directory in a production environment. /download Contains your virtual products, which can be downloaded by the customers who bought them. Files are stored with an md5 filename.\n/img Contains all of PrestaShop\u0026rsquo;s default images, icons and picture files – that is, those that do not belong to the theme.\nIt contains the following subdirectories:\n /admin: Back office images /c: Category pictures /cms: CMS pictures /co: Attributes (colors) pictures /flags: Country \u0026amp; language flags 1.7.7   /genders: Gender (Shop Parameters \u0026gt; Customers \u0026gt; Client titles) pictures /jquery-ui: jQuery UI images /l: Language pictures /m: Manufacturer pictures /os: Order state pictures /p: Product pictures /s: Carrier pictures /scenes: Category scene pictures (removed since 1.6) /st: Stores (Shop Parameters \u0026gt; Contact \u0026gt; Stores) pictures /su: Supplier pictures /t: Tab icons /tmp: Temporary pictures  /install Contains all the files related to PrestaShop\u0026rsquo;s installer. This directory is named install-dev when using PrestaShop from source code.\nFor security reasons, you will be required to delete this directory after installation. /js Contains JavaScript files that are not attached to themes. Most of them belong to the back office.\nThis is also where you will find the jQuery framework.\n/localization Contains all of PrestaShop\u0026rsquo;s localization packs — that is, files that contain local information such as default currencies and languages, tax rules and tax rule groups, states and measurement units in use in each country.\nThe CLDR database is also located in this directory.\n/mails Contains all HTML and text templates for e-mails sent by PrestaShop. Each language has its specific folder, where you can manually edit their content if you wish. PrestaShop contains a tool to edit your e-mails, located in the back office, in the Localization \u0026gt; Translation page.\nSince 1.7.6  this directory also contains Mail themes.\n/modules Contains all of PrestaShop\u0026rsquo;s modules, each in its own folder.\nIf you wish to definitely remove a module, it is better to uninstall it from the back office. /override Contains class overrides. To learn more about this feature, read the Overrides section.\nNote: overrides are not recommended for modules that you intend to distribute/sell, and are strictly forbidden in partner modules. Keep them for your own shop. /pdf Contains all the template files (.tpl) related to PDF file generation (invoice, delivery slips, etc.). Change these files in order to change the look of the PDF files that PrestaShop generates.\n/src Contains the new architecture files (Core, Adapter and PrestaShop Bundle). To learn more, see Understanding the \u0026ldquo;src\u0026rdquo; folder.\n/tests Contains automated tests. This directory is not included in release packages.\nTests are split in three big families:\n Integration: contains behavior and integration tests. E2E (or UI since 1.7.7  ): contains end-to-end tests. Unit: contains unit tests.  /tests-legacy Contains old automated tests currently being rewritten. This directory is not included in release packages.\n/themes Contains all the currently installed themes, each in its own folder.\nIt also includes the core.js library.\n/tools Contains development tools. This directory is not included in release packages.\nIt contains the following subdirectories:\n /assets: Script that allow building all static assets from sources. /build: Used to create release packages. /foreignkeyGenerator: Creates forign keys for all tables (for educational purposes only) /profiling: Profiling tools for legacy classes  /translations Contains zip packages for the translation packs you downloaded.\n/travis-scripts Contains Travis-specific scripts (we use Travis as our CI management system for pull requests). This directory is not included in release packages.\n/upload Contains the files that would be uploaded by clients for customizable products (for instance, a picture that a client wants to have printed on a mug).\n/var Contains various files needed by PrestaShop for its internal operation, including cache files, log files, sessions files \u0026hellip;\n/vendor Contains various 3rd-party libraries required by PrestaShop through Composer, such as Symfony, Doctrine, Guzzle, etc.\n/webservice Contains the main endpoint for the Webservice API.\nFolders removed in 1.7 The following root folders have been removed between 1.6 and 1.7:\n /css: contained all the CSS files that are not attached to themes – hence, these were mostly used by the PrestaShop back office, and have now been moved to the theme.css file in the /admin/themes/new-theme/public folder. /log: contains the log files generated by PrestaShop at various stages, for instance during the installation process.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/forms/",
	"title": "Forms",
	"tags": [],
	"description": "",
	"content": "Forms Legacy forms Forms are the biggest part of the migration. Before, we had form helpers that took care of generating, validating and handling everything. In Symfony, every step (creation, validation and request handling) needs to be specified by the developer.\nFor instance, this is code that you can find in a Legacy Controller:\n\u0026lt;?php $this-\u0026gt;fields_options = array( \u0026#39;general\u0026#39; =\u0026gt; array( \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Logs by email\u0026#39;, array(), \u0026#39;Admin.Advparameters.Feature\u0026#39;), \u0026#39;icon\u0026#39; =\u0026gt; \u0026#39;icon-envelope\u0026#39;, \u0026#39;fields\u0026#39; =\u0026gt; array( \u0026#39;PS_LOGS_BY_EMAIL\u0026#39; =\u0026gt; array( \u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Minimum severity level\u0026#39;, array(), \u0026#39;Admin.Advparameters.Feature\u0026#39;), \u0026#39;hint\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Enter \u0026#34;5\u0026#34; if you do not want to receive any emails.\u0026#39;, array(), \u0026#39;Admin.Advparameters.Help\u0026#39;), \u0026#39;cast\u0026#39; =\u0026gt; \u0026#39;intval\u0026#39;, \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;text\u0026#39;, ), ), \u0026#39;submit\u0026#39; =\u0026gt; array(\u0026#39;title\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;Save\u0026#39;, array(), \u0026#39;Admin.Actions\u0026#39;)), ), ); This is how this configuration is rendered by the legacy controller, without having to write anything in the templates:\nThe block is rendered and mapped to the controller url, the form is validated and mapped to the PS_LOGS_BY_EMAIL configuration key and automatically persisted in database, the label has a hint message in rollover.\nLet\u0026rsquo;s see how this is done in modern pages.\nModern forms In modern pages, form management is decoupled from Controllers. You need to create your forms, validate them, map them to the current HTTP request and persist data yourself. You also need to create your form templates too, but we have a nice form theme which will help you a lot.\nModern pages use Symfony forms. To learn the basics of Symfony forms, read their official documentation. Form types Form types must be created in the src/PrestaShopBundle/Form/Admin/{Menu}/{Page}/ folder. You can check out the existing forms to see how they are created. If you already know your way around Symfony forms, most of this will sound familiar to you.\nPrestaShop provides some built-in Form types that will help you integrate the specific form components PrestaShop uses in the Back Office. You\u0026rsquo;ll find them inside the Types folder:\n ChoiceCategoriesTreeType CustomMoneyType DatePickerType TextWithUnitType \u0026hellip;  Most of the components from the PrestaShop UI Kit are implemented as Form Types.\nBefore creating a new form type, check this folder first to see if the type already exists. Forms are created and declared as services that you can use inside your Controllers – this is covered in the [Controllers/Routing section][controllers-and-routing] of this guide.\nLearn more  CRUD Forms   Settings Forms   CQRS usage in forms   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/head/",
	"title": "Head",
	"tags": [],
	"description": "",
	"content": "Head The head part is very important in term of SEO and performances.\nHave look at Classic\u0026rsquo;s head part to see real life examples.\nAssets PrestaShop 1.7 changed the way asset works and it means the way to it\u0026rsquo;s added inside the \u0026lt;head\u0026gt; tag of your page changed a bit too.\nThere are 2 importants files to use:\n _partials/stylesheets.tpl _partials/javascript.tpl  These 2 files are used to take full advantage of the new features of 1.7, like async loading for javascript or automatic inline for CSS.\nThe _partials/javascript.tpl has to be included at the bottom of your page as well. {block name=\u0026#39;stylesheets\u0026#39;} {include file=\u0026#34;_partials/stylesheets.tpl\u0026#34; stylesheets=$stylesheets} {/block} {block name=\u0026#39;javascript_head\u0026#39;} {include file=\u0026#34;_partials/javascript.tpl\u0026#34; javascript=$javascript.head vars=$js_custom_vars} {/block} Those 2 subtemplates are very simple, they loop and print each provided assets.\nSEO A lot of meta and SEO information belong here, there is a special block for it so template which extend this layout can easily redefine the page title or description.\n{block name=\u0026#39;head_seo\u0026#39;} \u0026lt;title\u0026gt;{block name=\u0026#39;head_seo_title\u0026#39;}{$page.meta.title}{/block}\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;{block name=\u0026#39;head_seo_description\u0026#39;}{$page.meta.description}{/block}\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;keywords\u0026#34; content=\u0026#34;{block name=\u0026#39;head_seo_keywords\u0026#39;}{$page.meta.keywords}{/block}\u0026#34;\u0026gt; {if $page.meta.robots !== \u0026#39;index\u0026#39;} \u0026lt;meta name=\u0026#34;robots\u0026#34; content=\u0026#34;{$page.meta.robots}\u0026#34;\u0026gt; {/if} {if $page.canonical} \u0026lt;link rel=\u0026#34;canonical\u0026#34; href=\u0026#34;{$page.canonical}\u0026#34;\u0026gt; {/if} {/block} "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/mail-templates/add-a-layout-from-module/",
	"title": "How to add a layout in a theme from a module",
	"tags": [],
	"description": "",
	"content": "How to add a layout in a theme from a module You can add your own mail layouts from your module, they will then be included during email generation. Each time you install a language or if you generate them via the back office your layout will be rendered, translated and exported in the appropriate folders.\nLet\u0026rsquo;s assume for this example you want to add your layout for both themes classic and modern. You will first have to prepare your layouts, let\u0026rsquo;s say you store them in the mail/layouts folder of your module.\nLayouts {# modules/my_email_theme_module/mails/layout/custom_classic_layout.html.twig #}{# You can use the theme layout (if present) to extend it easily #}{% extends \u0026#39;@MailThemes/classic/components/layout.html.twig\u0026#39; %}{% block content %}\u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34;\u0026gt; \u0026lt;font size=\u0026#34;2\u0026#34; face=\u0026#34;{{ languageDefaultFont }}Open-sans, sans-serif\u0026#34; color=\u0026#34;#555454\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;{{ \u0026#39;This is an example mail template from my module for classic theme\u0026#39;|trans({}, \u0026#39;EmailsBody\u0026#39;, locale)|raw }}\u0026lt;/span\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;space_footer\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; {% endblock %}{# modules/my_email_theme_module/mails/layout/custom_modern_layout.html.twig #}{% extends \u0026#39;@MailThemes/modern/components/layout.html.twig\u0026#39; %}{% block content %}\u0026lt;table width=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34;\u0026gt; \u0026lt;font size=\u0026#34;2\u0026#34; face=\u0026#34;{{ languageDefaultFont }}Open-sans, sans-serif\u0026#34; color=\u0026#34;#555454\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;{{ \u0026#39;This is an example mail template from my module for modern theme\u0026#39;|trans({}, \u0026#39;EmailsBody\u0026#39;, locale)|raw }}\u0026lt;/span\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;space_footer\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; {% endblock %}Using the hook Now you need to add your layout to the theme\u0026rsquo;s layout collection, in order to do so you will use the actionListMailThemes hook.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\Layout; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCatalogInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollectionInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeInterface; class my_email_theme_module { public function install() { return parent::install() // This class constant contains \u0026#39;actionListMailThemes\u0026#39;  \u0026amp;\u0026amp; $this-\u0026gt;registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function uninstall() { return parent::uninstall() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function enable() { return parent::enable() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function disable() { return parent::disable() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } /** * @param array $hookParams */ public function hookActionListMailThemes(array $hookParams) { if (!isset($hookParams[\u0026#39;mailThemes\u0026#39;])) { return; } /** @var ThemeCollectionInterface $themes */ $themes = $hookParams[\u0026#39;mailThemes\u0026#39;]; /** @var ThemeInterface $theme */ foreach ($themes as $theme) { if (!in_array($theme-\u0026gt;getName(), [\u0026#39;classic\u0026#39;, \u0026#39;modern\u0026#39;])) { continue; } // Add a layout to each theme (don\u0026#39;t forget to specify the module name)  $theme-\u0026gt;getLayouts()-\u0026gt;add(new Layout( \u0026#39;custom_template\u0026#39;, __DIR__ . \u0026#39;/mails/layouts/custom_\u0026#39; . $theme-\u0026gt;getName() . \u0026#39;_layout.html.twig\u0026#39;, \u0026#39;\u0026#39;, $this-\u0026gt;name )); } } } You can then go to the \u0026ldquo;Design \u0026gt; Email Theme\u0026rdquo; page and preview the classic or modern layouts list.\n  Your custom template are now in the themes\u0026#39; layout list   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute-pull-requests/",
	"title": "How to contribute code changes",
	"tags": [],
	"description": "",
	"content": "How to contribute code changes If you\u0026rsquo;re reading this, thank you! This means you\u0026rsquo;re interested in contributing to PrestaShop.\nTo be able to contribute you need:\n a GitHub account (you can create one for free) to know the basics of git and how to use a GitHub fork to be able to run PrestaShop from source code  PrestaShop is hosted on GitHub. The way to submit code changes to the project is through the standard forks and pull requests flow, which is explained in the GitHub Forking Guide.\nIf you have trouble using this flow, you can find out more at GitHub help or by reading one of these detailed tutorials:\n The beginner\u0026rsquo;s guide to contributing to a GitHub project  Using the Fork-and-Branch Git Workflow  How to contribute (via pull request) to an open-source GitHub project using your own fork How to Fork and contribute to a Github repo  While it may seem complex, this flow is the standard way most open source projects use to handle contributions. This article about the flow can help you understand the reasons for each part of the process.\nIf you wish to start contributing smoothly, have a look at issues labelled \u0026ldquo;good first issue\u0026rdquo; and pick one to work with. This label lists all beginner-friendly bugs and improvements. Read more about this label on Build. In this section We explain two ways to run PrestaShop from the sources: using docker or localhost\n Contribute using localhost   Contribute using Docker   How to push your changes to GitHub   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/how-to-create-your-own-symfony-controller-tests/",
	"title": "How to create your own symfony controller tests",
	"tags": [],
	"description": "",
	"content": "How to create your own symfony controller tests or add tests to PrestaShop If you create your own Modern (symfony) controllers or if you plan on migrating a legacy controller, you can create tests to cover parts of HTTP layer aka symfony functional tests.\nCreating a functional test To create a functional test, we encourage you to base your test class on our own implementation of WebTestCase.\nFor instance:\n\u0026lt;?php namespace Tests\\Functional\\Foo; use Tests\\Integration\\PrestaShopBundle\\Test\\WebTestCase; class BarTest extends WebTestCase { public function testSomeAction() { $url = this-\u0026gt;router-\u0026gt;generate(\u0026#39;route_name\u0026#39;); $this-\u0026gt;client-\u0026gt;request(\u0026#39;GET\u0026#39;, $url); $response = $this-\u0026gt;client-\u0026gt;getResponse(); self::assertTrue($response-\u0026gt;isSuccessful()); } } Find out more in Symfony\u0026rsquo;s documentation on functional testing.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/how/edit-on-your-computer/",
	"title": "How to edit a page on your computer",
	"tags": [],
	"description": "",
	"content": "How to edit a page on your computer using Git Running a local copy of DevDocs on your computer is the best way to work on this project. Even though it requires a little extra work to set up, you will gain the ability to preview your changes almost instantly, as well as being able to introduce more than one change at a time.\nPrerequisites To run a local DevDocs install on your system, you will need:\n Basic knowledge of your platform\u0026rsquo;s command line. A GitHub account (That you can create for free). Git (Setup guide). Hugo site generator 0.55.0+ (Install guide).  Installation Follow this guide to install a local DevDocs.\nSubmitting your changes We recommend following the GitHub workflow, which involves creating a new branch for each \u0026ldquo;feature\u0026rdquo; you work on.\nThis also involves working on your own fork (learn how) before submitting a Pull Request.\nTo fork this project on GitHub, head to the project\u0026rsquo;s repository, then click on the \u0026ldquo;Fork\u0026rdquo; button on the top right corner of the screen.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/migration/",
	"title": "How to migrate to PrestaShop 1.7",
	"tags": [],
	"description": "Learn how to migrate your current shop (1.6 or previous version) to PrestaShop 1.7",
	"content": "How to migrate to PrestaShop 1.7 Manual migration - Process details We will use the ETL (Extract - Transform - Load) process to complete a migration, a concept usually applied to data warehouses.\nThe database structure may change with each new release of PrestaShop, but major versions may also imply features being replaced, preventing a shop to be smoothly upgraded in some cases. For these shops, a migration is a solution to be able to keep up with new releases.\nWe will cover the 3 main steps in this chapter:\n Extract data to be transfered Add / modify / delete some values if needed Import data on the new shop  Exporting data from the source In difference with an upgrade, we won’t modify the database directly. We need to export the data first. We use CSV files here, the most compatible and generic format.\nExporting data can be done\n Via the PrestaShop administration panel, With your MySQL client.  Depending on the way you export your data, you won’t get the same amount of data in your exports.\nLight - Via the administration panel Exporting data is quite straightforward. On each controller dedicated to the data you want to export, you will find action buttons at the top right of the page:\n  Export button in action bar   For instance for your products on PrestaShop 1.7:   Action bar localization   Clicking on the “Export” button will make your browser download a CSV file, which contains the complete product list with the columns displayed on the page.\nWith the same process, you can export the following data:\n (Brand) Addresses (Customer) Addresses (Product) Attributes Brands Carts Categories Customers (Product) Features Orders Stocks Suppliers  The extraction will contain values for the current language. If your shop is multilang, you must switch your lang in your employee configuration (accessible from the top right corner of the page) and repeat the extraction. This method is limited to the displayed details (= what you see on the table), thus can be far from being exhaustive. In the case you want more or all columns, you may prefer to proceed manually with your own SQL client.\nComplete - Via a MySQL client Advanced users can use their own client to extract data in CSV. This option give full control on the data to export.\nChoosing an extraction in CSV will allow you to bring changes easily with a spreadsheet editor, like Microsoft Excel or LibreOffice Calc.\nphpMyAdmin On phpMyAdmin, exporting in CSV can be done on the same page as the classic SQL dump.\nQuick and complete export (recommended) This step can be completed straightforwardly by exporting all tables in a single call. Click on your database, then the “Export” button to start:\n  Note the breadcrumb in the header will tell you if you are in a database or a table context. If you clicked on this button by mistake while being on a table, you will end on the export of a specific table as titled on this screenshot:\n  Whatever you choose between exporting the whole database in a single call or exporting your tables one by one, you must choose to export in “CSV” or “CSV for MS Excel”.\nThe available options will be updated:\n  If you want to export several tables at the same time, this can be done by selecting them from the list. The tables running with your shop start with the prefix given in your shop configuration (by default ps_). If one of them does not start with this prefix, it is unlikely concerned by the migration and can be ignored.\nThese tables can be ignored as well:\n access: As said, permissions have been reworked and have to be reset. configuration. You new shop already has a new configuration, and overwriting it with the old shop content is a bad idea. currency: Its content will be generated by during another step. lang: Its content will be generated by during another step. module_access: Structure is reworked with the new permission system. As it can’t be migrated easily, we recommend to reconfigure them manually. tab: This table contains the admin controllers accessible on your backoffice. As its values are mainly managed by PrestaShop, do not alter the content of the new shop. tab_lang: Related to tab and already managed by PrestaShop.  To avoid a single CSV file to be returned with all your tables in it, check the option “Export tables as separate files”. You will get a Zip file instead, containing one CSV file for each table.\nFinally, we advise to check the option “Put columns names in the first row”. This will be useful in the next step when your data will need to be modified.\nPersonalized export from custom SQL requests We explained how to export all your tables to make sure you keep as much data as possible.\nIf you get your data from another CMS or prefer to proceed with your own method, you can run a custom SQL query to get all the information you need. This option is useful if you plan to import your data with the import feature of PrestaShop.\nAs an example here is a SQL request to get the main product details, along with the texts corresponding to the first language of the first shop:\nSELECT p.*, pl.* FROM `ps_product` p JOIN `ps_product_lang` pl ON p.id_product = pl.id_product AND pl.id_lang = 1 AND pl.id_shop = 1 GROUP BY pl.id_product If the result fits your needs, you can export it with the “export” button available at the bottom of the page.\n  mysqldump If you used mysqldump for your backups, there is also an option for extracting your data in CSV files, as described in the documentation. However, our tests have shown that method is far from being easy.\nExample for exporting the table ps_product:\nmysqldump -h127.0.0.1 -P3307 -uroot -p -T/var/lib/mysql-files --fields-enclosed-by=\\\u0026#34; --fields-terminated-by=\\; prestashop16 ps_product Several notes about mysqldump with CSV files:\n Make sure you set the option --fields-terminated-by with the separators you want The header containing column names is missing from the .txt file and have to be manually inserted  Here is an extract of the product table, with demonstration data. Only the data is present and we need to add the column names.\n  CSV from mysqldump without header   Look at the SQL file provided with the TXT file, or run a DESCRIBE of the table.\nmysql\u0026gt; DESCRIBE prestashop16.ps_product; You should expect the following result before proceeding to the next table:\n  CSV from mysqldump with header    You can rename the generated .txt files with the .csv extension to avoid confusion. If you are connected to a remote MySQL server: switching on CSV export will write on the remote filesystem and not on the client one. That’s why writing on a nonexistent or disallowed folder may trigger this error:  mysqldump: Got error: 1290: The MySQL server is running with the --secure-file-priv option so it cannot execute this statement when executing \u0026#39;SELECT INTO OUTFILE\u0026#39; If you want to know in which folder you can export the files, run the SQL request:\nmysql\u0026gt; SHOW VARIABLES LIKE \u0026#34;secure_file_priv\u0026#34;; Updating the data Get changes between source and destination databases Now you have retrieved your data from the production shop, you have to adapt it to the new structure before inserting it on your new database.\nAn efficient way to get the changes is getting a database structure diff between the 2 running shops. MySQL provides another tool for this called mysqldiff.\nNote this utility may be not immediately available on your environment, even if you have the mysql client installed. For instance on Ubuntu, an additional package needs to be installed:\napt install mysql-utilities This tool can be run anywhere, as long as you can access both servers \u0026amp; databases. The basic use of this command requires the following parameters:\nmysqldiff --server1=user:pass@host:port:socket --server2=user:pass@host:port:socket db3:db4 You need to provide the credentials to your MySQL servers. Ifthe source and the destination databases are on the same server, the --server2 parameter can be omitted. db3 and db4 are respectively the source and the destination databases of your data.\nGetting the structure diff will require additional options, as provided in this example:\nmysqldiff --server1=root:xxxx@127.0.0.1:3307 --changes-for=server1 --skip-table-options --force prestashop16:prestashop  All our databases are on the same server, that’s why only --server1 is provided, We want to know what are the changes to apply on the 1.6 version to fit the 1.7 structure, so we need --changes-for=server1 We only need structure changes. --skip-table-options removes diff about autoincrement etc. By default mysqldiff will only tell you the databases are not the same and will return immediately. Providing --force will make the tool print out details about the differences found.  A example of output is available in https://gist.github.com/Quetzacoalt91/9cef61ebbf12c139f44d27035d3cb1fd. The changes are extracted from a diff structure between a PrestaShop 1.6.1.18 database and another one under PrestaShop 1.7.3.2.\nIt appears the structure from PrestaShop has not drastically changed from 1.6 versions, although some columns type has evolved. Preparing your data for PrestaShop 1.7 should not need too many changes on your CSV files.\nApplying structure change This step has to be reproduced as many times as you have tables waiting to be migrated. The import step will be easier if you make sure the data you transfer fits the destination structure. This chapter will help to identify the changes to apply depending on the diff created during the previous step.\nA few notes:\n Not all differences require a change in your data, Basic changes can be done using spreadsheet editor, Complex modifications will require manual work.  New column Any new column added to the database requires the same work on your CSV file. Check on the new shop what default value applies to the new column, by checking in the following order:\n The database schema, The ObjectModel (folder classes of PrestaShop), The Entity (folder src/PrestaShopBundle/Entity).  Example with the table cart:\n--- `prestashop16`.`ps_cart` +++ `prestashop`.`ps_cart` @@ -18,6 +18,7 @@  `allow_seperated_package` tinyint(1) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, `date_add` datetime NOT NULL, `date_upd` datetime NOT NULL, + `checkout_session_data` mediumtext, [...] Before:   CSV before column addition   After:   CSV with new column   In this example the new column checkout_session_data has no default value and the existing data on our PrestaShop displays an empty column. As the column allows null values, we keep all rows empty.\nColumn has the same type, but not the same size Example with address:\n- `lastname` varchar(32) NOT NULL, + `lastname` varchar(255) NOT NULL, If a column keeps its type but only increases its size, it does not require any change on your side. The new version offers more room to your text before being truncated.\nYou will probably notice the same change on your table keys:\n- `id_attribute_group` int(10) unsigned NOT NULL, + `id_attribute_group` int(11) NOT NULL, This change does not imply anything on your side. This is a preliminary work for building relations between our tables.\nColumn removed This kind of change is easier than adding a column.\n- `scenes` tinyint(1) NOT NULL DEFAULT \u0026#39;1\u0026#39;, Open the related CSV, remove the column and save.\nHowever keep in mind in some cases the column may have been moved to another table. If this occurs, you will have to move the content of your column to another CSV.\nAn example is available for the table store, some columns have been moved to the table store_lang to allow localized data to be used. Data needs to be moved to a new CSV, and duplicated as many time as you have languages installed on your shop.\nDefault value disappeared - `position` int(10) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, + `position` int(11) NOT NULL, Here again, nothing to worry about, as there is no change needed on your data. The default value is now managed by the ORM. However, if the previous version did not show NOT NULL, this could require you to add a default value on the empty rows.\nPrimary key / unique index updates If the primary key or one unique key on a table evolves / is added, the import of your existing data can fail if it doesn’t respect the new unicity rules.\n- PRIMARY KEY (`id_feature`,`id_product`), + PRIMARY KEY (`id_feature`,`id_product`,`id_feature_value`), + UNIQUE KEY `name_UNIQUE` (`name`), If you see this kind of diff, check that you do not have the same group of values more than once. Is is more likely to happen if a column is removed from a column group, or if a key is added.\nRedirection for disabled products This change is specific to the table product.\n- `redirect_type` enum(\u0026#39;\u0026#39;,\u0026#39;404\u0026#39;,\u0026#39;301\u0026#39;,\u0026#39;302\u0026#39;) NOT NULL DEFAULT \u0026#39;\u0026#39;, - `id_product_redirected` int(10) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, + `redirect_type` enum(\u0026#39;\u0026#39;,\u0026#39;404\u0026#39;,\u0026#39;301-product\u0026#39;,\u0026#39;302-product\u0026#39;,\u0026#39;301-category\u0026#39;,\u0026#39;302-category\u0026#39;) NOT NULL DEFAULT \u0026#39;\u0026#39;, + `id_type_redirected` int(10) unsigned NOT NULL DEFAULT \u0026#39;0\u0026#39;, When a product is disabled, the merchant can choose to which other page customers will be redirected to if they try to access it. On PrestaShop 1.7 the number of options has increased, and a redirection to a category page is now possible.\nFor data coming from PrestaShop 1.6, existing redirections must be updated.\n Column redirect_type:     Old value New value     301 301-product   302 302-product     Column id_product_redirected: Name is now id_type_redirected  If you exported your data in CSV, doing this change will be easy with a spreadsheet editor, like Microsoft Excel or LibreOffice Calc. Just make sure to keep the same file extension while saving.\nHere is an example before and after the requested update (changes appear in green).\nBefore (Original state):   After:   Shop details You will notice that in the shop table the column id_theme has been replaced by theme_name. PrestaShop does not store data about theme in dedicated tables anymore. The only information remaining is the theme name used by each shop.\nAs migrating to PrestaShop 1.7 implies losing the theme used on the shop in production, just write “classic” in this column for each shop.\nBefore:   After:   IDs in CSV files We assume that you will want to overwrite the demonstration data with the data you exported from the old shop. Leaving your IDs intact will replace any existing data with the same ID.\nIf you want to add the extracted data without overriding the existing records on the new shop, you should take care of removing the IDs from your CSV files, or ignore them during the import.\nPreparing the destination shop Clean demo data PrestaShop is installed with demonstration data including products, customers, orders etc. They can be removed to make room for your own data.\nCleaning your shop from this demonstration data should be done before starting the import of your data. The free module “PrestaShop cleaner” can handle that in a few clicks.\nOn your destination shop, search for the module \u0026ldquo;PrestaShop cleaner\u0026rdquo; or \u0026ldquo;pscleaner\u0026rdquo;, or download and install the latest version from GitHub.\nImportant: Make sure to run this tool on the new shop, not the one in production.\n  PrestaShop cleaner card on the module catalog   Once installed, go on the module configuration page by clicking on the configure button. You will find different available actions. The first half is responsible of erasing some content of your shop (product catalog, orders, customers etc.), while the other one checks, removes and optimizes your database content.\n  PrestaShop cleaner configuration page   Install languages If you are selling in several countries, additional languages have to be reinstalled on the new shop. This can be done in International \u0026gt; Localization \u0026gt; Import a localization pack.\nAlso, make sure the IDs of your langs match on the source shop.\n  Checking IDs of installed languages on a shop   This is an example of shop waiting to be migrated. As we can see, there is a discontinuity on the languages IDs. To reproduce these gaps, you can add unneeded languages you will remove in a second time.\nImporting data Unlike a restore, we will only import content here, no table structure will be modified. In a migration, the data imported must fit the new structure and not the old one.\nVia a MySQL client PHPMyAdmin PHPMyAdmin also provides a tool to import the data you previously modified into your tables.\nUnlike the export step, we recommend you to proceed with tables one by one.\nWe assume you want to get rid of the demonstration data of the destination shop, which also makes the import less risky regarding potential duplicate identifiers.\n Emptying demo data  First, clean the table from its content with a TRUNCATE action. As PHPMyAdmin does not allow this step before importing your data, you have to execute it manually. Go to the operations panel of your table.\n  At the bottom of the page, you will find the critical operations available. As they are destructive for the existing data, they can’t be easily found and are written in red.\n  If PHPMyAdmin suggests to check the foreign keys, you can disable it. As you won’t import all your tables in a single call, you obviously cannot ensure that your relations will be fine during the process.\n Importing data  Now the table has been cleaned from demonstration content, you can import the data from the old shop. Go to the Import tab from your table.\n  A form will appear to let you customize your import. The default configuration expects a SQL file to run, so we will have several options to change as shown on the screenshot.\n   Start by selecting your CSV file. The second option to modify will be the format. Choose “CSV” or “CSV for MS Excel”. Skip the first line of your file. We had the column names in the first line to make our file edition easier, but we do not want to import it in the database. Disable the foreign key checks. We know some relations don’t exist yet, because they won’t be imported at the same time. Double check the CSV settings (separators). A wrong value will make your CSV file unparsable.  Finally, click on “Go”. If everything goes well, you will get a confirmation page like this:\n  If not, check the error message. An error about the CSV content could be fixed by other import settings, while an SQL error will require you to fix your data.\nRepeat the process as many times as you have CSV files.\nVia the import feature of PrestaShop Importing your data can also be done via the PrestaShop administration panel.\nThat solution is best when your data does not come from another PrestaShop, or if you got your data from customized SQL requests.\nIt is convenient thanks to its interface and its management of unprovided columns. Unlike imports with a MySQL client, the PrestaShop import feature will always be able to apply the default values for a missing information.\nOn the new shop, reach the controller Advanced parameters \u0026gt; Import.\n  This controller will allow you to import the following data:\n Categories Products Combinations Customers Addresses Brands Suppliers Alias Store contacts  When possible, try to have only one CSV file per data category ready to be imported. This depends on the file size and the upload size allowed by your server configuration. If uploading a single CSV file is impossible, split it in half and try again.\nYou have to go through the configuration for each import, which can be tedious in some cases. For instance, if the provided columns do not match the default schema.\nNote: Like for the export, each data category must be imported several times if your shop is multi-language – once per language. Forcing the IDs provided by the CSV file will help you link your localized data with the original one.\nImport main configuration To import data, start by uploading your CSV file. It will be done automatically when you select your file from the filesystem.\nBefore CSV selection or upload:\n  Some warnings may be displayed depending on the type of data to import. They can provide useful advice about forbidden or allowed rules.\nOnce a CSV is selected:\n  Double check the field \u0026amp; multiple-value options for your CSV structure. Default values should work in most of case, but incorrect values will make the import fail.\nChecking the “Delete all \u0026lt;data\u0026gt; before import” (see screenshot above) option could be useful to clean the demonstration content from your shop before importing your data. But if you export several CSV of the same type of data, make sure to disable it before proceeding with the second and following files.\nColumn assignment The second step allows you to link the old columns with the new ones.\n  In case a column from the CSV should not be taken in account, you can ask PrestaShop to bypass it by choosing the first option of the list: “Ignore this column”.\nWhen you’re ready to proceed, click on “Import”.\nImport progress From that moment, you can just wait for the process to complete. The time it will take depends on the number of lines to import, and the chosen options.\n  To avoid reaching the maximum execution time of a request, the process will divide your data in several chunks which will be processed in separate HTTP requests.\nThe import process will start by checking the time needed to process one chunk. Depending on the result, more or less objects will be handled during the next HTTP requests. This gives a nice balance between performance and stability.\nImages Depending on how you migrated your data, (i.e without the import feature of PrestaShop), your images may be missing from the new shop. If they are not present, you may want to retrieve them from the old.\nImages are stored on the filesystem and their link to a product is stored in the database. Restoring them depends on how you migrated your data:\n You kept the same IDs when you imported the products  If the IDs are exactly the same between the two shops, copying the folder `/img/p` will be enough to get the images.\nAlso, you must transfer the data of the tables \u0026lt;PREFIX\u0026gt;images / \u0026lt;PREFIX\u0026gt;images_lang / \u0026lt;PREFIX\u0026gt;images_shop in which the link between your images and products IDs is stored.\n The product IDs have changed in database  The images can be retrieved as well, but this will require some changes.\nFirst, copy the folder `/img/p` to get the images on the new shop filesystem.\nThen, you will have to transfer and adapt the data of the tables \u0026lt;PREFIX\u0026gt;images_lang / \u0026lt;PREFIX\u0026gt;images / \u0026lt;PREFIX\u0026gt;images_shop.\nThe tables \u0026lt;PREFIX\u0026gt;image and \u0026lt;PREFIX\u0026gt;image_shop contain a column which is a reference to product IDs. As they have changed on the new shop, you must update these identifiers in order to match the new values.\nThis work can be tedious, that’s why we recommend migrating your data on the new shop by removing the existing data at the same time.\n Generate thumbnails  Products images thumbnails must be regenerated in order to be displayed properly on the product page, checkout funnel etc.\nGo to Design \u0026gt; Image settings \u0026gt; Regenerate thumbnails to regenerate all the missing sizes.\nAttachments Like the images, these folders need to be copied on the new server:\n  /download (Contains product attachments)\n  /upload (Contains customer uploads)\n  Like for the images, you will have to adapt some content in your database if you could not keep the original product IDs.\n  \u0026lt;PREFIX\u0026gt;product_attachment\n  \u0026lt;PREFIX\u0026gt;customization\n  \u0026lt;PREFIX\u0026gt;customization_data\n  Generate search index Imported products are not immediately available for search to your customers. You must refresh the search index to make them available.\nGo to Shop parameters \u0026gt; Search \u0026gt; Indexing and click on “Add missing product to the index”.\nOther migration options for developers The manual process explained to export and import data with CSV files from database. If you are a developer and you are willing to build your own tools for migrations, other ways exist to get the business data.\nThe following interfaces will make your tools more efficient and stable than a simple CSV extraction. You can add values stored elsewhere than in the database, handle your own format, and handle many more objects from the source shop.\nObject Models Object Model is an interface in the PHP codebase used by PrestaShop developers to request the database.\nThis can be used while developing a module responsible of the export and/or import of the objects from/to the database.\nFor more details, see the page dedicated to ObjectModels\nWeb service (API) The webservice API is another way to retrieve or store data in PrestaShop.\nIt must be enabled from the administration panel before being accessible. See the doc for more details: https://doc.prestashop.com/display/PS17/Webservice\nOnce ready, an API will be available for all the ressources enabled for your key. Basically, the web-service in another interface for object models, themselves interfacing the database.\nYou can use it to retrieve all your products, categories etc from the first shop, and re-inserting them in the other shop without many changes.\nThis option is interesting for people looking for making the process automatic, because:\n the webservice has barely changed since PrestaShop 1.5, you get all the properties of a given object, if a property is multi-lang, you will get the value or a link to another resource for each lang, you can get the images URL of a resource (i.e product), while you can’t find directly from a database column, getting a resource, or inserting one, is done by manipulating XMLs.  Useful links:\n Learning how-to use the webservice API Getting a list of all available ressources, ready for import/export  Migration modules and services Community module Although this solution is not made by PrestaShop, it follows the concept of export / import presented here and has been recommended several time on discussion platforms like the forum.\nThat solution is a module called “MigrationPro” and is available on the Marketplace:\nhttps://addons.prestashop.com/en/data-migration-backup/8934-migrationpro-prestashop-to-prestashop-migration-tool.html\nIt bundles two different modules to install on your old and new shop, respectively responsible of the export and import of the business data. It uses the object models to interact with the database.\nSupport service As well as for the upgrade, you can also ask our support team to proceed with the migration for you.\nYour data will be migrated and your compatible modules will be transferred. As the theme will be lost, you get instead a discount on themes available on the Marketplace. This option is useful for merchants who chose to use an existing theme instead of developing theirs.\nYou can subscribe for this service on the marketplace:\nhttps://addons.prestashop.com/en/support/18689-upgrade-pack-prestashop.html\nMany agencies and freelancers propose this kind of service and some of them are certainly in your area.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/",
	"title": "Keep PrestaShop up-to-date",
	"tags": [],
	"description": "",
	"content": "Keep PrestaShop up-to-date Introduction The purpose of this chapter is to provide the best practices and tips for keeping your PrestaShop up-to-date. Its compatibility range should cover at least shops running on versions 1.6 \u0026amp; 1.7 of PrestaShop.\nKeeping a shop updated to the latest available version ensures you have the latest changes brought by the core team and the developer community. Depending on the version you upgrade to, you can get new features, security or performance improvements, or simply bug fixes.\nFurthermore, the support of PrestaShop 1.6 is now ended. We advise you to use the 1.7 versions to get support, along with core and modules upgrades.\nUpgrade and migration, two different processes Keeping PrestaShop up-to-date can be done via different methods. Choose the best update method depending on your needs.\nIn-place Upgrade   Upgrading a shop is the recommended method when you want to get your shop up-to-date without switching to the next major version.\nIt does not require any additional tools to run if you follow the manual process, the most recent release package will be enough.\nImpact on existing data As long as you stay on the same major version (ex. 1.6.0 \u0026raquo; 1.6.1 or 1.7.1 \u0026raquo; 1.7.2 upgrade), we make sure that the available features remain the same. This means that your current theme and all your modules should continue to work as before, and no functionality or data will be lost during the upgrade, even if the database structure may change.\nThis can be explained by the semantic versioning we follow, that forbids any compatibility-breaking change in the core, such as removing a feature or modifying our APIs.\nNote that once an upgrade has started, there is no way to rollback the changes. The only solution you have is restoring the backup you made before.\nProcess summary Prepare your upgrade by getting the latest release zip file, unpacking it and removing its demo content. Apply the new files by copy-pasting them in the production folder.\nRun the database upgrade. This could be enough for completing an upgrade, but additional tasks like cleanup and modules upgrade will bring you stability and security.\nMigration   Upgrading is not the only way to update your shop to the latest version of PrestaShop. In some cases, migrating your data is a better option.\nThis option is recommended when you switch on a new major version. As it brings a lot of changes in the core with many potential incompatibilities with the current theme and modules, starting fresh is less risky for stability.\n“Migrating” means moving your current shop to a new shop which is already running on the latest version in parallel.\nIt implies creating a new shop and transferring your existing data (like products, customers, orders…) into it, and disable your old shop afterwards. The main advantage of this option is it does not require the shop in production to be in maintenance mode. As long as you feel your new shop is not ready, you can keep the previous one running for your customers.\nImpact on existing data The impact on the existing data is very different from an upgrade, as it depends on what you transfer to the new shop.\nWhen switching to another major version (i.e 1.6.x \u0026raquo; 1.7.x), this will imply that some resources will be lost:\n  Permissions On PrestaShop, the whole permissions system has been reworked to fit with Symfony’s. We recommend to recreate your employees, access groups and their permissions instead of migrating them.\n  Theme\n  The theme system has been overhauled in 1.7, so 1.6 themes won’t work anymore. The controllers have changed, and the data shared between them and the views has also evolved.\n Modules not compatible with the new version  Modules can be more resilient to PrestaShop new releases, but some incompatibilities may occur when using another major version. For modules downloaded from the marketplace, you can check their compatibility range. For home-made modules, contact your developer to check its compatibility, but as a general rule consider them incompatible until proven otherwise.\nEach module reinstalled on the new shop will need to be reconfigured.\nProcess details A migration consists in:\n Setting up a new shop running on the latest version Getting the production content from the old shop Modifying the content for compatibility sake, data update\u0026hellip; Importing the data in the new shop  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/position/",
	"title": "PositionColumn reference",
	"tags": [],
	"description": "",
	"content": "PositionColumn Type  This column type allows you to define rows position using a drag and drop feature. Besides this column definition you need to use our javascript PositionExtension and prepare a route to manage the positions update. To help you create this controller you can use our PositionUpdater component.\nAvailable options    Properties Type Expected value     id_field string required The record field containing its id.   position_field string required The record field containing its position.   update_route string required The route called to update records position.   update_method string default: GET The HTTP method used to call the update route.   record_route_params array default: [] An associative array to inject record fields in the update route.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Common\\PositionColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $positionColumn = new PositionColumn(\u0026#39;position\u0026#39;); $positionColumn-\u0026gt;setName(\u0026#39;Position\u0026#39;); $positionColumn-\u0026gt;setOptions([ \u0026#39;id_field\u0026#39; =\u0026gt; \u0026#39;id_link_block\u0026#39;, \u0026#39;position_field\u0026#39; =\u0026gt; \u0026#39;position\u0026#39;, \u0026#39;update_route\u0026#39; =\u0026gt; \u0026#39;admin_link_block_update_positions\u0026#39;, \u0026#39;update_method\u0026#39; =\u0026gt; \u0026#39;POST\u0026#39;, \u0026#39;record_route_params\u0026#39; =\u0026gt; [ \u0026#39;id_hook\u0026#39; =\u0026gt; \u0026#39;hookId\u0026#39;, ], ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($positionColumn); import Grid from \u0026#39;../../components/grid/grid\u0026#39;; import PositionExtension from \u0026#34;../../components/grid/extension/position-extension\u0026#34;; const $ = window.$; $(() =\u0026gt; { let gridDivs = document.querySelectorAll(\u0026#39;.js-grid\u0026#39;); gridDivs.forEach((gridDiv) =\u0026gt; { const grid = new Grid(gridDiv.dataset.gridId); grid.addExtension(new PositionExtension()); }); }); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/forms/settings-forms/",
	"title": "Settings Forms",
	"tags": [],
	"description": "",
	"content": "Settings Forms Introduction In PrestaShop, there are a lots of settings forms that require a unified way to handle of them. To move the settings creation and update out of controllers the following components are being used:\n Form Data Provider - responsible for options data retrieval and saving the data. Form Handler - responsible for building the form.  Form Data Providers In order to load existing data into the form (when editing, for instance) and save the form data (when the form is submitted), you need to create and register a Form Data Provider.\nYou can create your own based on one of the existing implementations, or on the interface:\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Form; interface FormDataProviderInterface { /** * @return array the form data as an associative array */ public function getData(); /** * Persists form Data in Database and Filesystem. * * @param array $data * @return array $errors if data can\u0026#39;t persisted an array of errors messages * @throws UndefinedOptionsException */ public function setData(array $data); } The idea is to uncouple data management from Controllers, so populating the form and saving form data will be done in these classes. Be aware though, you shouldn\u0026rsquo;t manipulate the database here – that task need to be delegated to dedicated classes.\nForm Handlers Once you are able to manage data loaded to or sent by your forms, you need a way to build those forms (which can be themselves composed of multiple forms).\nFor this, you need a Form Handler. You can either implement it yourself as a class (based on the interface PrestaShop\\PrestaShop\\Core\\Form\\FormHandlerInterface), or use PrestaShop\u0026rsquo;s core FormHandler to create a service in a declarative way – no need for a new class!\nAs an example, here\u0026rsquo;s how the Administration page\u0026rsquo;s Form Handler service is declared:\n# /src/PrestaShopBundle/Resources/config/services/form/form_handler.ymlprestashop.adapter.administration.form_handler:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Form\\FormHandler\u0026#39;arguments:- \u0026#39;@=service(\u0026#34;form.factory\u0026#34;).createBuilder()\u0026#39;- \u0026#39;@prestashop.core.hook.dispatcher\u0026#39;- \u0026#39;@prestashop.adapter.administration.form_provider\u0026#39;-\u0026#39;general\u0026#39;:\u0026#39;PrestaShopBundle\\Form\\Admin\\AdvancedParameters\\Administration\\GeneralType\u0026#39;\u0026#39;upload_quota\u0026#39;:\u0026#39;PrestaShopBundle\\Form\\Admin\\AdvancedParameters\\Administration\\UploadQuotaType\u0026#39;\u0026#39;notifications\u0026#39;:\u0026#39;PrestaShopBundle\\Form\\Admin\\AdvancedParameters\\Administration\\NotificationsType\u0026#39;- \u0026#39;AdministrationPage\u0026#39;Let\u0026rsquo;s look at the arguments one by one:\n  '@=service(\u0026quot;form.factory\u0026quot;).createBuilder()'\nThis is used to render the form. You can keep the default value.\n  '@prestashop.core.hook.dispatcher'\nThis is used to dispatch hooks related to the form. You can also keep this value by default.\n  '@prestashop.adapter.administration.form_provider'\nHere you need to specify your form\u0026rsquo;s Data Provider.\n  The fourth argument is an associative array containing the names and FQCN of the form types you want to render in your form.\nImportant: The names correspond to the data fields that will be loaded/saved to your Data Providers.\n  'AdministrationPage'\nThe last argument is the name used to generate the hooks.\n  Form request handling in Controllers In modern pages, Controllers have or should have only one responsability: handle the User request and return a response. This is why in modern pages, controllers should be as thin as possible and rely on specific classes (services) to manage the data. As always, check out the existing implementations, like in the PerformanceController.\nThis is how we manage a form submit inside a Controller:\n\u0026lt;?php $form = $this-\u0026gt;get(\u0026#39;prestashop.adapter.performance.form_handler\u0026#39;)-\u0026gt;getForm(); $form-\u0026gt;handleRequest($request); if ($form-\u0026gt;isSubmitted()) { $data = $form-\u0026gt;getData(); $saveErrors = $this-\u0026gt;get(\u0026#39;prestashop.adapter.performance.form_handler\u0026#39;)-\u0026gt;save($data); if (0 === count($saveErrors)) { $this-\u0026gt;addFlash(\u0026#39;success\u0026#39;, $this-\u0026gt;trans(\u0026#39;Successful update.\u0026#39;, \u0026#39;Admin.Notifications.Success\u0026#39;)); return $this-\u0026gt;redirectToRoute(\u0026#39;admin_performance\u0026#39;); } $this-\u0026gt;flashErrors($saveErrors); } return $this-\u0026gt;redirectToRoute(\u0026#39;admin_performance\u0026#39;); So, there are basically three steps:\n Get information from User request and get form data; If form has been submitted, validate the form; If form is valid, save it. Else, return form errors and redirect.  Every form in modern controllers must be handled this way, and the controller code should be kept minimalist and easy to read and understand. Summary with a schema The following schemas sums up how Form Handlers, Form Builders, Controllers and Data Providers are wired together.\nDisplay Form schema   Display Form schema   You can update this schema using the source XML file importable in services like draw.io. Submit Form schema   Submit Form schema   You can update this schema using the source XML file importable in services like draw.io.  Render the form using Twig The rendering of forms in Twig is already described by the Symfony documentation. PrestaShop uses its own Form theme that contains specific markup for the PrestaShop UI Kit. You can see it as a customized version of Symfony\u0026rsquo;s Bootstrap 4 form theme, even though it\u0026rsquo;s not directly based on it.\nTo sum up how it works, the controller sends an instance of FormView to Twig and Twig uses form helpers to render the right markup for every field type (the Form theme defines a specific markup for each Form Type).\n{{ form_start(logsByEmailForm) }}\u0026lt;div class=\u0026#34;col-md-12\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card\u0026#34;\u0026gt; \u0026lt;h3 class=\u0026#34;card-header\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;material-icons\u0026#34;\u0026gt;business_center\u0026lt;/i\u0026gt; {{ \u0026#39;Logs by email\u0026#39;|trans }}\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026#34;card-block\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;card-text\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group row\u0026#34;\u0026gt; {{ ps.label_with_help((\u0026#39;Minimum severity level\u0026#39;|trans), (\u0026#39;Enter \u0026#34;5\u0026#34; if you do not want to receive any emails.\u0026#39;|trans({}, \u0026#39;Admin.Advparameters.Feature\u0026#39;)), \u0026#39;col-sm-2\u0026#39;) }}\u0026lt;div class=\u0026#34;col-sm-8\u0026#34;\u0026gt; {{ form_errors(logsByEmailForm.severity_level) }}{{ form_widget(logsByEmailForm.severity_level) }}\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;card-footer\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;{{ \u0026#39;Save\u0026#39;|trans({}, \u0026#39;Admin.Actions\u0026#39;) }}\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ form_end(logsByEmailForm) }}All these helpers are documented and help you generate an HTML form from your FormView object, using the right markup to be rendered by the PrestaShop UI Kit. Currently, several forms have already been migrated, so you can use them as base for your own work.\nAll the templates for modern pages can be found in the src/PrestaShopBundle/Resources/views/Admin folder. Twig templates for a page are split in subfolders: Forms, Blocks, Lists, Panels. This helps to keep track the role of each template.\nTemplates should be arranged by page and domain, keeping in mind that each part of template can be overridden by PrestaShop developers using modules. Use templates and Twig blocks wisely to make their job easy.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/hook/symfony-bridge/",
	"title": "Symfony bridge for hooks",
	"tags": [],
	"description": "",
	"content": "Symfony bridge for hooks In Back-Office, migrated pages are powered by Symfony. The powerful Symfony Event Dispatcher has been chosen to replace, in the long term, hooks. However, in order to preserve backward compatibility, both systems coexist in 1.7.\nIt is important that modules which subscribe to a hook are correctly notified no matter where the hook is dispatched from, be it in legacy code or modern code.\nIn legacy code, hooks are dispatched using Hook::exec().\nIn Symfony-powered code, two services work together to achieve this:\n The class LegacyHookSubscriber acts as a registry for hook subscriptions and as gateway between the legacy Hook class and Symfony. The class HookDispatcher is actually a wrapper of Symfony\u0026rsquo;s Event Dispatcher.  Registry First, on setup, LegacyHookSubscriber will retrieve all legacy hooks using Hook::getHooks().\nThen it will create as many event subscriptions as there are hooks, following a naming convention based on database IDs.\nFor example, if module with id_module 267 has subscribed to hook with id_hook 82, LegacyHookSubscriber will create a subscription call_82_267.\nDispatching In Symfony-powered pages, to dispatch hook one must use the HookDispatcher:\n$this-\u0026gt;hookDispatcher-\u0026gt;dispatchWithParameters(\u0026#34;actionModifyForm\u0026#34;, [\u0026#39;form_builder\u0026#39; =\u0026gt; $formBuilder]); The HookDispatcher will act as standard dispatcher and call the eligible event listeners and subscribers, including LegacyHookSubscriber.\nUsing a dedicated magic method __call(), the LegacyHookSubscriber will parse the called method (ex: call_82_267) to retrieve the appropriate hook and module (using their respective IDs) and trigger the related Hook::exec() call with the appropriate parameters.\nTo sum up When a hook is dispatched inside Symfony-powered controllers, HookDispatcher dispatches the hook similarly to a regular Symfony event; this event is being listened to by LegacyHookSubscriber who will then trigger the related Hook::exec() call.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/",
	"title": "The PrestaShop architecture",
	"tags": [],
	"description": "",
	"content": "The PrestaShop architecture PrestaShop has been built as a monolith following traditional object-oriented PHP practices. Originally based on a custom framework, it\u0026rsquo;s progressively being migrated to Symfony.\nTopics  Introduction to PrestaShop\u0026#39;s Architecture  Learn how PrestaShop is structured: back-end, front-end, business stack, themes and modules\n File structure  An explanation about each directory content of the project\n Legacy  This section describes components from the Legacy architecture.\n How to migrate Back Office pages to Symfony  The guide we use to migrate pages to Symfony\n Domain-driven architecture  Where PrestaShop architecture is going\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/tools-for-theme-designers/",
	"title": "Tooling prerequisites for theme designers",
	"tags": [],
	"description": "",
	"content": "Tooling prerequisites for theme designers The way 1.7 themes are created is significantly different from the way they were with PrestaShop 1.6. By taking the freedom to rewrite the way themes work according to the latest best-practices, we chose to also work with modern tools. These tools are widely accepted as best-of-breed in the current web development; hence, learning to use them will not only make you more productive in PrestaShop development, but more importantly in web development in general.\nWhile those tools will help all designers and developers in the long run, there is a first step of knowing how to use them, particularly if you have never used such a chain of tools through the command line.\nThis page is here to help! It will browse through the toolset, so that you know what the rest of the documentation is talking about :)\nWhich tools are we talking about? The PrestaShop developers chose to rely on these tools for the development of the Classic theme:\n Git Composer npm Webpack  Along with these tools, PrestaShop 1.7 introduces frameworks and design tools that are must-know:\n Bootstrap 4 Symfony and its Twig template engine Sass Bourbon  This document presents each tool, and how they can get you to become a more productive web developer \u0026ndash; not just a more productive PrestaShop theme developer!\nBefore we get started: using the command line Many of the tools cited above are to be used through the command line \u0026ndash; launching commands in a text-based environment, line after line. While it has the advantage of being very powerful and easy to automate, it is also not intuitive and can be hard to grasp. Luckily, it only take a handful of commands to understand the power of the command line, and to adopt it for your everyday processes.\nNow, as a web-designer, you might be more used to work with graphical interfaces, such as Dreamweaver (for the more WYSIWYG-inclined), or a full-featured text editor, such as Sublime Text, Atom or Brackets (among many other possibilities). Using the command line can supplement this.\nAll operating systems give you access to a command line interface (CLI).\n  Windows: It is called the \u0026ldquo;command prompt\u0026rdquo;.\n  You can open it this way:\n Open the Start menu, for instance by pressing the Windows key of your keyboard. In the Search field, type cmd and press Enter. This will start the cmd.exe program.    Try out a few basic commands:\n dir: lists the files in the current folder. cd: change the current directory. For instance, \u0026ldquo;cd Downloads\u0026rdquo; to enter a Downloads directory in the current folder; or cd .. to go to the parent folder. ping: to see the response time for a website. For instance, ping google.com.    Note: Windows 10 also includes the Linux-\n    OS X: It is called the \u0026ldquo;terminal\u0026rdquo;.\n  You can open it this way:\n Open Spotlight, for instance by pressing the Command key and Spacebar at the same time. In the Search field, start typing \u0026ldquo;terminal\u0026rdquo; until the real \u0026ldquo;Terminal\u0026rdquo; is suggested, then press Enter. This will start the Terminal.app program.    Try out a few basic commands:\n ls: displays the content of the current folder. cd: change the current directory. For instance, cd Downloads to enter a Downloads directory in the current folder; or cd .. to go to the parent folder. ping: to see the response time for a website. For instance, ping google.com.      Unix/Linux: Oh come on, don\u0026rsquo;t tell me you don\u0026rsquo;t already use bash, tcsh, zsh or any other POSIX variation of the concept! :)\n  There a many default tools and commands which you can use and even combine, but we\u0026rsquo;re going to use some non-standards tools: npm, Git, Composer and Webpack. Because they are non-standards, you will have to install and configure them first.\nNote that you do not HAVE TO use these exactly: you can choose alternatives such as Gulp or Grunt if you\u0026rsquo;re more familiar with them. We simply use Webpack :)\nUsing Git to manage your project files Git is a version control system, designed to manage decentralized projects with speed and efficiency. In plain English: you can use Git to save the current state of your files (through individual snapshot), in order to return to a previous state should the need arise, among other things.\nAs a theme designer, tracking all your CSS and JavaScript changes can help you return to a previous snapshot of a file or of the whole project, add new code without breaking the code that\u0026rsquo;s already working, collaborate with others, and in general keep you from losing your project because of a bad Ctrl-S.\nIf you have already used the Subversion system, think of Git as a decentralized Subversion (to keep it simple): any machine hosts all versions of all the files, and therefore there is no centralized repository. In effect, the PrestaShop project is mainly hosted on GitHub \u0026ndash; but developers also work on it on their own machine.\nWhy you should use it for your PrestaShop theme? The PrestaShop Open Source project makes heavy use of Git in order to keep versions of its files. The community can access the official public repository on GitHub: https://github.com/PrestaShop/PrestaShop\nAs a theme designer, you will need Git in order to retrieve the latest version of PrestaShop 1.7 and its default theme, \u0026ldquo;Classic\u0026rdquo;.\nNote: You do not need to install or use Git if you are not interested in the latest development of PrestaShop.\nHow can you install it? Simply download the archive for the latest version of Git (2.23 as of this writing) and install it just like you would do for any other software:\n  Windows: https://git-for-windows.github.io/\n User interfaces are available, for instance https://tortoisegit.org/ or https://www.gitkraken.com/    OS X: https://git-scm.com/download/mac\n User interfaces are available, for instance https://git-fork.com/ or https://www.gitkraken.com/    Linux: type apt-get install git (or your distribution\u0026rsquo;s equivalent).\n  You can then open your command line and type git --version to check that Git is indeed installed. It should display the version number. You\u0026rsquo;re good to go!\nUsing Composer to manage your PHP dependencies The PHP ecosystem is made of code packages which can be embedded into bigger projects, or even into other code packages which, in turn, can be embedded, etc. These packages are called dependencies.\nBeing able to rely on such code packages is great, because it prevents from having to reinvent the wheel every time a well-known feature is needed. On the other hand, dependencies can get problematic: the more a project depends on third-party package, the more it must manage dependency resolution (determining which package to use), autoloading solution (finding the right package and making it available automatically), and keeping all packages up to date (or not, if backward compatibility is an issue).\nIn short, the modern PHP ecosystem can get complex quite quickly, and Composer is the main way PHP developers manage their dependencies.\nWhy you should use it for your PrestaShop theme? Now, why should you care about PHP files when working on a PrestaShop theme? Since you mostly work with theme files (.tpl, .css and .js), .php files are few in your editor, and \u0026ldquo;PHP dependencies\u0026rdquo; is something out there, and it seems you\u0026rsquo;d be better off avoiding them, right?\nThing is, PrestaShop uses Composer to build its own package dependencies. While the Zip archive available for public download is packed with all the required dependencies, the Git-hosted files do not automatically download and install all those dependencies: PrestaShop developers rely on Composer for that, through a composer.json file located at the root of the official Git folder.\nIn short, you need to use Composer when working with the latest development version from Github, in order to have a complete set of packages.\nYes, that means that if you choose not to retrieve the latest PrestaShop files using Git, but to simply install the latest public archive, then you do not need to worry about Composer. But not using the latest Git version also means that you cannot work with the development version of PrestaShop, and that you rely on the Core developers to release upgraded packages, thus giving you no head start in developing with new features. Your call!\nHow can you install it? Download the archive for the latest version of Composer (1.9 as of this writing) and install it just like you would do for any other software:\nNote: you need to already have the PHP tool installed on your machine. You probably already have it if you\u0026rsquo;re building websites locally. If not, install WampServer, EasyPHP, XAMPP or any other Windows Apache+PHP+MySQL package there is.\n  Windows: https://getcomposer.org/Composer-Setup.exe\n  OS X and Linux: in your command line, type these commands:\n curl -s https://getcomposer.org/installer | php sudo mv composer.phar /usr/local/bin/composer    Testing it requires using the command line; there is no graphical interface for this tool. Simply type composer --version to check that it is indeed installed.\nUsing npm to automate compilation from third-party package npm is a popular package manager, which originates from the JavaScript ecosystem \u0026ndash; most precisely, from the Node.js JS runtime environment.\nnpm is both a command line tool and an online registry (located at https://www.npmjs.com/): you can use it to manage the dependencies (yes, just like Composer), or simply to work with useful packages. It is an extremely useful command to have when building websites, even if you do not use JavaScript or Node.js.\nWhy you should use it for your PrestaShop theme? In the context of building PrestaShop themes, npm is mostly used in order to automate tasks \u0026ndash; namely, building assets automatically so that you don\u0026rsquo;t have to.\nPrestaShop 1.7 themes are built around \u0026ldquo;assets\u0026rdquo;: CSS, JavaScript and image files, which are (or can be) generated from easier-to-manager formats:\n CSS files are built from Sass files (.scss). Some image files are built from SVG files (.svg). JavaScript files are from several files (.js).  All the source files are located in the theme\u0026rsquo;s _dev folder. The generated files are built using Webpack, a JavaScript module bundler. See below for more information about Webpack.\nHow can you install it? npm cannot be directly downloaded and installed. It is an integral part of the Node.js tool, therefore you need to download and install Node.js, which in turn will install npm for you.\nTo download Node.js, head to https://nodejs.org/en/download/ and choose the LTS version for your platform. LTS means Long Term Support (currently, 10.16.3): this version contains less features than the Current version (currently, v12.11.1), but is very stable and will be supported until April 2021.\nSo, install Node.js on your machine, then test that npm is available:\n Open your command line interface. Type node -v to check that Node.js is installed. Type npm -v to check that npm is indeed available.  npm is updated much more frequently that Node.js, so chances are that there\u0026rsquo;s a more recent version available than the one from the Node.js package.\nTo update your npm:\n Open your command line interface. Type npm install npm -g: this tells npm to install npm as global package. Type npm -v to check if the version has indeed changed.  Using Webpack to compile and minify your asset files Modern website are getting more and more complex, and JavaScript becomes more prominent than ever in the web-development world. As a result there is a lot of code on the client side!\nWebpack was built in order to make your life easier, most notably by organizing your code into JavaScript modules. It takes a whole lot of work off your shoulders: you have better things to do than to edit configuration files in order to adjust media files, fonts or URLs.\nBefore Webpack, many were using task-runners such as Grunt or Gulp in order to organize their code. That lead to a patchwork of configuration, and you had to pay a lot of attention to any change in order to not break everything. Webpack fixes this in an elegant way.\nWhy you should use it for your PrestaShop theme? Let’s see where we’re at. So far was have installed:\n Git: A better way to make a snapshot of your codebase. Composer: A better way to manage your PHP dependencies. npm: A better way to automate tasks (among many other things).  It’s all fine and dandy, but all of this remains very developer-centric, and there comes a time when you you have to think about the user, and optimize for the browser. Fear not, for Webpack is here to save the day! Webpack is a “module bundler”, meaning that it turns your assets into JavaScript modules, and packs them into static assets.\nSo, the main interest of using Webpack is that it will compile all your styles into a single CSS file. This way, your theme will make only one HTTP request for this single file, and since your browser will cache it for later re-use, it will even download this file only once.\nThe same goes for your JavaScript code. Instead of loading jQuery along with its community plugins, your own custom plugins and any extra code you might need, Webpack compiles and minifies all this JavaScript code into a single file, which will be loaded once - and cached.\nHow can you install it? From the moment you have npm installed (see above), Webpack can be installed in a few seconds:\n Open your command line interface. Type npm install webpack -g  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/tutorials/",
	"title": "Tutorials",
	"tags": [],
	"description": "",
	"content": "Tutorials  Creating access to the Webservice   Testing access to the Webservice   PrestaShop Webservice lib   Advanced use   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/",
	"title": "Types Reference",
	"tags": [],
	"description": "",
	"content": "Types reference Developers can already use large list of field types (see Symfony types) that comes from Symfony framework. In addition to that, PrestaShop adds more reusable field types that developers can use.\nText fields   FormattedTextareaType\n  GeneratableTextType\n  IpAddressType\n  ResizableTextType\n  TextWithLengthCounterType\n  TextWithUnitType\n  TranslatableType\n  TranslateTextType (deprecated since 1.7.6, use TranslatableType)\n  TranslateType\n  Choice fields   CategoryChoiceTreeType\n  CountryChoiceType\n  MaterialChoiceTableType\n  MaterialChoiceTreeType\n  MaterialMultipleChoiceTableType\n  ShopChoiceTreeType\n  SwitchType\n  YesAndNoChoiceType\n  Date and time fields   DatePickerType\n  DateRangeType\n  Button fields  SearchAndResetType  Other fields   ChangePasswordType\n  MoneyWithSuffixType\n  IntegerMinMaxFilterType\n  NumberMinMaxFilterType\n  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/domain/value_objects/",
	"title": "Value Objects",
	"tags": [],
	"description": "",
	"content": "Value Objects PrestaShop is using Value Objects in its codebase. To help you understand better what they are, this article aims to explain what Value object is and how to use it.\nWhat is Value Object? Value Objects (VO for short) are small, simple, immutable objects, like Money or a date range, whose equality is not based on their identity. This means that any two given instances of a same VO are considered equal when they contain the same values.\nValue Objects are often referred to as Value Types as well. You can consider a Value Object like a data type, whose objective is to provide structure, validation, and meaning.\nCharacteristics of Value Object are:\n It does not have an identity, contrary to an Entity (e.g. Money($amount) can be considered a VO because two instances of it can be considered equal as long as the $amount is equal, regardless of which bills that amount is made of; but Bill($billNumber) is an entity because it refers to a specific physical Bill). It is immutable (e.g. it cannot be modified; any modification on it yields a different instance). It is self validating (e.g. value object cannot be created with invalid values, meaning that attempt to create new Email('not an email') would throw an exception). It is interchangeable (e.g. $a and $b can replace one another without any side effects if they both are created like $a = new Money(100) and $b = new Money(100)).  Examples of Value Objects in PrestaShop As an example, we can take a look at PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\ExchangeRate value object. ExchangeRate is used to pass currency exchange rate between different parts of system.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\ExchangeRate; // ExchangeRate has VO has rules to protect. // In this case, ExchangeRate validates that it\u0026#39;s value cannot be 0 or less. // If we were to create ExchangeRate with value of -1, // then CurrencyConstraintException would be thrown.  $exchangeRate = new ExchangeRate(-1); // throws exception, because exhange rate value is not within boundaries  // However, if ExchangeRate value is within allowed boundaries, // then it will successfully produce us new instance of ExchangeRate.  $exhangeRate = new ExchangeRate(1.25); // this would work, since 1.25 is a valid exhange rate value Another good side effect of using value objects in your code is that it helps you avoid unnesecery assertions.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Domain\\Currency\\ValueObject\\ExchangeRate; class MyService { // ...  public function calculate(ExchangeRate $rate) { // you don\u0026#39;t need to make additional assertions here (e.g. null !== $rate)  // since you can trust that ExchangeRate contains valid value  // as it was created somewhere in the system.  // ... do some calculation with $rate  } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/nginx/",
	"title": "Configure Nginx",
	"tags": [],
	"description": "",
	"content": "Configure Nginx The following file is provided as an example configuration for your Nginx server. It may be incomplete, and remember you must adapt it for your own server\u0026rsquo;s needs!\nserver { # Ipv4  listen 80; # IPv6  # listen [::]:80;  # SSL Ipv4 \u0026amp; v6  # listen 443 ssl http2;  # listen [::]:443 ssl;  # Your SSL Certificates, don\u0026#39;t forget to take a look at Certbot (https://certbot.eff.org)  # ssl_certificate /etc/ssl/fullchain.pem;  # ssl_certificate_key /etc/ssl/privkey.pem;  # ssl_session_timeout 24h;  # ssl_session_cache shared:SSL:10m;  # ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  # ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:RSA+3DES:AES128-SHA:!ADH:!AECDH:!MD5;  # ssl_prefer_server_ciphers on;  # Do not forget to create this file before with OpenSSL : \u0026#34;openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048\u0026#34;  # ssl_dhparam /etc/nginx/ssl/dhparam.pem;  # [REQUIRED EDIT] Your domain name goes here  server_name server_name example.com www.example.com; # [REQUIRED EDIT] Absolute path to your website root on the filesystem  root /path/to/prestashop; index index.php; # Redirect 404 errors to prestashop  error_page 404 /index.php?controller=404; # Gzip Settings, convert all types.  gzip on; gzip_vary on; gzip_proxied any; # Can be enhance to 5, but it can slow you server  # gzip_comp_level 5;  # gzip_min_length 256;  gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; gzip_disable \u0026#34;MSIE [1-6]\\.(?!.*SV1)\u0026#34;; # HSTS (Force clients to interact with your website using HTTPS only)  # For enhanced security, register your site here: https://hstspreload.org/  # WARNING: Don\u0026#39;t use this if your site is not fully on HTTPS!  # add_header Strict-Transport-Security \u0026#34;max-age=63072000; includeSubDomains\u0026#34; preload; always;  # Cloudflare / Max CDN fix  location ~* \\.(eot|otf|ttf|woff(?:2)?)$ { add_header Access-Control-Allow-Origin *; } # Force pdf files to be downloaded  location ~* \\.pdf$ { add_header Content-Disposition Attachment; add_header X-Content-Type-Options nosniff; } # Force files inupload directory to be downloaded  location ~ ^/upload/ { add_header Content-Disposition Attachment; add_header X-Content-Type-Options nosniff; } # Do not save logs for these  location = /favicon.ico { auth_basic off; allow all; log_not_found off; access_log off; } location = /robots.txt { auth_basic off; allow all; log_not_found off; access_log off; } # [REQUIRED EDIT IF MULTILANG]  # rewrite ^/fr$ /fr/ redirect;  # rewrite ^/fr/(.*) /$1;  # Images  rewrite ^/([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$1$2$3.jpg last; rewrite ^/([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$1$2$3$4.jpg last; rewrite ^/([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$1$2$3$4$5.jpg last; rewrite ^/([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$1$2$3$4$5$6.jpg last; rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$1$2$3$4$5$6$7.jpg last; rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$1$2$3$4$5$6$7$8.jpg last; rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$1$2$3$4$5$6$7$8$9.jpg last; rewrite ^/([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])([0-9])(-[_a-zA-Z0-9-]*)?(-[0-9]+)?/.+.jpg$ /img/p/$1/$2/$3/$4/$5/$6/$7/$8/$1$2$3$4$5$6$7$8$9$10.jpg last; rewrite ^/c/([0-9]+)(-[.*_a-zA-Z0-9-]*)(-[0-9]+)?/.+.jpg$ /img/c/$1$2$3.jpg last; rewrite ^/c/([a-zA-Z_-]+)(-[0-9]+)?/.+.jpg$ /img/c/$1$2.jpg last; # AlphaImageLoader for IE and fancybox  rewrite ^images_ie/?([^/]+)\\.(jpe?g|png|gif)$ js/jquery/plugins/fancybox/images/$1.$2 last; # Web service API  rewrite ^/api/?(.*)$ /webservice/dispatcher.php?url=$1 last; # Installation sandbox  rewrite ^(/install(?:-dev)?/sandbox)/(.*) /$1/test.php last; # [REQUIRED EDIT] Change this block to your admin folder  location /admin-dev/ { if (!-e $request_filename) { rewrite ^/.*$ /admin-dev/index.php last; } } # File security  # .htaccess .DS_Store .htpasswd etc  location ~ /\\. { deny all; } # Source code directories  location ~ ^/(app|bin|cache|classes|config|controllers|docs|localization|override|src|tests|tools|translations|travis-scripts|vendor|var)/ { deny all; } # vendor in modules directory  location ~ ^/modules/.*/vendor/ { deny all; } # Prevent exposing other sensitive files  location ~ \\.(yml|log|tpl|twig|sass)$ { deny all; } # Prevent injection of php files  location /upload { location ~ \\.php$ { deny all; } } location /img { location ~ \\.php$ { deny all; } } # PHP FPM part  location ~ \\.php$ { # Verify that the file exists, redirect to index if not  try_files $fastcgi_script_name /index.php$uri\u0026amp;$args =404; fastcgi_index index.php; # Environment variables for PHP  fastcgi_split_path_info ^(.+\\.php)(/.+)$; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # [REQUIRED EDIT] Connection to PHP-FPM - choose one  # fastcgi_pass 127.0.0.1:9000;  fastcgi_pass unix:/run/php/php7.1-fpm.sock; fastcgi_keep_conn on; fastcgi_read_timeout 30s; fastcgi_send_timeout 30s; # In case of long loading or 502 / 504 errors  # fastcgi_buffer_size 256k;  # fastcgi_buffers 256 16k;  # fastcgi_busy_buffers_size 256k;  client_max_body_size 10M; } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/installation/configuration/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": "Configuring PrestaShop By default, PrestaShop is configured to provide a secure and stable environment to both the shop administrator and the customers.\nAs a developer, there are several changes that you could and should bring to the default installation in order to help you code better, spot bugs faster, and generally make a great PrestaShop product.\nDisabling the cache and forcing Smarty compilation When your development has an impact on the front office, whether you are building a theme or simply a module which displays information to the customer, you should force the template file compilation and disable the cache, so as to always see the result of your changes directly.\nGo to the “Performances” page under the “Advanced parameters” menu to change the following Smarty settings:\n Template cache: switch it to “Force compilation”. Cache: disable it.  Forcing the compilation of Smarty will always slow down the loading time of the page. Make sure that your production store is set to only recompile templates if there are updated files, and that its cache is enabled.\nDisplaying error messages PrestaShop’s default settings prevent the customer to see any server error message or any debugging code.\nYou, on the other hand, need this information in order to correct any potential mistake in your code. To that end, open the /config/defines.inc.php file, and edit it to set _PS_MODE_DEV_ to true:\n\u0026lt;?php /* Debug only */ define(\u0026#39;_PS_MODE_DEV_\u0026#39;, true); Using the dump() function These two functions enable you to check for the state of a given variable at a specific place within your code.\nPrestaShop used to have custom debug functions available for developers: p($variable) and d($variable). They were used to display the content of a variable, and were really a wrapper around the well-known print_r() method. On top of that, PrestaShop had the ppp() and ddd() functions, which were respectively the aliases of p() and d(); and the various fd(), epr() and dieObject() functions.\nAll of this has changed with PrestaShop 1.7: we now rely solely on Symfony VarDumper\u0026rsquo;s dump() function. You can now rely on a single function instead of having multiple debug functions. The dump() function is very powerful, and is always available on output (even without die()). Moreover, you can use it in your console scripts because this function also has a formatter in CLI mode.\nThe dump() function is not activated by default. To activate it, you must enable the Debug mode, by setting _PS_MODE_DEV_ to true (see above).\nEnabling the multistore mode Since version 1.5, PrestaShop is able to host more than one store within a single installation of the software. Many shop administrators choose to enable this feature, and it can have a significant impact on the way PrestaShop works. You should therefore make sure that anything you code for PrestaShop works in both single and multistore mode.\nEnabling the multistore mode is easy: go to the general preferences page, and put the “Enable Multistore” option to “Yes”.\nYou can switch back and forth between single store and multistore mode. In single store mode, only the main store is used.\nYou can read more about the multistore mode in PrestaShop 1.7 User Guide.\nAbout the configuration files There are three main configuration files, all located in the /config folder:\n config.inc.php defines.inc.php smarty.config.inc.php  config.inc.php It is the main configuration file for PrestaShop. You should not have to touch anything in there.\ndefines.inc.php This file contains PrestaShop constant values.\nIt also contains the location of all the files and folders. If you need to change their location, do not forget to keep the original path nearby, for instance in a PHP comment, in case you need to revert back to it later on.\nWhen in development/test mode, you must make sure that all the error messages are displayed:\n Set define('_PS_MODE_DEV_', false); to true.  On the contrary, when in production mode, you must hide error messages as much as possible!\n Make sure that define('_PS_MODE_DEV_', false); is set to false.  smarty.config.inc.php This file contains all the Smarty-related settings.\nThe Smarty cache system should always be disabled, as it is not compatible with PrestaShop: keep $smarty-\u0026gt;caching = false; as it is.\n$smarty-\u0026gt;compile_check should be left to false in development mode.\n$smarty-\u0026gt;debugging gives access to Smarty debug information when displaying a page. That setting is more easily modified in the “Performance” page of the advanced parameters menu : the “Debug console” option enables you to choose between never displaying Smarty’s debug information, always displaying it, or only displaying it when you add ?SMARTY_DEBUG to the URL of the page you want to test, which can be very useful.\nWhen in production mode, $smarty-\u0026gt;force_compile must be set to false, as it will give a 30% boost to your page load time.\nOn the other hand, when editing a .tpl file, you must delete the /tools/smarty/compile folder (except the index.php file) in order to see your changes applied.\nNote that this setting can be made directly from the back office, in the “Performance” page under the “Advanced parameters” menu.\nDisable the Back-Office token protection Back-Office pages require the use of a token. If needed, this protection can be disabled using an environment variable:\nApache with mod_headers SetEnv _TOKEN_ disabled Nginx with ngx_http_headers_module add_header _TOKEN_ disabled; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/forms/cqrs-usage-in-forms/",
	"title": "CQRS usage in forms",
	"tags": [],
	"description": "",
	"content": "CQRS usage in forms This article assumes that you are already familiar with CQRS and CRUD forms, as this topic only demonstrates the usage of the CQRS approach. The basics To use CQRS you need to:\n Inject a CommandBus or QueryBus instance using your class constructor. Create an instance of the desired Command or Query. Call your command using the CommandBus or QueryBus.  Usage examples Using Commands In this example, we will be working with edition in a Contact CRUD Form.\nTo get started, let\u0026rsquo;s inject the CommandBus into our Form Data Handler.\n#src/PrestaShopBundle/Resources/config/services/core/form/form_data_handler.ymlprestashop.core.form.identifiable_object.data_handler.contact_form_data_handler:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler\\ContactFormDataHandler\u0026#39;arguments:- \u0026#39;@prestashop.core.command_bus\u0026#39;and in ContactFormDataHandler:\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler; use PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface; final class ContactFormDataHandler implements FormDataHandlerInterface { /** * @var CommandBusInterface */ private $commandBus; /** * @param CommandBusInterface $commandBus */ public function __construct(CommandBusInterface $commandBus) { $this-\u0026gt;commandBus = $commandBus; } } Right now the first step is completed – the Command Bus is injected in the Form Data Handler. Let\u0026rsquo;s use it!\nInstead of modifying the entity object directly in the Form Data Handler\u0026rsquo;s update() method, we can delegate that task to a Command. All we have to do is create an instance of that command using the form\u0026rsquo;s $data and then dispatch it using the CommandBus.\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataHandler; use PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface; use PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Command\\EditContactCommand; use PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Exception\\ContactException; use PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\ValueObject\\ContactId; final class ContactFormDataHandler implements FormDataHandlerInterface { /** * @var CommandBusInterface */ private $commandBus; /** * @param CommandBusInterface $commandBus */ public function __construct(CommandBusInterface $commandBus) { $this-\u0026gt;commandBus = $commandBus; } /** * {@inheritdoc} * * @throws ContactException */ public function update($id, array $data) { $editContactCommand = (new EditContactCommand((int) $id)) -\u0026gt;setLocalisedTitles($data[\u0026#39;title\u0026#39;]) -\u0026gt;setEmail($data[\u0026#39;email\u0026#39;]) -\u0026gt;setIsMessagesSavingEnabled($data[\u0026#39;is_messages_saving_enabled\u0026#39;]) -\u0026gt;setLocalisedDescription($data[\u0026#39;description\u0026#39;]) -\u0026gt;setShopAssociation(is_array($data[\u0026#39;shop_association\u0026#39;]) ? $data[\u0026#39;shop_association\u0026#39;] : []) ; $this-\u0026gt;commandBus-\u0026gt;handle($editContactCommand); } } In the update() method, EditContactCommand is used to encapsulate the actual action of saving the form. After that, the Command Bus handles the given command (persisting the information).\nRetrieving the created object ID As a general rule, Commands Handlers return nothing. However, when creating a new object, the created object ID is usually determined by the database engine. How do we handle that?\nIn this specific case, we allow Command Handlers to return the id of the newly created object after it\u0026rsquo;s inserted into the database:\n\u0026lt;?php public function create(array $data) { $addContactCommand = new AddContactCommand( $data[\u0026#39;title\u0026#39;], $data[\u0026#39;is_messages_saving_enabled\u0026#39;] ); $contactId = $this-\u0026gt;commandBus-\u0026gt;handle($addContactCommand); return $contactId-\u0026gt;getValue(); } In this example, the Command Handler for AddContactCommand returns a ContactId value object that contains the contact ID.\nUsing Queries In this example, we will be working with edition in a Contact CRUD Form.\nFirst, let\u0026rsquo;s inject QueryBus instance into the Form Data Provider.\n#src/PrestaShopBundle/Resources/config/services/core/form/form_data_provider.ymlprestashop.core.form.identifiable_object.data_provider.contact_form_data_provider:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider\\ContactFormDataProvider\u0026#39;arguments:- \u0026#39;@prestashop.core.query_bus\u0026#39;and in ContactFormDataProvider:\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider; use PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface; final class ContactFormDataProvider implements FormDataProviderInterface { /** * @var CommandBusInterface */ private $queryBus; /** * @param CommandBusInterface $queryBus */ public function __construct(CommandBusInterface $queryBus) { $this-\u0026gt;queryBus = $queryBus; } } The first step is completed – the Query Bus is injected in the Form Data Provider. Let\u0026rsquo;s use it!\nInstead of retrieving the data using an SQL query or retrieving the entity data using ObjectModel directly in the Form Data Provider\u0026rsquo;s getData() method, we can delegate that task to a Query. All that we have to do is create an instance of the Query using provided $id and dispatch it using the QueryBus. The appropriate Handler will take care of retrieving the information we need and returning it in a structured form.\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Form\\IdentifiableObject\\DataProvider; use PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface; use PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\DTO\\EditableContact; use PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Exception\\ContactException; use PrestaShop\\PrestaShop\\Core\\Domain\\Contact\\Query\\GetContactForEditing; final class ContactFormDataProvider implements FormDataProviderInterface { /** * @var CommandBusInterface */ private $queryBus; /** * @param CommandBusInterface $queryBus */ public function __construct(CommandBusInterface $queryBus) { $this-\u0026gt;queryBus = $queryBus; } /** * {@inheritdoc} * * @throws ContactException */ public function getData($contactId) { /** @var EditableContact $editableContact */ $editableContact = $this-\u0026gt;queryBus-\u0026gt;handle(new GetContactForEditing($contactId)); return [ \u0026#39;title\u0026#39; =\u0026gt; $editableContact-\u0026gt;getLocalisedTitles(), \u0026#39;email\u0026#39; =\u0026gt; $editableContact-\u0026gt;getEmail(), \u0026#39;is_messages_saving_enabled\u0026#39; =\u0026gt; $editableContact-\u0026gt;isMessagesSavingEnabled(), \u0026#39;description\u0026#39; =\u0026gt; $editableContact-\u0026gt;getLocalisedDescription(), \u0026#39;shop_association\u0026#39; =\u0026gt; $editableContact-\u0026gt;getShopAssociation(), ]; } } In the example above, the Handle to the GetContactForEditing query returns an instance of EditableContact, which is an immutable Data Transfer Object (DTO) containing all the information we need.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/database/",
	"title": "Database",
	"tags": [],
	"description": "",
	"content": "Accessing the database The database structure By default, PrestaShop’s database tables start with the ps_ prefix. This can be customized during installation\nAll table names are in lowercase, and words are separated with an underscore character (“_”):\n ps_employee ps_manufacturer ps_product ps_product_comment ps_shop_url  When a table establishes the links between two entities, the names of both entities are mentioned in the table’s name. For instance, ps_category_product links products to their category.\nA few details to note about tables:\n Tables which contain translations must end with the _lang suffix. For instance, ps_product_lang contains all the translations for the ps_product table. Tables which contain the records linking to a specific shop must end with the _shop suffix. For instance, ps_category_shop contains the position of each category depending on the store.  There is also a couple of standard practices for data rows within a table:\n Use the id_lang field to store the language associated with a record. Use the id_shop field to store the store associated with a record.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/domain/domain-exceptions/",
	"title": "Domain exceptions",
	"tags": [],
	"description": "",
	"content": "Domain exceptions With introduction of domain driven design in PrestaShop, a new way of error handling in the code is seeing the daylight. The code in PrestaShop\\PrestaShop\\Core\\Domain namespace started to utilize domain exceptions.\nWhat is a domain exception A domain exception is an exception, that is thrown in application\u0026rsquo;s domain level, which is specific to that particular domain. Let\u0026rsquo;s see how domain exceptions look like in the code. For this example, let\u0026rsquo;s look at Category domain:\nsrc/Core/Domain/Category/ . ├── Command ├── CommandHandler ├── Exception │ ├── CannotAddCategoryException.php │ ├── CannotDeleteImageException.php │ ├── CannotDeleteRootCategoryForShopException.php │ ├── CannotEditCategoryException.php │ ├── CannotUpdateCategoryStatusException.php │ ├── CategoryConstraintException.php │ ├── CategoryException.php │ ├── CategoryNotFoundException.php │ ├── FailedToDeleteCategoryException.php │ └── MenuThumbnailsLimitException.php ├── Query ├── QueryHandler ├── QueryResult └── ValueObject We can see the Exception directory, which contains all category domain exceptions.\nAll domain exceptions are extending a base exception class. In case of categories, all category exceptions are extending CategoryException, which defines the Category domain, and CategoryException extends PrestaShop\\PrestaShop\\Core\\Domain\\Exception\\DomainException, which defines the PrestaShop\u0026rsquo;s domain.\nExample usage of domain exceptions Let\u0026rsquo;s analyze one exception from Category domain, CannotEditCategoryException:\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Domain\\Category\\Exception; /** * Class CannotEditCategoryException is thrown when editing category fails. */ class CannotEditCategoryException extends CategoryException { } As we can guess from the comment in the code, this exception is supposed to be thrown when editing a category fails. Let\u0026rsquo;s see a real usage in a command handler:\n\u0026lt;?php // src/Adapter/Category/CommandHandler/EditCategoryHandler.php  private function updateCategoryFromCommandData(Category $category, EditCategoryCommand $command) { // ...  if (false === $category-\u0026gt;update()) { throw new CannotEditCategoryException( sprintf(\u0026#39;Failed to edit Category with id \u0026#34;%s\u0026#34;.\u0026#39;, $category-\u0026gt;id) ); } }  If you are not familiar with command handlers or how CQRS pattern is used in PrestaShop, you can read about it here: CQRS. We can see in the code above, that if category update fails, it will throw a CannotEditCategoryException. The exception then needs to be handled in the upper layers of the code.\nIn our example all category domain exceptions are handled in the CategoryController:\n\u0026lt;?php // src/PrestaShopBundle/Controller/Admin/Sell/Catalog/CategoryController.php  public function editAction($categoryId, Request $request) { try { $editableCategory = $this-\u0026gt;getQueryBus()-\u0026gt;handle(new GetCategoryForEditing((int) $categoryId)); } catch (CategoryException $e) { // Catching all exceptions from category domain  // and showing a specific error message for every exception type.  $this-\u0026gt;addFlash(\u0026#39;error\u0026#39;, $this-\u0026gt;getErrorMessageForException($e, $this-\u0026gt;getErrorMessages())); } // ... } So now, if we are editing a category and it fails for some reason (e.g. the database is not responding), the controller will catch the CannotEditCategoryException (which is a child of CategoryException) and display a specific error message to the user.\nWhy are there so many new exception classes ? Having many different exception classes means that developers can easily recognize specific failures in the system. Just as we recognized category editing failure in our example, we can catch any particular exception and it will tell us what exactly failed in the runtime.\nFor example, catching a CategoryNotFoundException lets us know when category is not found, or catching CannotAddCategoryException means that a category cannot be added. These exceptions carry an accurate information that makes it easier to debug the issue or to handle the usecase gracefully by displaying the right error message for example.\nIf we expand our previous example with a better overview with different exception types:\n\u0026lt;?php public function editAction($categoryId, Request $request) { try { $editableCategory = $this-\u0026gt;getQueryBus()-\u0026gt;handle(new GetCategoryForEditing((int) $categoryId)); } catch (CannotEditCategoryException $e) { // Here we handle the case when category cannot be edited, like display a specific error message and suggestions to fix it.  $this-\u0026gt;addFlash(\u0026#39;error\u0026#39;, \u0026#39;Something went wrong when editing category.\u0026#39;); } catch (CategoryNotFoundException $e) { // Here we can do specific actions if the user is trying to edit a category that cannot be found, like redirect to category listing.  $this-\u0026gt;addFlash(\u0026#39;error\u0026#39;, \u0026#39;Category cannot be found!\u0026#39;); } // ... } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/mail-templates/add-a-theme-from-module/",
	"title": "How to add an email theme from a module",
	"tags": [],
	"description": "",
	"content": "How to add an email theme from a module Now, what if you want to add a whole new email theme? Of course one possibility is to add a new theme folder in mails/themes/ but it\u0026rsquo;s not the most convenient if you want to install/uninstall it easily and quickly, so let\u0026rsquo;s integrate the theme in a module.\nJust like we did to add a layout from a module we are going to use the actionListMailThemes hook, except this time we are going to add a whole email theme. Now to ease things a bit we can use FolderThemeScanner used by the core to scan its own themes.\nUsing the hook \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\Layout; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCatalogInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollectionInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\FolderThemeScanner; class my_email_theme_module { public function install() { return parent::install() // This class constant contains \u0026#39;actionListMailThemes\u0026#39;  \u0026amp;\u0026amp; $this-\u0026gt;registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function uninstall() { return parent::uninstall() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function enable() { return parent::enable() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } public function disable() { return parent::disable() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(ThemeCatalogInterface::LIST_MAIL_THEMES_HOOK) ; } /** * @param array $hookParams */ public function hookActionListMailThemes(array $hookParams) { if (!isset($hookParams[\u0026#39;mailThemes\u0026#39;])) { return; } /** @var ThemeCollectionInterface $themes */ $themes = $hookParams[\u0026#39;mailThemes\u0026#39;]; $scanner = new FolderThemeScanner(); $darkTheme = $scanner-\u0026gt;scan(__DIR__.\u0026#39;/mails/themes/dark_modern\u0026#39;); if (null !== $darkTheme \u0026amp;\u0026amp; $darkTheme-\u0026gt;getLayouts()-\u0026gt;count() \u0026gt; 0) { $themes-\u0026gt;add($darkTheme); } } } You can then go to the \u0026ldquo;Design \u0026gt; Email Theme\u0026rdquo; page and preview the dark_modern theme.\n  Dark modern theme available   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/how-to-create-your-own-behat-tests/",
	"title": "How to create your own Behat tests",
	"tags": [],
	"description": "",
	"content": "How to create your own Behat tests or add tests to PrestaShop  Behat tests are great if you want to validate the behavior of a component of the code and/or follow a user-oriented scenario.\nBy \u0026ldquo;component\u0026rdquo; we usually mean a group of classes being called together, sometimes using an external dependency (a web API or a database system like MySQL).\nBy \u0026ldquo;user-oriented scenario\u0026rdquo; we mean a scenario that is a series of steps, each step is an action, and at the end of the series there is an expected result\nWhat is Behat Behat is a Behavior-Driven Development framework for PHP.\nBehat is a testing tool that brings one great asset to your tests: the test scenarios are written so that they are understandable by humans without technical knowledge needed ! This makes them easier to read and maintain.\nExample of a behat scenario:\nScenario:With free shipping voucher, there is no shipping feesGiven on my shop, there is only 1 carrier which can ship my productsAnd his shipping fees of 5.0 euros in zone \u0026#34;US\u0026#34; for product whose price ranges between 0 and 150 eurosGiven I start with an empty default cartAnd I add a standard product into my cart, the price of the product is 50.0 eurosThen my cart price is currently 55 eurosWhen I use a cart rule with code \u0026#34;free4behat\u0026#34; that provides free shippingThen my cart price is now 50 euros !It is better to discover Behat from its documentation but if you want to understand quickly what it does:\n test scenarios (known as \u0026ldquo;features\u0026rdquo;) are being parsed by Behat following gherkin syntax Behat matches each scenario step with a regular expression that must be provided as a method of a PHP class called feature context the regexp indicates a php function to be run by behat behat provides hooking capabilities to handle the test lifecycle (application boot, database reset, cache clear\u0026hellip;)  Launch the PrestaShop behat test suite Run tests using behat binary using the right behat.yml configuration file\nThis requires that a test database has been generated previously, using Composer command composer create-test-db.\n# from the PrestaShop root folder php -d date.timezone=UTC ./vendor/bin/behat -c tests/Integration/Behaviour/behat.yml Add new behat tests You can add a new test in one of the feature files or create a new feature file. It must use the gherkin syntax.\nIf you create new steps, you can add them to one of the available FeatureContext if the step belongs to it or create a new FeatureContext if you think it should be a dedicated file. In this case, update the behat.yml file to include your new Context.\nFeatureContexts are split by features: for example cart steps should go into CartFeatureContext. You can reuse existing steps from existing FeatureContexts. Make sure your test suite loads the right contexts (see behat.yml file content).\nFeatureContext files are stored in tests/Integration/Behaviour/Features/Context folder. They must extend the AbstractPrestaShopFeatureContext that provide the setup necessary to perform tests on PrestaShop.\nFeature files are stored in tests/Integration/Behaviour/Scenario folder.\nStep-by-step tutorial We will now add a new Behat test to demonstrate the different steps needed. This tutorial is a shortcut to write tests but the full documentation is available on the Behat website.\nLet\u0026rsquo;s say we want to check that the computation of a cart price is correctly impacted by a Free Shipping coupon.\nWe will:\n write this scenario as a human-readable text convert it to gherkin syntax run it using Behat  Write a new scenario and feature We will first write our feature. We can either add it to one of the existing .feature files in folder tests/Integration/Behaviour/Features/Scenario/ or create a new feature file. If the new feature file is in a new folder, you need to update the main Behat configuration file tests/Integration/Behaviour/behat.yml to either add this folder to one of the existing test suites or to create a new test suite.\nFor this tutorial, we\u0026rsquo;ll add the new scenario to the tests/Integration/Behaviour/Features/Scenario/Cart/Calculation/CartRule/free_shipping.feature file.\nThe scenario we want to test is the following:\nOnmy shop, there is only 1 carrier which can ship my productsAnd his shipping fees of 5.0 euros in zone \u0026#34;US\u0026#34; for product whose price ranges between 0 and 150 eurosI start with an empty default cartI add a standard product into my cart, the price of the product is 50.0 eurosSo my cart price is currently 55 eurosI use a cart rule with code \u0026#34;free4behat\u0026#34; that provides free shippingThen my cart price is now 50 euros !Then I convert it to use Gherkin syntax. This means each step must start with Given, When or Then. We can also use And which is an alias for the latest prefix used.\nScenario:With free shipping voucher, there is no shipping feesGiven On my shop, there is only 1 carrier which can ship my productsAnd his shipping fees of 5.0 euros in zone \u0026#34;US\u0026#34; for product whose price ranges between 0 and 150 eurosGiven I start with an empty default cartAnd I add a standard product into my cart, the price of the product is 50.0 eurosThen my cart price is currently 55 eurosWhen I use a cart rule with code \u0026#34;free4behat\u0026#34; that provides free shippingThen my cart price is now 50 euros !There is no rule that requires to use Given, When or Then. You could use Then everywhere but usually we say that:\n Given steps are used to lay the ground for the scenario, to describe existing items When steps are used to trigger something, to make an event happen which modifies the software state Then steps are used to validate the software state, to check it behaves as expected  We have now written a valid gherkin scenario !\nRun Behat on this new scenario This scenario is now runnable by Behat. I add it to the free_shipping.feature file. Now this scenario is part of the PrestaShop testing suite for Behat !\nLet\u0026rsquo;s see what happens if I run the whole feature to see the output:\n# from the PrestaShop root folder php ./vendor/bin/behat -c tests/Integration/Behaviour/behat.yml --name=\u0026#34;free shipping\u0026#34; (I use the --name filter to allow Behat to target my specific file, and not all the available tests)\nWe can see that Behat detects that some steps are not defined yet and suggests to create them for me:\n\u0026gt;\u0026gt; cart suite has undefined steps. Please choose the context to generate snippets: That is one great asset from Behat: if it is unable to match one of the steps with one existing regexp, it can generate snippets ready-to-use for us !\nHowever I am rather going to check into existing Context files (in tests/Integration/Behaviour/Features/Context/ folder) to see if I can re-use existing steps. It\u0026rsquo;s better to avoid unnecessary duplication.\nLuckily for me, it seems I can use existing steps for my whole feature! So we do not need to add new Behat steps in the Context file. We will however see later how to add a new step.\nBack to my usecase: I check available existing steps from either the other Feature files or the Context files, so I can reuse them to replace all the steps I have written by steps that are already understandable by Behat.\nHere is my scenario now:\nScenario:With free shipping voucher, there is no shipping fees# Start with an empty cartGiven I have an empty default cart# We need a productAnd there is a product in the catalog named \u0026#34;product1\u0026#34; with a price of 50.0 and 1000 items in stock# We define the standard PrestaShop localisation tree: zone \u0026gt; country \u0026gt; state \u0026gt; addressAnd there is a zone named \u0026#34;North America\u0026#34;And there is a country named \u0026#34;country1\u0026#34; and iso code \u0026#34;US\u0026#34; in zone \u0026#34;North America\u0026#34;And there is a state named \u0026#34;state1\u0026#34; with iso code \u0026#34;TEST-1\u0026#34; in country\u0026#34;country1\u0026#34; and zone \u0026#34;North America\u0026#34;And there is an address named \u0026#34;address1\u0026#34; with postcode \u0026#34;1\u0026#34; in state \u0026#34;state1\u0026#34;# We need a carrier with shipping feesGiven there is a carrier named \u0026#34;carrier1\u0026#34;And carrier \u0026#34;carrier1\u0026#34; applies shipping fees of 5.0 in zone \u0026#34;North America\u0026#34; for price between 0 and 150# Create the voucherGiven there is a cart rule named \u0026#34;free4behat\u0026#34; that applies no discount with priority 4, quantity of 1000 and quantity per user 1000And cart rule \u0026#34;free4behat\u0026#34; offers free shippingAnd cart rule \u0026#34;free4behat\u0026#34; has a discount code \u0026#34;free4behat\u0026#34;When I add 1 items of product \u0026#34;product1\u0026#34; in my cart# 57 because product = 50 € + 5 € (carrier shipping fees) + 2 € (default carrier handling cost)Then my cart total should be 57.0 tax includedWhen I use the discount \u0026#34;free4behat\u0026#34;Then my cart total should be 50.0 tax includedThis one is valid: Behat is able to match each of the lines with one Context step. And if I run my command, I can see Behat go through the whole scenario successfully. This means that my free shipping voucher behavior is correct: Behat has checked that the cart total, after using the voucher, has no shipping fees.\nMy feature is validated by Behat !\nAdding a new step Now we are going to add a new step that is not yet supported by existing Contexts.\nFor example, have you noticed that the cart price is, before free shipping, 57€ and not 55€ ? It is because the step Given there is a carrier named \u0026quot;carrier1\u0026quot; generates a standard carrier whose handling cost is 2 by default. So when shipping fees are added, the handling cost is added too.\nLet\u0026rsquo;s say we want to remove this handling cost and only keep the shipping fees. This way my cart price will, without free shipping, be 55€ and not 57€.\nSo we need to add a new step: Given the carrier \u0026quot;carrier1\u0026quot; has no handling costs.\nThis step is unknown to Behat, so we will need to help Behat \u0026ldquo;understand it\u0026rdquo;.\nWe add the step to the scenario and we run again\n# from the PrestaShop root folder php ./vendor/bin/behat -c tests/Integration/Behaviour/behat.yml --name=\u0026#34;free shipping\u0026#34; Again, Behat detects the unmatched step and warns me suite has undefined steps. Please choose the context to generate snippets:.\nI accept the help of Behat and let him generate a snippet ready-to-use for me for my step.\nI choose to put the new step into Tests\\Integration\\Behaviour\\Features\\Context\\CarrierFeatureContext as it is related to carriers. The generated snippet looks like this:\n\u0026lt;?php /** * @Given the carrier :arg1 has no handling costs */ public function theCarrierHasNoHandlingCosts($arg1) { throw new PendingException(); } I can pick it, copy it into CarrierFeatureContext file and implement it.\nImplementing a Behat step means: performing the required process, be it call functions, perform SQL queries, that are required by the action \u0026ldquo;carrier has no costs\u0026rdquo;. I also rename the function and improve the regular expression provided by Behat.\nAfter I have implemented it, this is what my step looks like:\n\u0026lt;?php /** * @Given the carrier :carrierName has no handling costs */ public function carrierHasNoHandlingCosts($carrierName) { // check a carrier with this name exists  $this-\u0026gt;checkCarrierWithNameExists($carrierName); // fetch the carrier  $carrier = $this-\u0026gt;carriers[$carrierName]; // disable handling cost  $carrier-\u0026gt;shipping_handling = false: $carrier-\u0026gt;save(); } Now I update my scenario:\nScenario:With free shipping voucher, there is no shipping fees# Start with an empty cartGiven I have an empty default cart# We need a productAnd there is a product in the catalog named \u0026#34;product1\u0026#34; with a price of 50.0 and 1000 items in stock# We define the standard PrestaShop localisation tree: zone \u0026gt; country \u0026gt; state \u0026gt; addressAnd there is a zone named \u0026#34;North America\u0026#34;And there is a country named \u0026#34;country1\u0026#34; and iso code \u0026#34;US\u0026#34; in zone \u0026#34;North America\u0026#34;And there is a state named \u0026#34;state1\u0026#34; with iso code \u0026#34;TEST-1\u0026#34; in country\u0026#34;country1\u0026#34; and zone \u0026#34;North America\u0026#34;And there is an address named \u0026#34;address1\u0026#34; with postcode \u0026#34;1\u0026#34; in state \u0026#34;state1\u0026#34;# We need a carrier with shipping feesGiven there is a carrier named \u0026#34;carrier1\u0026#34;Given the carrier \u0026#34;carrier1\u0026#34; has no handling costsAnd carrier \u0026#34;carrier1\u0026#34; applies shipping fees of 5.0 in zone \u0026#34;North America\u0026#34; for price between 0 and 150# Create the voucherGiven there is a cart rule named \u0026#34;free4behat\u0026#34; that applies no discount with priority 4, quantity of 1000 and quantity per user 1000And cart rule \u0026#34;free4behat\u0026#34; offers free shippingAnd cart rule \u0026#34;free4behat\u0026#34; has a discount code \u0026#34;free4behat\u0026#34;When I add 1 items of product \u0026#34;product1\u0026#34; in my cart# 55 because product = 50 € + 5 € (carrier shipping fees)Then my cart total should be 55.0 tax excludedWhen I use the discount \u0026#34;free4behat\u0026#34;Then my cart total should be 50.0 tax includedHave you noticed my cart total, before using the voucher, is now 55€ and not 57€ ? And when this scenario is run by Behat, everything runs fine, so my calculations are correct !\nI have again a dedicated scenario that validates the behavior of my free shipping voucher.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/basics/keeping-up-to-date/upgrade/",
	"title": "How to upgrade PrestaShop",
	"tags": [],
	"description": "Everything you need to know to upgrade your PrestaShop to the latest version",
	"content": "How to upgrade PrestaShop Important\nDo not go further if you haven’t made a backup of your shop.\nRollback will be the only way to go back if something does not go well, and this requires a backup.\nLearn how to backup your shop\n This chapter describes several ways to complete an upgrade of PrestaShop.\nManual upgrade – Process details This guide gives you the full control on the process. This one has been applied by PrestaShop for several major versions, and thus can be applied on very old shops.\nRelease download The first step is to download the latest version on https://www.prestashop.com/.\nIf you upgrade to another version of PrestaShop 1.6, the release files can be found in a dedicated archives list.\nDownload can also be done in command line, as done here with the version 1.7.3.2:\nwget -O prestashop-upgrade.zip https://www.prestashop.com/download/old/prestashop_1.7.3.2.zip Archive extraction Extract the files from the archive with a tool like 7zip\nNote starting from PrestaShop 1.7.0.0, the release package contains a zip file itself, which must be extracted as well.\nOn a Linux terminal, you can use the command `unzip`:\nunzip prestashop-upgrade.zip \u0026amp;\u0026amp; unzip prestashop.zip Once you have the folders like classes/, modules/, themes/, etc. you may go on the next step.\nSample files cleanup Avoid overwrite the production resources (images, conf \u0026hellip;) with the default data. These folders can be removed from the new release:\n img/ override/  All the other files present in the new release will overwrite the existing files. All changes you made on the original source code will be lost (by the way, this is not recommended, you should never modify the core files).\nAlso, rename the “admin” folder to match your shop’s admin folder name. This will prevent an unwanted duplication of the administration content.\nTurning on maintenance mode The shop will now be modified. As it may cause unexpected behavior for you and your customers during the upgrade, we highly recommend you to turn on maintenance mode during the upgrade.\nThis can be done in your administration panel:\n On PrestaShop 1.7, in Shop parameters \u0026gt; General \u0026gt; Maintenance tab On PrestaShop 1.6, in Shop parameters \u0026gt; Maintenance  Adding your IP address will allow you to access your shop while it’s in maintenance mode. That way, you can make sure everything is working right before allowing your customers to access it again.\nFile copy In this step, we “upgrade” the PrestaShop files by copying the new release content in the existing shop.\nNote about `vendor` folder: Previous upgrades of PrestaShop 1.7 showed that conflicts may occur when merging the new vendor/ folder with the old one. To avoid this problem, we recommend to delete this folder in the existing shop before copying the new one.\nOn Windows, copy the new folder content and paste it in your shop folder. You will get warnings that files already exists in the destination folder. Choose “overwrite” to continue.\nOn linux, the copy can be done in your terminal:\ncp -R \u0026lt;path_to_the_new_release\u0026gt;/* \u0026lt;path_to_the_current_shop\u0026gt;/ Example:\ncp -R ~/Downloads/prestashop/* /var/www/html/ Database upgrade Once the files have been copied, your shop database is ready to be upgraded.\nSome web hosting providers gives you two user accounts to access your database. One with full privileges the other for using in scripts with limited rights. To be able to use this Database upgrade script you have to use the account with full privileges. All the changes to apply have been defined in the `install` folder, running them can be done with a specific PHP script.\nWhen you’re ready, run the file `install/upgrade/upgrade.php`.\nThis can be done with a browser, by reaching the address http://\u0026lt;shop_domain\u0026gt;/install/upgrade/upgrade.php, or from your server\u0026rsquo;s command line:\nphp install/upgrade/upgrade.php In both cases, an XML log will be displayed. The result can be found in the attribute result of the first tag \u0026lt;action\u0026gt;:\n ok if updates have been found and executed error if something went wrong info for next actions, displaying the details on the process  Execution log When the upgrade script found some upgrades to apply, the SQL queries run will be listed along their respective result.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u0026lt;action result=\u0026#34;ok\u0026#34; id=\u0026#34;\u0026#34;\u0026gt; \u0026lt;action result=\u0026#34;info\u0026#34; id=\u0026#34;1.7.0.5\u0026#34;\u0026gt;\u0026lt;![CDATA[[OK] PHP 1.7.0.5 : /* PHP:ps_update_tabs(); */]]\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;action result=\u0026#34;info\u0026#34; id=\u0026#34;1.7.0.5\u0026#34;\u0026gt;\u0026lt;![CDATA[[OK] SQL 1.7.0.5 : ALTER TABLE `ps_currency` MODIFY `name` varchar(64) NOT NULL]]\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;action result=\u0026#34;info\u0026#34; id=\u0026#34;1.7.1.0\u0026#34;\u0026gt;\u0026lt;![CDATA[[OK] SQL 1.7.1.0 : SET SESSION sql_mode = \u0026#39;\u0026#39;]]\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;action result=\u0026#34;info\u0026#34; id=\u0026#34;1.7.1.0\u0026#34;\u0026gt;\u0026lt;![CDATA[[OK] SQL 1.7.1.0 : SET NAMES \u0026#39;utf8\u0026#39;]]\u0026gt;\u0026lt;/action\u0026gt; [...] You can double check that each action is marked as “OK”. If not, additional details will be shown after the request, which can help you fix the issue and re-execute the request manually on your database. In some cases, you may need to restore your database backup and start over.\nError codes An error code can also be displayed. Each code is related to a message described here:\n Error #27: The shop is running a newer version than the content provided by the install folder. Error #28: The shop is already at the version you try to upgrade to. Error #29: Could not find the current version. Check your database parameters file and the database connection. Error #31: Unable to find upgrade directory in the installation path, does the folder install/upgrade/sql exist and is not empty? Error #32: No upgrade needs to be applied. Error #33: Error while loading a SQL upgrade file. Check your permissions of the folder install/upgrade/sql. Error #40: The version provided in the file install/install_version.php is invalid. Error #43: Error while upgrading database schema using doctrine. Error #44: Error while updating translations. Error #45: Error while enabling theme.  Cleanup Before going further, a few things should now be cleaned.\n The `install` folder, used to run the database upgrades, is not needed anymore and can be safely deleted. When opening your shop (in the front or back office) on your browser, you may see some visual issues. This can be due to your old assets being still served by a cache. Reload them by force-refreshing the page (press ctrl+R on Windows / Linux or cmd+R on Mac OS) or clearing your browser’s cache.  Modules upgrade Your modules files have been upgraded during the file copy, however many of them may require additional changes on the database. Please check the module page in your Back Office to see if upgrades are waiting to be run.\nGo to your administration panel and login. You will notice the version displayed has changed on the login page. Then in the menu, click on the module page to reach your catalog.\nOn PrestaShop 1.6, this page can be found in “Module \u0026amp; Services”. Click on “Update all” at the top of the page to run all available upgrades:\n  On PrestaShop 1.7, the same feature can be found in the Improve \u0026gt;\u0026gt; Modules page, under the tab “Notifications”:\n  1-click upgrade module About If the manual process seems too tedious, other solutions exist to complete an upgrade.\nPrestaShop provides the module 1-click upgrade for free on the marketplace and your shop administration panel. It executes the previously given process automatically, and is available for almost all versions of PrestaShop.\nThe same note as above, in order to have this module working you must have set in /app/config/parameters.php database account with full privileges. Note about version +4.0.0 This module has been reworked internally for PrestaShop 1.6 \u0026amp; 1.7.\nTechnical details about this major version can be found on a specific document (Google docs).\nDownload / Installation  Download from the marketplace: https://addons.prestashop.com/en/data-migration-backup/5496-.html  Then, import your module archive on the modules page. To do so, you can find the button “Upload a module” (PrestaShop 1.7) or “Add a module” (PrestaShop 1.6) at the top right of the page. Clicking on it will open a form that will allow you to upload your module zip.\nOn PrestaShop 1.7:\n  On PrestaShop 1.6:\n   From the administration panel  On PrestaShop 1.7:\n  On PrestaShop 1.6:\n  Usage The configuration page of the module displays some checks and the options available for an upgrade.\n  The first configuration lets you choose what kind of upgrade you want to run. It is always recommended to stick with the minor / major branches of the options, as they use some additional information provided by PrestaShop (md5 checksum, core files to delete\u0026hellip;).\n  It is always recommended to let the module make its own backup, because it will allow it to immediately run a rollback if something goes wrong during the upgrade.\nHowever, if you are confident in the backup you have made and are ready to rollback manually in case of trouble, you can disable the backup step.\n  Finally, the last options customizing the upgrade process let you keep any changes you have done to the default theme, mails etc.\n  If the configuration chosen and the self-checks are valid, a button “Upgrade Now” will be available. Clicking immediately start the upgrade.\nNote the interface may be unfriendly to you, but it displays as most information as possible to let you know what happened in case of trouble. Let the process run until the message “Upgrade successful” appears. If an error is found, you will be given the choice to rollback.\nSupport service Doing an upgrade by yourself can be risky. If you feel uncomfortable with doing it on your own, you can leave it to our support team who will handle the backup and the upgrade to the last minor version for you (1.6 → 1.6, 1.7 → 1.7 etc.).\nBasically, the process and the result will be the same. The existing data on the shop will be kept, as well as your module and your current theme.\nYou can subscribe for the upgrade service on the marketplace.\nMany agencies and freelancers in your area may also provide this kind of service.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/legacy/",
	"title": "Legacy",
	"tags": [],
	"description": "",
	"content": "Legacy This section describes components from the Legacy architecture.\n Legacy Controllers   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/notifications/",
	"title": "Notifications",
	"tags": [],
	"description": "",
	"content": "Notifications Throughout the whole front office, the customer can receive notification messages from PrestaShop, to inform about successes or errors for instance. Your theme can also send notifications when certain events occur.\nThe notification messages are not hard-coded in the template files, but are sent from the controller, so that you have consistency in case you update/change your theme. Thus, this way there is a better chance that all notification messages are already translated into your language!\nTypes of notifications An array of notification is passed to the templates, containing at least one of these:\n success An action was performed and everything went well. error Something went wrong. warning Important notice the merchant should know about. info \u0026ldquo;just so you know\u0026rdquo;.  How to display notifications In the \u0026ldquo;Classic\u0026rdquo; Theme, notifications are implemented as a partial template file:\n\u0026lt;aside id=\u0026#34;notifications\u0026#34;\u0026gt; {if $notifications.error} {block name=\u0026#39;notifications_error\u0026#39;} \u0026lt;article class=\u0026#34;notification notification-danger\u0026#34; role=\u0026#34;alert\u0026#34; data-alert=\u0026#34;danger\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.error as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} {if $notifications.warning} {block name=\u0026#39;notifications_warning\u0026#39;} \u0026lt;article class=\u0026#34;notification notification-warning\u0026#34; role=\u0026#34;alert\u0026#34; data-alert=\u0026#34;warning\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.warning as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} {if $notifications.success} {block name=\u0026#39;notifications_success\u0026#39;} \u0026lt;article class=\u0026#34;notification notification-success\u0026#34; role=\u0026#34;alert\u0026#34; data-alert=\u0026#34;success\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.success as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} {if $notifications.info} {block name=\u0026#39;notifications_info\u0026#39;} \u0026lt;article class=\u0026#34;notification notification-info\u0026#34; role=\u0026#34;alert\u0026#34; data-alert=\u0026#34;info\u0026#34;\u0026gt; \u0026lt;ul\u0026gt; {foreach $notifications.info as $notif} \u0026lt;li\u0026gt;{$notif nofilter}\u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; \u0026lt;/article\u0026gt; {/block} {/if} \u0026lt;/aside\u0026gt; \u0026hellip;and are then included in the template file:\n{block name=\u0026#39;notifications\u0026#39;}{include file=\u0026#39;_partials/notifications.tpl\u0026#39;}{/block}Add your own message in your front controller Your front controller holds the 4 following variables:\n $this-\u0026gt;errors $this-\u0026gt;success $this-\u0026gt;warning $this-\u0026gt;info  They are PHP arrays, and they hold messages as a string.\nSince PrestaShop 1.7, you can redirect the customer AND display a message after an action.\n\u0026lt;?php $this-\u0026gt;success[] = $this-\u0026gt;l(\u0026#39;Information successfully updated.\u0026#39;); $this-\u0026gt;redirectWithNotifications($this-\u0026gt;getCurrentURL()); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/payment/",
	"title": "Payment modules",
	"tags": [],
	"description": "",
	"content": "Payment modules PrestaShop 1.7 introduces a new payment API. Below, you\u0026rsquo;ll find information about how it works and also, how to migrate your module from PrestaShop 1.6 (and earlier) to PrestaShop 1.7.\nThe main reason why the change was needed is on the customer side: Now, there is only one button to validate the order, not one by payment module anymore.\nThe bankwire module is an example of how a payment module for PS 1.6 is migrated to PS 1.7 API. A skeleton is also available on GitHub.\nPlease note that your module won\u0026rsquo;t be listed in payment methods admin page unless it is referenced in the official list. However you can still configure it through the Module Manager.\nRequirements To make a payment module for PrestaShop 1.7, you\u0026rsquo;ll have to respect some elements:\n  Your class will have to extend PaymentModule.\n  You will need to declare the following namespace.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Payment\\PaymentOption;   You\u0026rsquo;ll have to register the two following methods: hookPaymentOptions() \u0026amp; hookPaymentReturn() and register these hooks.\n  You must not have a submit button into your module\u0026rsquo;s HTML code. It will automatically be generated by PrestaShop.\n  In the hookPaymentOptions() method, you have to return an array of PaymentOption.\nHow to generate your PaymentOption PaymentOption Here is a list of the PaymentOption class variables. They all have a getter and a setter and are accessible in the array sent to the front office template.\n $callToActionText: The text displayed as the payment method name. $additionalInformation: Additional information to display to the customer. This is free HTML, and may be used by modules such as bankwire to display to which account the bank transfer should be made. $logo: The URL to a picture to display in the payment option selection widget. $action: The URL to which the request to process the payment must be made. $inputs: An associative array of additional parameters to use when sending the request to $action. $form: The custom HTML to display like a form to enter the credit card information. $iframe: The custom HTML containing an iframe with the payment confirmation widget for modules like ATOS. $moduleName: The name of the module. $binary: A boolean to set if the module form was generated by binaries and contains a submit button. It\u0026rsquo;s necessary to adapt the behavior.  PaymentOption types You can find a example module illustrating the four identified cases of payment modules on GitHub.\nWe have identified four cases of payment module:\nOffline : This is the most simple case where you could be (e.g.:Bankwire, Cheque). It\u0026rsquo;s a simple URL to call, then various information are displayed to the customer.\nThe minimal variables to set are `$callToActionText` and `$action`. You can check the `getOfflinePaymentOption()` method of *[paymentexample](https://github.com/PrestaShop/paymentexample)* to have an example.  External : It\u0026rsquo;s a simple URL to call, then the payment is directly processed on the Payment Service Provider\u0026rsquo;s website (e.g.: PayPal, Paybox).\nThe minimal variables to set are `$callToActionText` and `$action`. The form will be sent by POST and you can add hidden inputs such as a token, by using `setInput()` method. You can check the `getExternalPaymentOption()` method of *[paymentexample](https://github.com/PrestaShop/paymentexample)* to have an example.  Embedded : You write your credit card number and all the required data directly on the merchant\u0026rsquo;s website (e.g.: Stripe).\nThe minimal variables to set are `$callToActionText` and `$form`. You can check the `getEmbeddedPaymentOption()` method of *[paymentexample](https://github.com/PrestaShop/paymentexample)* to have an example.  iFrame : The payment form is displayed on the merchant\u0026rsquo;s website, but inside an iFrame.\nThe minimal variables to set are `$callToActionText` and `$additionalInformation`. You can check the `getIframePaymentOption()` method of *[paymentexample](https://github.com/PrestaShop/paymentexample)* to have an example.  Migrating from 1.6 to 1.7 How-To You need to change the payment hook where your module is hooked on by paymentOption. It\u0026rsquo;s not a display hook anymore, so you must not use the $this-\u0026gt;display() method to retrieve a template, but use the $this-\u0026gt;context-\u0026gt;smarty-\u0026gt;fetch() method instead.\nThen, implement the hookPaymentOptions() function to return an array of PaymentOption.\nNext, you\u0026rsquo;ll need to identify the type of your payment module to know which variables are mandatory.\nWhat if I can\u0026rsquo;t remove the submit button? As you may read it above, you must not have a submit button into your module\u0026rsquo;s HTML code, because PrestaShop will automatically generate it. If you can\u0026rsquo;t remove the submit button from the form for some reasons (e.g.: the form is generated by binaries), we have implemented another way to make your module PrestaShop 1.7 compatible. But, note that this is NOT the recommended way to do it.\nTo do this, you\u0026rsquo;ll need to implement a supplementary hook: displayPaymentByBinaries. It\u0026rsquo;s made to display the payment form, and it will replace the unique payment button in the checkout.\nYou\u0026rsquo;ll also need to set the $binary variable to true. It will adapt the behavior to hide the payment button and replace it by the form when the payment option is selected.\nHooks The params passed to the following hooks have been modified:\n hookPaymentReturn hookDisplayOrderConfirmation  BEFORE    Key Value     total_to_pay Result of $order-\u0026gt;getOrdersTotalPaid()   currency Currency sign (string)   currencyObj The loaded currency (Currency class)   objOrder The current order object (Order class)    AFTER    Key Value     order The current order object (Order class)    Everything can be retrieved, for example:\n\u0026lt;?php $currency = new Currency($params[\u0026#39;order\u0026#39;]-\u0026gt;id_currency); $total_to_pay = $params[\u0026#39;order\u0026#39;]-\u0026gt;getOrdersTotalPaid(); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/reference/",
	"title": "Reference",
	"tags": [],
	"description": "",
	"content": "Web service reference All webservice APIs are accessible through the /api/ gateway. For instance, http://example.com/api/carriers\nAvailable HTTP methods Most resources can be accessed in a REST manner, with the 5 main HTTP request methods: GET, POST, PUT, DELETE, HEAD. The only exceptions are:\n   Key GET POST PUT DELETE HEAD     search X    X   stock_availables X X   X   stock_movements X    X   stocks X    X   supply_order_details X    X   supply_order_histories X    X   supply_order_receipt_histories X    X   supply_order_states X    X   supply_orders X    X   warehouse_product_locations X    X   warehouses X X X  X    All resources have two schemas that are accessible via a parameter:\n ?schema=blank: returns a blank XML tree of the chosen resource. ?schema=synopsis: returns a blank XML tree of the chosen resource, with the format that is expected for each value and specific indicators (ie, if the node is required, and its maximum size in number of characters).  Available resources    Resource Description     addresses The Customer, Manufacturer and Customer addresses   carriers The Carriers that perform deliveries   cart_rules Cart rules management (discount, promotions, \u0026hellip;)   carts Customer\u0026rsquo;s carts   categories The product categories   combinations The product combinations   configurations Shop configuration, used to store miscellaneous parameters from the shop (maintenance, multi shop, email settings, \u0026hellip;)   contacts Shop contacts   content_management_system Content management system   countries The countries available on the shop   currencies The currencies installed on the shop   customer_messages Customer services messages   customer_threads Customer services threads   customers The e-shop\u0026rsquo;s customers   customizations The product customizations   deliveries Product deliveries   employees The Employees   groups The customer\u0026rsquo;s groups   guests The guests (customers not logged in)   image_types The image types   images The images   images/general/header The shop\u0026rsquo;s logo in the header   images/general/mail The shop\u0026rsquo;s logo in the e-mails   images/general/invoice The shop\u0026rsquo;s logo in the invoice   images/general/store_icon The shop\u0026rsquo;s logo as a favicon   images/products The products images   images/categories The categories images   images/manufacturers The manufacturers images   images/suppliers The suppliers images   images/stores The stores images   images/customizations The customizations images   languages Shop languages   manufacturers The product manufacturers   messages The customers messages   order_carriers The order carriers   order_details Details of an order   order_histories The Order histories   order_invoices The Order invoices   order_payments The Order payments   order_slip The Order slips (used for refund)   order_states The Order states (Waiting for transfer, Payment accepted, \u0026hellip;)   orders The Customers orders   price_ranges Price range   product_customization_fields The Product customization fields   product_feature_values The product feature values (Ceramic, Polyester, \u0026hellip; - Removable cover, Short sleeves, \u0026hellip;)   product_features The product features (Composition, Property, \u0026hellip;)   product_option_values The product options value (S, M, L, \u0026hellip; - White, Camel, \u0026hellip;)   product_options The product options (Size, Color, \u0026hellip;)   product_suppliers Product Suppliers   products The products   search Search   shop_groups Shop groups from multi-shop feature   shop_urls Shop urls from multi-shop feature   shops Shops from multi-shop feature   specific_price_rules Specific price rules management   specific_prices Specific price management   states The available states of countries   stock_availables Available quantities of products   stock_movement_reasons The stock movement reason (Increase, Decrease, Custom Order, \u0026hellip;)   stock_movements Stock movements management   stocks Stocks for products   stores The stores   suppliers The product suppliers   supply_order_details Supply Order Details   supply_order_histories Supply Order Histories   supply_order_receipt_histories Supply Order Receipt Histories   supply_order_states Supply Order States   supply_orders Supply Orders   tags The Products tags   tax_rule_groups Group of Tax rule, along with their name   tax_rules Tax rules, to associate Tax with a country, zip code, \u0026hellip;   taxes The tax rate   translated_configurations Shop configuration which are translated   warehouse_product_locations Location of products in warehouses   warehouses Warehouses   weight_ranges Weight ranges for deliveries   zones The Countries zones    Schema synopsis format When displaying a resource schema in synopsis mode, the API gives some useful indication of the expected data type.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id_default_group\u0026gt;\u0026lt;/id_default_group\u0026gt; \u0026lt;id_lang format=\u0026#34;isUnsignedId\u0026#34;\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;newsletter_date_add\u0026gt;\u0026lt;/newsletter_date_add\u0026gt; \u0026lt;ip_registration_newsletter\u0026gt;\u0026lt;/ip_registration_newsletter\u0026gt; \u0026lt;last_passwd_gen readOnly=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/last_passwd_gen\u0026gt; \u0026lt;secure_key format=\u0026#34;isMd5\u0026#34; readOnly=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/secure_key\u0026gt; \u0026lt;deleted format=\u0026#34;isBool\u0026#34;\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;passwd required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isPasswd\u0026#34;\u0026gt;\u0026lt;/passwd\u0026gt; \u0026lt;lastname required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isCustomerName\u0026#34;\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isCustomerName\u0026#34;\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;email required=\u0026#34;true\u0026#34; maxSize=\u0026#34;255\u0026#34; format=\u0026#34;isEmail\u0026#34;\u0026gt;\u0026lt;/email\u0026gt; ... \u0026lt;/customer\u0026gt; \u0026lt;/prestashop\u0026gt; Generic value types    Format Description Expected format     isBool A boolean value (true or false). 0|1    isFloat A floating-point value (between -3.4 × 10^38 and +3.4 × 10^38). n/a   isInt An integral value (between -2,147,483,648 and 2,147,483,647). n/a   isJson A valid JSON string. n/a   isNullOrUnsignedId An integral and unsigned value (between 0 and 4294967296), or a NULL value. n/a   isSerializedArray PHP serialized data. /^a:[0-9]+:{.*;}$/s    isString A string of characters. n/a   isUnsignedId An integral and unsigned value (between 0 and 4294967296). n/a   isUnsignedFloat An floating-point and unsigned value (between 0 and +6.8 × 10^38). n/a    Specific value types    Format Description Expected format     isAnything No validation n/a   isApe A valid APE code. /^[0-9]{3,4}[a-zA-Z]{1}$/s    isBirthDate A valid date, in YYYY-MM-DD format. n/a   isCleanHtml Must not contain invalid HTML tags, nor XSS. n/a   isColor A valid HTML/CSS color, in #xxxxxx format or text format. /^(#[0-9a-fA-F]{6}|[a-zA-Z0-9-]*)$/    isDate A valid date. n/a   isDateFormat A valid date format. n/a   isEmail A valid e-mail address. n/a   isImageSize A valid image size, between 0 and 9999. /^[0-9]{1,4}$/    isIp2Long A valid IP for customer messages #^-?[0-9]+$#    isLanguageCode A valid language code, in XX or XX-XX format. /^[a-zA-Z]{2}(-[a-zA-Z]{2})?$/    isLanguageIsoCode A valid ISO language code, in XX or XXX format. /^[a-zA-Z]{2,3}$/    isLinkRewrite A valid link rewrite. /^[_a-zA-Z0-9\\-]+$/    isLocale A valid locale code, in xx-XX format /^[a-z]{2}-[A-Z]{2}$/    isMd5 A valid MD5 string: 32 characters, mixing lowercase, uppercase and numerals. /^[a-f0-9A-F]{32}$/    isNumericIsoCode A valid ISO code, in 000 format. /^[0-9]{3}$/    isPasswd A valid password, in. between 5 and 72 characters long. /^[.a-zA-Z_0-9-!@#$%\\^\u0026*()]{5,72}$/    isPasswdAdmin A valid password, between 8 and 72 characters long. /^[.a-zA-Z_0-9-!@#$%\\^\u0026*()]{8,22}$/    isPercentage A valid percentage: float between 0 and 100 n/a   isPhpDateFormat A valid PHP date – in fact, a string without \u0026lsquo;\u0026lt;\u0026rsquo; nor \u0026lsquo;\u0026gt;\u0026rsquo;. /^[^]+$/    isPriceDisplayMethod A valid price display method, meaning the value be equals to constants PS_TAX_EXC or PS_TAX_INC. 0|1    isReductionType A valid reduction type. amount|percentage    isReference A valid product reference. /^[^;={}]*$/u    isSha1 A valid SHA1 string: 40 characters, mixing lowercase, uppercase and numerals. /^[a-fA-F0-9]{40}$/    isThemeName A theme name. /^[\\w-]{3,255}$/u    isTrackingNumber A valid tracking number. /^[~:#,%\u0026_=\\(\\)\\[\\]\\.\\? \\+\\-@\\/a-zA-Z0-9]+$/    isUrl A valid URL. /^[~:#,$%\u0026_=\\(\\)\\.\\? \\+\\-@\\/a-zA-Z0-9\\pL\\pS-]+$/u    isStockManagement A stock management. WA|FIFO|LIFO     Names    Format Description Expected format     isCatalogName A valid product or category name. /^[^;=#{}]*$/u    isCarrierName A valid carrier name. /^[^;=#{}]*$/u    isConfigName A valid configuration key. /^[a-zA-Z_0-9-]+$/    isCustomerName A valid customer name. see PrestaShop\\PrestaShop\\Core\\ConstraintValidator\\CustomerNameValidator   isGenericName A valid standard name. /^[^={}]*$/u    isImageTypeName A valid image type. /^[a-zA-Z0-9_ -]+$/    isModuleName A valid module name. /^[a-zA-Z0-9_-]+$/    isName A valid name. /^[^0-9!,;?=+()@#\"°{}_$%:¤|]*$/u    isTplName A valid template name. /^[a-zA-Z0-9_-]+$/     Locations    Format Description Expected format     isAddress A valid postal address. /^[^!?=+@{}_$%]*$/u    isDniLite A valid DNI (Documento Nacional de Identidad) identifier. Specific to some Spanish speaking countries or any country configured with DNI field. /^[0-9A-Za-z-.]{1,16}$/U    isCityName A valid city name. /^[^!;?=+@#\"°{}_$%]*$/u    isCoordinate A valid latitude-longitude coordinates, in 00000.0000 form. /^\\-?[0-9]{1,8}\\.[0-9]{1,8}$/s    isMessage A valid message. /[{}]/i    isPhoneNumber A valid phone number. /^[+0-9. ()\\/-]*$/    isPostCode A valid postal code. /^[a-zA-Z 0-9-]+$/    isStateIsoCode A valid state ISO code. /^[a-zA-Z0-9]{1,4}((-)[a-zA-Z0-9]{1,4})?$/    isZipCodeFormat A valid zipcode format. /^[NLCnlc 0-9-]+$/     Products    Format Description Expected format     isAbsoluteUrl A valid absolute URL. /^(https?:)?\\/\\/[$~:;#,%\u0026_=\\(\\)\\[\\]\\.\\? \\+\\-@\\/a-zA-Z0-9]+$/    isEan13 A valid barcode (EAN13). /^[0-9]{0,13}$/    isIsbn A valid barcode (ISBN). /^[0-9-]{0,32}$/    isLinkRewrite A valid friendly URL. /^[_a-zA-Z0-9\\-]+$/     A valid friendly URL (with PS_ALLOW_ACCENTED_CHARS_URL enabled). /^[_a-zA-Z0-9\\x{0600}-\\x{06FF}\\pL\\pS-]+$/u    isMpn A valid mpn (Manufacturer Part Number) 40 characters max. n/a   isNegativePrice A valid price value (including negative price) /^[-]?[0-9]{1,10}(\\.[0-9]{1,9})?$/    isPrice A valid price display method (either PS_TAX_EXC or PS_TAX_INC). 0|1    isProductVisibility A valid product visibility. /^both|catalog|search|none$/i    isUpc A valid barcode (UPC). /^[0-9]{0,12}$/     "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-guidelines/supported-branches/",
	"title": "Supported branches",
	"tags": [],
	"description": "",
	"content": "Supported branches Maintainers should only accept contributions for branches which are subject to new releases.\nOnce a minor \u0026ldquo;dot-zero\u0026rdquo; version has been released, no new patch releases will be made for previous versions. This means that only the latest minor version patch branch is supported – with the exception of rare cases, like a security bug being found just before or after a minor release is published.\nFor example, the 1.7.4.x branch is supported until version 1.7.5.0 is released. After that, the only supported version branch will be 1.7.5.x, and so on.\nIf you find a bug on an unsupported version, make sure that bug is still present in the latest version. If the bug is still present, please submit a Pull Request on develop.\nPull Requests for unsupported versions should not be accepted.\nWhen in doubt, use the develop branch. We will ask you to rebase on the correct branch if necessary. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/",
	"title": "Theme development reference",
	"tags": [],
	"description": "",
	"content": "Theme development reference  Theme Hooks   Javascript events   Migrating from PrestaShop 1.6   Overriding modules   Overriding selectors   RTL support   Smarty helper functions   Template inheritance   Templates   Theme translation   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/testing/ui-tests/",
	"title": "UI tests",
	"tags": [],
	"description": "",
	"content": "Introduction UI tests work by controlling a browser and using the web interface like a real user.\nWe use the following stack:\n Playwright as automation tool Mocha as test framework Chai as assertion library Faker as fake data generator  Running web acceptance tests Everything is explained in README in the tests/UI folder. You\u0026rsquo;ll need a working installation of PrestaShop in order to run the tests.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/file-structure/understanding-src-folder/",
	"title": "Understanding the &#34;src&#34; folder",
	"tags": [],
	"description": "",
	"content": "Understanding the \u0026ldquo;src\u0026rdquo; folder The main idea when doing the 1.7 release was to use Symfony as a replacement for our own PrestaShop framework.\nIn the /src folder you\u0026rsquo;ll find 3 main folders with different purposes:\n Core: contains business logic classes Adapter: business logic classes that still depend on legacy framework (for instance: Context, Dispatcher or constants); PrestaShopBundle: classes that acts as a glue between PrestaShop classes and Symfony  Core Core classes belong to the PrestaShop\\PrestaShop\\Core namespace.\nThis is the default destination for any new code, as long as it follows these rules:\n It MUST NOT depend on any legacy classes like Context, Dispatcher, etc. It MUST NOT depend on legacy constants. It MUST NOT depend on classes from PrestaShopBundle. It SHOULD follow SOLID principles, in particular the Dependency Inversion principle. It SHOULD NOT depend directly on the Symfony framework. It SHOULD NOT depend directly on Adapter classes (it SHOULD depend on interfaces instead). New interfaces MUST be added in Core, unless they depend on legacy code.  Adapter Adapter classes belong to the PrestaShop\\PrestaShop\\Adapter namespace.\nSince Core code cannot depend directly on legacy classes, classes in the Adapter namespace provide Core classes with \u0026ldquo;bridge\u0026rdquo; to legacy classes by following the Adapter pattern strategy. Through this pattern, Adapter classes wrap legacy code in a way that implements the interface required by Core.\nIn time, these interfaces will be reimplemented in \u0026ldquo;pure\u0026rdquo; Core code, rendering Adapters unnecessary.\nCode in this namespace should follow these rules:\n It MUST NOT depend on classes from PrestaShopBundle. It SHOULD implement a Core interface. It SHOULD only serve as a bridge to a legacy class. It SHOULD follow SOLID principles, in particular the Dependency Inversion principle. It SHOULD NOT be a simple copy/paste of legacy code in a different namespace.  You should create a new file here whenever you have a hard bound with legacy files, and you can\u0026rsquo;t refactor it easily. For instance, take a look at PhpParameters class in \u0026ldquo;Configuration\u0026rdquo;: this class doesn\u0026rsquo;t rely on Context or specific constants but on the configuration files of PrestaShop legacy framework. As these files are shared by both front and back, we couldn\u0026rsquo;t manage to refactor it and remove it now.\nPrestaShopBundle Bundle classes belong to the PrestaShopBundle namespace. This folder contains the code composing the application layer, meaning:\n Classes wrapping PrestaShop business logic into a Symfony application Classes relying heavily on Symfony such as Controllers, Twig templates, Form Types, etc.  Code in this namespace should follow these rules:\n It MUST NOT depend on any legacy classes like Context, Dispatcher, etc. It MUST NOT depend on legacy constants. It SHOULD only serve the purpose of the bundle as a mean to connect Symfony with the Core.  Here are some examples of subsystems belonging to PrestaShopBundle:\n Controllers: The HTTP layer Commands: Commands available using \u0026ldquo;bin/console\u0026rdquo; DataCollector: Specific collectors for the Symfony profiler (eg. hooks) Form: Symfony forms and extensions Resources: Contains services definition and Twig templates Security: Glue between Security Bundle and PrestaShop autorization/authentification Twig: Contains PrestaShop-specific Twig extensions  Dependency rules Here\u0026rsquo;s a recap for the dependency rules.\n   Subsystem Namespace Can use Core Can use Adapter Can use Legacy     Core PrestaShop\\PrestaShop\\Core Yes No 1 No   Adapter PrestaShop\\PrestaShop\\Adapter Yes Yes Yes   PrestaShopBundle PrestaShopBundle Yes Yes No   Legacy (None) Yes Yes Yes      Core classes SHOULD NOT depend directly on Adapter classes (it SHOULD depend on interfaces instead). \u0026#x21a9;\u0026#xfe0e;\n   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/how/writing-markdown/",
	"title": "Writing Markdown",
	"tags": [],
	"description": "",
	"content": "Writing Markdown This site was created using the wonderful Hugo static site generator, but the content itself is written using Markdown.\nDon\u0026rsquo;t worry, you don\u0026rsquo;t need to know anything about Hugo or the Go language to write documentation. The Markdown syntax is basically plain text with some simple added syntax for styling.\nIf you don\u0026rsquo;t know Markdown yet, have a look at this quick Markdown guide from GitHub.\nExtended features: Shortcodes Hugo uses special short codes for many things. Read about them here.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/cheat-sheet/",
	"title": "Cheat sheet",
	"tags": [],
	"description": "",
	"content": "Cheat sheet for Webservice All these options can be added to your queries as query parameters (either GET or POST depending on the method used in your request).\nGeneric Options    Key Value Description     output_format XML, JSON Change the output format   ps_method GET, POST, PUT, DELETE Override the HTTP method used for the request    Resource options    Key Value Result     language 3 Only display localized fields in one language    [3|5|...]  Display localized fields for specified list of languages    [2,5] Display localized fields for an interval of languages    List options    Key Value Description     display     display [field1,field2 …] Only display fields in brackets   display full Display all fields   filter     filter[field] [1|5]  OR operator: list of possible values   filter[field] [1,10] Interval operator: define interval of possible values   filter[field] [John] Literal value (not case sensitive)   filter[field] [Jo]% Begin operator: fields begins with the value (not case sensitive)   filter[field] %[hn] End operator: fields ends with the value (not case sensitive)   filter[field] %[oh]% Contains operator: fields contains the value (not case sensitive)   sort     sort [field1_ASC,field2_DESC,field3_ASC] The sort value is composed of a field name and the expected order separated by a _   limit     limit Number Limit the result to \u0026ldquo;Number\u0026rdquo;   limit Starting index, Number Limit the result to \u0026ldquo;Number\u0026rdquo; from the \u0026ldquo;Index\u0026rdquo;    Using the webservice in Multishop mode In order to use web services when the Multishop feature is enabled, you need to add the id_shop parameter. The shops resource allows you to access to the list of shops as well as their associated identifiers.\n   Key Value Description     id_shop Shop ID Define the shop to be used as a context for the web service.   id_group_shop Group Shop ID Define the group shop to be used as a context for the web service.    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-guidelines/project-modules/",
	"title": "Contribution guidelines for modules",
	"tags": [],
	"description": "",
	"content": "Contribution guidelines for modules This document describes general guidelines for contributing to PrestaShop modules hosted on GitHub.\nHow to contribute Contributors wishing to edit a module\u0026rsquo;s files should follow the following process:\n  Create your GitHub account, if you do not have one already.\n  Fork the project to your GitHub account.\n  Clone your fork to your local machine in the /modules directory of your PrestaShop installation.\n  Create a branch in your local clone of the module for your changes.\n  Change the files in your branch.\n Make sure to follow the coding standards. Do not update the module\u0026rsquo;s version number.    Push your changed branch to your fork in your GitHub account.\n  Create a pull request for your changes on the dev branch of the module\u0026rsquo;s project.\n Make sure to describe your change as best as you can: a good description can help a lot on making your contribution accepted. If you need help to make a pull request, read the GitHub help page about creating pull requests.    Wait for one of the module maintainers to either include your change in the codebase, or comment on possible improvements you should make to your code.\n  Requirements License Unless specified otherwise, PrestaShop modules are released under the Academic Free License 3.0. All contributions made to those modules are automatically licensed under the same terms.\nA license file must be stored inside the module (usually it\u0026rsquo;s a LICENSE.md file). Its content is the terms of the AFL-3.0 license.\nFile headers All files within a module must include the AFL license header, as provided in the coding standards chapter.\nThey can easily be applied by using the header-stamp binary from PrestaShop modules developer tools.\nContributors file A list of the project contributors must be stored inside the module. Usually it\u0026rsquo;s a file named CONTRIBUTORS.md. It must be up-to-date when a new version is released.\nAbout compatibility Semantic Versioning and BC breaks PrestaShop and its modules follows SemVer. This means that contributions should strive not to introduce breaking compatibility changes. Therefore, each Pull Request must not introduce such changes, unless aiming to release a new major version.\nIt is possible to introduce a change that is not backward compatible into the code for a minor or patch version, but it must be for a good reason.\nValid reasons include, but not only:\n fixing a security issue fixing a major issue that cannot be fixed in a backward compatible manner introducing a major new feature of high value  Compatibility with the Core The property ps_versions_compliancy allows modules to define a compatibility scope with PrestaShop Core. Submitted Pull Requests must comply with the full defined scope.\nFor example if the module compatibility scope includes PS 1.6 and PS 1.7, it is not possible to merge a Pull Request that can only be used with PS 1.7.\nIf the module uses an extended scope such as:\n$this-\u0026gt;ps_versions_compliancy = array( \u0026#39;min\u0026#39; =\u0026gt; \u0026#39;1.7.0.0\u0026#39;, \u0026#39;max\u0026#39; =\u0026gt; _PS_VERSION_, ); Because the max value will always use the latest PrestaShop version, it means the module must remain compatible with upcoming (not released) PrestaShop versions too.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/controller-routing/",
	"title": "Controller and Routing",
	"tags": [],
	"description": "",
	"content": "Controller and Routing Modern/Symfony Controllers Read the Symfony documentation on Controllers and Routing. Every migrated page needs one or more Controllers: if you consider that a legacy Controller needs to be split into multiple controllers (for example: different URLs), it\u0026rsquo;s the right time to do it.\nNew controllers should be placed in the src/PrestaShopBundle/Controller/Admin folder. Starting on 1.7.3, controllers are being progressively organized in sub-folders following the Back Office menu. For instance, if you are migrating a page located into \u0026ldquo;Advanced Parameters\u0026rdquo; section, put it into src/PrestaShop/Controller/Admin/Configure/AdvancedParameters. Same applies to Improve and Sell sections, and so on.\nThis is how it should look like in the end:\nController/ └── Admin ├── Configure │ ├── AdvancedParameters │ └── ShopParameters ├── Improve │ ├── Design │ ├── International │ ├── Modules │ ├── Payment │ └── Shipping └── Sell ├── Catalog ├── Customers ├── CustomerService ├── Orders └── Stats  As Controllers are not available for override and can be regarded as internal classes, we don\u0026rsquo;t consider moving a Controller in another namespace as a backward-compatibility break. Symfony Controllers should be thin by default and have only one responsibility: getting the HTTP Request from the client and returning an HTTP Response. This means that every business logic should be placed in dedicated classes outside the Controller:\n Form management Database access Validation etc\u0026hellip;  You can take a look at PerformanceController for an example of good implementation, and ProductController for something you should avoid at all costs.\nNever, ever call the legacy controller inside the new controller. It\u0026rsquo;s a no go, no matter the reason! Controllers are responsible for performing \u0026ldquo;Actions\u0026rdquo;. Actions are methods of Controllers which mapped to a route, and that return a Response.\nTry to avoid creating helper methods in your controller. If you find yourself needing them, it could be a symptom of your Controller becoming too complex. This can be solved by extracting code into external classes as needed. Regarding the rendering of a Response, there is some data specific to PrestaShop (in Back Office) that we must set for every action:\n   Attribute Type Description     layoutHeaderToolbarBtn [[\u0026lsquo;href\u0026rsquo;, \u0026lsquo;des\u0026rsquo;,\u0026lsquo;icon\u0026rsquo;], \u0026hellip;] Set buttons in toolbar on top of the page   layoutTitle string Main title of the page   requireAddonsSearch boolean If true, display addons recommendations button   requireBulkActions boolean If true, display bulk actions button   showContentHeader boolean If true, display the page header   enableSidebar boolean If true, display a sidebar   help_link string Set the url of \u0026ldquo;Help\u0026rdquo; button   requireFilterStatus boolean ??? (Specific to Modules page?)   level integer Level of authorization for actions (Specific to modules)    Controller Helpers Some helpers are specific to PrestaShop to help you manage the security and the dispatching of legacy hooks, all of them are directly available in Controllers that extends FrameworkBundleAdminController.\n isDemoModeEnabled(): some actions should not be allowed in Demonstration Mode getDemoErrorMessage(): returns a specific error message addFlash(type, msg): accepts \u0026ldquo;success|error\u0026rdquo; and a message that will be displayed after redirection of the page flashErrors([msgs]): if you need to \u0026ldquo;flash\u0026rdquo; a collection of errors dispatchHook(hookName, [params]): some legacy hooks need to be dispatched to preserve backward compatibility authorizationLevel(controllerName): check if you are allowed - as connected user - to do the related actions langToLocale($lang): get the locale from a PrestaShop lang trans(key, domain, [params]): translate a string redirectToDefaultPage(): redirect the user to the configurated default page presentGrid(GridInterface $grid): returns an instance of Grid view getCommandBus: returns the Command bus getQueryBus: returns the Query bus  Security In modern pages, the permissions system that checks if a user is allowed to do CRUD actions has been improved.\nPrestaShop allows merchants to choose which actions (like CREATE, READ, UPDATE, DELETE) can be done by each user profile on each resource (like \u0026ldquo;Product\u0026rdquo;, \u0026ldquo;User\u0026rdquo;). In PrestaShop Back Office, most of these resources are managed by only one Controller, so rights are handled on a page-per-page basis instead of by resource.\nSo if a logged user wants to manipulate a resource, he or she needs to have the correct rights on the appropriate controller. For instance, to be able to access the \u0026ldquo;Product Catalog\u0026rdquo; page the user need READ access, because showing the page requires \u0026ldquo;reading\u0026rdquo; the Product information. If the user wants to delete a product, (s)he needs DELETE rights.\nTo enforce this security policy, you have to set up the adequate checks for each one of the actions of your controller. Policies are declared as annotations on top of every controller Action method:\n\u0026lt;?php use PrestaShopBundle\\Security\\Annotation\\AdminSecurity; class SomeController extends FrameworkBundleAdminController { /** * @AdminSecurity( * \u0026#34;is_granted([\u0026#39;read\u0026#39;, \u0026#39;update\u0026#39;, \u0026#39;create\u0026#39;, \u0026#39;delete\u0026#39;], request.get(\u0026#39;_legacy_controller\u0026#39;))\u0026#34;, * message=\u0026#34;You do not have permission to update this.\u0026#34;, * redirectRoute=\u0026#34;some_route_name\u0026#34; * ) * */ public function fooAction(Request $request) { // action code  } } Access rules convention The following access rules must be enforced:\n indexAction requires READ permission and only this one createAction which allows to create an item, requires CREATE permission editAction which allows to update an item, requires UPDATE permission deleteAction which allows to delete an item, requires DELETE permission  Moreover, if one page allows to modify some prestashop settings, this action can be used by users who are granted either CREATE, UPDATE, DELETE permissions.\nHow does this work? The AdminSecurity annotation will check if the logged user is granted to access the Action (ie. to the URL). This annotation has 5 properties:\n  The first argument is an evaluated expression that must return a boolean. In this case, we\u0026rsquo;re checking if the user has all the rights on the current Controller.\nAs explained before, access rights (\u0026ldquo;roles\u0026rdquo;) in PrestaShop are managed by action (Create, Read, Update, Delete) and related controller. Since roles are currently managed by the legacy system using the legacy controller names, you need to provide the name of the legacy controller to the security system.\n  The _legacy_controller parameter is explained below in the “Routing in PrestaShop” section.   message - (optional) Contains the error message displayed to the user, if (s)he\u0026rsquo;s not allowed to perform the action.\n  redirectRoute - (optional) Route name the router will use to redirect the user if (s)he\u0026rsquo;s not allowed to perform the action.\n  domain - (optional) Describes the translation domain for the message.\n  url - (optional) Used to configure an URL for redirection instead of relying on the router.\n  This property is temporary and will be removed once the Dashboard has been migrated to Symfony.\nIf you use both url and redirectRoute at the same time, redirectRoute will win!  Demo Mode PrestaShop is provided with a Demo Mode that, when enabled, defines access application-wide rights that override whatever rights the current user may have. In other words, something that is disabled in Demo Mode will be disabled for all users, even if that user would normally have access to it.\nThe demo mode can be enabled by setting _PS_MODE_DEMO_ to true in config/defines.inc.php. When an action needs to be restricted in Demo Mode, you can use the DemoRestricted annotation:\n\u0026lt;?php use PrestaShopBundle\\Security\\Annotation\\DemoRestricted; /** * @DemoRestricted(\u0026#34;route_to_be_redirected\u0026#34;, * message=\u0026#34;You can\u0026#39;t do this when demo mode is enabled.\u0026#34;, * domain=\u0026#34;Admin.Global\u0026#34; * ) * */ public function fooAction(Request $request) { // do something here }  message and domain are both optional. What if I need to restrict a specific part of my Controller? Sometimes, it may be necessary to dynamically decide on restrictions (eg. depending on user input or an action performed). In addition, it may happen that a Controller action has to handle both the update and display of a resource. What if we want to allow the READ action but not the UPDATE?\nIn this case, you can use the Controllers helper functions we described above: isDemoModeEnabled() and authorizationLevel().\nRouting in PrestaShop In order to map an Action to an url, you need to register a route and define the appropriate _legacy_controller and _legacy_link parameter.\nRoutes are declared in src/PrestaShopBundle/Resources/config/admin folder, following the menu organization.\nThis is the current organization of routing, you must follow the same organization:\n. ├── admin │ ├── _common.yml │ ├── configure │ │ ├── advanced_parameters │ │ ├── _configure.yml │ │ └── shop_parameters │ ├── improve │ │ ├── design │ │ ├── _improve.yml │ │ ├── international │ │ ├── modules │ │ ├── payment │ │ └── shipping │ ├── _security.yml │ └── sell │ ├── catalog │ ├── orders │ ├── _sell.yml │ └── stocks.yml ├── admin.yml ├── api │ ├── attributes.yml │ ├── categories.yml │ ├── features.yml │ ├── i18n.yml │ ├── improve │ │ └── design │ ├── manufacturers.yml │ ├── stock_movements.yml │ ├── stocks.yml │ ├── suppliers.yml │ └── translations.yml └── api.yml Nothing special here except that you must declare a property called _legacy_controller containing the old name of the controller you are migrating, and specify the _legacy_link if you want to keep the link between legacy urls and new ones.\nThis property _legacy_controller is used to handle Security Restrictions. For example, let\u0026rsquo;s see what was done when migrating the \u0026ldquo;System Information\u0026rdquo; page inside the \u0026ldquo;Configure \u0026gt; Advanced Parameters\u0026rdquo; section:\nadmin_system_information:path:system_informationmethods:[GET]defaults:_controller:\u0026#39;PrestaShopBundle\\Controller\\Admin\\AdvancedParameters\\SystemInformationController::indexAction\u0026#39;_legacy_controller:AdminInformation_legacy_link:AdminInformation PrestaShop uses YAML files for service declaration and routing, please don\u0026rsquo;t use annotations for that! Link generation Manual generation (legacy) As Module, especially if using legacy controllers, don\u0026rsquo;t always have access to the symfony container or router the Link object offers some helpers to help generate urls related to Symfony controllers and routes.\nUsing router via Link::getUrlSmarty  \u0026lt;?php use Link; // Generate url with Symfony route $symfonyUrl = Link::getUrlSmarty(array(\u0026#39;entity\u0026#39; =\u0026gt; \u0026#39;sf\u0026#39;, \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_product_catalog\u0026#39;)); // Generate url with Symfony route and arguments $symfonyUrl = Link::getUrlSmarty(array( \u0026#39;entity\u0026#39; =\u0026gt; \u0026#39;sf\u0026#39;, \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_product_unit_action\u0026#39;, \u0026#39;sf-params\u0026#39; =\u0026gt; array( \u0026#39;action\u0026#39; =\u0026gt; \u0026#39;delete\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; 42, ) )); Using router via $link-\u0026gt;getAdminLink  \u0026lt;?php use Context; $link = Context::getContext()-\u0026gt;link; // Generate url with Symfony route (first argument is the legacy controller, even though it should be ignored) $symfonyUrl = $link-\u0026gt;getAdminLink(\u0026#39;AdminProducts\u0026#39;, true, array(\u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_product_catalog\u0026#39;)); // Generate url with Symfony route and arguments $symfonyUrl = $link-\u0026gt;getAdminLink(\u0026#39;AdminProducts\u0026#39;, true, array( \u0026#39;route\u0026#39; =\u0026gt; \u0026#39;admin_product_unit_action\u0026#39;, \u0026#39;action\u0026#39; =\u0026gt; \u0026#39;delete\u0026#39;, \u0026#39;id\u0026#39; =\u0026gt; 42, )); The Automatic _legacy_link (recommended)  When migrating a new page to Symfony, you must get rid of all the former link references to the legacy controller. In legacy pages, link are generally managed by the Link class, all these calls need to be replaced using the Router component.\nHowever although you can find all the references of a controller in the core code, you can\u0026rsquo;t know every references that could exist in modules or tabs (or you might simply miss some legacy calls). That\u0026rsquo;s where we got you covered (starting in PrestaShop 1.7.5) with _legacy_link, this parameter is associated to any migrated route and is formatted as such:\nRouting configuration route_name:path:some/urlmethods:[GET]defaults:_controller:\u0026#39;PrestaShopBundle\\Controller\\Path\\To\\ControllerClass::{actionName}Action\u0026#39;_legacy_controller:LegacyController_legacy_link:{LegacyController}:{actionName}# In some cases several controllers/actions are managed by the same migrated controller# You have the possibility to set an array as _legacy_link thus preventing you from defining alias routesother_route_name:path:some/other/urlmethods:[GET]defaults:_controller:\u0026#39;PrestaShopBundle\\Controller\\Path\\To\\Other\\ControllerClass::{actionName}Action\u0026#39;_legacy_controller:LegacyController_legacy_link:- {LegacyController}:{actionName}- {LegacyController}:{aliasActionName} The actionName part is optional for the index action (equivalent to list), therefore these three notations are equivalent:\nadmin_emails:path:/emailsmethods:[GET]defaults:_controller:\u0026#39;PrestaShopBundle:Admin\\Configure\\AdvancedParameters\\Email:index\u0026#39;_legacy_controller:AdminEmails_legacy_link:- AdminEmails- AdminEmails:index- AdminEmails:listAutomatic conversion Not every developer use the getAdminLink method the same way, therefore the _legacy_link is able to recognize different uses of this method, for example via an action parameter (e.g: ?controller=AdminEmails\u0026amp;action=export).\nBut sometimes urls simply insert the action name as a parameter (e.g: ?controller=AdminPaymentPreferences\u0026amp;update). As long as the actions have been migrated and correctly set up they will be successfully converted.\nGiven this configuration:\nadmin_payment_preferences:path:/preferencesmethods:[GET]defaults:_controller:PrestaShopBundle:Admin\\Improve\\Payment\\PaymentPreferences:index_legacy_controller:AdminPaymentPreferences_legacy_link:AdminPaymentPreferencesadmin_payment_preferences_process:path:/preferences/updatemethods:[POST]defaults:_controller:PrestaShopBundle:Admin\\Improve\\Payment\\PaymentPreferences:processForm_legacy_controller:AdminPaymentPreferences_legacy_link:AdminPaymentPreferences:update\u0026lt;?php $link = New Link(); //These calls will return /preferences  $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;); $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;, true, [\u0026#39;action\u0026#39; =\u0026gt; \u0026#39;list\u0026#39;]); $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;, true, [], [\u0026#39;action\u0026#39; =\u0026gt; \u0026#39;index\u0026#39;]); //These calls will return /preferences/update  $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;, true, [], [\u0026#39;action\u0026#39; =\u0026gt; \u0026#39;update\u0026#39;]); $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;, true, [], [\u0026#39;update\u0026#39; =\u0026gt; true]); =\u0026gt; $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;, true, [], [\u0026#39;update\u0026#39; =\u0026gt; \u0026#39;\u0026#39;]); =\u0026gt; //This call will return ?controller=AdminPaymentPreferences\u0026amp;action=export  //because the export action has not been migrated yet  $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;, true, [], [\u0026#39;action\u0026#39; =\u0026gt; \u0026#39;export\u0026#39;]); Automatic redirection Finally some urls might have been generated manually or hard coded. To avoid losing these legacy urls a Symfony listener checks each call to the back office and tries to match it to a migrated url if it is found then the response is automatically redirected to the new migrated url.\nadmin/index.php?controller=AdminPaymentPreferences =\u0026gt; Redirected to /admin/preferences admin/index.php?controller=AdminPaymentPreferences\u0026amp;action=update =\u0026gt; Redirected to /admin/preferences/update admin/index.php?controller=AdminPaymentPreferences\u0026amp;action=export =\u0026gt; No redirection, the legacy controller is called  Be careful, Link is sometimes misused\nSome examples have been found where urls are generated by a mix of getAdminLink and concatenating parameters:\n\u0026lt;?php $link = new Link(); $link-\u0026gt;getAdminLink(\u0026#39;AdminPaymentPreferences\u0026#39;) . \u0026#39;?action=update\u0026#39;; This won\u0026rsquo;t work because the parameters will be appended to the index url. You should be extra careful about these misused code and replace it according to the minimum PrestaShop version you are targeting:\n If the controller has already been migrated in your minimum supported version, use the Router service directly with the appropriate route name and parameters. If the controller hasn\u0026rsquo;t been migrated as of your minimum supported version:  For \u0026gt;= 1.7.5, use getAdminLink method with the parameters fully injected in the function. For \u0026lt; 1.7.5, consider creating your own Link class adapter to switch to the appropriate routing mode for each PrestaShop version (see example).     Remember that _legacy_link is only available since 1.7.5 version of PrestaShop, for older versions you need to update the Link class to manage routing conversion.\n\u0026lt;?php // classes/Link.php, in getAdminLink()  $routes = array( \u0026#39;AdminModulesSf\u0026#39; =\u0026gt; \u0026#39;admin_module_manage\u0026#39;, \u0026#39;AdminStockManagement\u0026#39; =\u0026gt; \u0026#39;admin_stock_overview\u0026#39;, //...  \u0026#39;LegacyController\u0026#39; =\u0026gt; \u0026#39;migrated_route\u0026#39;, ); This will only work for one route/one controller the association by action does not work before 1.7.5.\n Javascript generation In order to avoid hardcoded links in JavaScript, you can use the Router component\nYou can use it like this:\nimport Router from \u0026#39;@components/router\u0026#39;; this.router = new Router(); const route = this.router.generate(\u0026#39;my_route\u0026#39;, {parameters}); It however uses a computed file that you might need to recompute if you modified some route settings.\nYou can recompute it using this:\nphp bin/console fos:js-routing:dump --format=json And put it in admin-dev/themes/new-theme/js/fos_js_routes.json\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/hooks/",
	"title": "Hooks",
	"tags": [],
	"description": "",
	"content": "How to migrate hooks Hooks are the most important feature for the PrestaShop developers because they allow them to improve PrestaShop by adding code or content in multiple points of the application. For Symfony developers, you can see that as Events on steroids. To keep some degree of compatibility with 1.6 or 1.7 (pre-Symfony migration) modules, we need to ensure that hooks are still available, invoked and/or rendered at the right place.\nGetting the list of available Hooks in modern pages is really easy. Thanks to the hook profiler introduced in 1.7.3, the Symfony debug bar displays the list of available hooks (alongside some useful information) on a given page. Sadly, this is only available on Symfony pages, since the legacy system doesn\u0026rsquo;t have any way to get the list of hooks dispatched for a page.\nGetting the list of hooks on a legacy page Use this trick to find out which hooks are called on a legacy page.\nIn classes/Hook, find the exec() function and add the following code:\n\u0026lt;?php file_put_contents(\u0026#39;hooks.txt\u0026#39;, PHP_EOL. $hook_name, FILE_APPEND | LOCK_EX); After applying this change, access the url of the page you want to migrate. In admin-dev/hooks.txt, you\u0026rsquo;ll see the list of available hooks in the legacy page.\nNow, create a simple module that hooks on each one of these hooks and renders something visible that you can retrieve in the new page.\nNote that only hooks that are prefixed by \u0026ldquo;display\u0026rdquo; are rendered to a page. For the others ones in modern pages, you can register the hook, use the dump() function and then check if the dump() call has been registered by the profiler. This is an example with the Logs page (still in progress as of 12/12/2017):\n  Legacy page     Modern page   Dispatching hooks in a modern Controller You can dispatch a hook using the controller helper dispatchHook($name, array $parameters):\n\u0026lt;?php $this-\u0026gt;dispatchHook(\u0026#39;actionAdminPerformanceControllerPostProcessBefore\u0026#39;, array(\u0026#39;controller\u0026#39; =\u0026gt; $this)); Dispatching hooks using the Hook dispatcher If you need to dispatch a hook from a non-controller class, you\u0026rsquo;ll need to inject the HookDispatcher class.\nIf your class is defined as a Symfony service, the HookDispatcher is available as a service called prestashop.core.hook.dispatcher.\n\u0026lt;?php use PrestaShopBundle\\Service\\Hook\\HookEvent; use PrestaShop\\PrestaShop\\Core\\Hook\\HookDispatcher; $hookEvent = new HookEvent(); $this-\u0026gt;hookDispacher-\u0026gt;dispatchWithParameters($eventName, $parameters);  Under the hood, we use an instance of Symfony EventDispatcher. Dispatching/rendering hooks in Twig templates Some hooks are directly rendered in templates, because PrestaShop developers want to add/remove information from blocks. Of course you can do it using template override but you may lose compatibility if templates are updated in later versions of PrestaShop.\n{{ renderhook( \u0026#39;hookName\u0026#39;, { \u0026#39;param1\u0026#39;: \u0026#39;value1\u0026#39;, \u0026#39;param2\u0026#39;: \u0026#39;value2\u0026#39; } ) }}"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/mail-templates/add-layout-variables-from-module/",
	"title": "How to add layout variables from a module",
	"tags": [],
	"description": "",
	"content": "How to add layout variables from a module You can add your own layout variables which may be used in you custom template. To demonstrate this feature we assume you already have added you custom layout to a theme (see How to add a layout in a theme from a module). Here is an example of a layout using a customMessage variable.\nLayout {# modules/my_email_theme_module/mails/layout/customizable_modern_layout.html.twig #}{% extends \u0026#39;@MailThemes/modern/components/layout.html.twig\u0026#39; %}{% block content %}\u0026lt;table width=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34;\u0026gt; \u0026lt;font size=\u0026#34;2\u0026#34; face=\u0026#34;{{ languageDefaultFont }}Open-sans, sans-serif\u0026#34; color=\u0026#34;#555454\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;{{ \u0026#39;This is an example mail template from my module for modern theme\u0026#39;|trans({}, \u0026#39;EmailsBody\u0026#39;, locale)|raw }}\u0026lt;/span\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34;\u0026gt; \u0026lt;font size=\u0026#34;2\u0026#34; face=\u0026#34;{{ languageDefaultFont }}Open-sans, sans-serif\u0026#34; color=\u0026#34;#555454\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;subtitle\u0026#34;\u0026gt;{{ customMessage }}\u0026lt;/span\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;space_footer\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; {% endblock %}Using the hook Now you need to add your variables for this specific layout, in order to do so you will use the actionBuildMailLayoutVariables hook.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutVariablesBuilderInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutInterface; class my_email_theme_module { public function install() { return parent::install() // This class constant contains \u0026#39;actionBuildMailLayoutVariables\u0026#39;  \u0026amp;\u0026amp; $this-\u0026gt;registerHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK) ; } public function uninstall() { return parent::uninstall() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK) ; } public function enable() { return parent::enable() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK) ; } public function disable() { return parent::disable() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(LayoutVariablesBuilderInterface::BUILD_MAIL_LAYOUT_VARIABLES_HOOK) ; } /** * @param array $hookParams */ public function hookActionBuildMailLayoutVariables(array $hookParams) { if (!isset($hookParams[\u0026#39;mailLayout\u0026#39;])) { return; } /** @var LayoutInterface $mailLayout */ $mailLayout = $hookParams[\u0026#39;mailLayout\u0026#39;]; if ($mailLayout-\u0026gt;getModuleName() != $this-\u0026gt;name || $mailLayout-\u0026gt;getName() != \u0026#39;customizable_modern_layout\u0026#39;) { return; } $hookParams[\u0026#39;mailLayoutVariables\u0026#39;][\u0026#39;customMessage\u0026#39;] = \u0026#39;My custom message\u0026#39;; } } You can then go to the \u0026ldquo;Design \u0026gt; Email Theme\u0026rdquo; page and preview your layout you will see that your message has been inserted in your template.\n  Your customizable template   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/",
	"title": "How to improve the documentation",
	"tags": [],
	"description": "",
	"content": "Hot to improve the documentation Documentation is key to the success of any project, even more so for a community project.\nIn this section, you\u0026rsquo;ll learn why it\u0026rsquo;s important and how you can contribute to making PrestaShop documentation better.\n Why write documentation   How to contribute   Shortcodes   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/",
	"title": "How to migrate Back Office pages to Symfony",
	"tags": [],
	"description": "",
	"content": "How to migrate Back Office pages to Symfony Migrating a legacy page in PrestaShop requires working on three parts of the application: templates, forms and controllers which contain the business logic.\nStrategy / To-do List This is the list of items that usually need to be done in order to complete the migration of a legacy controller.\n Creations  Create PrestaShopBundle/Controller/\u0026lt;path\u0026gt;/\u0026lt;Your\u0026gt;Controller Create related actions (functions matched to URIs) Declare routing in PrestaShopBundle/Resources/config/routing/admin/routing_*.yml file Create Symfony form types for each form available in pages Create and configure Javascript (using Webpack/ES6) file Create every twig blocks in views/\u0026lt;path\u0026gt;/*.html.twig Implement Forms submission Implement Forms validation If required, implement (request) Parameters update Check Error Handling Checks permissions and demo mode constraints Re-introduce hooks (and document the missing one if you can\u0026rsquo;t for a good reason) Complete Link class to map PrestaShop menu to the new page Create the smoke/survival tests for the migrated page   Deletions  Remove the old controller in controllers/admin/Admin*.php Remove related old templates (in admin-dev/themes/default/template/controllers/*)    Contents of this guide  Migration project and strategy   Templating with Twig   Forms   Controller and Routing   Hooks   Grid / CRUD   Cleaning up   Testing   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/listing/",
	"title": "Listing pages",
	"tags": [],
	"description": "",
	"content": "Listing pages Your catalog is mostly 2 things: a list of products and a detailed product page.\nThis section covers the listing pages, which includes: category, search result, products per brand, best seller list, new product list and so on.\nIn order to reduce code duplication, the only necessary template is the file catalog/listing/product-list.tpl.\nExtending product-list template We already covered how PrestaShop chooses the right template to use so we know that the category template extends the product-list template.\nWe already covered how the template inheritance allows you to redefine only a small part of bigger template.\nSo basically you are all set to create a category template or a search result template that make much more than the product-list template!\nAJAX page update Your product list will change as the customer filters the result with faceted navigation or sorting options for instance.\nOne of the golden rule of PrestaShop 1.7 is: No presentation code duplication. Hence we didn\u0026rsquo;t want to return json data about the result and let javascript reconstitute the page.\nWe made the core generate the sub template part and return it to the client. In the end javascript is only used to the place the content of HTML placeholders.\nEach ajax call will regenerate the following templates:\n catalog/_partials/products-top.tpl catalog/_partials/products.tpl catalog/_partials/products-bottom.tpl  How to update the view PrestaShop will emit JavaScript events to let you know what to do something.\nExample:\nimport $ from \u0026#39;jquery\u0026#39;; import prestashop from \u0026#39;prestashop\u0026#39;; import \u0026#39;velocity-animate\u0026#39;; $(document).ready(() =\u0026gt; { prestashop.on(\u0026#39;updateProductList\u0026#39;, (data) =\u0026gt; { updateProductListDOM(data); }); }); function updateProductListDOM (data) { $(\u0026#39;#search_filters\u0026#39;).replaceWith(data.rendered_facets); $(\u0026#39;#js-active-search-filters\u0026#39;).replaceWith(data.rendered_active_filters); $(\u0026#39;#js-product-list-top\u0026#39;).replaceWith(data.rendered_products_top); $(\u0026#39;#js-product-list\u0026#39;).replaceWith(data.rendered_products); $(\u0026#39;#js-product-list-bottom\u0026#39;).replaceWith(data.rendered_products_bottom); } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/theme-organization/",
	"title": "Theme organization",
	"tags": [],
	"description": "",
	"content": "Theme organization Directory structure A PrestaShop theme is a set of files which you can edit in order to change the look of your online shop.\nHere are a few important tidbits:\n All themes have their files located in the /themes folder, at the root of PrestaShop\u0026rsquo;s folder. Each theme has its own sub-folder, in the main themes folder. Each theme is made of template files (.tpl), image files (.jpg, .png and such), one or more CSS files (.css), and usually JavaScript files (.js). Each theme has a preview.png image file in its folder, enabling the shop-owner to see what the theme looks like directly from the back office, and select the theme appropriately.  The best way to learn how to create a theme for PrestaShop 1.7 is to dive into the Classic Theme.\nHere is its organization, which is explained further below.\n. ├── CONTRIBUTING.md ├── README.md ├── _dev │ ├── css │ │ └── ... │ ├── js │ │ └── ... │ ├── package.json │ └── webpack.config.js ├── assets │ ├── css │ │ ├── ... │ ├── img │ │ └── ... │ └── js │ └── ... ├── composer.json ├── config │ └── theme.yml ├── modules │ └── ... ├── plugins │ └── ... ├── preview.png └── templates ├── _partials │ └── ... ├── catalog │ ├── _partials │ │ └── ... │ ├── listing │ │ └── ... │ └── ... ├── checkout │ ├── _partials │ │ └── ... │ └── ... ├── cms │ ├── _partials │ │ └── ... │ └── ... ├── contact.tpl ├── customer │ ├── _partials │ │ └── ... │ └── ... ├── errors │ ├── ... │ └── static │ └── ... ├── index.tpl ├── layouts │ ├── layout-both-columns.tpl │ ├── layout-content-only.tpl │ ├── layout-error.tpl │ ├── layout-full-width.tpl │ ├── layout-left-side-column.tpl │ └── layout-right-side-column.tpl ├── page.tpl └── wrapper.tpl The folders are used this way:\n /_dev/ Contains the raw development files for your SCSS, JavaScript and image assets.\nThey are to be compiled using Webpack, and turned into production assets. /assets/ Contains the production assets, compiled by Webpack from the _dev files. /config/ Contains configuration file. By default, it only has the theme.yml file. /modules/ Contains either theme-specific modules, or the theme\u0026rsquo;s version of native modules' template files.\nFor instance, the themes/classic/modules/ps_categorytree/views/templates/front/ps_categorytree.tpl file replaces the Category module\u0026rsquo;s own modules/ps_categorytree/views/templates/front/ps_categorytree.tpl /plugins/ Your custom smarty plugins /templates/ Contains the template files themselves (.tpl), mostly in contextual subfolders (catalog, checkout, cms, etc.).\nThe _partials folder contains \u0026ldquo;partial templates\u0026rdquo;, which means parts that can used by / included into several templates: header.tpl, breadcrumb.tpl, footer.tpl, etc.\nThis prevents redundant code blocks, and makes themes easier to maintain.  Required templates and libraries Required templates When you install/enable a theme, PrestaShop checks if the theme is valid: it looks for the theme.yml file (and checks its content), its declared compatibility, and the existence of some files.\nThere is a list of files that need to exists, even if they\u0026rsquo;re empty. Please see dedicated documentation to know what makes a theme valid.\nIt could be that you\u0026rsquo;ve built some sort of groundbreaking theme and it doesn\u0026rsquo;t exactly work like the Classic Theme does. For instance, if you don\u0026rsquo;t have a product page, then you don\u0026rsquo;t need the product.tpl file. In that case, you just have to create an empty product.tpl file. Be nice to the next developer and add a comment indicating where the code related to products can be found ;)\nRequired libraries jQuery v3.4 is loaded by the core (bundled in core.js) file.\nRead more about assets management.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/page-reference/",
	"title": "Page Reference",
	"tags": [],
	"description": "",
	"content": "Page Reference  Back Office Pages   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-guidelines/compatible-licenses/",
	"title": "Compatible licenses",
	"tags": [],
	"description": "",
	"content": "Compatible licenses The PrestaShop open source project is distributed under the OSL 3.0 license. All dependencies included and distributed with PrestaShop must be compatible with this license.\nSoftware dependencies Below is a list of the known compatible licenses that can accepted for software dependencies:\n AFL Apache BSD CC-O EPL EUPL ISC MIT Unlicense  Artwork Artwork (including but not limited to: icons, pictures and fonts) is usually distributed with specific licenses. Below is a list of known compatible licenses that can be accepted for artwork:\n Art Libre Artistic CC-0 CC-by CC-by-sa Unlicense  In general, public domain is not acceptable, as it doesn\u0026rsquo;t exist in all jurisdictions or countries.\nSpecial clauses Dependencies might also specify additional license clauses that would introduce a restriction of use. In such cases, legal compliance must be verified before that dependency can be included in the project.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/grid-crud-page/",
	"title": "Grid / CRUD",
	"tags": [],
	"description": "",
	"content": "How to migrate a Grid/CRUD page In PrestaShop\u0026rsquo;s Back Office, most of the pages are organized the same way.\nWe can already see 2 categories of pages that represent almost 90% of back office:\n Configuration pages: forms that alter the configuration; CRUD pages: pages with a filterable/searchable table of data and some options to access a form of creation/edition;  CRUD pages provide a lot of features.\nAccess to a lot of data, ordered by column: this data can be simple (text) or more complex (display a thumbnail). These columns are ordered and can be altered by developers: we can change position, add or remove columns for instance.\nAll tables are paginated and can be filtered by value for a specific column, for instance re-organize the value ordered by decreasing price.\nFurthermore, all tables can be filtered using criteria: every column is a criterion and may be used to build the data.\nFinally, all tables are provided with common actions: export, access to SQL manager, \u0026hellip; and common bulk actions.\nIn PrestaShop, all grids in modern CRUD pages are managed by the Grid component.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/mail-templates/apply-transformation-from-module/",
	"title": "How to apply a transformation from a module",
	"tags": [],
	"description": "",
	"content": "How to apply a transformation from a module The TransformationInterface is a powerful and handy way to modify your template\u0026rsquo;s design easily. Here are the interface details:\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\MailTemplate\\Transformation; interface TransformationInterface { /** * @param string $templateContent * @param array $templateVariables * * @return string */ public function apply($templateContent, array $templateVariables); /** * Returns the type of templates this transformation is associated with, * either html or txt, so that the renderer knows if it has to be applied * or not * * @return string */ public function getType(); /** * @param LanguageInterface $language * * @return $this */ public function setLanguage(LanguageInterface $language); } The apply method is the most important, it receives the rendered layout as a string, you can then perform replacement or even DOM manipulation as long as your return the whole template as a string (if you don\u0026rsquo;t want modify it simply return the string unchanged).\nThe getType method is used to filter transformations (a transformation is only appliable) to one type, as for the setLanguage method it will allow you to know the language used in this generation which is handy if you need to add localized texts or images.\nLayout For this example we will use the same layout we use in How to add layout variables from a module:\n{# modules/my_email_theme_module/mails/layout/customizable_modern_layout.html.twig #}{% extends \u0026#39;@MailThemes/modern/components/layout.html.twig\u0026#39; %}{% block content %}\u0026lt;table width=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34;\u0026gt; \u0026lt;font size=\u0026#34;2\u0026#34; face=\u0026#34;{{ languageDefaultFont }}Open-sans, sans-serif\u0026#34; color=\u0026#34;#555454\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;{{ \u0026#39;This is an example mail template from my module for modern theme\u0026#39;|trans({}, \u0026#39;EmailsBody\u0026#39;, locale)|raw }}\u0026lt;/span\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34;\u0026gt; \u0026lt;font size=\u0026#34;2\u0026#34; face=\u0026#34;{{ languageDefaultFont }}Open-sans, sans-serif\u0026#34; color=\u0026#34;#555454\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;subtitle\u0026#34;\u0026gt;{{ customMessage }}\u0026lt;/span\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td class=\u0026#34;space_footer\u0026#34;\u0026gt;\u0026amp;nbsp;\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; {% endblock %}Note the \u0026lt;span class=\u0026quot;subtitle\u0026quot;\u0026gt; that contains the custom message, we will use a CSS selector for our transformation.\nThe Transformation class In this example we are going to create a class implementing the TransformationInterface. Its purpose is to change the color of all the \u0026lt;span\u0026gt; tags with the subtitle class.\n\u0026lt;?php namespace PrestaShop\\Module\\MyEmailThemeModule\\MailTemplate\\Transformation; use PrestaShop\\PrestaShop\\Core\\Exception\\InvalidArgumentException; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\MailTemplateInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Transformation\\AbstractTransformation; use Symfony\\Component\\DomCrawler\\Crawler; use DOMElement; /** * Class CustomMessageColorTransformation adds the custom color to all spans * with class subtitle. */ class CustomMessageColorTransformation extends AbstractTransformation { /** @var string */ private $customColor; /** * @param string $customColor * @throws InvalidArgumentException */ public function __construct($customColor) { parent::__construct(MailTemplateInterface::HTML_TYPE); $this-\u0026gt;customColor = $customColor; } /** * @inheritDoc */ public function apply($templateContent, array $templateVariables) { $crawler = new Crawler($templateContent); $customSpans = $crawler-\u0026gt;filter(\u0026#39;span[class=\u0026#34;subtitle\u0026#34;]\u0026#39;); /** @var DOMElement $customSpan */ foreach ($customSpans as $customSpan) { $customSpan-\u0026gt;setAttribute(\u0026#39;style\u0026#39;, sprintf(\u0026#39;color: %s;\u0026#39;, $this-\u0026gt;customColor)); } return $crawler-\u0026gt;html(); } } Using the hook Now you need to add your transformation for this specific layout, in order to do so you will use the actionGetMailLayoutTransformations hook.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\MailTemplate\\MailTemplateInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\MailTemplateRendererInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutInterface; use PrestaShop\\PrestaShop\\Core\\MailTemplate\\Transformation\\TransformationCollectionInterface; use PrestaShop\\Module\\MyEmailThemeModule\\MailTemplate\\Transformation\\CustomMessageColorTransformation; class my_email_theme_module { public function install() { return parent::install() // This class constant contains \u0026#39;actionGetMailLayoutTransformations\u0026#39;  \u0026amp;\u0026amp; $this-\u0026gt;registerHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS) ; } public function uninstall() { return parent::uninstall() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS) ; } public function enable() { return parent::enable() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS) ; } public function disable() { return parent::disable() \u0026amp;\u0026amp; $this-\u0026gt;unregisterHook(MailTemplateRendererInterface::GET_MAIL_LAYOUT_TRANSFORMATIONS) ; } /** * @param array $hookParams */ public function hookActionGetMailLayoutTransformations(array $hookParams) { if (!isset($hookParams[\u0026#39;templateType\u0026#39;]) || MailTemplateInterface::HTML_TYPE !== $hookParams[\u0026#39;templateType\u0026#39;] || !isset($hookParams[\u0026#39;mailLayout\u0026#39;]) || !isset($hookParams[\u0026#39;layoutTransformations\u0026#39;])) { return; } /** @var LayoutInterface $mailLayout */ $mailLayout = $hookParams[\u0026#39;mailLayout\u0026#39;]; if ($mailLayout-\u0026gt;getModuleName() != $this-\u0026gt;name) { return; } /** @var TransformationCollectionInterface $transformations */ $transformations = $hookParams[\u0026#39;layoutTransformations\u0026#39;]; $transformations-\u0026gt;add(new CustomMessageColorTransformation(\u0026#39;#FF0000\u0026#39;)); } } You can then go to the \u0026ldquo;Design \u0026gt; Email Theme\u0026rdquo; page and preview your layout you will see that your message has now changed its color.\n  Your customizable template   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribute-by-testing-pull-requests/",
	"title": "How to test Pull Requests and branches",
	"tags": [],
	"description": "",
	"content": "How to test Pull Requests Tests determine the quality of a software. This process involves evaluating information that is related to a shop.\nTo make testing easier, we provide a Vagrant configuration designed for testing branches and pull requests.\nWhat is installed  Debian 10 Buster Git Apache 2.4 Multiple PHP versions (7.1, 7.2, 7.3, 7.4) MariaDB 10 NodeJS  Requires First of all you need two tools to run this project:\n Vagrant VirtualBox  If you\u0026rsquo;re using Windows, we recommend you to download Git bash and execute all commands under this shell.\nWhy Vagrant We use Vagrant because of its flexibility and portability. With it, you can control every aspect of the machine, and help us by having a similar environment to reproduce issues.\nGetting started The process is pretty simple.\nFirst, you must clone the repository https://github.com/PrestaShop/vagrant.\nSecond, execute the script run.sh (or run.bat if you\u0026rsquo;re under Windows) and follow instructions.\nMost of the time, there is a prompt asking for a network interface, remember it\u0026rsquo;s the communication between the virtual machine and the network card.\n  The first installation will take a while, because it needs to download the vagrant box, installs all needed packages and configures the system to make it compatible with PrestaShop.   Then, visit http://192.168.42.42/prestashop.\nphpMyAdmin is also available at http://192.168.42.42/phpmyadmin.\nEnvironments Available PHP versions  7.1 7.2 7.3 7.4  Be aware that some PrestaShop versions are not compatible with all the above environments. See System requirements to find out which version is compatible with which PHP version. PrestaShop  Username: demo@prestashop.com Password: prestashop_demo  MySQL phpMyAdmin is available at http://192.168.42.42/phpmyadmin.\n MySQL Host: 127.0.0.1 Database name: prestashop Username: prestashop Password: prestashop Port: 3306  SSH You can login into the virtual machine with vagrant ssh\nTroubleshooting If something went wrong during the installation, the error is displayed explaining which command is failing.\n  Invalid branch name:     Invalid PHP version:     "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/",
	"title": "PrestaShop components",
	"tags": [],
	"description": "",
	"content": "Components  Global JavaScript components   Smarty Extensions   The Console component   The Faceted Search component   The Form component   The Grid component   The Hook component   The Import component   The Mail Template component   The Position Updater component   TinyMCE   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": "Testing Creating tests is an important part of a module life. They allow us to spend less time on reviews, prevent redundant checks that could be missed by a human, and at the same time improve the overall quality of the code.\nIn PrestaShop, we plan to cover our modules features with a bundle of unit and functional tests. We let you chose what frameworks suits you the best, but we provide some tools that you can reuse on your projects.\n Basic checks   Advanced checks   Continuous Integration / Continuous Deployment   Testing Resources   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/theme-yml/",
	"title": "Theme.yml",
	"tags": [],
	"description": "",
	"content": "Theme.yml The theme\u0026rsquo;s theme.yml file defines all of the theme\u0026rsquo;s configuration and meta information, such as its version number, layouts, compatibility range, hook configuration, etc.\nTheme description The theme\u0026rsquo;s name MUST match its directory name. For instance, if the theme is named \u0026ldquo;My Awesome Theme\u0026rdquo; and its \u0026lsquo;name\u0026rsquo; value is set to \u0026ldquo;my-awesome-theme\u0026rdquo;, then the folder MUST be /my-awesome-theme .\nUsers will be able to choose the layout for each page from the theme\u0026rsquo;s settings page. Layouts are automatically parsed from the theme\u0026rsquo;s /templates/layouts folder, so this configuration key is optional, but it allows designers to provide some more user-friendly info than just a filename.\nname:mysupertheme# The name must match the directory namedisplay_name:My Super Themeversion:1.0.0theme_key:3c6e0b8a9c15224a8228b9a98ca1531d# Needed by PrestaShop Addonsauthor:name:\u0026#34;John Doe\u0026#34;email:\u0026#34;pub@prestashop.com\u0026#34;url:\u0026#34;https://www.prestashop.com\u0026#34;meta:compatibility:from:1.7.0.0to:~available_layouts:layout-full-width:name:Full width layoutdescription:Ideal for product pages to maximize picture sizelayout-left-side-column:name:One small left columndescription:Great for CMS pages to show advertisements on the sideGlobal settings Configuration You can have the theme change the configuration of PrestaShop when the theme is enabled.\nglobal_settings:configuration:PS_QUICK_VIEW:falseNEW_PRODUCTS_NBR:4PS_PNG_QUALITY:8Modules You can have the theme enable, disable or reset modules when the theme is enabled.\nglobal_settings:modules:to_enable:# All modules below are enabled when# the theme is enabled (and installed if needed).# They are disabled when the theme is disabled.- my-custom-module- yippeesliderto_disable:# All modules below are disabled when the theme is enabled.# They are re-enabled when the theme is disabled.- homeslider- blockwishlistto_reset:# All modules below are reset when the theme is enabled.- blockreassurance- blockwishlistYou can also have the theme create hooks and attach modules to custom and existing hooks when the theme is enabled.\nglobal_settings:hooks:custom_hooks:- name:displayFooterBeforetitle:displayFooterBeforedescription:Add a widget area above the footermodules_to_hook:displayHeaderTop:# displayHeaderTop will have exactly the following# modules hooked to it, in the specified order.# Each module in this list will be unhooked# from all other display hooks it is hooked to.- blocklanguages- blockcurrencies- blockuserinfodisplayHeaderMiddle:# displayHeaderMiddle will have whatever is currently hooked to it# kept hooked to it, and blocksearch will be appended# to the list (or moved to the end if already hooked there).- ~- blocksearchdisplayHeaderBottom:# displayHeaderBottom will have blocktopmenu and blockcart# prepended to it.- blocktopmenu- blockcart- ~displayFooter:- blocknewsletterdisplayLeftColumn:# blockcategories is hooked on all pages on displayLeftColumn- blockcategories# blocktags is hooked on displayLeftColumn on all pages# except \u0026#34;category\u0026#34; and \u0026#34;index\u0026#34;- blocktags:except_pages:- category- indexImage settings Enabling the theme will remove all the existing image types.\nTherefore, themes MUST declare their image types, and what they apply to.\nglobal_settings:image_types:cart_default:width:80height:80scope:[products]small_default:width:125height:125scope:[products, categories, manufacturers, suppliers]medium_default:width:300height:300scope:[products, categories, manufacturers, suppliers]large_default:width:500height:500scope:[products]home_default:width:250height:250scope:[products]category_default:width:960height:350scope:[categories]product_listing:width:220height:220scope:[products, categories, manufacturers, suppliers]large_banner:width:960height:400scope:[categories]Theme settings All the settings below can be changed through an interface in the theme\u0026rsquo;s back office interface, and only depend on the theme/shop combination.\nWhen the theme.yml file is parsed by PrestaShop, the \u0026lsquo;theme_settings\u0026rsquo; configuration key is copied to a file named settings_n.yml, where \u0026lsquo;n\u0026rsquo; is the id of the shop where the theme is installed (settings_123456.yml, for instance).\nWhen the configuration is changed through the back office interface, only the settings_n.yml file is updated - the theme.yml file remains unchanged.\nglobal_settings:theme_settings:default_layout:layout-full-widthlayouts:# Specific layout for some pagesidentity:layout-left-side-columnorder-confirmation:layout-left-side-columnDependencies When making a theme you may want to add features with custom modules. It\u0026rsquo;s important that these modules are installed with your theme. These modules should be declared as dependencies so you\u0026rsquo;re sure prestashop will export them when creating your theme zipball.\nSo far themes only have modules dependencies.\ndependencies:modules:- xx_customslider- xx_customproductpage"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/",
	"title": "Internationalization",
	"tags": [],
	"description": "",
	"content": "Internationalization PrestaShop has been designed to be adaptable to any country, region, language or culture. In this section you\u0026rsquo;ll learn more about how to work with PrestaShop\u0026rsquo;s internationalization features.\nIn this section  Translation   Activate a language in PrestaShop   Right-To-Left languages   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/clean-up/",
	"title": "Cleaning up",
	"tags": [],
	"description": "",
	"content": "Cleaning up Once everything is migrated, refactored, extracted to specific classes and working like a charm, it\u0026rsquo;s time to remove the old, migrated parts:\n Delete the old controller. Delete the old templates (delete the admin-dev/themes/default/template/controller/{name} folder. Delete the related \u0026ldquo;legacy tests\u0026rdquo;.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/core-updates/",
	"title": "Core changes",
	"tags": [],
	"description": "",
	"content": "Core changes In this section you can find important changes in the core that may impact your modules.\n Backward compatibility with PrestaShop 1.6   Changes in PrestaShop 1.7.5   Changes in PrestaShop 1.7.6   Changes in PrestaShop 1.7.7   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/domain/",
	"title": "Domain-driven architecture",
	"tags": [],
	"description": "",
	"content": "Domain-driven architecture PrestaShop\u0026rsquo;s architecture is progressively evolving into a new generation, inspired by Eric Evans\u0026rsquo;s Domain-driven design (or DDD).\nThis new design aims to make the architecture easier to understand, maintain and extend, and is driven by the following basic principles:\n Objects and their interactions should be designed in a way that closely represents business concepts and interactions, instead of technical abstractions. Optimize for consistency rather than reusability.  One of the main features at the heart of this design is Command-Query Responsibility Segregation, or CQRS.\nRead more  CQRS - Commands and Queries   Data Transfer Objects   Value Objects   Domain exceptions   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/employee-name-with-avatar/",
	"title": "EmployeeNameWithAvatarColumn reference",
	"tags": [],
	"description": "",
	"content": "EmployeeNameWithAvatarColumn Type  This is a special type that allows you to add a column with the employee name and its avatar to your Grid. You can see how it looks by default:\n  Employee name with avatar column   Available options    Properties Type Expected value     field string required Employee\u0026rsquo;s name field.    field type: string required\nThe employee\u0026rsquo;s name field.\nExample usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Employee\\EmployeeNameWithAvatarColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $employeeColumn = new EmployeeNameWithAvatarColumn(\u0026#39;employee\u0026#39;); $employeeColumn-\u0026gt;setName(\u0026#39;Employee\u0026#39;); $employeeColumn-\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;employee\u0026#39;, ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($employeeColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/contribution-process/",
	"title": "How contributions are handled",
	"tags": [],
	"description": "",
	"content": "What happens after you submit an issue or Pull Request The PrestaShop project receives a great number of new issues and Pull Requests every week. Each new submission goes through a process where PrestaShop maintainers analyze, qualify and prioritize them.\n How issues are sorted   How Pull Requests are processed   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/global-components/",
	"title": "Global JavaScript components",
	"tags": [],
	"description": "",
	"content": "Global JavaScript components? It\u0026rsquo;s a new system available since the 1.7.8 version mainly created for module developers, which allow you to use components we already use in the core without importing it. Here is the ADR where we decided what we should do to avoid this problem.\nYou are now able to use components we expose to the window.prestashop.component object without importing anything.\nThis object contains two attributes:\n component which contain some components you can instantiate; instance which contains every instances of initiated components.  It allows module developers to avoid importing path such as ../../../../admin-dev/themes/new-module/js/components/translatable-field because it was making hard to add a CI in order to build the module.\n## How to use?\nThere is an event sent after the execution of initPrestashopComponents which you can stick on: PSComponentsInitiated.\nIf you have the events package, you\u0026rsquo;ll be able to catch the event like this:\nEventEmitter.on(\u0026#39;PSComponentsInitiated\u0026#39;, () =\u0026gt; { [...] }) You are able to use a custom component following this example:\n$(document).ready(function() { window.prestashop.component.initComponents([ \u0026#39;TranslatableField\u0026#39;, \u0026#39;TinyMCEEditor\u0026#39;, \u0026#39;TranslatableInput\u0026#39;, ]); }); You are also able to initiate it manually:\nEventEmitter.on(\u0026#39;PSComponentsInitiated\u0026#39;, () =\u0026gt; { window.prestashop.component.TranslatableField = MyCustomTranslatableField; if (window.prestashop.component.instance.translatableField) { window.prestashop.component.instance.translatableField = new window.prestashop.component.TranslatableField(); } }); or even import your own components that you want to make usable globally:\nEventEmitter.on(\u0026#39;PSComponentsInitiated\u0026#39;, () =\u0026gt; { window.prestashop.component.MyCustomComponent = MyCustomComponent; window.prestashop.component.instance.myCustomComponent = new window.prestashop.component.MyCustomComponent(); }); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/compile-assets/",
	"title": "How to compile assets",
	"tags": [],
	"description": "",
	"content": "How to compile assets Some components in PrestaShop, like Javascript or SCSS files, need to be compiled to be usable.\nRequirements We use Webpack to compile assets. You only need NodeJS from 8.x to 12.x (get it here), NPM will take care of it all.\nAssets that need to be compiled  Back Office  Default theme  SASS files\nLocated in admin-dev/themes/default/sass   New theme  SCSS files\nLocated in admin-dev/themes/new-theme/scss JS files\nLocated in admin-dev/themes/new-theme/js     Front Office  Core assets  JS files\nLocated in themes/_core/js   Classic theme  SCSS files\nLocated in themes/classic/_dev/css JS files\nLocated in themes/classic/_dev/js      Compiling assets  Switch to the root of the subproject    Subproject Path     Default theme cd admin-dev/themes/default/   New theme cd admin-dev/themes/new-theme/   FO Core cd themes/   Classic theme cd themes/classic/_dev/       Run npm install (first time only)\nnpm install   Run webpack\nnpm run build   Build all assets at once  You can rebuild all the assets at once by executing this command from the project root:\n./tools/assets/build.sh # or alternatively, since 1.7.8: make assets Watching for changes You can also make webpack listen for changes and compile only what\u0026rsquo;s needed as you work on your files:\nnpm run watch  Rebuild your changes before committing.\nThe \u0026ldquo;watch\u0026rdquo; build will optimize your assets for development. Please remember to rebuild for production when you are done using npm run build.\n Troubleshooting If npm install fails with error: Failed at the ... postinstall script.:\nYou may be using an old version or one we don\u0026rsquo;t support yet. Currently on 1.7.8, every folders containing a package.json is compatible with node 12. How we manage to work with this, as well as working on previous PrestaShop version, is that we use a tool to easily swap between node version.\nThere are a lot of tools able to do this. At PrestaShop, we mainly use the \u0026lsquo;n\u0026rsquo; package or nvm. This is pretty easy to use, when you are working on a directory which need an older or newer node version, use one of these tools to switch and then npm install \u0026amp;\u0026amp; npm run build.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/mail/",
	"title": "How to send e-mails",
	"tags": [],
	"description": "",
	"content": "How to send e-mails Using the Mail::send() method The Mail core class extends ObjectModel This example is assuming you are using in a controller named mycontroller of a module named mymodule \u0026lt;?php class mymodulemycontrollerModuleFrontController extends ModuleFrontController { public function initContent() { parent::initContent(); Mail::Send( (int)(Configuration::get(\u0026#39;PS_LANG_DEFAULT\u0026#39;)), // defaut language id  \u0026#39;contact\u0026#39;, // email template file to be use  \u0026#39; Module Installation\u0026#39;, // email subject  array( \u0026#39;{email}\u0026#39; =\u0026gt; Configuration::get(\u0026#39;PS_SHOP_EMAIL\u0026#39;), // sender email address  \u0026#39;{message}\u0026#39; =\u0026gt; \u0026#39;Hello world\u0026#39; // email content  ), Configuration::get(\u0026#39;PS_SHOP_EMAIL\u0026#39;), // receiver email address  NULL, //receiver name  NULL, //from email address  NULL //from name  ); } }  Prestashop will use the Shop Configuration to decide if use smtp connection or php mail function so check it out on backoffice or in app/config/parameter.php Add custom template Mail::send has some parameters. You can specify your emails templates path of your module in parameter templatePath.\nIn your module you must create the subfolder mails and then a sub folder with languages. Example: modules\\yourmodulename\\mails\\en for english.\nIn this folder you do create 2 files: one with extension .html and one with extension .txt.\nThe name of the template files is in second parameter. In the under example the template name is contact. So you do create 2 files in mails subfolders of your module: modules\\yourmodulename\\mails\\en\\contact.html and modules\\yourmodulename\\mails\\en\\contact.txt.\nAfter installation, the templates email files are moved under the active folder theme: theme\\classic\\modules\\yourmodulename\\mails\\en\\.....\n\u0026lt;?php class mymodulemycontrollerModuleFrontController extends ModuleFrontController { public function initContent() { parent::initContent(); Mail::Send( (int)(Configuration::get(\u0026#39;PS_LANG_DEFAULT\u0026#39;)), // defaut language id  \u0026#39;contact\u0026#39;, // email template file to be use  \u0026#39; Module Installation\u0026#39;, // email subject  array( \u0026#39;{email}\u0026#39; =\u0026gt; Configuration::get(\u0026#39;PS_SHOP_EMAIL\u0026#39;), // sender email address  \u0026#39;{message}\u0026#39; =\u0026gt; \u0026#39;Hello world\u0026#39; // email content  ), Configuration::get(\u0026#39;PS_SHOP_EMAIL\u0026#39;), // receiver email address  NULL, //receiver name  NULL, //from email address  NULL, //from name  NULL, //file attachment  NULL, //mode smtp  \u0026#39;/modules/yourmodulename/mails\u0026#39; //custom template path  ); } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sell/",
	"title": "Selling your modules on the Addons Marketplace",
	"tags": [],
	"description": "",
	"content": "Selling your modules on the Addons Marketplace Have you already developed modules or themes for your customers? Are you looking for a new revenue stream? You can sell your modules on the Addons Marketplace.\nLearn all about it in the Addons site: How to sell on the PrestaShop Addons.\nContributor modules need to pass a technical validation before being sold on the Marketplace.\n Technical tools   Technical validation - Key steps   Validation checklist   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/columns-reference/severity-level/",
	"title": "SeverityLevelColumn reference",
	"tags": [],
	"description": "",
	"content": "SeverityLevelColumn Type  Use this column to display severity level in your Grid.\nAvailable options    Properties Type Expected value     field string required Record field name which is used as severity level.   with_message bool default: false Whether to show severity level message in addition with numeric severity level value.    Example usage \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\Status\\SeverityLevelColumn; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; $severityColumn = new SeverityLevelColumn(\u0026#39;severity\u0026#39;); $severityColumn-\u0026gt;setName(\u0026#39;Severity (1-4)\u0026#39;); $severityColumn-\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;severity\u0026#39;, \u0026#39;with_message\u0026#39; =\u0026gt; true, // enable severity messages ]); $columns = new ColumnCollection(); $columns-\u0026gt;add($severityColumn); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/migration-guide/testing/",
	"title": "Testing",
	"tags": [],
	"description": "",
	"content": "Testing You are encouraged to add both unit and functional tests for every new class you have created.\nYou must add a smoke test (also called \u0026ldquo;survival\u0026rdquo;) for every new page you migrate.\nSmoke testing A smoke test is a really simple and basic test that ensure the page will load with the right HTTP code. This won\u0026rsquo;t ensure the page will works as expected but if the test fails, this ensure the page is not functional.\nTo add a new test, you need to add a new entry in the Data Provider of SurvivalTest class:\n\u0026lt;?php namespace LegacyTests\\Integration\\PrestaShopBundle\\Controller\\Admin; // ... /** * @group demo * * To execute these tests: use \u0026#34;./vendor/bin/phpunit -c tests-legacy/phpunit-admin.xml --filter=SurvivalTest\u0026#34; command. */ class SurvivalTest extends WebTestCase { // [...]  public function getDataProvider() { return [ \u0026#39;symfony_route_of_page\u0026#39; =\u0026gt; [\u0026#39;Page title\u0026#39;, \u0026#39;symfony_route_of_page\u0026#39;], // ...  ]; } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/uikit/",
	"title": "The UIKit",
	"tags": [],
	"description": "",
	"content": "What\u0026rsquo;s the PrestaShop UIKit? The UIKit is a project extending Bootstrap 4 in order to provide some components with PrestaShop\u0026rsquo;s colors. You can see every components on this page.\nHow do we use the UIKit? We use it by adding it into our npm dependency, and then you\u0026rsquo;ve multiple possibilities to use it.\n You can import dist files, it means that you won\u0026rsquo;t be able to use our variables outside of the UIKit.  @import \u0026#34;~prestakit/dist/css/bootstrap-prestashop-ui-kit\u0026#34;;  You are able to import source files, it means that you\u0026rsquo;ll need to rebuild the UIKit inside your own styling architecture, but you\u0026rsquo;ll be able to use every variables inside it.  @import \u0026#34;~prestakit/scss/application\u0026#34;; Custom components Some components are not provided from Bootstrap, they have been done for our own use, here is a list of them:\n ps-number-input custom-file-input growl (using jquery growl) ps-tags spinner ps-switch switch-input md-checkbox toast  Where is the UIKit used? It\u0026rsquo;s mainly used on migrated pages, legacy pages rely on Bootstrap 3 for the moment and are not using UIKit at all. UIKit can also be used inside modules, even if they are on legacy pages, by overriding styles inside their particular markup.\nHow to contribute? You can contribute to UIKit on its own repository but keep in mind that your changes won\u0026rsquo;t be effective until we provide a new release on npm and your changes won\u0026rsquo;t be effective on the PrestaShop project until we update the dependency inside the new-theme directory.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/sample-modules/",
	"title": "Sample modules",
	"tags": [],
	"description": "",
	"content": "Sample modules  Grid and identifiable object form hooks usage example   Order view page new hooks demo tutorial   Extending Symfony form with upload image field   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/",
	"title": "1.7",
	"tags": [],
	"description": "",
	"content": "PrestaShop 1.7  Basics   Core Development Reference   Testing   PrestaShop modules   Themes   The PrestaShop Webservice API   Contribute   Scale   The PrestaShop Project   Frequently Asked Questions   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/activate-a-language-in-prestashop/",
	"title": "Activate a language in PrestaShop",
	"tags": [],
	"description": "",
	"content": "Activate a language in PrestaShop Most languages are available in Crowdin for translation, but not all are available in PrestaShop (International \u0026gt; Translations \u0026gt; Add a language). Indeed, because of a low completion level on Crowdin, we do not send the translations to PrestaShop. However, it can be smart to add a language if its translators are very active and want to see the results of their Crowdin translations quickly in their own shop. If the language is not available in Crowdin, you have to contact Louise Bonnard on Crowdin for opening a project in the concerned language. For that, it needs to be added as a new supported language in PrestaShop, and it takes two steps:\n Update required JSON configuration files in the PrestaShop project Trigger the update of API in charge of the languages downloadable packets (i18n.prestashop.com)  Update required JSON configuration files in the PrestaShop project In PrestaShop, two JSON control the processing of languages:\n app/Resources/all_languages.json app/Resources/legacy-to-standard-locales.json  The first one is used for listing languages supported by PrestaShop in back office. The second one is used for migrating locales from old versions to 1.7.\nHow to update app/Resources/all_languages.json? In this file, you need to add a new item in the JSON.\nThe key is the ISO Code, based on the ISO-639-1 standard (see an unofficial list here). The item is filled with key/values relative to the localization :\n name : Name iso_code : ISO code (2 characters) date_format_lite : Date format (only date) date_format_full : Date format (with hours \u0026amp; minutes) is_rtl : Right to Left Language language_code : Language code locale : ISO code (5 characters) : two-letter language code (ISO 639-1) and the two-letter country code (ISO 3166-1 alpha-2)  This is a sample :\n\u0026#34;da\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Dansk (Danish)\u0026#34;, \u0026#34;iso_code\u0026#34;: \u0026#34;da\u0026#34;, \u0026#34;date_format_lite\u0026#34;: \u0026#34;Y-m-d\u0026#34;, \u0026#34;date_format_full\u0026#34;: \u0026#34;Y-m-d H:i:s\u0026#34;, \u0026#34;is_rtl\u0026#34;: \u0026#34;0\u0026#34;, \u0026#34;language_code\u0026#34;: \u0026#34;da-dk\u0026#34;, \u0026#34;locale\u0026#34;: \u0026#34;da-DK\u0026#34; }, How to update app/Resources/legacy-to-standard-locales.json? In this file, you need to add a key/value.\nThe key is the ISO code, based on the ISO-639-1 standard (see an unofficial list here). The value is the locale.\nThis is a sample :\n\u0026#34;da\u0026#34;: \u0026#34;da-DK\u0026#34;, How to trigger the content update on PrestaShop Languages Localisation Packages i18n.prestashop.com ? Finally, we need to update i18n.prestashop.com. Why? Because this domain stores the translations files that are used on the International \u0026gt; Translations page of the back office, when adding or updating languages.\nThis web service update is controlled by the PrestaShop/TranslationFiles repository. The list of available languages is controlled by the file available_languages.json of the current version.\nYou must submit a PR in which you add a key/value:\n The key is the locale of the language The value is the name of the language which be displayed in the back office.  This is a sample :\n\u0026#34;da-DK\u0026#34;: \u0026#34;Danish (Denmark)\u0026#34;, After the PR was merged, a nightly cron will fetch translations from Crowdin, update the repository with new updates, and deploy translations to i18n.prestashop.com.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/admin-controllers/tabs/",
	"title": "Adding module links in the back-office side menu",
	"tags": [],
	"description": "",
	"content": "Adding module links in the back-office side menu  On the PrestaShop back office, the links on the side menu are linked to AdminControllers and ModuleAdminController classes. The first ones come from the PrestaShop Core, but the second ones are defined by the modules. If you want to add a link to your ModuleAdminControllers in the back office sidebar, this guide is for you.\nTabs registration In order to register new links, open your main module class.\nWe will now use a property called $tabs, storing an array of link details. Each of them contains a class (= link) to add in the side menu.\nHow to define a tab in the menu Depending on the options you provide, your links won’t be displayed the same way:\n class_name: Mandatory, this is the file called when the merchant will click on your link. This is the class name without the Controller part. name: Optional, this is the name displayed in the menu. If not provided, the class name is shown instead. parent_class_name: Optional if you want to display it in a subcategory. Go farther in this document to see available values. icon: Optional, will display an icon when the menu is reduced. visible: Optional, is of boolean type to determine whether you want to display the tab or not.  How to add names and their translations to a tab By default, your tab will be displayed in the menu with its class name. If you want to use something more explicit, you can set the name property.\nOption 1: Use the same name for all languages If you want to add the same name to all available and active languages available on the shop, just set the ‘name’ key with a single string:\n\u0026lt;?php public $tabs = array( array( \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Merchant Expertise\u0026#39;, // One name for all langs  \u0026#39;class_name\u0026#39; =\u0026gt; \u0026#39;AdminGamification\u0026#39;, \u0026#39;visible\u0026#39; =\u0026gt; true, \u0026#39;parent_class_name\u0026#39; =\u0026gt; \u0026#39;ShopParameters\u0026#39;, )); Option 2: Use a different name for each language You can also add your translations per locale (ex.: fr-FR) or per language (ex.: fr), both are valid.\nIf a language is installed on the shop but is not found in your translated names, it will be automatically associated to the first value of the array.\nHence, we advise you to define the English value first.\n\u0026lt;?php public $tabs = array( array( \u0026#39;name\u0026#39; =\u0026gt; array( \u0026#39;en\u0026#39; =\u0026gt; \u0026#39;Merchant Expertise\u0026#39;, // Default value should be first  \u0026#39;fr\u0026#39; =\u0026gt; \u0026#39;Expertise PrestaShop\u0026#39;, ... ), \u0026#39;class_name\u0026#39; =\u0026gt; \u0026#39;AdminGamification\u0026#39;, \u0026#39;parent_class_name\u0026#39; =\u0026gt; \u0026#39;ShopParameters\u0026#39;, )); Which parent to choose? Here is the default structure of the side-menu from PrestaShop at the moment this page is written. You can choose an element from this list to use as a parent.\n AdminDashboard SELL  AdminParentOrders  AdminOrders AdminInvoices AdminSlip AdminDeliverySlip AdminCarts   AdminCatalog  AdminProducts  AdminCategories AdminTracking AdminParentAttributesGroups AdminParentManufacturers AdminAttachments AdminParentCartRules     AdminParentCustomer  AdminCustomers AdminAddresses AdminOutstanding   AdminParentCustomerThreads  AdminCustomerThreads AdminOrderMessage AdminReturn   AdminStats AdminStock  AdminWarehouses AdminParentStockManagement AdminSupplyOrders AdminStockConfiguration     IMPROVE  AdminParentModulesSf  AdminModulesSf AdminModules AdminAddonsCatalog   AdminParentThemes  AdminThemes AdminThemesCatalog AdminCmsContent AdminModulesPositions AdminImages   AdminParentShipping  AdminCarriers AdminShipping   AdminParentPayment  AdminPayment AdminPaymentPreferences   AdminInternational  AdminParentLocalization AdminParentCountries AdminParentTaxes AdminTranslations     CONFIGURE  ShopParameters  AdminParentPreferences AdminParentOrderPreferences AdminPPreferences AdminParentCustomerPreferences AdminParentStores AdminParentMeta AdminParentSearchConf   AdminAdvancedParameters  AdminInformation AdminPerformance AdminAdminPreferences AdminEmails AdminImport AdminParentEmployees AdminParentRequestSql AdminLogs AdminWebservice AdminShopGroup AdminShopUrl     DEFAULT  How to check the tabs registration Once you\u0026rsquo;re done, just install (or reset) your module.\nThe $tabs property will be read from PrestaShop and the tabs will be automatically displayed on the side menu. They will stay as long as your module is installed.\nTab permissions, accesses and roles When you create a new Tab it automatically creates the appropriate roles in Tab::initAccess based on the class_name. For example using AdminLinkWidget as the class name will create the following roles:\n ROLE_MOD_TAB_ADMINLINKWIDGET_CREATE ROLE_MOD_TAB_ADMINLINKWIDGET_DELETE ROLE_MOD_TAB_ADMINLINKWIDGET_READ ROLE_MOD_TAB_ADMINLINKWIDGET_UPDATE  These roles will allow you to manage detailed permission in your controllers, you can read this documentation if you need more details about Controller Security. They are automatically added to the SUPER_ADMIN group, and the group of the Employee installing the module, but you can then edit privileges for other Employee groups.\nHidden Tabs\nTabs are usually visible and accessible in the menu, but there are also invisible tabs, they are only created for permissions to manage Security. All the controllers present in controllers/admin in your module are automatically added as hidden Tabs (if no visible Tab exists).\n Automatic hiding of disabled modules  When you disable a module, all its related Tabs will be automatically hidden from the Back Office menu.\nTabs are kept in database with their enabled field is set to false. Once the module is enabled again all its Tabs are automatically enabled as well.\nModern Controllers Manual tab insertion  If you created a modern controller using Symfony controllers and routing you can\u0026rsquo;t create a Tab as is because the system is based on legacy controllers identified through their class names. But you can still trick it using the _legacy_link property in the routing (more details about this feature in the Controller and Routing page).\nLet\u0026rsquo;s assume you already defined your Symfony route:\n# modules/your-module/config/routes.ymlyour_route_name:path:your-module/demomethods:[GET]defaults:_controller:\u0026#39;MyModule\\Controller\\DemoController::demoAction\u0026#39;What you need to do then is add the _legacy_controller and _legacy_link parameters:\n# modules/your-module/config/routes.ymlyour_route_name:path:your-module/demomethods:[GET]defaults:_controller:\u0026#39;MyModule\\Controller\\DemoController::demoAction\u0026#39;_legacy_controller:\u0026#39;MyModuleDemoController\u0026#39;_legacy_link:\u0026#39;MyModuleDemoController\u0026#39;So now any call in the menu system to Link::getAdminLink('MyModuleDemoController')' will return your controller url your-module/demo But since the MyModuleDemoController class actually doesn\u0026rsquo;t exist, the automatic tab registration based on the $tabs property won\u0026rsquo;t work. So you need to insert your tab manually during your module installation:\n\u0026lt;?php use Language; class example_module_mailtheme extends Module { public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;installTab() ; } public function uninstall() { return parent::uninstall() \u0026amp;\u0026amp; $this-\u0026gt;uninstallTab() ; } public function enable($force_all = false) { return parent::enable($force_all) \u0026amp;\u0026amp; $this-\u0026gt;installTab() ; } public function disable($force_all = false) { return parent::disable($force_all) \u0026amp;\u0026amp; $this-\u0026gt;uninstallTab() ; } private function installTab() { $tabId = (int) Tab::getIdFromClassName(\u0026#39;MyModuleDemoController\u0026#39;); if (!$tabId) { $tabId = null; } $tab = new Tab($tabId); $tab-\u0026gt;active = 1; $tab-\u0026gt;class_name = \u0026#39;MyModuleDemoController\u0026#39;; // Only since 1.7.7, you can define a route name  $tab-\u0026gt;route_name = \u0026#39;admin_my_symfony_routing\u0026#39;; $tab-\u0026gt;name = array(); foreach (Language::getLanguages() as $lang) { $tab-\u0026gt;name[$lang[\u0026#39;id_lang\u0026#39;]] = $this-\u0026gt;trans(\u0026#39;My Module Demo\u0026#39;, array(), \u0026#39;Modules.MyModule.Admin\u0026#39;, $lang[\u0026#39;locale\u0026#39;]); } $tab-\u0026gt;id_parent = (int) Tab::getIdFromClassName(\u0026#39;ShopParameters\u0026#39;); $tab-\u0026gt;module = $this-\u0026gt;name; return $tab-\u0026gt;save(); } private function uninstallTab() { $tabId = (int) Tab::getIdFromClassName(\u0026#39;MyModuleDemoController\u0026#39;); if (!$tabId) { return true; } $tab = new Tab($tabId); return $tab-\u0026gt;delete(); } } And now you have your menu link directing to your Symfony controller with a nice url.\nAutomatic tab registration  Modern controllers can also be registered via the $tabs property. You don\u0026rsquo;t need to manually create the Tab object in this case, and you can take full advantage of the Symfony routing (no need for _legacy_link).\nHere is an example with a Symfony controller (example comes from the ps_linklist module). Nothing specific in this controller but notice the security annotation @AdminSecurity that uses request.get('_legacy_controller') which will make the link between this controller and the routing configuration.\n\u0026lt;?php // yourmodule/src/Controller/Admin/Improve/Design  namespace PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design; use PrestaShopBundle\\Security\\Annotation\\AdminSecurity; // (...)  /** * Class LinkBlockController. * * @ModuleActivated(moduleName=\u0026#34;ps_linklist\u0026#34;, redirectRoute=\u0026#34;admin_module_manage\u0026#34;) */ class LinkBlockController extends FrameworkBundleAdminController { /** * @AdminSecurity(\u0026#34;is_granted(\u0026#39;read\u0026#39;, request.get(\u0026#39;_legacy_controller\u0026#39;))\u0026#34;, message=\u0026#34;Access denied.\u0026#34;) * * @param Request $request * * @return Response */ public function listAction(Request $request) { // (...)  } } Now here is the routing configuration. We can see the _legacy_controller option is present with a value of AdminLinkWidget. This will be used for the AdminSecurity annotation, but also as our Tab\u0026rsquo;s class_name.\n# yourmodule/config/routes.ymladmin_link_block_list:path:/link-widget/listmethods:[GET]defaults:_controller:\u0026#39;PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design\\LinkBlockController::listAction\u0026#39;# _legacy_controller is used to manage permissions_legacy_controller:AdminLinkWidget# No need for _legacy_link in this caseFinally, here is the $tabs property used for automatic registration. It still requires a class_name field: it will be used to create the default AUTHORIZATION_ROLES related to this class_name, and later to check for those permissions.\n\u0026lt;?php // yourmodule/ps_linklist.php use Language; class Ps_Linklist extends Module { public function __construct() { ... $tabNames = []; foreach (Language::getLanguages(true) as $lang) { $tabNames[$lang[\u0026#39;locale\u0026#39;]] = $this-\u0026gt;trans(\u0026#39;Link List\u0026#39;, array(), \u0026#39;Modules.Linklist.Admin\u0026#39;, $lang[\u0026#39;locale\u0026#39;]); } $this-\u0026gt;tabs = [ [ \u0026#39;route_name\u0026#39; =\u0026gt; \u0026#39;admin_link_block_list\u0026#39;, \u0026#39;class_name\u0026#39; =\u0026gt; \u0026#39;AdminLinkWidget\u0026#39;, \u0026#39;visible\u0026#39; =\u0026gt; true, \u0026#39;name\u0026#39; =\u0026gt; $tabNames, \u0026#39;parent_class_name\u0026#39; =\u0026gt; \u0026#39;AdminParentThemes\u0026#39;, ], ]; ... } }  Hidden Tabs\nSince 1.7.7, when you create a Symfony route with the _legacy_controller if no visible Tab has been created an invisible one is automatically created so the permissions will be correctly handled.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/addresses/",
	"title": "Addresses",
	"tags": [],
	"description": "",
	"content": "Resources for Addresses Address    Name Format Required Max size Description     id_customer isNullOrUnsignedId ❌  Customer ID   id_manufacturer isNullOrUnsignedId ❌  Manufacturer ID   id_supplier isNullOrUnsignedId ❌  Supplier ID   id_warehouse isNullOrUnsignedId ❌  Warehouse ID   id_country isUnsignedId ✔️  Country ID   id_state isNullOrUnsignedId ❌  State ID   alias isGenericName ✔️ 32    company isGenericName ❌ 255    lastname isName ✔️ 255    firstname isName ✔️ 255    vat_number isGenericName ❌     address1 isAddress ✔️ 128    address2 isAddress ❌ 128    postcode isPostCode ❌ 12    city isCityName ✔️ 64    other isMessage ❌ 300    phone isPhoneNumber ❌ 32    phone_mobile isPhoneNumber ❌ 32    dni isDniLite ❌ 16    deleted isBool ❌     date_add isDate ❌     date_upd isDate ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_manufacturer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_country\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;alias\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/alias\u0026gt; \u0026lt;company\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;lastname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;vat_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/vat_number\u0026gt; \u0026lt;address1\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/address1\u0026gt; \u0026lt;address2\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/address2\u0026gt; \u0026lt;postcode\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;other\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/other\u0026gt; \u0026lt;phone\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;phone_mobile\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/phone_mobile\u0026gt; \u0026lt;dni\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/dni\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/asset-management/",
	"title": "Asset management",
	"tags": [],
	"description": "",
	"content": "Asset Management PrestaShop 1.7 has significantly improved the way assets (CSS, JavaScript and image files) are managed.\nWe advise theme developers to compile most of their style and JavaScript code into a single concatenated/minified file (see the Webpack section below).\nIf you need to add special assets, for example an extra JavaScript library on the home page or the product page, there are a few ways to do so.\nYour theme have to print assets correctly in the smarty template, and it\u0026rsquo;s explained in the template section.\nRegistering assets In PrestaShop 1.7+, it\u0026rsquo;s easy to register custom assets on each pages. The major improvement is that you can easily manage them from your theme, without any modules.\nWe introduced new methods to register assets, and especially new cool options.\nFor instance, you can register your asset specifically in the head or bottom of your HTML code; you can load it with attributes like async or defer; and you can even inline it easily.\nOne favorite option is the priority one, which makes it very easy to ensure everything is loaded in the order you need.\nBackward compatibility is kept for the addJS(), addCSS(), addJqueryUI() and addJqueryPlugin() methods. Incidentally, now is the best time to update your libraries and use the new method. Here is a list of options, and what they do.\nOptions PrestaShop\u0026rsquo;s FrontController class provides 2 new methods to easily register new assets: registerStylesheet() and registerJavascript().\nIn order to have the most extensible signatures, these 2 methods take 3 arguments. The first one is the unique ID of the asset, the second one is the relative path, and the third one is an array of all other optional parameters, as described below.\nID\nThis unique identifier needed for each asset. This is useful to either override or unregister something already loaded by the Core or a native module.\nRelative path\nThis is the path of your asset. In order to make your assets fully overridable and compatible with the parent/child feature, you need to provide the path from the theme\u0026rsquo;s root directory, or PrestaShop\u0026rsquo;s root directory if it\u0026rsquo;s a module.\nFor example:\n \u0026lsquo;assets/css/example.css\u0026rsquo; for something in your theme. \u0026lsquo;modules/modulename/css/example.css\u0026rsquo; for something in your module.  Extra parameters for stylesheet\n  Name Values Comment  media  all|braille|embossed|handheld| print|projection|screen|speech| tty|tv (default: all)\n  no comment.  priority 0-999 (default: 50) 0 is the highest priority  inline true|false (default: false) If true, your style will be printed inside the \u0026lt;style\u0026gt; tag in your HTML \u0026lt;head\u0026gt;. Use with caution.    Extra parameters for JavaScript\n  Name Values Comment  position head|bottom (default: bottom) JavaScript files should be loaded in the bottom as much as possible. Remember: core.js is loaded first thing in the bottom so jQuery won't be loaded in the \u0026lt;head\u0026gt; part.  priority 0-999 (default: 50) 0 is the highest priority  inline true|false (default: false) If true, your style will be printed inside \u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; tags inside your HTML. Use with caution.  attributes async|defer|none (default: none) Load JavaScript file with the corresponding attribute (Read more: Async vs Defer attributes)  server local|remote (default: local) Define if the JS resource is a local or remote path    Registered by the Core Every page of every theme loads the following files:\n theme.css custom.css rtl.css (if a right-to-left language is detected) core.js theme.js custom.js    Filename ID Priority Comment  theme.css theme-main 50 Most (all?) of your theme's styles. Should be minified.  rtl.css theme-rtl 900 Loaded only for Right-To-Left language  custom.css theme-custom 1000 Empty file loaded at the very end to allow user to override some simple style.  core.js corejs 0 Provided by PrestaShop. Contains jQuery3, dispatches PrestaShop events and holds PrestaShop logic.  theme.js theme-main 50  Most of your theme's JavaScript. Should embed libraries required on all pages, and be minified.\n   custom.js theme-custom 1000 Empty file loaded at the very end, to allow user to override behavior or add simple script.    Registering in themes By now you probably understood that this theme.yml file became the heart of PrestaShop themes.\nTo register assets, create a new assets key at the top level of your theme.yml, and register your files according to your needs. Page identifiers are based on the php_self property of each controller (example)\nFor example, if you want to add an external library on each page and a custom library on the Product page:\nassets:css:product:- id:product-extra-stylepath:assets/css/product.cssmedia:allpriority:100js:all:- id:this-cool-libpath:assets/js/external-lib.jspriority:30position:bottomproduct:- id:product-custom-libpath:assets/js/product.jspriority:200attribute:asyncRegistering in modules When developing a PrestaShop module, you may want to add specific styles for your templates. The best way is to use the registerStylesheet and registerJavascript methods provided by the parent FrontController class.\nIf you\u0026rsquo;re developing a custom module that only works on your themes, don\u0026rsquo;t put any style or JavaScript code inside the module: put it in the theme\u0026rsquo;s files instead (theme.js and theme.css). With a front controller module If you develop a front controller, simply extend the setMedia() method. For instance:\n\u0026lt;?php public function setMedia() { parent::setMedia(); if (\u0026#39;product\u0026#39; === $this-\u0026gt;php_self) { $this-\u0026gt;registerStylesheet( \u0026#39;module-modulename-style\u0026#39;, \u0026#39;modules/\u0026#39;.$this-\u0026gt;module-\u0026gt;name.\u0026#39;/css/modulename.css\u0026#39;, [ \u0026#39;media\u0026#39; =\u0026gt; \u0026#39;all\u0026#39;, \u0026#39;priority\u0026#39; =\u0026gt; 200, ] ); $this-\u0026gt;registerJavascript( \u0026#39;module-modulename-simple-lib\u0026#39;, \u0026#39;modules/\u0026#39;.$this-\u0026gt;module-\u0026gt;name.\u0026#39;/js/lib/simple-lib.js\u0026#39;, [ \u0026#39;priority\u0026#39; =\u0026gt; 200, \u0026#39;attribute\u0026#39; =\u0026gt; \u0026#39;async\u0026#39;, ] ); } } Without a front controller module If you only have your module\u0026rsquo;s class, register your code on the actionFrontControllerSetMedia hook, and add your asset on the go inside the hook:\n\u0026lt;?php public function hookActionFrontControllerSetMedia($params) { // Only on product page  if (\u0026#39;product\u0026#39; === $this-\u0026gt;context-\u0026gt;controller-\u0026gt;php_self) { $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerStylesheet( \u0026#39;module-modulename-style\u0026#39;, \u0026#39;modules/\u0026#39;.$this-\u0026gt;name.\u0026#39;/css/modulename.css\u0026#39;, [ \u0026#39;media\u0026#39; =\u0026gt; \u0026#39;all\u0026#39;, \u0026#39;priority\u0026#39; =\u0026gt; 200, ] ); $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerJavascript( \u0026#39;module-modulename-simple-lib\u0026#39;, \u0026#39;modules/\u0026#39;.$this-\u0026gt;name.\u0026#39;/js/lib/simple-lib.js\u0026#39;, [ \u0026#39;priority\u0026#39; =\u0026gt; 200, \u0026#39;attribute\u0026#39; =\u0026gt; \u0026#39;async\u0026#39;, ] ); } // On every pages  $this-\u0026gt;context-\u0026gt;controller-\u0026gt;registerJavascript( \u0026#39;google-analytics\u0026#39;, \u0026#39;modules/\u0026#39;.$this-\u0026gt;name.\u0026#39;/ga.js\u0026#39;, [ \u0026#39;position\u0026#39; =\u0026gt; \u0026#39;head\u0026#39;, \u0026#39;inline\u0026#39; =\u0026gt; true, \u0026#39;priority\u0026#39; =\u0026gt; 10, ] ); } Unregistering You can unregister assets! That\u0026rsquo;s the whole point of an id. For example if you want to improve your theme/module\u0026rsquo;s compatibility with a module, you can unregister its assets and handle them yourself.\nLet\u0026rsquo;s say you want to be fully compatible with a popular navigation module. You could create a template override of course, but you could also remove the style that comes with it and bundle your specific style in your theme.css (since it\u0026rsquo;s loaded on every page).\nTo unregister an assets, you need to know its ID.\nIn themes As of today, the only way to unregister an asset without any module is to place an empty file where the module override would be.\nIf the module registers a JavaScript file placed in views/js/file.js, you simply need to create an empty file in modules/modulename/views/js/file.js.\nIt works for both JavaScript and CSS assets.\nIn modules Both unregisterJavascript and unregisterStylesheet methods take only one argument: the unique ID of the resource you want to remove.\n\u0026lt;?php // In a front controller public function setMedia() { parent::setMedia(); $this-\u0026gt;unregisterJavascript(\u0026#39;the-identifier\u0026#39;); } // In a module class public function hookActionFrontControllerSetMedia($params) { $this-\u0026gt;context-\u0026gt;controller-\u0026gt;unregisterJavascript(\u0026#39;the-identifier\u0026#39;); } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/core-updates/1.6/",
	"title": "Backward compatibility with PrestaShop 1.6",
	"tags": [],
	"description": "",
	"content": "Backward compatibility with PrestaShop 1.6 If you plan to develop a module for PrestaShop 1.7 then extending the compatibility with previous major versions of PrestaShop, it may require some changes before being ready for production.\nNamespaces PrestaShop 1.6 does not fully support namespaces. They throw some issues when used in specific places.\n In the main class of your module, the keyword use [...]; will trigger syntax errors when PrestaShop will try to parse the file. ObjectModels can\u0026rsquo;t be defined in a namespace. The hook generated while managing this entity will be considered as invalid by the Validate class and will trigger fatal errors.  PHP API updates The visibility of many functions have been switched to public between two versions of PrestaShop (i.e Link::getBaseLink() which was protected then public from PS 1.6.1.15). We recommend using a static analysis tool like PhpStan to detect these changes.\nTemplating addCSS / addJS / jsDef may not work properly on PrestaShop 1.6.0.* when sending Json data to a template. We recommend sending your variables without trying to encode them. PrestaShop will handle them and avoid escaping issues with quotes.\n$translations = [ \u0026#39;dummy1\u0026#39; =\u0026gt; \u0026#39;Example of data\u0026#39;, \u0026#39;dummy2\u0026#39; =\u0026gt; \u0026#39;Another example of data\u0026#39;, ]; Media::addJsDef([ - \u0026#39;translations\u0026#39; =\u0026gt; json_encode($translations), + \u0026#39;translations\u0026#39; =\u0026gt; $translations, // Data will be encoded by PrestaShop ]); "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/shortcodes/callout/",
	"title": "Callout",
	"tags": [],
	"description": "",
	"content": "Callout This shortcode allows you to display a block inside your document to make some information stand out.\nAs with all shortcodes, keep in mind that headers inside won\u0026rsquo;t appear in the article\u0026rsquo;s table of contents. {{% callout %}} #### This is a callout  This is a very important block of text. Also, notice how the title doesn\u0026#39;t appear in the table of contents. {{% /callout %}} Rendered result:\nThis is a callout This is a very important block of text. Also, notice how the title doesn\u0026rsquo;t appear in the table of contents.\n "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/carriers/",
	"title": "Carriers",
	"tags": [],
	"description": "",
	"content": "Resources for Carriers Carrier    Name Format Required Max size Not filterable Description     deleted isBool ❌      is_module isBool ❌      id_tax_rules_group  ❌  true Tax rules group ID   id_reference  ❌   Reference ID   name isCarrierName ✔️ 64     active isBool ✔️      is_free isBool ❌      url isAbsoluteUrl ❌      shipping_handling isBool ❌      shipping_external  ❌      range_behavior isBool ❌      shipping_method isUnsignedInt ❌      max_width isUnsignedInt ❌      max_height isUnsignedInt ❌      max_depth isUnsignedInt ❌      max_weight isFloat ❌      grade isUnsignedInt ❌ 1     external_module_name  ❌ 64     need_range  ❌      position  ❌      delay isGenericName ✔️ 512      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;carrier\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;is_module\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_module\u0026gt; \u0026lt;id_tax_rules_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_tax_rules_group\u0026gt; \u0026lt;id_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_reference\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;is_free\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_free\u0026gt; \u0026lt;url\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/url\u0026gt; \u0026lt;shipping_handling\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_handling\u0026gt; \u0026lt;shipping_external\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_external\u0026gt; \u0026lt;range_behavior\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/range_behavior\u0026gt; \u0026lt;shipping_method\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_method\u0026gt; \u0026lt;max_width\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/max_width\u0026gt; \u0026lt;max_height\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/max_height\u0026gt; \u0026lt;max_depth\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/max_depth\u0026gt; \u0026lt;max_weight\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/max_weight\u0026gt; \u0026lt;grade\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/grade\u0026gt; \u0026lt;external_module_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/external_module_name\u0026gt; \u0026lt;need_range\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/need_range\u0026gt; \u0026lt;position\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/position\u0026gt; \u0026lt;delay\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/delay\u0026gt; \u0026lt;/carrier\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/cart_rules/",
	"title": "Cart rules",
	"tags": [],
	"description": "",
	"content": "Resources for Cart rules Cart_rule    Name Format Required Max size Description     id_customer isUnsignedId ❌  Customer ID   date_from isDate ✔️     date_to isDate ✔️     description isCleanHtml ❌ 65534    quantity isUnsignedInt ❌     quantity_per_user isUnsignedInt ❌     priority isUnsignedInt ❌     partial_use isBool ❌     code isCleanHtml ❌ 254    minimum_amount isFloat ❌     minimum_amount_tax isBool ❌     minimum_amount_currency isInt ❌     minimum_amount_shipping isBool ❌     country_restriction isBool ❌     carrier_restriction isBool ❌     group_restriction isBool ❌     cart_rule_restriction isBool ❌     product_restriction isBool ❌     shop_restriction isBool ❌     free_shipping isBool ❌     reduction_percent isPercentage ❌     reduction_amount isFloat ❌     reduction_tax isBool ❌     reduction_currency isUnsignedId ❌     reduction_product isInt ❌     reduction_exclude_special isBool ❌     gift_product isUnsignedId ❌     gift_product_attribute isUnsignedId ❌     highlight isBool ❌     active isBool ❌     date_add isDate ❌     date_upd isDate ❌     name isCleanHtml ✔️ 254     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;cart_rule\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;date_from\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_from\u0026gt; \u0026lt;date_to\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_to\u0026gt; \u0026lt;description\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity\u0026gt; \u0026lt;quantity_per_user\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity_per_user\u0026gt; \u0026lt;priority\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/priority\u0026gt; \u0026lt;partial_use\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/partial_use\u0026gt; \u0026lt;code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/code\u0026gt; \u0026lt;minimum_amount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/minimum_amount\u0026gt; \u0026lt;minimum_amount_tax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/minimum_amount_tax\u0026gt; \u0026lt;minimum_amount_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/minimum_amount_currency\u0026gt; \u0026lt;minimum_amount_shipping\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/minimum_amount_shipping\u0026gt; \u0026lt;country_restriction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/country_restriction\u0026gt; \u0026lt;carrier_restriction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/carrier_restriction\u0026gt; \u0026lt;group_restriction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/group_restriction\u0026gt; \u0026lt;cart_rule_restriction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/cart_rule_restriction\u0026gt; \u0026lt;product_restriction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_restriction\u0026gt; \u0026lt;shop_restriction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shop_restriction\u0026gt; \u0026lt;free_shipping\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/free_shipping\u0026gt; \u0026lt;reduction_percent\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_percent\u0026gt; \u0026lt;reduction_amount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_amount\u0026gt; \u0026lt;reduction_tax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_tax\u0026gt; \u0026lt;reduction_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_currency\u0026gt; \u0026lt;reduction_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_product\u0026gt; \u0026lt;reduction_exclude_special\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_exclude_special\u0026gt; \u0026lt;gift_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/gift_product\u0026gt; \u0026lt;gift_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/gift_product_attribute\u0026gt; \u0026lt;highlight\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/highlight\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/cart_rule\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/carts/",
	"title": "Carts",
	"tags": [],
	"description": "",
	"content": "Resources for Carts Cart    Name Format Required Max size Description     id_address_delivery isUnsignedId ❌  Delivery address ID   id_address_invoice isUnsignedId ❌  Invoice address ID   id_currency isUnsignedId ✔️  Currency ID   id_customer isUnsignedId ❌  Customer ID   id_guest isUnsignedId ❌  Guest ID   id_lang isUnsignedId ✔️  Lang ID   id_shop_group isUnsignedId ❌  Shop group ID   id_shop isUnsignedId ❌  Shop ID   id_carrier isUnsignedId ❌  Carrier ID   recyclable isBool ❌     gift isBool ❌     gift_message isMessage ❌     mobile_theme isBool ❌     delivery_option  ❌     secure_key  ❌ 32    allow_seperated_package isBool ❌     date_add isDate ❌     date_upd isDate ❌     associations  ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;cart\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_address_delivery\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_address_delivery\u0026gt; \u0026lt;id_address_invoice\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_address_invoice\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_guest\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_guest\u0026gt; \u0026lt;id_lang\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_carrier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_carrier\u0026gt; \u0026lt;recyclable\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/recyclable\u0026gt; \u0026lt;gift\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/gift\u0026gt; \u0026lt;gift_message\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/gift_message\u0026gt; \u0026lt;mobile_theme\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mobile_theme\u0026gt; \u0026lt;delivery_option\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delivery_option\u0026gt; \u0026lt;secure_key\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/secure_key\u0026gt; \u0026lt;allow_seperated_package\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/allow_seperated_package\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;cart_rows\u0026gt; \u0026lt;cart_row\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;id_address_delivery\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_address_delivery\u0026gt; \u0026lt;id_customization\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customization\u0026gt; \u0026lt;quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity\u0026gt; \u0026lt;/cart_row\u0026gt; \u0026lt;/cart_rows\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/cart\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": "Resources for Categories Category    Name Format Required Writable Max size Not filterable Description     id_parent isUnsignedInt ❌ ✔️   Parent ID   level_depth isUnsignedInt ❌ ❌      nb_products_recursive  ❌ ❌  true    active isBool ✔️ ✔️      id_shop_default isUnsignedId ❌ ✔️   Default shop ID   is_root_category isBool ❌ ✔️      position  ❌ ✔️      date_add isDate ❌ ✔️      date_upd isDate ❌ ✔️      name isCatalogName ✔️ ✔️ 128     link_rewrite isLinkRewrite ✔️ ✔️ 128     description isCleanHtml ❌ ✔️      meta_title isGenericName ❌ ✔️ 255     meta_description isGenericName ❌ ✔️ 512     meta_keywords isGenericName ❌ ✔️ 255     associations  ❌ ✔️       Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_parent\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_parent\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;id_shop_default\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_default\u0026gt; \u0026lt;is_root_category\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_root_category\u0026gt; \u0026lt;position\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/position\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;link_rewrite\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/link_rewrite\u0026gt; \u0026lt;description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/description\u0026gt; \u0026lt;meta_title\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_title\u0026gt; \u0026lt;meta_description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_description\u0026gt; \u0026lt;meta_keywords\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_keywords\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;categories\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;/categories\u0026gt; \u0026lt;products\u0026gt; \u0026lt;product\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/product\u0026gt; \u0026lt;/products\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/category-choice-tree/",
	"title": "CategoryChoiceTreeType",
	"tags": [],
	"description": "",
	"content": "CategoryChoiceTreeType CategoryChoiceTreeType is a child of MaterialChoiceTreeType, it extends parent options with options listed bellow. It is used to display category tree selection box and requires Javascript components.\nType options    Option Type Default value Description     choices_tree array Array of all available categories Values to choose from in choices tree   choice_label string name An array key which should be targeted in provided choices list to get the label for input   choice_value string id_category An array key which should be targeted in provided choices list to get the value for input    Required Javascript components    Component Description     ../admin-dev/themes/new-theme/js/components/form/choice-tree.js Responsible for choice tree expanding and collapsing interactivity    Code example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\CategoryChoiceTreeType; use Symfony\\Component\\Form\\AbstractType; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { // you can disable some categories selection in choice tree  $disabledCategories = [ 2, // category id  ]; $builder -\u0026gt;add(\u0026#39;category_id\u0026#39;, CategoryChoiceTreeType::class, [ \u0026#39;disabled_values\u0026#39; =\u0026gt; $disabledCategories, ]) ; } } Preview example   CategoryChoiceTree rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/change-password/",
	"title": "ChangePasswordType",
	"tags": [],
	"description": "",
	"content": "ChangePasswordType ChangePasswordType is used to create form for changing password and has a built-in new password generator which requires Javascript components.\nRequired Javascript components    Component Description     ../admin-dev/themes/new-theme/js/components/form/change-password-control.js Generates random passwords, validates new password and it\u0026rsquo;s confirmation, displays error messages related to validation    Code example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\ChangePasswordType; use Symfony\\Component\\Form\\AbstractType; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;change_password\u0026#39;, ChangePasswordType::class) ; } } Then in Javascript you have to enable ChangePasswordControl component.\nimport ChangePasswordControl from \u0026#39;admin-dev/themes/new-theme/js/components/form/change-password-control\u0026#39;; // This component requires many css selectors for targeting. // These css attributes names depends on you, but it should be placed on correct elements to work properly. new ChangePasswordControl( \u0026#39;.js-change-password-block\u0026#39;, // parent element in which other \u0026#39;ChangePasswordType\u0026#39; inputs are rendered.  \u0026#39;.js-change-password\u0026#39;, // button which shows the whole form on click and is hidden afterwards.  \u0026#39;.js-change-password-cancel\u0026#39;, // button which cancels the form and shows \u0026#39;change-password\u0026#39; button again.  \u0026#39;.js-generate-password-button\u0026#39;, // button which generates new password on click.  \u0026#39;.js-old-password\u0026#39;, // input of old password.  \u0026#39;.js-new-password\u0026#39;, // input of new password.  \u0026#39;.js-password-confirm\u0026#39;, // new password confirmation input.  \u0026#39;.js-generated_password\u0026#39;, // input in which the new generated password should be displayed.  \u0026#39;.js-password-strength\u0026#39; // element in which password strength feedback should be displayed. ); Preview example   ChangePasswordType show/hide button rendered in form     ChangePasswordType rendered in form   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/core-updates/1.7.5/",
	"title": "Changes in PrestaShop 1.7.5",
	"tags": [],
	"description": "",
	"content": "Notable changes in PrestaShop 1.7.5 LazyArrays Starting with PrestaShop 1.7.5, the business objects (Product, Order\u0026hellip;) available on the front-office are LazyArray instances. If your module relies on data available in the hook parameters or in the template, you may be concerned by this update.\nThey used to be arrays with all the data available. This change has been introduced to load the needed properties of an object only when requested, and globally improve the performance of the front-office.\nGetting properties from the object should not change between first versions of PS 1.7 and 1.7.5.\nHowever it appeared that some modules, especially the ones with a large compatibility range like PrestaShop 1.6 \u0026amp; 1.7, apply an array cast when the variable in not an array. Casting these variables as arrays on PS 1.7.5+ will throw notices when getting their properties.\n    1.6 1.7.0+ 1.7.5+     Variable type / class ObjectModel array PrestaShop\\PrestaShop\\Adapter\\Presenter\\AbstractLazyArray   Getting a property {(array)$var}['id'] or $var-\u0026gt;id $var['id'] $var['id'] or $var-\u0026gt;id    Applying an (array) cast is valid only when you have a ObjectModel instance, for instance Product. Otherwise, you already have an array-compliant variable.\n\u0026lt;?php public function hookdisplayFooterProduct($params) { /* * Depending on the PrestaShop you run, the $product type won\u0026#39;t be the same. * On PrestaShop 1.7, it can be directly used as an array. * * However, if the module is also compatible with PrestaShop 1.6, 1.5... * an ObjectModel class will be returned. * Casting it as an array *in this specific situation* will allow to cover all cases. */ $product = $params[\u0026#39;product\u0026#39;]; if ($product instanceof Product /* or ObjectModel */) { $product = (array) $product; } // Getting product details.  echo $product[\u0026#39;id\u0026#39;]; } Links:\n Related issue on module Google Analytics (GitHub)  Automated link generation PrestaShop now automatically converts links generated by Link::getAdminLink() calls into links to the newly migrated Symfony pages. This means that if you used this method somewhere in your modules to link to a page that has since been migrated, PrestaShop will automatically \u0026ldquo;upgrade\u0026rdquo; it so that it points to the new Symfony-style URL.\nWith this change, module developers no longer need to update their links each time a page is migrated. However in many places the method is not used with URL parameters as arguments, and parameters are concatenated as a string after the getAdminLink call instead. This can result in wrong conversion use cases, so you might need to refactor the way you use this method.\nExample:\n\u0026lt;?php // Code compliant from PrestaShop 1.5 to 1.7.4  $link-\u0026gt;getAdminLink(\u0026#39;AdminOrders\u0026#39;) . \u0026#39;\u0026amp;amp;id_order={$order-\u0026gt;id|intval}\u0026amp;amp;vieworder\u0026#39;; // Recommended code from PrestaShop 1.7.5  $link-\u0026gt;getAdminLink(\u0026#39;AdminOrders\u0026#39;, true, [], [\u0026#39;id_customer\u0026#39; =\u0026gt; $customer-\u0026gt;id|intval, \u0026#39;viewcustomer\u0026#39; =\u0026gt; 1]); // If you need to be compatible from 1.5 to the latest 1.7 version, then you can combine both styles  $link-\u0026gt;getAdminLink(\u0026#39;AdminOrders\u0026#39;, true, [], [\u0026#39;id_customer\u0026#39; =\u0026gt; $customer-\u0026gt;id|intval, \u0026#39;viewcustomer\u0026#39; =\u0026gt; 1]) . \u0026#39;\u0026amp;amp;id_order={$order-\u0026gt;id|intval}\u0026amp;amp;vieworder\u0026#39;; Although this won\u0026rsquo;t be a problem for legacy controllers, if it\u0026rsquo;s not used properly, the generated link won\u0026rsquo;t work anymore once the page is migrated to Symfony. We recommend refactoring your calls to getAdminLink beforehand.\nYou can find more details about this new feature in the Controller and Routing page.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/core-updates/1.7.6/",
	"title": "Changes in PrestaShop 1.7.6",
	"tags": [],
	"description": "",
	"content": "Notable changes in PrestaShop 1.7.6 CLDR The CLDR is a component responsible of displaying data such as the date \u0026amp; time, prices depending on a given language. It was reworked during several versions of PrestaShop 1.7, and will be enabled with 1.7.6. The previous one has been removed, and trying to use it will end to an exception.\nA new variable is now available in the Context when going through a controller:\n\u0026lt;?php class ContextCore { /** * Current locale instance. * * @var PrestaShop\\PrestaShop\\Core\\Localization\\Locale */ public $currentLocale; [...] } This property is the link to format properly a number:\n\u0026lt;?php Context::getContext()-\u0026gt;currentLocale-\u0026gt;formatNumber(123.45); or a price:\n\u0026lt;?php Context::getContext()-\u0026gt;currentLocale-\u0026gt;formatPrice(123.45, \u0026#39;EUR\u0026#39;); Remember that you can retrieve the contextual currency code as follows:\n\u0026lt;?php Context::getContext()-\u0026gt;currency-\u0026gt;iso_code; // returns \u0026#39;EUR\u0026#39; for Euro, \u0026#39;USD\u0026#39; for US dollars, ... Also, note that Tools::displayNumber(...) andTools::displayPrice(...) work as before, although deprecated.\nThe summary of removed elements is the following:\n The IcanBoogie/CLDR library has been removed in favor of the new native implementation. Old CLDR files in the \u0026ldquo;/translations\u0026rdquo; directory have been removed as well. The PrestaShop\\PrestaShop\\Core\\Cldr namespace has been removed along with all classes in it. The Currency ObjectModel is now multilingual  Deprecated methods:\n Tools::getCldr(). Calls to this method will throw a PrestaShopException. Tools::displayNumber() andTools::displayPrice() are still functional, but discouraged.  The following currencies are no longer available:\n BYR: Belarusian Ruble (2000–2016) LTL: Lithuanian Litas (end 2014-12-31) STD: São Tomé \u0026amp; Príncipe Dobra (end 2017-12-31)  For more details, please see the related pull request on GitHub.\nNew SQL tables In order to correctly handle user session expiration, two new SQL tables have been added to PrestaShop MySQL schema: ps_customer_session and ps_employee_session. These SQL tables are used for security purposes.\nOther notable changes  Import: It\u0026rsquo;s no longer possible to just add categories to current categories with import to a force ID. You will have to set them all and the first will become the default_category – (See related change). Replaced library: PhpExcel (no longer supported) has been replaced by PHPSpreadsheet – (See related change). Version comparison: AppKernel::MAJOR_VERSION is now \u0026ldquo;7\u0026rdquo; instead of \u0026ldquo;17\u0026rdquo;. \u0026ldquo;1.2.4\u0026rdquo; is no longer greater than \u0026ldquo;1.2.3.4\u0026rdquo; (the latter is now interpreted as \u0026ldquo;2.3.4\u0026rdquo;) – (See related change). URLs:  Endpoints other than index.php have been deprecated – (See related change). Module developers are strongly discouraged from using routes that don\u0026rsquo;t go through a controller (see this issue). All Back Office endpoints now require a token. AdminModelAdapter.php now requires the Router in its constructor.   Escaping:  Slashes are no longer removed from $_GET and $_POST variables. Make sure you validate user input accordingly. – (See related change). HTML characters are no longer escaped from error messages – (See related change).   Other:  src/Core/Addon/Module/ModuleManager.php::_construct() receives an instance of CacheClearerInterface instead of CacheClearer – (See related change). Permissions for files created by PrestaShop are no longer set to 0777. Permissions are now set to 0755 for directories and 0644 for files. To prevent having jQuery included twice, It is no longer possible to add jQuery in BO controllers based on the new theme using addJquery() – (See related change).   Module:  Dashboard modules can no longer use AdminDashboardController::ajaxProcessSaveDashConfig() to save values without implementing the saveDashConfig method and if needed the validateDashConfig method. This is not possible anymore from PrestaShop 1.7.6.6 in order to enforce the shop\u0026rsquo;s security.   Theme:  A new generic selector has been added: .product-container. Theme developers need to make sure to add this class to the appropriate container on product page in order to allow the product page to be refreshed on changes.    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/core-updates/1.7.7/",
	"title": "Changes in PrestaShop 1.7.7",
	"tags": [],
	"description": "",
	"content": "Notable changes in PrestaShop 1.7.7 PHP support PrestaShop 1.7.7 adds supports for PHP 7.3 and requires at least PHP 7.1.3. Older PHP versions are no longer supported.\nUpdated dependencies The following dependencies have been updated in order to provide support for PHP 7.3:\n   Extension Old version New version     beberlei/doctrineextensions v1.1.9 v1.2.6   behat/transliterator v1.2.0 v1.3.0   composer/ca-bundle 1.1.4 1.2.6   composer/installers v1.6.0 v1.7.0   composer/semver 1.5.0 1.5.1   composer/xdebug-handler 1.3.2 1.4.0   doctrine/annotations v1.4.0 v1.8.0   doctrine/cache v1.6.2 1.10.0   doctrine/collections v1.4.0 1.6.4   doctrine/common v2.5.3 2.12.0   doctrine/dbal v2.5.13 v2.9.3   doctrine/doctrine-bundle 1.10.2 1.12.16   doctrine/doctrine-cache-bundle 1.3.5 1.4.0   doctrine/inflector v1.1.0 1.3.1   doctrine/instantiator 1.0.5 1.3.0   doctrine/lexer v1.0.1 1.0.2   doctrine/orm v2.5.14 v2.7.0   ezyang/htmlpurifier v4.10.0 v4.12.0   fig/link-util 1.0.0 1.1.0   friendsofphp/php-cs-fixer v2.15.1 v2.16.1   friendsofsymfony/jsrouting-bundle 2.4.0 2.5.3   greenlion/php-sql-parser 4.2.1 4.3.0   guzzlehttp/guzzle 5.3.3 5.3.4   johnkary/phpunit-speedtrap v1.1.0 v3.1.0   league/tactician-bundle v0.4.1 v1.2.0   markbaker/matrix 1.1.4 1.2.0   maxmind-db/reader v1.4.1 v1.6.0   maxmind/web-service-common v0.5.0 v0.6.0   mikey179/vfsstream v1.6.5 v1.6.8   mobiledetect/mobiledetectlib 2.8.33 2.8.34   monolog/monolog 1.24.0 1.25.3   myclabs/deep-copy 1.7.0 1.9.4   nikic/php-parser v3.1.5 v4.3.0   pear/archive_tar 1.4.6 1.4.9   pear/console_getopt v1.4.2 v1.4.3   pear/pear-core-minimal v1.10.9 v1.10.10   pear/pear_exception v1.0.0 v1.0.1   pelago/emogrifier v2.1.1 v2.2.0   phpdocumentor/reflection-common 1.0.1 2.0.0   phpdocumentor/reflection-docblock 3.3.2 4.3.4   phpdocumentor/type-resolver 0.4.0 1.0.1   phpoffice/phpspreadsheet 1.7.0 1.10.1   phpspec/prophecy 1.8.0 1.10.1   phpunit/php-code-coverage 4.0.8 6.1.4   phpunit/php-file-iterator 1.4.5 2.0.2   phpunit/php-timer 1.0.9 2.1.2   phpunit/php-token-stream 1.4.12 3.1.1   phpunit/phpunit 5.7.27 7.5.20   psr/log 1.1.0 1.1.2   sebastian/comparator 1.2.4 3.0.2   sebastian/diff 1.4.3 3.0.2   sebastian/environment 2.0.0 4.2.3   sebastian/exporter 2.0.0 3.1.2   sebastian/global-state 1.1.1 2.0.0   sebastian/object-enumerator 2.0.1 3.0.3   sebastian/recursion-context 2.0.0 3.0.0   sebastian/resource-operations 1.0.0 2.0.1   sensio/distribution-bundle v5.0.24 v5.0.25   sensio/framework-extra-bundle v5.2.4 v5.4.1   sensiolabs/security-checker v5.0.3 v6.0.3   smarty/smarty v3.1.33 v3.1.34   swiftmailer/swiftmailer v5.4.12 v6.2.3   symfony/monolog-bundle v3.3.1 v3.5.0   symfony/phpunit-bridge v3.4.31 v3.4.36   symfony/swiftmailer-bundle v2.6.7 v3.2.6   symfony/symfony v3.4.26 v3.4.37   tecnickcom/tcpdf v6.2.26 6.3.2   tijsverkoyen/css- -inline-styles 2.2.1   twig/twig v1.38.4 v1.42.4   webmozart/assert 1.4.0 1.6.0    New hooks The following hooks have been added:\n displayAdditionalCustomerAddressFields displayFooterCategory actionAdminAdminPreferencesControllerPostProcessBefore actionAdminLoginControllerBefore actionAdminLoginControllerLoginBefore actionAdminLoginControllerLoginAfter actionAdminLoginControllerForgotBefore actionAdminLoginControllerForgotAfter actionAdminLoginControllerResetBefore actionAdminLoginControllerResetAfter  Changes in AdminController hooks In Pull Request #19712 hooks displayBackOfficeTop and displayBackOfficeHeader calls have been moved from AdminController::init() to AdminController::initHeader().\nHowever in certain situations, these hooks were the only extension points available. To overcome this, the Pull Request #21435 introduced new hooks in AdminController::init() as well as in other abstract Controller classes:\n actionFrontControllerInitBefore actionFrontControllerInitAfter actionAdminControllerInitBefore actionAdminControllerInitAfter actionControllerInitAfter actionControllerInitBefore  Database table charset updated All database tables have been switched to the utf8mb4 charset in order to provide support for emojis.\nBecause of this, the size for some indexes have been reduced to 191:\n Field alias in alias table Field slug in authorization_role table Field module in module_preference table Field module in tab_module_preference table Field cache_id in smarty_lazy_cache table  Updated jQuery to latest version jQuery has been updated to 3.4.1 in Back office (up from 1.11 in legacy pages) and Core theme (up from 2.1.4).\njQuery has changed a lot between v1.11 / v2.1.4 and v3.4.1. This is why jquery migrate was enabled in order to provide a layer of compatibility, but this does not preserve all jQuery capabilities for such old versions.\nModules relying on these old capabilities may experience problems, including but not limited to:\n context property has been removed Using dataType in an ajax request won\u0026rsquo;t trigger the success / done methods if the type of content returned does not match jQuery.attr() behavior has evolved, most of the time, you should use jQuery.prop() instead.  Order view page layout modifications In this version the order page has been migrated with Symfony. We used this migration as an opportunity to improve the page layout to meet the merchants' needs. You can see a representation of these new hooks in the page here:\n  Order view page hooks layout   Modified hooks The following hooks have been moved and have new names. Even though they are very similar to their former equivalents the layout has changed and thus the modules need to adapt their rendering.\n   Removed hook New hook Modification     displayAdminOrderRight displayAdminOrderSideBottom It is now displayed on the left which is why it was renamed based on its context not its position, since the layout is completely different it has no alias   displayAdminOrderLeft displayAdminOrderMainBottom It is now displayed on the right which is why it was renamed based on its context not its position, since the layout is completely different it has no alias   displayAdminOrderTabOrder and displayAdminOrderTabShip displayAdminOrderTabLink Both hooks are now combined in a single generic hook that allows you to include tab links the order view page, it only has the id_order as a parameter   displayAdminOrderContentOrder and displayAdminOrderContentShip displayAdminOrderTabContent Both hooks are now combined in a single generic hook that allows you to include tab contents the order view page, it only has the id_order as a parameter    These hooks have been aliased, although we recommend migrating to the new hooks and check that it integrates correctly with the new layout:\n   Deprecated hook New aliased hook Modification     displayBackOfficeOrderActions displayAdminOrderSide Although it has been aliased for convenience, the new hook is not displayed at the same place at all (it is now in the side column), so we suggest to verify how your code integrates into the new layout. If you need to add action buttons, use the new actionGetAdminOrderButtons hook   displayInvoice displayAdminOrderTop This hook has the same placement and parameters    These hooks have been added on the order view page:\n   New hook Function     displayAdminOrderSide It is displayed in the side column (similar to displayAdminOrderSideBottom) but right under the customer view   displayAdminOrderMain It is displayed in the side column (similar to displayAdminOrderMainBottom) but right under the details view   actionGetAdminOrderButtons It is used to build a collection of buttons in the order thanks to an ActionsBarButtonsCollection which is automatically rendered    These hooks have been added on the order list page:\n   New hook Function     displayOrderPreview It is displayed at the bottom of the order\u0026rsquo;s preview on the order\u0026rsquo;s listing page.    Product cover A major bug has been fixed in product listing, for products with combinations the image displayed was the first one from the default combination, and the cover was ignored. This behaviour has been fixed but in order to allow modules to override this cover a new cover_image_id has been introduced. This image ID is then used to populate the product.cover field usable in the templates, if you want the default image for the combination (which was the previous behaviour) you can use the new product.default_image field.\nIf your theme overrides some of the classic theme templates and uses the $product.cover property you should check that it still matches the expected behaviour, especially in the themes/classic/templates/catalog/_partials/product-cover-thumbnails.tpl used in the product page where $product.default_image should be used. You can read this FAQ if you want to know how to override the Product cover. Product - quick view mode In previous 1.7 versions if you wanted to check whether people are displaying product page using quick view, in a module hooked into displayProductAdditionalInfo, you could use this code:\n$quickView = (Tools::getValue('action') == 'quickview)\nFrom v1.7.7 due to changes related to dynamic refresh of displayProductAdditionalInfo in quick view modal, it\u0026rsquo;s no longer possible to do that this way.\nFrom now on, you can always ask ProductController to tell you if customer is using quick view, using this code:\nif ($this-\u0026gt;context-\u0026gt;controller instanceof ProductController \u0026amp;\u0026amp; $this-\u0026gt;context-\u0026gt;controller-\u0026gt;isQuickView()) { // We\u0026#39;re in quick view mode } or directly in .tpl file:\n{if $page.page_name == \u0026#39;product\u0026#39; \u0026amp;\u0026amp; Context::getContext()-\u0026gt;controller-\u0026gt;isQuickView()}We\u0026#39;re in quick view mode for {$product.id_product}and attribute {$product.id_product_attribute}{/if}Modern Tabs for modern modules Modern modules that use Symfony controller and routing can now use the $tabs property in their module class to automatically register Tabs in the BackOffice menu.\nAlso new in this version, when a module is enabled/disabled all its related Tab links are automatically shown/hidden.\nOther changes  CLDR Specification\\Number is now immutable Configuration forms have been split up for security reasons New alias for webpack namespace app -\u0026gt; @app The clickable_row option on Grids' LinkRowAction now uses .clickable as a selector, modules that rely on this feature should make sure that their templates use the appropriate class CLDR data has been updated to v36 Smarty has been updated to v3.1.34  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/code-of-conduct/",
	"title": "Code of Conduct",
	"tags": [],
	"description": "",
	"content": "Code of Conduct The following code of conduct was originally published here. Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nOur Standards Examples of behavior that contributes to creating a positive environment include:\n Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members  Examples of unacceptable behavior by participants include:\n The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting  Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\nScope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\nEnforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at https://www.prestashop.com/en/abuse. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project\u0026rsquo;s leadership.\nAttribution This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\nFor answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/combinations/",
	"title": "Combinations",
	"tags": [],
	"description": "",
	"content": "Resources for Combinations Combination    Name Format Required Max size Description     id_product isUnsignedId ✔️  Product ID   location isGenericName ❌ 64    ean13 isEan13 ❌ 13    isbn isIsbn ❌ 32    upc isUpc ❌ 12    mpn isMpn ❌ 40    quantity isInt ❌ 10    reference  ❌ 64    supplier_reference  ❌ 64    wholesale_price isPrice ❌ 27    price isNegativePrice ❌ 20    ecotax isPrice ❌ 20    weight isFloat ❌     unit_price_impact isNegativePrice ❌ 20    minimal_quantity isUnsignedId ✔️     low_stock_threshold isInt ❌     low_stock_alert isBool ❌     default_on isBool ❌     available_date isDateFormat ❌     associations  ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;combination\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;location\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/location\u0026gt; \u0026lt;ean13\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ean13\u0026gt; \u0026lt;isbn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/isbn\u0026gt; \u0026lt;upc\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/upc\u0026gt; \u0026lt;mpn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mpn\u0026gt; \u0026lt;quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;supplier_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/supplier_reference\u0026gt; \u0026lt;wholesale_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/wholesale_price\u0026gt; \u0026lt;price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price\u0026gt; \u0026lt;ecotax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ecotax\u0026gt; \u0026lt;weight\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/weight\u0026gt; \u0026lt;unit_price_impact\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unit_price_impact\u0026gt; \u0026lt;minimal_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/minimal_quantity\u0026gt; \u0026lt;low_stock_threshold\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/low_stock_threshold\u0026gt; \u0026lt;low_stock_alert\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/low_stock_alert\u0026gt; \u0026lt;default_on\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/default_on\u0026gt; \u0026lt;available_date\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/available_date\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;product_option_values\u0026gt; \u0026lt;product_option_value\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/product_option_value\u0026gt; \u0026lt;/product_option_values\u0026gt; \u0026lt;images\u0026gt; \u0026lt;image\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/image\u0026gt; \u0026lt;/images\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/combination\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/configurations/",
	"title": "Configurations",
	"tags": [],
	"description": "",
	"content": "Resources for Configurations Configuration    Name Format Required Max size Description     value  ❌     name isConfigName ✔️ 254    id_shop_group isUnsignedId ❌  Shop group ID   id_shop isUnsignedId ❌  Shop ID   date_add isDate ❌     date_upd isDate ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;value\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/contacts/",
	"title": "Contacts",
	"tags": [],
	"description": "",
	"content": "Resources for Contacts Contact    Name Format Required Max size Description     email isEmail ❌ 255    customer_service isBool ❌     name isGenericName ✔️ 255    description isCleanHtml ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;contact\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;email\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/email\u0026gt; \u0026lt;customer_service\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/customer_service\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/description\u0026gt; \u0026lt;/contact\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/content_management_system/",
	"title": "Content management system",
	"tags": [],
	"description": "",
	"content": "Resources for Content management system Content    Name Format Required Max size Description     id_cms_category isUnsignedInt ❌  CMS Category ID   position  ❌     indexation  ❌     active  ❌     meta_description isGenericName ❌ 512    meta_keywords isGenericName ❌ 255    meta_title isGenericName ✔️ 255    head_seo_title isGenericName ❌ 255    link_rewrite isLinkRewrite ✔️ 128    content isCleanHtml ❌ 3999999999999     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;content\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_cms_category\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_cms_category\u0026gt; \u0026lt;position\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/position\u0026gt; \u0026lt;indexation\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/indexation\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;meta_description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_description\u0026gt; \u0026lt;meta_keywords\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_keywords\u0026gt; \u0026lt;meta_title\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_title\u0026gt; \u0026lt;head_seo_title\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/head_seo_title\u0026gt; \u0026lt;link_rewrite\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/link_rewrite\u0026gt; \u0026lt;content\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/content\u0026gt; \u0026lt;/content\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/countries/",
	"title": "Countries",
	"tags": [],
	"description": "",
	"content": "Resources for Countries Country    Name Format Required Max size Description     id_zone isUnsignedId ✔️  Zone ID   id_currency isUnsignedId ❌  Currency ID   call_prefix isInt ❌     iso_code isLanguageIsoCode ✔️ 3    active isBool ❌     contains_states isBool ✔️     need_identification_number isBool ✔️     need_zip_code isBool ❌     zip_code_format isZipCodeFormat ❌     display_tax_label isBool ✔️     name isGenericName ✔️ 64     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;country\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_zone\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_zone\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;call_prefix\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/call_prefix\u0026gt; \u0026lt;iso_code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/iso_code\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;contains_states\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/contains_states\u0026gt; \u0026lt;need_identification_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/need_identification_number\u0026gt; \u0026lt;need_zip_code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/need_zip_code\u0026gt; \u0026lt;zip_code_format\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/zip_code_format\u0026gt; \u0026lt;display_tax_label\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/display_tax_label\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/country\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/country-choice/",
	"title": "CountryChoiceType",
	"tags": [],
	"description": "",
	"content": "CountryChoiceType CountryChoiceType is a child of ChoiceType. It is used to display countries selection box and by default comes with a list of countries from PrestaShop database.\nType options    Option Type Default value Description      choices array Array of all available countries Choice list that is passed to parent \u0026lsquo;choices\u0026rsquo;. Array should be formatted in name =\u0026gt; value pairs.     Required Javascript components None.\nCode example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\CountryChoiceType; use Symfony\\Component\\Form\\AbstractType; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder-\u0026gt;add(\u0026#39;country\u0026#39;, CountryChoiceType::class); } } Preview example   CountryChoiceType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/currencies/",
	"title": "Currencies",
	"tags": [],
	"description": "",
	"content": "Resources for Currencies Currency    Name Format Required Max size Not filterable Description     names  ❌      name isGenericName ✔️ 255 true    symbol  ❌ 255     iso_code isLanguageIsoCode ✔️ 3     numeric_iso_code isNumericIsoCode ❌ 3     precision isInt ❌      conversion_rate isUnsignedFloat ✔️      deleted isBool ❌      active isBool ❌      unofficial isBool ❌      modified isBool ❌      pattern  ❌ 255      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;currency\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;names\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/names\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;symbol\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/symbol\u0026gt; \u0026lt;iso_code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/iso_code\u0026gt; \u0026lt;numeric_iso_code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/numeric_iso_code\u0026gt; \u0026lt;precision\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/precision\u0026gt; \u0026lt;conversion_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/conversion_rate\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;unofficial\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unofficial\u0026gt; \u0026lt;modified\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/modified\u0026gt; \u0026lt;pattern\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/pattern\u0026gt; \u0026lt;/currency\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/customer_messages/",
	"title": "Customer messages",
	"tags": [],
	"description": "",
	"content": "Resources for Customer messages Customer_message    Name Format Required Max size Description     id_employee isUnsignedId ❌  Employee ID   id_customer_thread  ❌  Customer Thread ID   ip_address isIp2Long ❌ 15    message isCleanHtml ✔️ 16777216    file_name  ❌     user_agent  ❌     private  ❌     date_add isDate ❌     date_upd isDate ❌     read isBool ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customer_message\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_employee\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_employee\u0026gt; \u0026lt;id_customer_thread\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer_thread\u0026gt; \u0026lt;ip_address\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ip_address\u0026gt; \u0026lt;message\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/message\u0026gt; \u0026lt;file_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/file_name\u0026gt; \u0026lt;user_agent\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/user_agent\u0026gt; \u0026lt;private\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/private\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;read\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/read\u0026gt; \u0026lt;/customer_message\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/customer_threads/",
	"title": "Customer threads",
	"tags": [],
	"description": "",
	"content": "Resources for Customer threads Customer_thread    Name Format Required Max size Description     id_lang isUnsignedId ✔️  Lang ID   id_shop isUnsignedId ❌  Shop ID   id_customer isUnsignedId ❌  Customer ID   id_order isUnsignedId ❌  Order ID   id_product isUnsignedId ❌  Product ID   id_contact isUnsignedId ✔️  Contact ID   email isEmail ❌ 255    token isGenericName ✔️     status  ❌     date_add isDate ❌     date_upd isDate ❌     associations  ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customer_thread\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_lang\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_contact\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_contact\u0026gt; \u0026lt;email\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/email\u0026gt; \u0026lt;token\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/token\u0026gt; \u0026lt;status\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/status\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;customer_messages\u0026gt; \u0026lt;customer_message\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/customer_message\u0026gt; \u0026lt;/customer_messages\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/customer_thread\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/customers/",
	"title": "Customers",
	"tags": [],
	"description": "",
	"content": "Resources for Customers Customer    Name Format Required Writable Max size Description     id_default_group  ❌ ✔️  Default group ID   id_lang isUnsignedId ❌ ✔️  Lang ID   newsletter_date_add  ❌ ✔️     ip_registration_newsletter  ❌ ✔️     last_passwd_gen  ❌ ❌     secure_key isMd5 ❌ ❌     deleted isBool ❌ ✔️     passwd isPasswd ✔️ ✔️ 255    lastname isCustomerName ✔️ ✔️ 255    firstname isCustomerName ✔️ ✔️ 255    email isEmail ✔️ ✔️ 255    id_gender isUnsignedId ❌ ✔️  Gender ID   birthday isBirthDate ❌ ✔️     newsletter isBool ❌ ✔️     optin isBool ❌ ✔️     website isUrl ❌ ✔️     company isGenericName ❌ ✔️     siret isGenericName ❌ ✔️     ape isApe ❌ ✔️     outstanding_allow_amount isFloat ❌ ✔️     show_public_prices isBool ❌ ✔️     id_risk isUnsignedInt ❌ ✔️  Risk ID   max_payment_days isUnsignedInt ❌ ✔️     active isBool ❌ ✔️     note isCleanHtml ❌ ✔️ 65000    is_guest isBool ❌ ✔️     id_shop isUnsignedId ❌ ✔️  Shop ID   id_shop_group isUnsignedId ❌ ✔️  Shop group ID   date_add isDate ❌ ✔️     date_upd isDate ❌ ✔️     reset_password_token isSha1 ❌ ✔️ 40    reset_password_validity isDateOrNull ❌ ✔️     associations  ❌ ✔️      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customer\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_default_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_default_group\u0026gt; \u0026lt;id_lang\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;newsletter_date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/newsletter_date_add\u0026gt; \u0026lt;ip_registration_newsletter\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ip_registration_newsletter\u0026gt; \u0026lt;last_passwd_gen\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/last_passwd_gen\u0026gt; \u0026lt;secure_key\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/secure_key\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;passwd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/passwd\u0026gt; \u0026lt;lastname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;email\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/email\u0026gt; \u0026lt;id_gender\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_gender\u0026gt; \u0026lt;birthday\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/birthday\u0026gt; \u0026lt;newsletter\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/newsletter\u0026gt; \u0026lt;optin\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/optin\u0026gt; \u0026lt;website\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/website\u0026gt; \u0026lt;company\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/company\u0026gt; \u0026lt;siret\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/siret\u0026gt; \u0026lt;ape\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ape\u0026gt; \u0026lt;outstanding_allow_amount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/outstanding_allow_amount\u0026gt; \u0026lt;show_public_prices\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/show_public_prices\u0026gt; \u0026lt;id_risk\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_risk\u0026gt; \u0026lt;max_payment_days\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/max_payment_days\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;note\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/note\u0026gt; \u0026lt;is_guest\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_guest\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;reset_password_token\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reset_password_token\u0026gt; \u0026lt;reset_password_validity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reset_password_validity\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;groups\u0026gt; \u0026lt;group\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/groups\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/customer\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/customizations/",
	"title": "Customizations",
	"tags": [],
	"description": "",
	"content": "Resources for Customizations Customization    Name Format Required Description     id_address_delivery isUnsignedId ✔️ Delivery address ID   id_cart isUnsignedId ✔️ Cart ID   id_product isUnsignedId ✔️ Product ID   id_product_attribute isUnsignedId ✔️ Product attribute ID   quantity isUnsignedId ✔️    quantity_refunded isUnsignedId ✔️    quantity_returned isUnsignedId ✔️    in_cart isBool ✔️    associations  ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customization\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_address_delivery\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_address_delivery\u0026gt; \u0026lt;id_cart\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_cart\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity\u0026gt; \u0026lt;quantity_refunded\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity_refunded\u0026gt; \u0026lt;quantity_returned\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity_returned\u0026gt; \u0026lt;in_cart\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/in_cart\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;customized_data_text_fields\u0026gt; \u0026lt;customized_data_text_field\u0026gt; \u0026lt;id_customization_field\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customization_field\u0026gt; \u0026lt;value\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/customized_data_text_field\u0026gt; \u0026lt;/customized_data_text_fields\u0026gt; \u0026lt;customized_data_images\u0026gt; \u0026lt;customized_data_image\u0026gt; \u0026lt;id_customization_field\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customization_field\u0026gt; \u0026lt;value\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;/customized_data_image\u0026gt; \u0026lt;/customized_data_images\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/customization\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/date-picker/",
	"title": "DatePickerType",
	"tags": [],
	"description": "",
	"content": "DatePickerType DatePickerType creates a field with a date picker. It uses Javascript, but doesn\u0026rsquo;t require any specific components, as it\u0026rsquo;s already enabled globally.\nCustom options None.\nRequired Javascript components None.\nCode example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\DatePickerType; use Symfony\\Component\\Form\\AbstractType; use Symfony\\Component\\Form\\FormBuilderInterface; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;date_from\u0026#39;, DatePickerType::class) -\u0026gt;add(\u0026#39;date_to\u0026#39;, DatePickerType::class); } } Preview example   DatePickerType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/date-range/",
	"title": "DateRangeType",
	"tags": [],
	"description": "",
	"content": "DateRangeType DateRangeType combines two DatePickers to create date range picker. It uses Javascript, but doesn\u0026rsquo;t require any specific components, as it\u0026rsquo;s already enabled globally.\nCustom options None.\nRequired Javascript components None.\nCode example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\DateRangeType; use Symfony\\Component\\Form\\AbstractType; use Symfony\\Component\\Form\\FormBuilderInterface; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { // this will render a date range picker with 2 DatePickerTypes  // named \u0026#39;date_add_from\u0026#39; and \u0026#39;date_add_to\u0026#39;  $builder-\u0026gt;add(\u0026#39;date_add\u0026#39;, DateRangeType::class); } } Preview example   DateRangeType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/deliveries/",
	"title": "Deliveries",
	"tags": [],
	"description": "",
	"content": "Resources for Deliveries Delivery    Name Format Required Description     id_carrier isUnsignedId ✔️ Carrier ID   id_range_price isUnsignedId ✔️ Range price ID   id_range_weight isUnsignedId ✔️    id_zone isUnsignedId ✔️ Zone ID   id_shop  ❌ Shop ID   id_shop_group  ❌ Shop group ID   price isPrice ✔️     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;delivery\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_carrier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_carrier\u0026gt; \u0026lt;id_range_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_range_price\u0026gt; \u0026lt;id_range_weight\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_range_weight\u0026gt; \u0026lt;id_zone\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_zone\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price\u0026gt; \u0026lt;/delivery\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/distribution/",
	"title": "Distribution",
	"tags": [],
	"description": "",
	"content": "Distribution Now that you created an amazing theme, you probably want to release it. The following documentation will walk you through creating a zip and passing Addons validation.\nBut first, you need to test your theme!\n Testing   Exporting your theme   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/employees/",
	"title": "Employees",
	"tags": [],
	"description": "",
	"content": "Resources for Employees Employee    Name Format Required Writable Max size Description     id_lang isUnsignedInt ✔️ ✔️  Lang ID   last_passwd_gen  ❌ ❌     stats_date_from isDate ❌ ❌     stats_date_to isDate ❌ ❌     stats_compare_from isDate ❌ ❌     stats_compare_to isDate ❌ ❌     passwd isPasswd ✔️ ✔️ 255    lastname isName ✔️ ✔️ 255    firstname isName ✔️ ✔️ 255    email isEmail ✔️ ✔️ 255    active isBool ❌ ✔️     id_profile isInt ✔️ ✔️  Profile ID   bo_color isColor ❌ ✔️ 32    default_tab isInt ❌ ✔️     bo_theme isGenericName ❌ ✔️ 32    bo_css isGenericName ❌ ✔️ 64    bo_width isUnsignedInt ❌ ✔️     bo_menu isBool ❌ ✔️     stats_compare_option isUnsignedInt ❌ ✔️     preselect_date_range  ❌ ✔️ 32    id_last_order isUnsignedInt ❌ ✔️  Last order ID   id_last_customer_message isUnsignedInt ❌ ✔️  Last customer message ID   id_last_customer isUnsignedInt ❌ ✔️  Last customer ID   reset_password_token isSha1 ❌ ✔️ 40    reset_password_validity isDateOrNull ❌ ✔️     has_enabled_gravatar isBool ❌ ✔️      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_lang\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;last_passwd_gen\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/last_passwd_gen\u0026gt; \u0026lt;stats_date_from\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/stats_date_from\u0026gt; \u0026lt;stats_date_to\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/stats_date_to\u0026gt; \u0026lt;stats_compare_from\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/stats_compare_from\u0026gt; \u0026lt;stats_compare_to\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/stats_compare_to\u0026gt; \u0026lt;passwd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/passwd\u0026gt; \u0026lt;lastname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/lastname\u0026gt; \u0026lt;firstname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/firstname\u0026gt; \u0026lt;email\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/email\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;id_profile\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_profile\u0026gt; \u0026lt;bo_color\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/bo_color\u0026gt; \u0026lt;default_tab\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/default_tab\u0026gt; \u0026lt;bo_theme\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/bo_theme\u0026gt; \u0026lt;bo_css\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/bo_css\u0026gt; \u0026lt;bo_width\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/bo_width\u0026gt; \u0026lt;bo_menu\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/bo_menu\u0026gt; \u0026lt;stats_compare_option\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/stats_compare_option\u0026gt; \u0026lt;preselect_date_range\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/preselect_date_range\u0026gt; \u0026lt;id_last_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_last_order\u0026gt; \u0026lt;id_last_customer_message\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_last_customer_message\u0026gt; \u0026lt;id_last_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_last_customer\u0026gt; \u0026lt;reset_password_token\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reset_password_token\u0026gt; \u0026lt;reset_password_validity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reset_password_validity\u0026gt; \u0026lt;has_enabled_gravatar\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/has_enabled_gravatar\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/distribution/exporting/",
	"title": "Exporting your theme",
	"tags": [],
	"description": "",
	"content": "Exporting your theme Creating a valid ZIP file There is no longer any theme data in the database with PrestaShop 1.7. Hence a theme is installed as soon as it is on the disk.\nIf you want the theme to appears in the backoffice, it only needs to contain a config/theme.yml file. This will only display it, if you want to select it as your active theme, it has to be valid. Read \u0026ldquo;What makes a valid theme\u0026rdquo;.\nOnce it is active you can export your theme using the \u0026ldquo;Export current theme\u0026rdquo; button or use the command from your terminal.\nphp bin/console prestashop:theme:export THEME_DIRECTORY_NAME  Use php app/console instead of php bin/console for versions prior to 1.7.4  What is exported Exporting your theme using the button or the command line will export the following data:\n All theme files in directory Dependencies specified in theme.yml (See theme.yml doc) Theme translations  Distributing on Addons Please note that if you want to sell your theme on the PrestaShop Addons, there are a few rules to follow:\nLIST OF REQUIREMENTS\n Use BootStrap 4 alpha 4 \u0026ndash; follow the appropriate doc. Add your key \u0026ndash; follow the appropriate doc.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/formatted-textarea/",
	"title": "FormattedTextareaType",
	"tags": [],
	"description": "",
	"content": "FormattedTextareaType Enables TinyMCE text editor on TextareaType.\nType options    Option Type Default value Description     autoload bool true Whether to automatically load TinyMCE editor, or no.   limit int 21844 Limit of characters in text field. By default value equals to max size of UTF-8 content available in MySQL text column    Required Javascript components None.\nCode example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\FormattedTextareaType; class CustomType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add( \u0026#39;test_text_field\u0026#39;, FormattedTextareaType::class ) ; } } Preview example   FormattedTextareaType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/shortcodes/funcdef/",
	"title": "Function definition",
	"tags": [],
	"description": "",
	"content": "Function definition To render a list of function definitions, use funcdef in combination with Markdown definition list:\n{{% funcdef %}} __construct($id = NULL, $id_lang = NULL) : Build object. add($autodate = true, $nullValues = false) : Save current object to database (add or update). {{% /funcdef %}} Rendered result:\n __construct($id = NULL, $id_lang = NULL) Build object. add($autodate = true, $nullValues = false) Save current object to database (add or update).    Be aware that you need to leave at least one trailing space after each : for the markup to be correctly interpreted as a definition list. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/generatable-text/",
	"title": "GeneratableTextType",
	"tags": [],
	"description": "",
	"content": "GeneratableTextType Extends TextType with additional button which allows to generate random value for input.\nType options    Option Type Default value Description     generated_value_length int 32 The length of value to be generated    Required Javascript components    Component Description     ../admin-dev/themes/new-theme/js/components/form/generatable-input.js Generates a random value for input.    Code example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\GeneratableTextType; class CustomType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;key\u0026#39;, GeneratableTextType::class, [ \u0026#39;generated_value_length\u0026#39; =\u0026gt; 16, ]) ; } } Then in Javascript you have to enable GeneratableInput component.\nimport GeneratableInput from \u0026#34;admin-dev/themes/new-theme/js/components/generatable-input\u0026#34;; // initiate the component const generatableInput = new GeneratableInput(); // attach the component to button which should be targeted to generate random value on click. generatableInput.attachOn(\u0026#39;.js-generator-btn\u0026#39;); // note that the button is required to have 2 data-* attributes to define input target and value length. // for example:  * \u0026lt;button class=\u0026#34;js-generator-btn\u0026#34; * data-target-input-id=\u0026#34;my-input-id\u0026#34; * data-generated-value-length=\u0026#34;16\u0026#34; * \u0026gt; Generate! * \u0026lt;/button\u0026gt; Preview example   GeneratableTextType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/good-practices/",
	"title": "Good practices for developing modules",
	"tags": [],
	"description": "",
	"content": "Good practices for developing modules DOs and DON\u0026rsquo;Ts Do  Add a link to your documentation included in your ZIP File and to your support page on Addons in the module interface. Follow our Coding Standards Create your own database tables, do not alter PrestaShop\u0026rsquo;s. Develop your module in English, then use PrestaShop translation system to translate your module. Go through directories using PrestaShop constants like: _PS_CONFIG_DIR_ . '/config.inc.php' CREATE TABLE SQL statements must be followed by IF NOT EXISTS to avoid SQL errors DROP TABLE SQL statements must be followed by IF EXISTS to avoid SQL errors  Don\u0026rsquo;t  Don\u0026rsquo;t insert external links into your module code or module documentation. Don\u0026rsquo;t provide your personal contact details in your module or module documentation. Don\u0026rsquo;t send your customers to your own support/ticket management platform. Don\u0026rsquo;t use external ajax files to perform ajax tasks. Don\u0026rsquo;t go through directories using code and variables like: dirname(__FILE__).'/../../config/config.inc.php' Don\u0026rsquo;t edit the SQL structure of PrestaShop tables. Don\u0026rsquo;t obfuscate your code, making it not human readable.  A few recommendations for your modules   Prefix what belongs to you:\n modules configuration parameters (ps_configuration) Smarty variables tables CSS classes    Consider deleting your configurations, tables, admin tabs, and all other entities unique to your product during the uninstallation of your modules.\n  You shouldn\u0026rsquo;t use HTML code in your PHP code. Here are alternatives to separate the view into your code:\n display content with Smarty use helpers for your configuration pages include PrestUI, a graphic library created by the community for your configuration pages.    We recommend you to make your module interface matches the PrestaShop\u0026rsquo;s UI kit.\n  For modules compatible before the 1.7 PrestaShop version, the minimal compatibility has to be PHP 5.3. You will be then able to use, for example, namespaces.\n  If your module allows the upload of a file, check the type of the file to make sure you avoid security issues. Here are more information for the function mime_content_type().\n  When your module has forms, you should:\n show a confirmation message if everything went fine or an error message if it did not. make sure information entered by customers are correct. If you ask a sum, it has to be only numbers. More information about the Validate class of PrestaShop here.    Consider carefully casting your variables and use pSQL/bqSQL in the SQL requests to avoid any injections (read Best Practices of the Db Class). Make sure your files are properly protected (especially if your module uses a cron for example) to avoid anyone being able to execute them. As a result, you are required to use a token!\n  The use of overrides is permitted, however if we decide that too many (2 / 3 max) have been used and/or the modifications are too dangerous, we will refuse your module. If you\u0026rsquo;re unsure, don\u0026rsquo;t hesitate to get in touch.\n  If you need to load a .js or .tpl (containing JavaScript) to the backoffice, put restrictions in place on your hooks (hookbackofficeheader/top/footer)! Specific examples: if your JS only applies to your module\u0026rsquo;s configuration page, use:\n\u0026lt;?php if (Tools::getValue(\u0026#39;configure\u0026#39;) === $this-\u0026gt;name) { // code }   A merchant is likely to have a shop running on a different shop than yours. In case a module is using PHP extensions not installed by default by PHP, add a preliminary check before using them (I.e with extension_loaded). This prevents fatal errors to be thrown on shops on which these extensions aren’t enabled.\n  A few recommendations for your themes  PrestaShop does not yet feature a \u0026ldquo;theme validator\u0026rdquo;. However, each of the modules present in your theme must be tested via our Validator. Don\u0026rsquo;t remove the default hooks in PrestaShop, whether via PHP or in the theme! You will risk preventing a third party module from working properly. Prefix what belongs to you:  modules image standards   You should not have HTML in your PHP code; use Smarty or helper classes for views. We do not accept themes using the PrestaShop base theme to which only color, font and image changes etc. have been made. You should create a unique theme! :-) You should keep the store logo by default in your theme\u0026rsquo;s zip, in the header and footer of your theme.  A few recommendations for your email templates\n Use our official SDK to develop your emails: Make sure to submit on Addons a valid zip, built with the SDK. Test your emails with the official module.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/groups/",
	"title": "Groups",
	"tags": [],
	"description": "",
	"content": "Resources for Groups Group    Name Format Required Max size Description     reduction isFloat ❌     price_display_method isPriceDisplayMethod ✔️     show_prices isBool ❌     date_add isDate ❌     date_upd isDate ❌     name isGenericName ✔️ 32     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;group\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;reduction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction\u0026gt; \u0026lt;price_display_method\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price_display_method\u0026gt; \u0026lt;show_prices\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/show_prices\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/group\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/guests/",
	"title": "Guests",
	"tags": [],
	"description": "",
	"content": "Resources for Guests Guest    Name Format Required Max size Description     id_customer isUnsignedId ❌  Customer ID   id_operating_system isUnsignedId ❌  Operating system ID   id_web_browser isUnsignedId ❌  Web browser ID   javascript isBool ❌     screen_resolution_x isInt ❌     screen_resolution_y isInt ❌     screen_color isInt ❌     sun_java isBool ❌     adobe_flash isBool ❌     adobe_director isBool ❌     apple_quicktime isBool ❌     real_player isBool ❌     windows_media isBool ❌     accept_language isGenericName ❌ 8    mobile_theme isBool ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;guest\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_operating_system\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_operating_system\u0026gt; \u0026lt;id_web_browser\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_web_browser\u0026gt; \u0026lt;javascript\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/javascript\u0026gt; \u0026lt;screen_resolution_x\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/screen_resolution_x\u0026gt; \u0026lt;screen_resolution_y\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/screen_resolution_y\u0026gt; \u0026lt;screen_color\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/screen_color\u0026gt; \u0026lt;sun_java\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/sun_java\u0026gt; \u0026lt;adobe_flash\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/adobe_flash\u0026gt; \u0026lt;adobe_director\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/adobe_director\u0026gt; \u0026lt;apple_quicktime\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/apple_quicktime\u0026gt; \u0026lt;real_player\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/real_player\u0026gt; \u0026lt;windows_media\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/windows_media\u0026gt; \u0026lt;accept_language\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/accept_language\u0026gt; \u0026lt;mobile_theme\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mobile_theme\u0026gt; \u0026lt;/guest\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "PrestaShop Developer Documentation PrestaShop is a free and Open Source e-commerce web platform, committed to providing the best shopping cart experience for both merchants and customers. It is written in PHP, is highly customizable, supports all the major payment services, is translated in many languages and localized for many countries, has a fully responsive design (both front and back office), and more! Learn more about PrestaShop.\nThis site covers the technical aspects of PrestaShop and it\u0026rsquo;s tailored for theme, module and core developers.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/maintainers-guide/how-to-become-a-maintainer/",
	"title": "How to become a maintainer",
	"tags": [],
	"description": "",
	"content": "How to become a maintainer In the PrestaShop project, maintainers are contributors with merge rights.\nThe maintainer status is a position of great power, but it also carries great responsibility. As gatekeepers to the project\u0026rsquo;s code, maintainers are ultimately responsible for every contribution that is included in the project.\nRequirements to become a maintainer  Active participation in the project  Display a record of several accepted, quality Pull Requests having received little or no objections from maintainers. Display a record of participation in several issues and/or in technical discussions (e.g. Pull Request reviews). Be active in the project’s Slack chat. Real interest in getting involved.   Demonstrate a good level of technical knowledge  Justify a good level of technical skills (SOLID, readable, well-documented, stable, testable code) – in discussions and in code contributions. Display a good understanding of the project, its architecture, its ecosystem, its constraints (transparency, license, backwards compatibility, dependencies, expected behavior\u0026hellip;) Be competent with git and the GitHub workflow (use a fork, be able to rebase, be able to fetch and update a remote branch\u0026hellip;)   Cultural convergence  Respect the Code of Conduct; behave respectfully and in good faith. Agree to work together with the rest of the maintainer team towards main goals (see The Future Architecture): migration to Symfony, adoption of VueJS \u0026hellip;    Requirements to continue being a maintainer All the above, plus:\n Continuous participation and involvement  Actively and responsibly review Pull Requests. Engage and participate in technical discussions with maintainers and the community on Slack. Mentor new contributors.   Responsible behavior  Respect \u0026amp; enforce the project’s quality standards and contribution guidelines. Respect \u0026amp; enforce the project’s issue and code review workflow. Respect \u0026amp; enforce the project’s release lifecycle (feature freeze, RC, minor and patch release scope, module releases\u0026hellip;) Respect \u0026amp; enforce convergence with the project’s goals. Put the best interest of the project before one’s own (in case of conflict of interests).    How to apply to be a maintainer  Open an issue on the open source repository explaining why you apply to become a maintainer, and on what part of the project (Core or module/subproject). Discuss with current maintainers on this issue; particularly, this will be the time for maintainers to analyze the candidate\u0026rsquo;s motivation and skills on the different parts of the project that they applied for. Once all questions have been answered, current maintainers vote. If the qualified majority of two-thirds positive votes is achieved, the new maintainer is approved.  Upon approval, new maintainer is granted full maintainer rights and accesses for a 90-day trial period. This period aims to provide both the maintainer team and the new maintainer a better understanding of this new arrival and to validate whether expectations meet reality. Both maintainer team or new maintainer can express their wish for this situation to end before the 90-day trial period, revoking the maintainer status.\nAt the end of the 90-day trial period, the maintainer is confirmed in his position.\nHow to lose the maintainer status A project maintainer can be revoked for any of the following reasons:\n Refusal to follow the rules and policies stated in this document. Lack of activity for the past six months. Willful negligence or intent to harm the PrestaShop project. On their demand, for personal reasons.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/faq/i-need-help/",
	"title": "I need help",
	"tags": [],
	"description": "",
	"content": "I need help If you have questions or need help, please do not open a GitHub issue as we use GitHub issues only to discuss about bugs and new features for the PrestaShop project.\nThe very best place to start looking for an answer is:\n Here (the Developer documentation), if you are a developer The User\u0026rsquo;s guide if you are a user  If you are a developer and you think there is a missing item in the Developer documentation, consider creating an issue on the Documentation Repository. This will help us discuss what to do to improve it. If you need help with your shop or third-party modules, please have a look at the PrestaShop Company\u0026rsquo;s support plans.\nIf you have questions about a PrestaShop module or theme you have downloaded or bought on the PrestaShop Addons Marketplace, you can contact its developers through the link provided on their Marketplace page.\nFinally, you can also ask for help from other PrestaShop users:\n on the Community chat (Slack) on the Community forums on Stack Overflow  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/image_types/",
	"title": "Image types",
	"tags": [],
	"description": "",
	"content": "Resources for Image types Image_type    Name Format Required Max size Description     name isImageTypeName ✔️ 64    width isImageSize ✔️     height isImageSize ✔️     categories isBool ❌     products isBool ❌     manufacturers isBool ❌     suppliers isBool ❌     stores isBool ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;image_type\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;width\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/width\u0026gt; \u0026lt;height\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/height\u0026gt; \u0026lt;categories\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/categories\u0026gt; \u0026lt;products\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/products\u0026gt; \u0026lt;manufacturers\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/manufacturers\u0026gt; \u0026lt;suppliers\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/suppliers\u0026gt; \u0026lt;stores\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/stores\u0026gt; \u0026lt;/image_type\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/integer-min-max-filter/",
	"title": "IntegerMinMaxFilterType",
	"tags": [],
	"description": "",
	"content": "IntegerMinMaxFilterType The IntegerMinMaxFilterType represents two IntegerType fields - one holds minimum value of integer type and other holds maximum value. IntegerType is one of the native symfony types.\nType options    Option Type Default Description     min_field_options array array ( \u0026lsquo;attr\u0026rsquo; =\u0026gt; array ( \u0026lsquo;placeholder\u0026rsquo; =\u0026gt; $this-\u0026gt;trans(\u0026lsquo;Min\u0026rsquo;, [], \u0026lsquo;Admin.Global\u0026rsquo;), \u0026lsquo;min\u0026rsquo; =\u0026gt; 0, \u0026lsquo;step\u0026rsquo; =\u0026gt; 1, ), ) Accepts all possible values that IntegerType has*   max_field_options array array ( \u0026lsquo;attr\u0026rsquo; =\u0026gt; array ( \u0026lsquo;placeholder\u0026rsquo; =\u0026gt; $this-\u0026gt;trans(\u0026lsquo;Max\u0026rsquo;, [], \u0026lsquo;Admin.Global\u0026rsquo;), \u0026lsquo;min\u0026rsquo; =\u0026gt; 0, \u0026lsquo;step\u0026rsquo; =\u0026gt; 1, ), ) Accepts all possible values that IntegerType has*    * - this type overrides step attribute to 1 due to not allow adding floating point numbers as available option.\nRequired Javascript components None.\nPreview example   IntegerMinMaxFilterType rendered in grid   This type is built for grid filters usage but can be used in forms as well.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/creation/external-services/",
	"title": "Interacting with APIs",
	"tags": [],
	"description": "",
	"content": "Interacting with APIs There are different options to transfer data between your shop and any external service. The method you choose will depend on the usecase:\n if data must be pulled or pushed to the shop, if one specific application (the shop or an external service) must initiate the calls, if there are constraints on the implementation (i.e a cron job scheduler is required).  Requests to a shop You may retrieve and update data from a shop using different methods:\nThe native webservice The webservice is a REST API allowing you to interact with most of the database tables used by the core. It uses Basic access authentication to allow requests.\nResources:\n About the webservice Enable \u0026amp; add users to the webservice  Adding a module ObjectModel to the list of resources available\nThe hook addWebserviceResources must be registered by your module.\nThen an array containing all the ressources (= Object Model subclasses) you want to add should be returned. For instance, in the module blockreassurance we have an ObjectModel class, called reassuranceClass. If we wanted to make it available in the webservice, it would look like this:\n\u0026lt;?php /** * Add an entity in the Webservice * * @param array $params All existing resources from the core * @return array New resources */ public function hookAddWebserviceResources($params) { return array( \u0026#39;reassurance\u0026#39; =\u0026gt; array( \u0026#39;description\u0026#39; =\u0026gt; \u0026#39;Module Reassurance example\u0026#39;, \u0026#39;class\u0026#39; =\u0026gt; \u0026#39;reassuranceClass\u0026#39;, \u0026#39;forbidden_method\u0026#39; =\u0026gt; array(\u0026#39;PUT\u0026#39;, \u0026#39;POST\u0026#39;, \u0026#39;DELETE\u0026#39;)), ); } This will add the resource reassurance available into the permissions list, based on the key.\nModule controllers As the webservice is only an interface to get and update objects on the database, it does not allow to run complex actions. Module controller may be implemented to allow any external service to reach your shop, then trigger specific actions or retrieve content.\nYou should implement a method that filters non-authenticated calls. This prevents guests accessing private content, or trigger actions on your behalf. This can be done by generating your own token and checking it everytime the controller is called. Tools::encrypt($token) may be useful.\nResources:\n About the controllers Example with Faceted Search module (Outside a controller)  Requests from a shop HTTP requests can be triggered from a shop to an external service.\nSeveral methods allows requests to be sent (in order of preference):\n Guzzle. The version 5 is included from PrestaShop 1.7.0  , but can be included in your module as well for older PS versions.  Loading in memory another version of guzzle in the same namespace will trigger errors on the shop. Example with PS Checkout module: Inclusion in composer.json \u0026amp; implementation   \\Tools::file_get_contents(\u0026hellip;)  Will rely on cURL or fopen(), depending on what is available on the shop. Exists from PrestaShop 1.4     cURL  cURL is mandatory for PrestaShop 1.7  . For older versions, the extension must be checked first to avoid fatal errors.    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/ip-address/",
	"title": "IpAddressType",
	"tags": [],
	"description": "",
	"content": "IpAddressType Extends TextType with additional button which inserts current device ip address to input.\nType options None.\nRequired Javascript components    Component Description     ../admin-dev/themes/new-theme/js/maintenance-page/ip-input.js Inserts current device ip address to input.    Code example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\IpAddressType; class CustomType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add( \u0026#39;my_ip\u0026#39;, IpAddressType::class ) ; } } Then in Javascript you have to enable IpInput component.\nimport IpInput from \u0026#39;admin-dev/themes/new-theme/js/maintenance-page/ip-input\u0026#39;; // initialize the component IpInput.init(); Preview example   IpAddressType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/languages/",
	"title": "Languages",
	"tags": [],
	"description": "",
	"content": "Resources for Languages Language    Name Format Required Max size Description     name isGenericName ✔️ 32    iso_code isLanguageIsoCode ✔️ 2    locale isLocale ❌ 5    language_code isLanguageCode ❌ 5    active isBool ❌     is_rtl isBool ❌     date_format_lite isPhpDateFormat ✔️ 32    date_format_full isPhpDateFormat ✔️ 32     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;language\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;iso_code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/iso_code\u0026gt; \u0026lt;locale\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/locale\u0026gt; \u0026lt;language_code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language_code\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;is_rtl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_rtl\u0026gt; \u0026lt;date_format_lite\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_format_lite\u0026gt; \u0026lt;date_format_full\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_format_full\u0026gt; \u0026lt;/language\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/architecture/legacy/legacy-controllers/",
	"title": "Legacy Controllers",
	"tags": [],
	"description": "",
	"content": "Legacy Controllers Legacy controllers are based on PrestaShop\u0026rsquo;s custom framework and go a long way back. All front controllers and all Admin controllers that haven\u0026rsquo;t been migrated to Symfony yet are based on this.\nExecution flow Legacy controllers work best when a Controller performs a single action, for example, render a page. The process has been divided in several methods, which simplifies customization via method override.\n  Execution flow of legacy controllers   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/maintainers-guide/license/",
	"title": "License &amp; license compatibility",
	"tags": [],
	"description": "",
	"content": "License \u0026amp; license compatibility In order to protect PrestaShop users from patent trolls, it\u0026rsquo;s important to make sure that all content included and distributed with PrestaShop is covered under homogeneous license terms.\nThe PrestaShop Core software is released under the OSL 3.0 license. Therefore, all original work included in PrestaShop itself must be released under that license as well.\nPrestaShop\u0026rsquo;s Native Modules and the Classic theme are released under the AFL 3.0 license. Similarly, this license applies to all original work contributed to these projects.\nThird party content Third party content may be included in PrestaShop as long as its original authors have released it under a compatible license. If the proposed content is available with a compliant license, a last check must be done to make sure that there is no additional clause that would introduce a restriction of use.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/mail-templates/",
	"title": "Mail Templates",
	"tags": [],
	"description": "",
	"content": "Mail Templates  PrestaShop 1.7.6 introduced Mail themes. This new mail template management feature provides new and powerful ways for Modules to interact with mail templates.\nTutorials  How to extend a layout in a theme from a module   How to add a layout in a theme from a module   How to add an email theme from a module   How to add layout variables from a module   How to apply a transformation from a module   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/maintainers-guide/",
	"title": "Maintainer&#39;s guide",
	"tags": [],
	"description": "",
	"content": "Maintainer\u0026rsquo;s guide This section describes processes and guidelines for project maintainers.\n How to become a maintainer   License \u0026amp; license compatibility   Processes   Reviewing Pull Requests   Summary of how GitHub Issues and Pull Requests are processed   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/manufacturers/",
	"title": "Manufacturers",
	"tags": [],
	"description": "",
	"content": "Resources for Manufacturers Manufacturer    Name Format Required Writable Max size Not filterable Description     active  ❌ ✔️      link_rewrite  ❌ ❌  true    name isCatalogName ✔️ ✔️ 64     date_add  ❌ ✔️      date_upd  ❌ ✔️      description isCleanHtml ❌ ✔️      short_description isCleanHtml ❌ ✔️      meta_title isGenericName ❌ ✔️ 255     meta_description isGenericName ❌ ✔️ 512     meta_keywords isGenericName ❌ ✔️      associations  ❌ ✔️       Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;manufacturer\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/description\u0026gt; \u0026lt;short_description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/short_description\u0026gt; \u0026lt;meta_title\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_title\u0026gt; \u0026lt;meta_description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_description\u0026gt; \u0026lt;meta_keywords\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_keywords\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;addresses\u0026gt; \u0026lt;address\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/address\u0026gt; \u0026lt;/addresses\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/manufacturer\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/material-choice-table/",
	"title": "MaterialChoiceTableType",
	"tags": [],
	"description": "",
	"content": "MaterialChoiceTableType MaterialChoiceTableType renders checkbox choices using table layout. It requires Javascript component to work as expected.\nType options    Option Type Default value Description     expanded bool true Whether the table should be expanded by default or not   multiple bool true Whether to enable multiple checkboxes selection or no    Required Javascript components    Component Description     ../admin-dev/themes/new-theme/js/components/choice-table.js Manages selection of all checkboxes    Code example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\MaterialChoiceTableType; use Symfony\\Component\\Form\\AbstractType; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;group_access\u0026#39;, MaterialChoiceTableType::class) ; } } Then in Javascript you have to enable ChoiceTable component.\nimport ChoiceTable from \u0026#39;admin-dev/themes/new-theme/js/components/choice-table\u0026#39;; // initiate the component. new ChoiceTable(); Preview example   MaterialChoiceTableType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/material-choice-tree/",
	"title": "MaterialChoiceTreeType",
	"tags": [],
	"description": "",
	"content": "MaterialChoiceTreeType MaterialChoiceTreeType renders checkbox choices using choices tree layout. Requires Javascript component to work as expected.\nType options    Option Type Default value Description     choices_tree array [] The choices array to select from   choice_label string \u0026lsquo;name\u0026rsquo; The key in options array to target when getting label for checkbox   choice_value string \u0026lsquo;id\u0026rsquo; The key in options array to target when getting value for checkbox   choice_children string \u0026lsquo;children\u0026rsquo; The key in options array to target when getting the child for checkbox   multiple bool true Whether to enable multiple checkboxes selection or no   disabled_values array [] Array of ids to disable in choices tree    Required Javascript components    Component Description     ../admin-dev/themes/new-theme/js/components/form/choice-tree.js Manages UI interactions: expanding and collapsing tree, auto-checking child checkbox, enabling and disabling inputs.    Code example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\MaterialChoiceTreeType; use Symfony\\Component\\Form\\AbstractType; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;categories\u0026#39;, MaterialChoiceTreeType::class, [ \u0026#39;choices_tree\u0026#39; =\u0026gt; [ \u0026#39;id\u0026#39; =\u0026gt; 1, // choice_value option refers this key  \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Home\u0026#39;, //choice_label option refers this key  \u0026#39;children\u0026#39; =\u0026gt; [ // choice_children refers this key  \u0026#39;id\u0026#39; =\u0026gt; 2, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Example\u0026#39;, \u0026#39;children\u0026#39; =\u0026gt; [ \u0026#39;id\u0026#39; =\u0026gt; 3, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Example child\u0026#39;, ], ], ], ]) ; } } Then in Javascript you have to enable ChoiceTree component.\nimport ChoiceTree from \u0026#39;admin-dev/themes/new-theme/js/components/form/choice-tree\u0026#39;; // initiate the component by providing your tree selector new ChoiceTree(\u0026#39;.js-tree-selector-example\u0026#39;); // you can enable auto checking children elements ChoiceTree.enableAutoCheckChildren(); // you can also enable or disable all inputs ChoiceTree.enableAllInputs(); //enable ChoiceTree.disableAllInputs(); //disable  Preview example   MaterialChoiceTreeType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/material-multiple-choice-table/",
	"title": "MaterialMultipleChoiceTableType",
	"tags": [],
	"description": "",
	"content": "MaterialMultipleChoiceTableType MaterialMultipleChoiceTableType renders checkbox choices using choices table layout. It is similar to MaterialChoiceTableType, but it allows using multiple checkboxes per row. Requires Javascript component to work as expected.\nType options    Option Type Default value Description     multiple_choices array none Each item of array should contain a name which represents column header and valid options for ChoiceType including the \u0026lsquo;choices\u0026rsquo; array which values are rendered as column selections   choices array none The \u0026lsquo;choices\u0026rsquo; array for ChoiceType. These values represents the first column of the table.   scrollable bool true Whether to make table scrollable or not   headers_to_disable array [] Array of header names to be disabled if needed    Required Javascript components    Component Description     ../admin-dev/themes/new-theme/js/components/multiple-choice-table.js Manages selection of all checkboxes    Code example \u0026lt;?php // path/to/your/CustomType.php  use PrestaShopBundle\\Form\\Admin\\Type\\MaterialMultipleChoiceTableType; use Symfony\\Component\\Form\\AbstractType; class CustomType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;group_restrictions\u0026#39;, MaterialMultipleChoiceTableType::class, [ \u0026#39;label\u0026#39; =\u0026gt; \u0026#39;Group restrictions\u0026#39;, \u0026#39;choices\u0026#39; =\u0026gt; [ //these choices are rendered as the first column of the table that represents a row name  \u0026#39;Visitor\u0026#39; =\u0026gt; 1, \u0026#39;Guest\u0026#39; =\u0026gt; 2, \u0026#39;Customer\u0026#39; =\u0026gt; 3, ], \u0026#39;multiple_choices\u0026#39; =\u0026gt; [ //This will be rendered as a first selections column  [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;bank_transfer\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; \u0026#39;Bank transfer\u0026#39;, \u0026#39;multiple\u0026#39; =\u0026gt; true, \u0026#39;choices\u0026#39; =\u0026gt; [ //choice list of this column  \u0026#39;Visitor\u0026#39; =\u0026gt; 1, \u0026#39;Guest\u0026#39; =\u0026gt; 2, \u0026#39;Customer\u0026#39; =\u0026gt; 3, ], ], //This will be rendered as second selections column  [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;check_payment\u0026#39;, \u0026#39;label\u0026#39; =\u0026gt; \u0026#39;Payments by check\u0026#39;, \u0026#39;multiple\u0026#39; =\u0026gt; true, \u0026#39;choices\u0026#39; =\u0026gt; [ //choice list of this column  \u0026#39;Visitor\u0026#39; =\u0026gt; 1, \u0026#39;Guest\u0026#39; =\u0026gt; 2, \u0026#39;Customer\u0026#39; =\u0026gt; 3, ], ] ], ]) ; } } Then in Javascript you have to enable MultipleChoiceTable component.\nimport MultipleChoiceTable from \u0026#39;admin-dev/themes/new-theme/js/components/multiple-choice-table\u0026#39;; // enable the component new MultipleChoiceTable(); Preview example   MaterialMultipleChoiceTableType rendered in form example   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/messages/",
	"title": "Messages",
	"tags": [],
	"description": "",
	"content": "Resources for Messages Message    Name Format Required Max size Description     id_cart isUnsignedId ❌  Cart ID   id_order isUnsignedId ❌  Order ID   id_customer isUnsignedId ❌  Customer ID   id_employee isUnsignedId ❌  Employee ID   message isCleanHtml ✔️ 1600    private isBool ❌     date_add isDate ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;message\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_cart\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_cart\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_employee\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_employee\u0026gt; \u0026lt;message\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/message\u0026gt; \u0026lt;private\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/private\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/message\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/migration-from-16/",
	"title": "Migrating from PrestaShop 1.6",
	"tags": [],
	"description": "",
	"content": "Migrating from PrestaShop 1.6 PrestaShop 1.7 introduces a totally reworked theme system from version 1.6, with the goal of making PrestaShop upgrades easier, and making it easier and faster to create a brand new theme.\nThe huge change to the theme system means that there is no easy way to migrate your PrestaShop 1.6 theme to PrestaShop 1.7.\nWhen using the automatic upgrade from PrestaShop 1.6 to 1.7, your theme will be switched to the new default theme, called \u0026ldquo;Classic\u0026rdquo;. We therefore recommend working on your 1.7 theme before you make the switch to PrestaShop 1.7.\nSome features have been dropped with PrestaShop 1.7. They were either already deprecated in 1.6, or proved too problematic to maintain.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/money-with-suffix/",
	"title": "MoneyWithSuffixType",
	"tags": [],
	"description": "",
	"content": "MoneyWithSuffixType The MoneyWithSuffixType represents input with currency suffix.\nType options    Option Type Default Description     currency string EUR Currency ISO code   suffix string Empty string Suffix text    Required Javascript components None.\nCode example Add MoneyWithSuffixType to your form.\n\u0026lt;?php use Symfony\\Component\\Form\\AbstractType; use PrestaShopBundle\\Form\\Admin\\Type\\MoneyWithSuffixType; class SomeType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;price\u0026#39;, MoneyWithSuffixType::class, [ \u0026#39;currency\u0026#39; =\u0026gt; \u0026#39;EUR\u0026#39;, \u0026#39;suffix\u0026#39; =\u0026gt; \u0026#39;(tax excl.)\u0026#39;, ]) ; } } Preview example   MoneyWithSuffixType rendered in form   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/translation/native-module-translation/",
	"title": "Native module translation",
	"tags": [],
	"description": "",
	"content": "Native module translation The module\u0026rsquo;s text strings are written in English, but you might want French, Spanish or Polish shop owners to use your module too. You therefore have to translate those strings into those languages, both the front office and the back office strings. Ideally, you should translate your module in all the languages that are installed on your shop. This could be a tedious task, but a whole system has been put in place in order to help you out.\nIn short, PrestaShop 1.7 implements Symfony\u0026rsquo;s translation system, through the use of the trans() method, used to encapsulate the strings to be translated. This method is applied in a different way depending of the file type.\nThis system only works with native modules.\nSee here for 3rd party modules.\n The process of preparing text strings for translation is called internationalization, or i18n.\nInternationalizing strings in Smarty (.tpl) files Strings in TPL files will need to be turned into dynamic content using the {l} function call, which Smarty will replace by the translation for the chosen language.\nPrestaShop 1.6 used to require the mod parameter for context. PrestaShop 1.7 now requires that parameter to be \u0026ldquo;d\u0026rdquo;, and to use the same domain as all the other strings in the module.\nIn our sample module, the mymodule.tpl file\u0026hellip;\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{$base_dir}modules/mymodule/mymodule_page.php\u0026#34; title=\u0026#34;Click this link\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026#34;mymodule_block_left\u0026#34; class=\u0026#34;block\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;{l s=\u0026#39;Welcome!\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;block_content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Hello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{$my_module_link}\u0026#34; title=\u0026#34;Click this link\u0026#34;\u0026gt;Click me!\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt; \u0026hellip;becomes:\n\u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{$base_dir}modules/mymodule/mymodule_page.php\u0026#34; title=\u0026#34;{l s=\u0026#39;Click this link\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}\u0026#34;\u0026gt;{l s=\u0026#39;Click me!\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;!-- Block mymodule --\u0026gt; \u0026lt;div id=\u0026#34;mymodule_block_left\u0026#34; class=\u0026#34;block\u0026#34;\u0026gt; \u0026lt;h4\u0026gt;{l s=\u0026#39;Welcome!\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}\u0026lt;/h4\u0026gt; \u0026lt;div class=\u0026#34;block_content\u0026#34;\u0026gt; \u0026lt;p\u0026gt; {if !isset($my_module_name) || !$my_module_name} {capture name=\u0026#39;my_module_tempvar\u0026#39;}{l s=\u0026#39;World\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}{/capture} {assign var=\u0026#39;my_module_name\u0026#39; value=$smarty.capture.my_module_tempvar} {/if} {l s=\u0026#39;Hello %1$s!\u0026#39; sprintf=$my_module_name d=\u0026#39;Modules.MyModule\u0026#39;} \u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{$my_module_link}\u0026#34; title=\u0026#34;{l s=\u0026#39;Click this link\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}\u0026#34;\u0026gt;{l s=\u0026#39;Click me!\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- /Block mymodule --\u0026gt; \u0026hellip;and the display.tpl file:\nWelcome to this page! \u0026hellip;becomes:\n{l s=\u0026#39;Welcome to this page!\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;} Notice that we always use the d parameter. This is used by PrestaShop to assert which module the string belongs to. The translation tool needs it in order to match the string to translate with its translation. This parameter is mandatory for module translation.\nTranslating complex code As we can see, the basis of template file translation is to enclose them in the {l s='The string' mod='name_of_the_module'}. The changes in display.tpl and in mymodule.tpl\u0026rsquo;s link and title texts are thus easy to understand. But added a trickier block of code for the \u0026ldquo;Hello World!\u0026rdquo; string: an if/else/then clause, and a text variable. Let\u0026rsquo;s explore this code:\nHere is the original code:\nHello, {if isset($my_module_name) \u0026amp;\u0026amp; $my_module_name} {$my_module_name} {else} World {/if} ! As you can see, we need to get the \u0026ldquo;Hello World\u0026rdquo; string translatable, but also to cater for the fact that there is a variable. As explained in the \u0026ldquo;Translations in PrestaShop 1.5\u0026rdquo; chapter, variables are to be marked using sprintf() markers, such as %s or %1$s.\nMaking \u0026ldquo;Hello %s!\u0026rdquo; translatable words in easy: we just need to use this code:\n{l s=\u0026#39;Hello %s!\u0026#39; sprintf=$my_module_name d=\u0026#39;Modules.MyModule\u0026#39;} But in our case, we also need to make sure that the %s is replaced by \u0026ldquo;World\u0026rdquo; in case the \u0026ldquo;my_module_name\u0026rdquo; value does not exist\u0026hellip; and we must make \u0026ldquo;World\u0026rdquo; translatable too. This can be achieved by using Smarty {capture} function, which collects the output of the template between the tags into a variable instead of displaying, so that we can use it later on. We are going to use it in order to replace the variable with the translated \u0026ldquo;World\u0026rdquo; if the variable is empty or absent, using a temporary variable. Here is the final code:\n{if !isset($my_module_name) || !$my_module_name} {capture name=\u0026#39;my_module_tempvar\u0026#39;}{l s=\u0026#39;World\u0026#39; d=\u0026#39;Modules.MyModule\u0026#39;}{/capture} {assign var=\u0026#39;my_module_name\u0026#39; value=$smarty.capture.my_module_tempvar} {/if} {l s=\u0026#39;Hello %s!\u0026#39; sprintf=$my_module_name d=\u0026#39;Modules.MyModule\u0026#39;} "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/native-modules/",
	"title": "Native Modules",
	"tags": [],
	"description": "",
	"content": "Native Modules PrestaShop releases include over 50 bundled modules, commonly referred to as \u0026ldquo;Native Modules\u0026rdquo;.\nThese modules are bundled into PrestaShop through composer at build time.\nList of native modules    Module Name Native since Description     blockreassurance Customer reassurance block 1.7.0 Adds an information block aimed at offering helpful information to reassure customers that your store is trustworthy.   contactform Contact form 1.7.0 Adds a contact form to the \u0026ldquo;Contact us\u0026rdquo; page.   dashactivity Activity dashboard widget 1.6.0 Displays an activity widget in the Back office dashboard.   dashgoals Dashboard goals 1.6.0 Adds a block with your store\u0026rsquo;s forecast.   dashproducts Dashboard products 1.6.0 Adds a block with a table of your latest orders and a ranking of your products.   dashtrends Dashboard trends 1.6.0 Adds a block with the evolution of your stores main numbers along with a graphic.   gridhtml Simple HTML table display 1.6.0 Allows the statistics system to display data in a grid.   gsitemap Google sitemap 1.7.0 Generate your Google sitemap file   pagesnotfound Pages not found 1.4.0 Adds a tab to the Stats dashboard, showing the pages requested by your visitors that have not been found.   productcomments Product Comments 1.4.0 Allows users to post reviews and rate products on specific criteria.   ps_banner Banner 1.7.0 Displays a banner on your store.   ps_categorytree Category tree links 1.7.0 Adds a block featuring product categories.   ps_checkpayment Check payment 1.7.0 This module allows you to accept payments by check.   ps_contactinfo Contact information 1.7.0 Allows you to display additional information about your store\u0026rsquo;s customer service.   ps_crossselling Cross selling 1.7.7 Adds a \u0026ldquo;Customers who bought this product also bought\u0026hellip;\u0026rdquo; section to every product page.   ps_currencyselector Currency selector 1.7.0 Adds a block allowing customers to choose their preferred shopping currency.   ps_customeraccountlinks Customer account links 1.7.0 Displays a block with links relative to a user\u0026rsquo;s account.   ps_customersignin Customer \u0026ldquo;sign in\u0026rdquo; link 1.7.0 Adds a block that displays information about the customer.   ps_customtext Custom text 1.7.0 Adds custom text in your store.   ps_dataprivacy Customer data privacy block 1.7.7 Adds a block displaying your data privacy policy for more transparency and reassurance.   ps_emailsubscription Email subscription form 1.7.0 Adds a block for newsletter subscription.   ps_facetedsearch Faceted search 1.7.0 Displays a block with layered navigation filters.   ps_faviconnotificationbo Order Notifications on the Favicon 1.7.5 Displays a small icon over the favicon, only in back office, showing the number of notifications.   ps_featuredproducts Featured products 1.7.0 Displays featured products in the central column of your homepage.   ps_imageslider Image slider 1.7.0 Adds an image slider to your PrestaShop homepage.   ps_languageselector Language selector 1.7.0 Adds a block allowing customers to select a language for your store\u0026rsquo;s content.   ps_linklist Link list 1.7.0 Adds a block with several links.   ps_mainmenu Main menu 1.7.0 Adds a new horizontal menu to the top of your PrestaShop.   ps_searchbar Search bar 1.7.0 Adds a quick search field to your PrestaShop.   ps_sharebuttons Social media share buttons 1.7.0 Displays social media sharing buttons (Twitter, Facebook, and Pinterest) on every product page.   ps_shoppingcart Shopping cart 1.7.0 Adds a block containing the customer\u0026rsquo;s shopping cart.   ps_socialfollow Social media follow links 1.7.0 Allows you to add information about your brand\u0026rsquo;s social networking accounts.   ps_themecusto Theme customization 1.7.4 Easily configure and customize your homepage’s theme and main native modules.   ps_wirepayment Wire payment 1.7.0 Accept payments for your products via bank wire transfer.   sekeywords Search engine keywords 1.4.0 Displays which keywords have led visitors to your website.   statsbestcategories Best categories 1.4.0 Adds a list of the best categories to the Stats dashboard.   statsbestcustomers Best customers 1.4.0 Adds a list of the best customers to the Stats dashboard.   statsbestmanufacturers Best manufacturers 1.4.0 Adds a list of the best manufacturers to the Stats dashboard.   statsbestproducts Best-selling products 1.4.0 Adds a list of the best-selling products to the Stats dashboard.   statsbestsuppliers Best suppliers 1.4.0 Adds a list of the best suppliers to the Stats dashboard.   statsbestvouchers Best vouchers 1.4.0 Adds a list of the best vouchers to the Stats dashboard.   statscarrier Carrier distribution 1.4.0 Adds a graph displaying each carriers' distribution to the Stats dashboard.   statscatalog Catalog statistics 1.4.0 Adds a tab containing general statistics about your catalog to the Stats dashboard.   statscheckup Catalog evaluation 1.4.0 Adds a quick evaluation of your catalog quality to the Stats dashboard.   statsdata Data mining for statistics 1.4.0 This module must be enabled if you want to use statistics.   statsequipment Browsers and operating systems 1.4.0 Adds a tab containing graphs about web browser and operating system usage to the Stats dashboard.   statsforecast Stats Dashboard 1.4.0 This is the main module for the Stats dashboard. It displays a summary of all your current statistics.   statslive Visitors online 1.4.0 Adds a list of customers and visitors who are currently online to the Stats dashboard.   statsnewsletter Newsletter 1.4.0 Adds a tab with a graph showing newsletter registrations to the Stats dashboard.   statsorigin Visitors origin 1.4.0 Adds a graph displaying the websites your visitors came from to the Stats dashboard.   statspersonalinfos Registered customer information 1.4.0 Adds information about your registered customers (such as gender and age) to the Stats dashboard.   statsproduct Product details 1.4.0 Adds detailed statistics for each product to the Stats dashboard.   statsregistrations Customer accounts 1.4.0 Adds a registration progress tab to the Stats dashboard.   statssales Sales and orders 1.4.0 Adds graphics presenting the evolution of sales and orders to the Stats dashboard.   statssearch Shop search 1.4.0 Adds a tab to the Stats dashboard, showing which keywords have been searched by your store\u0026rsquo;s visitors.   statsstock Available quantities 1.4.0 Adds a tab showing the quantity of available products for sale to the Stats dashboard.   statsvisits Visits and Visitors 1.4.0 Adds statistics about your visits and visitors to the Stats dashboard.   welcome OnBoarding 1.7.0 This module helps merchants create their first product and discover their new shop\u0026rsquo;s main features.    Module name changes since 1.6 A few modules have been split between 1.6 \u0026amp; 1.7 versions of PrestaShop, as listed here:\n   Original module for PrestaShop 1.6 Updated module for PrestaShop 1.7 Native in 1.7     advancedeucompliance ps_legalcompliance ❌ No   bankwire ps_wirepayment ✅ Yes   blockadvertising ps_advertising ❌ No   blockbanner ps_banner ✅ Yes   blockbestsellers ps_bestsellers ❌ No   blockcart ps_shoppingcart ✅ Yes   blockcategories ps_categorytree ✅ Yes   blockcms ps_linklist ✅ Yes   blockcmsinfo ps_customtext ✅ Yes   blockcontact ps_contactinfo ✅ Yes   blockcurrencies ps_currencyselector ✅ Yes   blockcustomerprivacy ps_dataprivacy ✅ Yes   blocklanguages ps_languageselector ✅ Yes   blocklayered ps_facetedsearch ✅ Yes   blockmanufacturer ps_brandlist ❌ No   blockmyaccount ps_customeraccountlinks ✅ Yes   blocknewsletter ps_emailsubscription ✅ Yes   blocknewproducts ps_newproducts ❌ No   blockrss ps_rssfeed ❌ No   blocksearch ps_searchbar ✅ Yes   blocksocial ps_socialfollow ✅ Yes   blockspecials ps_specials ❌ No   blocksupplier ps_supplierlist ❌ No   blocktopmenu ps_mainmenu ✅ Yes   blockuserinfo ps_customersignin ✅ Yes   blockviewed ps_viewedproduct ❌ No   carriercompare ps_carriercomparison ❌ No   cashondelivery ps_cashondelivery ❌ No   cheque ps_checkpayment ✅ Yes   crossselling ps_crossselling ✅ Yes   feeder ps_feeder ❌ No   followup ps_reminder ❌ No   ganalytics ps_googleanalytics ❌ No   homefeatured ps_featuredproducts ✅ Yes   homeslider ps_imageslider ✅ Yes   mailalerts ps_emailalerts ❌ No   onboarding welcome ✅ Yes   productscategory ps_categoryproducts ❌ No   producttooltip ps_productinfo ❌ No   socialsharing ps_sharebuttons ✅ Yes    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/shortcodes/notice/",
	"title": "Note block",
	"tags": [],
	"description": "",
	"content": "Notes / tip block You can add notice blocks to make some information stand out:\nNote {{% notice note %}} This is something you may want to know. {{% /notice %}} Renders to:\nThis is something you may want to know. Tip {{% notice tip %}} Everything will be fine, trust me. {{% /notice %}} Renders to:\nEverything will be fine, trust me. Info {{% notice info %}} This is pretty important, you should pay attention. {{% /notice %}} Renders to:\nThis is pretty important, you should pay attention. Warning {{% notice warning %}} Watch out, danger zone! {{% /notice %}} Renders to:\nWatch out, danger zone! "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/number-min-max-filter/",
	"title": "NumberMinMaxFilterType",
	"tags": [],
	"description": "",
	"content": "NumberMinMaxFilterType The NumberMinMaxFilterType represents two NumberType fields - one holds minimum value of float number type and other holds maximum value. NumberType is one of the native symfony types.\nType options    Option Type Default Description     min_field_options array array ( \u0026lsquo;attr\u0026rsquo; =\u0026gt; array ( \u0026lsquo;placeholder\u0026rsquo; =\u0026gt; $this-\u0026gt;trans(\u0026lsquo;Min\u0026rsquo;, [], \u0026lsquo;Admin.Global\u0026rsquo;)), ) Accepts all possible values that NumberType has   max_field_options array array ( \u0026lsquo;attr\u0026rsquo; =\u0026gt; array ( \u0026lsquo;placeholder\u0026rsquo; =\u0026gt; $this-\u0026gt;trans(\u0026lsquo;Max\u0026rsquo;, [], \u0026lsquo;Admin.Global\u0026rsquo;)), ) Accepts all possible values that NumberType has    Required Javascript components None.\nPreview example   NumberMinMaxFilterType rendered in grid   This type is built for grid filters usage but can be used in forms as well.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/webservers/httpd/",
	"title": "Optimize your Apache httpd configuration",
	"tags": [],
	"description": "",
	"content": "Enabling compression As you may be aware of, most of the file transiting from the webserver (with the notable exception of pictures) are text based.\nAnd text files are the most efficient to compress. Though disabled by default, enabling compression is a really quick way to reduce transit and speed up your website up to 80%!\nFirst, make sure the deflate module is activated in your httpd configuration file:\nLoadModule deflate_module modules/mod_deflate.so Then, you can add the following section to you main httpd configuration file:\n\u0026lt;IfModule deflate_module\u0026gt; AddOutputFilterByType DEFLATE text/plain AddOutputFilterByType DEFLATE text/css AddOutputFilterByType DEFLATE application/json application/x-javascript text/javascript application/javascript text/js AddOutputFilterByType DEFLATE text/xml application/xml application/xml+rss text/javascript application/javascript AddOutputFilterByType DEFLATE image/svg+xml \u0026lt;/IfModule\u0026gt; Enabling browser caching By default, browser locally store website assets in order to avoid fetching them again next time you visit the same page.\nEach browser has its own mecanics about this but the webserver can provide cache control and expiration dates through headers when responding.\nAgain, this allows to both speed up the page loads and avoid unnecessary traffic\nCache Control LoadModule headers_module modules/mod_headers.so Then you can add the following configuration parameters:\n\u0026lt;IfModule mod_headers.c\u0026gt; \u0026lt;FilesMatch \u0026#34;\\.(ico|jpe?g|png|gif|css|woff2)$\u0026#34;\u0026gt; Header set Cache-Control \u0026#34;max-age=2592000, public\u0026#34; \u0026lt;/FilesMatch\u0026gt; \u0026lt;/IfModule\u0026gt; Expire Easy as well for httpd, just make sure that the expire module is enabled:\nLoadModule expires_module modules/mod_expires.so And then set your own parameters:\n\u0026lt;IfModule mod_expires.c\u0026gt; AddType application/x-font-woff .woff AddType image/svg+xml .svg ExpiresActive On ExpiresDefault \u0026#34;access plus 7200 seconds\u0026#34; ExpiresByType image/jpg \u0026#34;access plus 1 month\u0026#34; ExpiresByType image/jpeg \u0026#34;access plus 1 month\u0026#34; ExpiresByType image/gif \u0026#34;access plus 1 month\u0026#34; ExpiresByType image/png \u0026#34;access plus 1 month\u0026#34; ExpiresByType image/x-icon \u0026#34;access plus 1 month\u0026#34; ExpiresByType application/x-font-woff \u0026#34;access plus 1 month\u0026#34; \u0026lt;FilesMatch \\.php$\u0026gt; # Do not allow PHP scripts to be cached unless they explicitly send cache headers themselves. ExpiresActive Off \u0026lt;/FilesMatch\u0026gt; \u0026lt;/IfModule\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/webservers/nginx/",
	"title": "Optimize your nginx configuration",
	"tags": [],
	"description": "",
	"content": "Enabling compression As you may be aware of, most of the file transiting from the webserver (with the notable exception of pictures) are text based.\nAnd text files are the most efficient to compress. Though disabled by default, enabling compression is a really quick way to reduce transit and speed up your website up to 80%!\nHere is the way to enable gzip compression to your nginx configuration:\ngzip on; gzip_disable msie6; gzip_vary on; gzip_proxied any; gzip_static on; gzip_buffers 16 8k; gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml text/js; gzip_http_version 1.1; gzip_comp_level 6; gzip_min_length 1100; Enabling browser caching By default, browser locally store website assets in order to avoid fetching them again next time you visit the same page.\nEach browser has its own mecanics about this but the webserver can provide cache control and expiration dates through headers when responding.\nAgain, this allows to both speed up the page loads and avoid unnecessary traffic:\nlocation ~* \\.(?:jpg|jpeg|gif|png|ico|css|woff2)$ { expires 1M; add_header Cache-Control \u0026#34;public\u0026#34;; } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/scale/optimizations/",
	"title": "Optimize your PrestaShop",
	"tags": [],
	"description": "",
	"content": "Optimize your PrestaShop performance Before making any change on your PrestaShop instance, it is highly recommended to perform some benchmarks.\nThe idea behind this is to know what your baseline performance is, so that you can make sure that your changes are increasing your shop\u0026rsquo;s performance and not the other way around.\nIf you\u0026rsquo;ve done no benchmark beforehand, there is no way to ensure you did not decrease your performances in the end.\nKeep in mind that the surest way to tune your shop is:\n benchmark make a change repeat   Finding your bottleneck(s) Performance tuning can be a tricky thing, there are plenty of factors that can slow down an application.\nIt can come from your disks, lack of memory, network capacity, CPU: wherever you can think of.\nThen, the challenge is to find your current bottleneck (could be disks access), remove it and then find the next one (could be memory).\nThere\u0026rsquo;s no way to enumerate all the performance issues we\u0026rsquo;ve encountered, but let\u0026rsquo;s review the more common ones and tackle them.\n1) PHP PHP tuning is very important for your application’s performance, whether you’re running PrestaShop or any other PHP software.\nFirst, try to use PHP \u0026gt;=7 when possible. Hard work has been done on performance starting on this version and it will provide a nice speed boost to your shop!\nIf you\u0026rsquo;re using PHP-FPM (which should be the case for most \u0026ldquo;modern\u0026rdquo; installations), you have to check the pool configuration. It\u0026rsquo;s usually stored in the file /etc/php/7.x/fpm/pool.d/www.conf. Inside this file, the most important setting is the pm.max_children setting. It must be greater than the max number of concurrent users you want to simulate during the bench.\nNote this PHP configuration should be used on Production environments only. Use the following settings to optimize the performances:\n[Date] date.timezone = UTC [Session] session.auto_start = Off [PHP] short_open_tag = Off display_errors = Off magic_quotes_gpc = off ; Increase this value if you are able to do it memory_limit = 512M max_execution_time = 300 max_input_time = 300 upload_max_filesize = 20M post_max_size = 22M ; Increase this value if you work with products with a lot of combinations max_input_vars = 20000 allow_url_fopen = on 2) PHP \u0026amp; File system It is well known that PHP does not manage file systems very well.\nThat\u0026rsquo;s why there are plenty of useful tuning options to avoid accessing the file system constantly.\nrealpath_cache At each file access, by default, PHP will first check that the file is still there, causing plenty of lstat system calls. Potentially thousands.\nPHP provides an option to store this information in cache, so that it can avoid repeating those system calls constantly:\n[PHP] realpath_cache_size = 4096K realpath_cache_ttl = 600 Keep in mind that this configuration is NOT compatible with other parameters, such as open_basedir and safe_mode directives.\nFinally, if you\u0026rsquo;re using a NAS or any other network storage solution to store your files (in case of horizontal scaling, for example), it is highly recommended to enable this setting.\nopcache Because file system tuning is a never ending story, not only you can cache the files' path, but also its contents.\nGood news is, OPCache will not only store your PHP files in memory, but it will store their bytecode, meaning the already compiled application, in a shared memory, available to all the application\u0026rsquo;s calls:\n[opcache] opcache.enable=1 opcache.enable_cli=0 opcache.memory_consumption=256 opcache.interned_strings_buffer=32 opcache.max_accelerated_files=16229 opcache.max_wasted_percentage=10 opcache.revalidate_freq=10 opcache.fast_shutdown=1 opcache.enable_file_override=0 opcache.max_file_size=0 If you can manage it, here are few options you could configure:\nopcache.validate_timestamps=0 opcache.revalidate_path=0 Keep in mind if you deactivate validate_timestamps OPCache will never update your code unless you let it know explicitly (either through internal functions or by restarting the web server).\nAlso, your favorite ecommerce project made sure it\u0026rsquo;s fully compatible with OPCache.\nIsn\u0026rsquo;t it nice?\n3) Composer (Autoloading optimizations) The class loader used while developing the application is optimized to find new and changed classes. On production servers, PHP files should never change, unless a new application version is deployed. That\u0026rsquo;s why you can optimize Composer\u0026rsquo;s autoloader to scan the entire application once and build a \u0026ldquo;class map\u0026rdquo;, which is a big array of all the classes locations, stored in vendor/composer/autoload_classmap.php.\nExecute this command to generate the class map (and make it part of your deployment process):\ncomposer dump-autoload --optimize --no-dev --classmap-authoritative  --optimize: dumps every PSR-0 and PSR-4 compatible class used in your application; --no-dev: excludes the classes that are only needed in the development environment (e.g. tests); --classmap-authoritative: prevents Composer from scanning the file system for classes that are not found in the class map.  If you install a new module in production, you need to execute this command again. 4) Apache Settings If you\u0026rsquo;re using PHP-FPM, you should be able to use Apache mpm_event. Using the following configuration (to set in the mpm_event.conf file) should allow you to test up to 400 concurrent users:\nServerLimit 16 MaxClients 400 StartServers 3 ThreadLimit 64 ThreadsPerChild 25 MaxRequestWorkers 400 MaxConnectionsPerChild 0 5) MySQL/MariaDB Settings Though we’re discussing it just now, MySQL tuning is just as important.\nOur intention here is to optimize the instance’s throughput by adding caches.\nAs for PHP, it allows the service to work as much as possible in memory and avoid disk access, hence reducing latency.\nCaching These parameters allow better cache information for further reuse, first by enabling it, then by increasing its size. Again, the idea is to keep the query results in memory rather than looking them up to the (higher latency) hard drive.\nAs always, these values should be adjusted to your own environment, you probably won’t need a host_cache_size of 1000.\nquery_cache_limit = 128K query_cache_size = 32M query_cache_type = ON table_open_cache = 1000 thread_cache_size = 80 host_cache_size=1000 Buffering Buffering is almost another word for caching.\nSo we work here with the memory area that holds cached data for InnoDB tables, indexes, and other auxiliary buffers, etc..\nAgain, these options should be adapted to your shop.\nSetting up the innodb_buffer_pool_size to 1G may be too much for your SQL instance, just make sure you have enough memory according to the value you configure.\nThe important thing is, if possible, to set innodb_buffer_pool_size to a greater value than your database size.\nread_buffer_size\t= 2M read_rnd_buffer_size\t= 1M join_buffer_size\t= 2M sort_buffer_size = 2M innodb_buffer_pool_size = 1G Other parameters Some other parameters to increase the MySQL performance, such as disabling the performance schema (used for monitoring), memory tables and enhancing GROUP BY queries.\nperformance_schema = OFF max_heap_table_size = 32M tmp_table_size = 32M Before launching the benchmark, and after importing the data, it\u0026rsquo;s always great to launch an ANALYZE TABLE on all your database by running on your server:\nmysqlcheck -a -A -uroot -pyour_password 6) Use a CDN A CDN (Content Delivery Network) is a kind of proxy that will cache your static files and serve them instead of your own server.\nHence, a CDN will reduce drastically the amount of hits made to your server.\nThere are plenty of CDN providers, Cloudflare is a good and free one. You can use as well to minify your page or to easily enable SSL on your site.\nJust one slight consideration about CDNs though: any modification done to your shop\u0026rsquo;s static assets, such as images, css and the like, may not be immediate available once behind a CDN. When those files are cached, if you modify them on your server, you will need to wait for the cache expiration (often configurable) before seeing the modification live - or invalidate part or all your cache. Most providers offer such features.\n7) PrestaShop Settings In the performances tab of your PrestaShop (Advanced Parameters \u0026gt; Performance):\n Do not enable \u0026ldquo;Multi-Front synchronisation\u0026rdquo; if you only have one front server or if your smarty cache is shared across all your front servers on the same file system. Use the \u0026ldquo;File System\u0026rdquo; cache type, not \u0026ldquo;MySQL\u0026rdquo; Enable the Smarty cache Do not enable the Cache from the \u0026ldquo;Cache\u0026rdquo; section if you have MySQL (\u0026lt;8) / MariaDB on the same machine, the MySQL query cache will be more efficient. If you still want to enable it, if you have only 1 front, use APC, and if you have several front, use a unique central memcached server host (not localhost!)  In the file config/defines.inc.php:\n Run your shop in production mode by setting _PS_MODE_DEV_ to false.  if (!defined(\u0026#39;_PS_MODE_DEV_\u0026#39;)) { define(\u0026#39;_PS_MODE_DEV_\u0026#39;, false); }  Disable the profiler by setting _PS_DEBUG_PROFILING_ to false.  if (!defined(\u0026#39;_PS_DEBUG_PROFILING_\u0026#39;)) { define(\u0026#39;_PS_DEBUG_PROFILING_\u0026#39;, false); } 8) PrestaShop database cleaning Some SQL tables of PrestaShop can grow very big in time. Some of the data being stored there is sometimes not relevant anymore or not needed anymore.\nSome notable examples:\nLogs table You can regularly clean your log database table from old logs.\nConfiguration table The configuration database table can grow as you install more and more modules and a lot of them do store data inside it. Some of them do remove this data when they are being uninstalled and other do not. This can result in a configuration database table quite big and that can be cleaned up.\nNote that configuration table content is being loaded for every request PrestaShop handles so it can really slow your shop down.\n9) Modules optimization PrestaShop can be optimized, but the other systems running on it should be optimized too! Some modules can slow your shop down especially if they are hooked on critical Front Office pages. You should benchmark and profile the modules installed on your shop as they are not always fine-tuned for optimization.\nThings you might look for in these modules\n greedy resource consumption lack of caching over-caching* hooked or enabled on too much pages  *For example some modules do rely on Smarty cache, but Smarty cache badly configured can result in hundred of template files being scattered on the server, producing way too much I/O.\n10) Using MySQl replica A simple setup for MySQL replication strategy is a single instance for WRITE requests and multiple instances for READ requests. Because the Front Office actually does not perform a lot of write requests this can boost your Front office performances.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_carriers/",
	"title": "Order carriers",
	"tags": [],
	"description": "",
	"content": "Resources for Order carriers Order_carrier    Name Format Required Description     id_order isUnsignedId ✔️ Order ID   id_carrier isUnsignedId ✔️ Carrier ID   id_order_invoice isUnsignedId ❌ Order invoice ID   weight isFloat ❌    shipping_cost_tax_excl isFloat ❌    shipping_cost_tax_incl isFloat ❌    tracking_number isTrackingNumber ❌    date_add isDate ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_carrier\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;id_carrier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_carrier\u0026gt; \u0026lt;id_order_invoice\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order_invoice\u0026gt; \u0026lt;weight\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/weight\u0026gt; \u0026lt;shipping_cost_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_cost_tax_excl\u0026gt; \u0026lt;shipping_cost_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_cost_tax_incl\u0026gt; \u0026lt;tracking_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/tracking_number\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/order_carrier\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_cart_rules/",
	"title": "Order cart rules",
	"tags": [],
	"description": "",
	"content": "Resources for Order cart rules Order_cart_rule    Name Format Required Description     id_order isUnsignedId ✔️ Order ID   id_cart_rule isUnsignedId ✔️    id_order_invoice isUnsignedId ❌ Order invoice ID   name isCleanHtml ✔️    value isFloat ✔️    value_tax_excl isFloat ✔️    free_shipping isBool ❌    deleted isBool ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_cart_rule\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;id_cart_rule\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_cart_rule\u0026gt; \u0026lt;id_order_invoice\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order_invoice\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;value\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/value\u0026gt; \u0026lt;value_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/value_tax_excl\u0026gt; \u0026lt;free_shipping\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/free_shipping\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;/order_cart_rule\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_details/",
	"title": "Order details",
	"tags": [],
	"description": "",
	"content": "Resources for Order details Order_detail    Name Format Required Description     id_order isUnsignedId ✔️ Order ID   product_id isUnsignedId ❌ Product ID   product_attribute_id isUnsignedId ❌ Product attribute ID   product_quantity_reinjected isUnsignedInt ❌    group_reduction isFloat ❌    discount_quantity_applied isInt ❌    download_hash isGenericName ❌    download_deadline isDateFormat ❌    id_order_invoice isUnsignedId ❌ Order invoice ID   id_warehouse isUnsignedId ✔️ Warehouse ID   id_shop isUnsignedId ✔️ Shop ID   id_customization isUnsignedId ❌ Customization ID   product_name isGenericName ✔️    product_quantity isInt ✔️    product_quantity_in_stock isInt ❌    product_quantity_return isUnsignedInt ❌    product_quantity_refunded isUnsignedInt ❌    product_price isPrice ✔️    reduction_percent isFloat ❌    reduction_amount isPrice ❌    reduction_amount_tax_incl isPrice ❌    reduction_amount_tax_excl isPrice ❌    product_quantity_discount isFloat ❌    product_ean13 isEan13 ❌    product_isbn isIsbn ❌    product_upc isUpc ❌    product_mpn isMpn ❌    product_reference isReference ❌    product_supplier_reference isReference ❌    product_weight isFloat ❌    tax_computation_method isUnsignedId ❌    id_tax_rules_group isInt ❌ Tax rules group ID   ecotax isFloat ❌    ecotax_tax_rate isFloat ❌    download_nb isInt ❌    unit_price_tax_incl isPrice ❌    unit_price_tax_excl isPrice ❌    total_price_tax_incl isPrice ❌    total_price_tax_excl isPrice ❌    total_shipping_price_tax_excl isPrice ❌    total_shipping_price_tax_incl isPrice ❌    purchase_supplier_price isPrice ❌    original_product_price isPrice ❌    original_wholesale_price isPrice ❌    total_refunded_tax_excl isPrice ❌    total_refunded_tax_incl isPrice ❌    associations  ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_detail\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;product_id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_id\u0026gt; \u0026lt;product_attribute_id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_attribute_id\u0026gt; \u0026lt;product_quantity_reinjected\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity_reinjected\u0026gt; \u0026lt;group_reduction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/group_reduction\u0026gt; \u0026lt;discount_quantity_applied\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/discount_quantity_applied\u0026gt; \u0026lt;download_hash\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/download_hash\u0026gt; \u0026lt;download_deadline\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/download_deadline\u0026gt; \u0026lt;id_order_invoice\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order_invoice\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_customization\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customization\u0026gt; \u0026lt;product_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_name\u0026gt; \u0026lt;product_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity\u0026gt; \u0026lt;product_quantity_in_stock\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity_in_stock\u0026gt; \u0026lt;product_quantity_return\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity_return\u0026gt; \u0026lt;product_quantity_refunded\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity_refunded\u0026gt; \u0026lt;product_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_price\u0026gt; \u0026lt;reduction_percent\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_percent\u0026gt; \u0026lt;reduction_amount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_amount\u0026gt; \u0026lt;reduction_amount_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_amount_tax_incl\u0026gt; \u0026lt;reduction_amount_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_amount_tax_excl\u0026gt; \u0026lt;product_quantity_discount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity_discount\u0026gt; \u0026lt;product_ean13\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_ean13\u0026gt; \u0026lt;product_isbn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_isbn\u0026gt; \u0026lt;product_upc\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_upc\u0026gt; \u0026lt;product_mpn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_mpn\u0026gt; \u0026lt;product_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_reference\u0026gt; \u0026lt;product_supplier_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_supplier_reference\u0026gt; \u0026lt;product_weight\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_weight\u0026gt; \u0026lt;tax_computation_method\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/tax_computation_method\u0026gt; \u0026lt;id_tax_rules_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_tax_rules_group\u0026gt; \u0026lt;ecotax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ecotax\u0026gt; \u0026lt;ecotax_tax_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ecotax_tax_rate\u0026gt; \u0026lt;download_nb\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/download_nb\u0026gt; \u0026lt;unit_price_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unit_price_tax_incl\u0026gt; \u0026lt;unit_price_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unit_price_tax_excl\u0026gt; \u0026lt;total_price_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_price_tax_incl\u0026gt; \u0026lt;total_price_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_price_tax_excl\u0026gt; \u0026lt;total_shipping_price_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_price_tax_excl\u0026gt; \u0026lt;total_shipping_price_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_price_tax_incl\u0026gt; \u0026lt;purchase_supplier_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/purchase_supplier_price\u0026gt; \u0026lt;original_product_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/original_product_price\u0026gt; \u0026lt;original_wholesale_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/original_wholesale_price\u0026gt; \u0026lt;total_refunded_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_refunded_tax_excl\u0026gt; \u0026lt;total_refunded_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_refunded_tax_incl\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;taxes\u0026gt; \u0026lt;tax\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/tax\u0026gt; \u0026lt;/taxes\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/order_detail\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_histories/",
	"title": "Order histories",
	"tags": [],
	"description": "",
	"content": "Resources for Order histories Order_history    Name Format Required Description     id_employee isUnsignedId ❌ Employee ID   id_order_state isUnsignedId ✔️    id_order isUnsignedId ✔️ Order ID   date_add isDate ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_history\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_employee\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_employee\u0026gt; \u0026lt;id_order_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order_state\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/order_history\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_invoices/",
	"title": "Order invoices",
	"tags": [],
	"description": "",
	"content": "Resources for Order invoices Order_invoice    Name Format Required Max size Description     id_order isUnsignedId ✔️  Order ID   number isUnsignedId ✔️     delivery_number isUnsignedId ❌     delivery_date isDateFormat ❌     total_discount_tax_excl  ❌     total_discount_tax_incl  ❌     total_paid_tax_excl  ❌     total_paid_tax_incl  ❌     total_products  ❌     total_products_wt  ❌     total_shipping_tax_excl  ❌     total_shipping_tax_incl  ❌     shipping_tax_computation_method  ❌     total_wrapping_tax_excl  ❌     total_wrapping_tax_incl  ❌     shop_address isCleanHtml ❌ 1000    note isCleanHtml ❌ 65000    date_add isDate ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_invoice\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/number\u0026gt; \u0026lt;delivery_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delivery_number\u0026gt; \u0026lt;delivery_date\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delivery_date\u0026gt; \u0026lt;total_discount_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_discount_tax_excl\u0026gt; \u0026lt;total_discount_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_discount_tax_incl\u0026gt; \u0026lt;total_paid_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_paid_tax_excl\u0026gt; \u0026lt;total_paid_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_paid_tax_incl\u0026gt; \u0026lt;total_products\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_products\u0026gt; \u0026lt;total_products_wt\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_products_wt\u0026gt; \u0026lt;total_shipping_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_tax_excl\u0026gt; \u0026lt;total_shipping_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_tax_incl\u0026gt; \u0026lt;shipping_tax_computation_method\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_tax_computation_method\u0026gt; \u0026lt;total_wrapping_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_wrapping_tax_excl\u0026gt; \u0026lt;total_wrapping_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_wrapping_tax_incl\u0026gt; \u0026lt;shop_address\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shop_address\u0026gt; \u0026lt;note\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/note\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/order_invoice\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_payments/",
	"title": "Order payments",
	"tags": [],
	"description": "",
	"content": "Resources for Order payments Order_payment    Name Format Required Max size Description     order_reference isAnything ❌ 9    id_currency isUnsignedId ✔️  Currency ID   amount isPrice ✔️     payment_method isGenericName ❌     conversion_rate isFloat ❌     transaction_id isAnything ❌ 254    card_number isAnything ❌ 254    card_brand isAnything ❌ 254    card_expiration isAnything ❌ 254    card_holder isAnything ❌ 254    date_add isDate ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_payment\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;order_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/order_reference\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;amount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/amount\u0026gt; \u0026lt;payment_method\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/payment_method\u0026gt; \u0026lt;conversion_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/conversion_rate\u0026gt; \u0026lt;transaction_id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/transaction_id\u0026gt; \u0026lt;card_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/card_number\u0026gt; \u0026lt;card_brand\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/card_brand\u0026gt; \u0026lt;card_expiration\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/card_expiration\u0026gt; \u0026lt;card_holder\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/card_holder\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/order_payment\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_slip/",
	"title": "Order slip",
	"tags": [],
	"description": "",
	"content": "Resources for Order slip Order_slip    Name Format Required Description     id_customer isUnsignedId ✔️ Customer ID   id_order isUnsignedId ✔️ Order ID   conversion_rate isFloat ✔️    total_products_tax_excl isFloat ✔️    total_products_tax_incl isFloat ✔️    total_shipping_tax_excl isFloat ✔️    total_shipping_tax_incl isFloat ✔️    amount isFloat ❌    shipping_cost  ❌    shipping_cost_amount isFloat ❌    partial  ❌    date_add isDate ❌    date_upd isDate ❌    order_slip_type isInt ❌    associations  ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_slip\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;conversion_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/conversion_rate\u0026gt; \u0026lt;total_products_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_products_tax_excl\u0026gt; \u0026lt;total_products_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_products_tax_incl\u0026gt; \u0026lt;total_shipping_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_tax_excl\u0026gt; \u0026lt;total_shipping_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_tax_incl\u0026gt; \u0026lt;amount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/amount\u0026gt; \u0026lt;shipping_cost\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_cost\u0026gt; \u0026lt;shipping_cost_amount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_cost_amount\u0026gt; \u0026lt;partial\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/partial\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;order_slip_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/order_slip_type\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;order_slip_details\u0026gt; \u0026lt;order_slip_detail\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_order_detail\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order_detail\u0026gt; \u0026lt;product_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity\u0026gt; \u0026lt;amount_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/amount_tax_excl\u0026gt; \u0026lt;amount_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/amount_tax_incl\u0026gt; \u0026lt;/order_slip_detail\u0026gt; \u0026lt;/order_slip_details\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/order_slip\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/order_states/",
	"title": "Order states",
	"tags": [],
	"description": "",
	"content": "Resources for Order states Order_state    Name Format Required Max size Description     unremovable isBool ❌     delivery isBool ❌     hidden isBool ❌     send_email isBool ❌     module_name isModuleName ❌     invoice isBool ❌     color isColor ❌     logable isBool ❌     shipped isBool ❌     paid isBool ❌     pdf_delivery isBool ❌     pdf_invoice isBool ❌     deleted isBool ❌     name isGenericName ✔️ 64    template isTplName ❌ 64     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order_state\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;unremovable\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unremovable\u0026gt; \u0026lt;delivery\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delivery\u0026gt; \u0026lt;hidden\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/hidden\u0026gt; \u0026lt;send_email\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/send_email\u0026gt; \u0026lt;module_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/module_name\u0026gt; \u0026lt;invoice\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/invoice\u0026gt; \u0026lt;color\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/color\u0026gt; \u0026lt;logable\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/logable\u0026gt; \u0026lt;shipped\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipped\u0026gt; \u0026lt;paid\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/paid\u0026gt; \u0026lt;pdf_delivery\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/pdf_delivery\u0026gt; \u0026lt;pdf_invoice\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/pdf_invoice\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;template\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/order_state\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/orders/",
	"title": "Orders",
	"tags": [],
	"description": "",
	"content": "Resources for Orders Order    Name Format Required Not filterable Description     id_address_delivery isUnsignedId ✔️  Delivery address ID   id_address_invoice isUnsignedId ✔️  Invoice address ID   id_cart isUnsignedId ✔️  Cart ID   id_currency isUnsignedId ✔️  Currency ID   id_lang isUnsignedId ✔️  Lang ID   id_customer isUnsignedId ✔️  Customer ID   id_carrier isUnsignedId ✔️  Carrier ID   current_state isUnsignedId ❌     module isModuleName ✔️     invoice_number  ❌     invoice_date  ❌     delivery_number  ❌     delivery_date  ❌     valid  ❌     date_add isDate ❌     date_upd isDate ❌     shipping_number isTrackingNumber ❌ true    id_shop_group isUnsignedId ❌  Shop group ID   id_shop isUnsignedId ❌  Shop ID   secure_key isMd5 ❌     payment isGenericName ✔️     recyclable isBool ❌     gift isBool ❌     gift_message isMessage ❌     mobile_theme isBool ❌     total_discounts isPrice ❌     total_discounts_tax_incl isPrice ❌     total_discounts_tax_excl isPrice ❌     total_paid isPrice ✔️     total_paid_tax_incl isPrice ❌     total_paid_tax_excl isPrice ❌     total_paid_real isPrice ✔️     total_products isPrice ✔️     total_products_wt isPrice ✔️     total_shipping isPrice ❌     total_shipping_tax_incl isPrice ❌     total_shipping_tax_excl isPrice ❌     carrier_tax_rate isFloat ❌     total_wrapping isPrice ❌     total_wrapping_tax_incl isPrice ❌     total_wrapping_tax_excl isPrice ❌     round_mode isUnsignedId ❌     round_type isUnsignedId ❌     conversion_rate isFloat ✔️     reference  ❌     associations  ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;order\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_address_delivery\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_address_delivery\u0026gt; \u0026lt;id_address_invoice\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_address_invoice\u0026gt; \u0026lt;id_cart\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_cart\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;id_lang\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_carrier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_carrier\u0026gt; \u0026lt;current_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/current_state\u0026gt; \u0026lt;module\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/module\u0026gt; \u0026lt;invoice_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/invoice_number\u0026gt; \u0026lt;invoice_date\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/invoice_date\u0026gt; \u0026lt;delivery_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delivery_number\u0026gt; \u0026lt;delivery_date\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delivery_date\u0026gt; \u0026lt;valid\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/valid\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;shipping_number\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/shipping_number\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;secure_key\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/secure_key\u0026gt; \u0026lt;payment\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/payment\u0026gt; \u0026lt;recyclable\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/recyclable\u0026gt; \u0026lt;gift\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/gift\u0026gt; \u0026lt;gift_message\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/gift_message\u0026gt; \u0026lt;mobile_theme\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mobile_theme\u0026gt; \u0026lt;total_discounts\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_discounts\u0026gt; \u0026lt;total_discounts_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_discounts_tax_incl\u0026gt; \u0026lt;total_discounts_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_discounts_tax_excl\u0026gt; \u0026lt;total_paid\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_paid\u0026gt; \u0026lt;total_paid_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_paid_tax_incl\u0026gt; \u0026lt;total_paid_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_paid_tax_excl\u0026gt; \u0026lt;total_paid_real\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_paid_real\u0026gt; \u0026lt;total_products\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_products\u0026gt; \u0026lt;total_products_wt\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_products_wt\u0026gt; \u0026lt;total_shipping\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping\u0026gt; \u0026lt;total_shipping_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_tax_incl\u0026gt; \u0026lt;total_shipping_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_shipping_tax_excl\u0026gt; \u0026lt;carrier_tax_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/carrier_tax_rate\u0026gt; \u0026lt;total_wrapping\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_wrapping\u0026gt; \u0026lt;total_wrapping_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_wrapping_tax_incl\u0026gt; \u0026lt;total_wrapping_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_wrapping_tax_excl\u0026gt; \u0026lt;round_mode\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/round_mode\u0026gt; \u0026lt;round_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/round_type\u0026gt; \u0026lt;conversion_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/conversion_rate\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;order_rows\u0026gt; \u0026lt;order_row\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;product_id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_id\u0026gt; \u0026lt;product_attribute_id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_attribute_id\u0026gt; \u0026lt;product_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_quantity\u0026gt; \u0026lt;product_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_name\u0026gt; \u0026lt;product_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_reference\u0026gt; \u0026lt;product_ean13\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_ean13\u0026gt; \u0026lt;product_isbn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_isbn\u0026gt; \u0026lt;product_upc\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_upc\u0026gt; \u0026lt;product_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_price\u0026gt; \u0026lt;id_customization\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customization\u0026gt; \u0026lt;unit_price_tax_incl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unit_price_tax_incl\u0026gt; \u0026lt;unit_price_tax_excl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unit_price_tax_excl\u0026gt; \u0026lt;/order_row\u0026gt; \u0026lt;/order_rows\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/order\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/modules/concepts/controllers/admin-controllers/override-decorate-controller/",
	"title": "Override or decorate a Core controller",
	"tags": [],
	"description": "",
	"content": "Override or decorate a Core controller  If you want to extend the behavior of a Back Office page in PrestaShop, you have multiple options.\nMost of standard extension needs can be fulfilled using one hook.\nIf there is no hook available for your need, and you only need to modify the visual appearance of the page, you might want to override a template.\nBut sometimes you want to modify the page in a deeper way. In this case, you need to modify the controller\u0026rsquo;s behavior.\nIf the Back Office page you want to modify is powered by Symfony, you have 3 options:\n Remap the route to target a new Controller you created Override the existing Core controller Decorate the existing Core controller  Remap the route In Symfony, routes such as /sell/orders/orders are mapped to controllers by YAML configuration files such as this one:\n# src/PrestaShopBundle/Resources/config/routing/admin/sell/orders/orders.ymladmin_orders_index:path:/sell/orders/orders/methods:[GET]defaults:_controller:PrestaShopBundle:Admin/Sell/Order/Order:index_legacy_controller:AdminOrders_legacy_link:AdminOrdersIn your module, you have the possibility to replace this configuration item by your own.\nSo for example, if you want that people browsing the Back Office on URL /sell/orders/orders/ to hit your own controller MyModule\\Controller\\DemoController instead of the Core\u0026rsquo;s, you can do this:\n# modules/your-module/config/routes.ymladmin_orders_index:path:/sell/orders/orders/methods:[GET]defaults:_controller:\u0026#39;MyModule\\Controller\\DemoController::demoAction\u0026#39;_disable_module_prefix:true In the above example, the path has not been changed, but you can change it to whatever you want (eg. /demo/orders). However, keep in mind that while this will re-route internal links, external or hardcoded links will keep targeting the old path. Keep the item _legacy_controller if your controller relies on it to configure a AdminSecurity annotation such as @AdminSecurity(\u0026quot;is_granted('read', request.get('_legacy_controller'))\u0026quot;)\nKeep the items _legacy_controller and _legacy_link if you want to reroute internal links and legacy URLs like index.php?controller=AdminOrders as well.\n Thanks to this, whenever an HTTP request is matched to the route admin_orders_index, then your controller demoAction() will be executed.\nThanks to option _disable_module_prefix: true (available from PS 1.7.7.0) the route path is /sell/orders/orders, just like the original route.\nRouting is computed and cached by Symfony. You will need to clear this cache for Symfony to acknowledge your updated routing. You can do it by using php bin/console cache:clear.\nIf you have trouble writing the right routing configuration for your controller, you can use Symfony debugger to dump the routes with php bin/console debug:router.\n Override the controller Since 1.7.7, PrestaShop Back Office controllers are registered as services, and like all public services, they can be overridden by modules.\nFor example, the controller responsible for the page \u0026ldquo;Improve \u0026gt; Design \u0026gt; CMS Pages\u0026rdquo; is registered with service ID PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController.\nWith the following configuration item, we can override this configuration to make it target our custom module:\n# modules/your-module/config/services.yml\u0026#39;PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController\u0026#39;:class:MyModule\\Controller\\DemoControllerThanks to this, whenever Symfony forwards a request to the Core controller PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController it will be forwarded to DemoController instead.\nThis method is not recommended unless you intend to rewrite the whole controller. In addition, if the implementation is updated in later versions of PrestaShop, your override will ignore these updates, which might create bugs. If you have trouble writing the right service configuration for your controller, you can use Symfony debugger to dump the routes with php bin/console debug:container. It can also be helpful to find the service ID of the controller. Decorate the controller Instead of replacing the whole controller, we recommend extending its behavior using service decoration. By implementing the decorator pattern, you can keep most or all of the original behavior of the decorated controller, and only customize the parts you want.\nWhile you could achieve a similar end with an override (by making your controller extend the original one), the decorator pattern provides a greater degree of freedom, while leaving all complexity of initialization and dependency management to the service container. Back to the controller responsible for the page \u0026ldquo;Improve \u0026gt; Design \u0026gt; CMS Pages\u0026rdquo; which is registered with service ID PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController.\nWith the following configuration item, we can decorate it with a custom controller in our module:\n# modules/your-module/config/services.ymlcustom_controller:class:MyModule\\Controller\\DemoControllerdecorates:PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageControllerarguments:[\u0026#39;@custom_controller.inner\u0026#39;]Thanks to this, whenever Symfony forwards a request to the Core controller PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController it will be forwarded to DemoController instead. But what is different with overriding is that the decorated CmsPageController is injected into the constructor of DemoController, and we can use it:\n\u0026lt;?php namespace MyModule\\Controller; use PrestaShop\\PrestaShop\\Core\\Search\\Filters\\CmsPageCategoryFilters; use PrestaShop\\PrestaShop\\Core\\Search\\Filters\\CmsPageFilters; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; use PrestaShopBundle\\Controller\\Admin\\Improve\\Design\\CmsPageController; use Symfony\\Component\\HttpFoundation\\Request; class DemoController extends FrameworkBundleAdminController { /** * @var CmsPageController */ private $decoratedController; public function __construct(CmsPageController $decoratedController) { $this-\u0026gt;decoratedController = $decoratedController; } public function indexAction(CmsPageCategoryFilters $categoryFilters, CmsPageFilters $cmsFilters, Request $request) { return $this-\u0026gt;decoratedController-\u0026gt;indexAction($categoryFilters, $cmsFilters, $request); } } In this example we do nothing more than returning the exact output from the decorated controller. However we could modify the input request or the output given by decorated controller before returning it. Example:\n\u0026lt;?php public function indexAction(CmsPageCategoryFilters $categoryFilters, CmsPageFilters $cmsFilters, Request $request) { $output = $this-\u0026gt;decoratedController-\u0026gt;indexAction($categoryFilters, $cmsFilters, $request); $myService = $this-\u0026gt;getMyPaymentService(); $output = $this-\u0026gt;injectMyData($myService, $output); return $output; }  If you have trouble writing the right service configuration for your decoration, you can use Symfony debugger to dump the routes with php bin/console debug:container. It can also be helpful to find the service ID of the controller. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/overriding-modules/",
	"title": "Overriding modules",
	"tags": [],
	"description": "",
	"content": "Overriding modules When you write a theme, you often need to override the templates and assets coming from a module so that they match your theme\u0026rsquo;s specific markup needs. Themes can override modules' assets (CSS and JavaScript only) by placing the corresponding file at a specific location.\nWith PrestaShop 1.7, all module overriding code goes to the modules directory (in your module\u0026rsquo;s own directory). Every PS 1.7 module developer should be aware of this change (introduced with PR 5020: https://github.com/PrestaShop/PrestaShop/pull/5020).\nIf your asset override is empty, PrestaShop will load nothing (neither the module one nor your override). This is useful if you want to fully remove this module style and add your own to your compiled theme.css. Examples in this page are based on this sample module directory structure:\n. ├── css │ ├── external-lib.css │ └── style.css ├── js │ └── app.js ├── moduledemo.php └── views └── templates └── front ├── included-template.tpl └── moduledemo.tpl 5 directories, 6 files Overriding templates and assets With PrestaShop 1.7, here are the folder paths to create in order to override templates and assets:\n. └── modules ├── css │ ├── external-lib.css │ └── style.css ├── js │ └── app.js └── views └── templates └── front ├── included-template.tpl └── moduledemo.tpl 6 directories, 5 files Compared to what was needed in PrestaShop 1.6, it is much simpler:\n. ├── css │ └── modules │ └── css │ ├── external-lib.css │ └── style.css ├── js │ └── modules │ └── js │ └── app.js └── modules └── views └── templates └── front ├── included-template.tpl └── moduledemo.tpl 10 directories, 5 files Overriding with the \u0026lsquo;include\u0026rsquo; method There is one very important issue that you should be aware of. When loading a template file (for instance \u0026lsquo;moduledemo.tpl\u0026rsquo;), PrestaShop will look for overriding first, in the following order:\n /themes/THEME_NAME/modules/MODULE_NAME/views/templates/front/moduledemo.tpl /modules/MODULE_NAME/views/templates/front/moduledemo.tpl  But if your moduledemo.tpl file includes the included-template.tpl file, you will have to override \u0026lsquo;included-template.tpl\u0026rsquo; as well, even if you don\u0026rsquo;t want to modify it (nor to edit the path). This means that every file that an overridden file includes needs to be copy-pasted as-is in order for your override to work properly.\nThe issue goes both ways: if you want to modify the included-template.tpl file, you will have to override the moduledemo.tpl file that includes it.\n{include file=\u0026#39;./included-template.tpl\u0026#39;}PrestaShop 1.7 introduces a new cool way to include files in module templates. By using this method, all the expected rules will be followed:\n{include file=\u0026#39;module:MODULE_NAME/views/templates/front/included-template.tpl\u0026#39;}SmartyDev helps you debug! PrestaShop 1.7 also introduces our own SmartyDev tool, an Smarty extension which allows you to see the template\u0026rsquo;s name within your generated HTML markup. This will help debugging a lot, especially because of template override.\nHere an example of generated markup with SmartyDev activated:\n[...] \u0026lt;a href=\u0026#34;http://prestashop.ps/en/\u0026#34; class=\u0026#34;dropdown-item\u0026#34;\u0026gt;English\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- end /Users/julien/Sites/PrestaShop/themes/classic/modules/blocklanguages/blocklanguages.tpl --\u0026gt; \u0026lt;!-- begin /Users/julien/Sites/PrestaShop/themes/classic/modules/blockuserinfo/blockuserinfo.tpl --\u0026gt; \u0026lt;div class=\u0026#34;user-info\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;material-icons _gray-darker\u0026#34;\u0026gt;\u0026amp;#xE7FF;\u0026lt;/i\u0026gt; \u0026lt;a class=\u0026#34;logout\u0026#34; href=\u0026#34;http://prestashop.ps/fr/?mylogout=\u0026#34; rel=\u0026#34;nofollow\u0026#34; title=\u0026#34;Me déconnecter\u0026#34;\u0026gt;Déconnexion\u0026lt;/a\u0026gt; \u0026lt;a class=\u0026#34;account\u0026#34; href=\u0026#34;http://prestashop.ps/fr/mon-compte\u0026#34; title=\u0026#34;Voir mon compte client\u0026#34; rel=\u0026#34;nofollow\u0026#34;\u0026gt;\u0026lt;span\u0026gt;Julien Bourdeau\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;!-- end /Users/julien/Sites/PrestaShop/themes/classic/modules/blockuserinfo/blockuserinfo.tpl --\u0026gt; \u0026lt;!-- begin /Users/julien/Sites/PrestaShop/themes/classic/modules/blockcart/blockcart.tpl --\u0026gt; \u0026lt;div class=\u0026#34;blockcart cart-preview \u0026#34; data-refresh-url=\u0026#34;http://prestashop.ps/fr/module/blockcart/ajax\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;a rel=\u0026#34;nofollow\u0026#34; href=\u0026#34;#\u0026#34; title=\u0026#34;cart\u0026#34;\u0026gt; [...] To use it, simply set the _PS_MODE_DEV_ constant to true in your installation\u0026rsquo;s /config/defines.inc.php file: add the define('_PS_MODE_DEV_', true); line to that file in order to turn the PrestaShop Developer Mode on, which features SmartyDev.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/overriding-selectors/",
	"title": "Overriding selectors",
	"tags": [],
	"description": "",
	"content": "Overriding selectors When you write a theme, you often need to change the markup, but if you do this, you\u0026rsquo;ll encounter some problems because core\u0026rsquo;s and classic\u0026rsquo;s javascript use some class in order to work.\nTwo selectors maps are available since 1.7.8 one on the core side (/themes/_core/js/selectors.js) and another one inside the classic theme (/themes/classic/_dev/js/selectors.js).\nThat means that almost every selectors we use inside every JS files are inside these two files.\nYou can easily update these mapping because these 2 files send an event on dom ready : selectorsInit for the core mapping file, and themeSelectorsInit for the classic theme. Also, if you place your file without these events, you need place it after the core/theme js bundle, it will work as it would with the event.\nThese selectors are mapped inside the prestashop object. That means that if you attach a method which override the prestashop.selectors or prestashop.themeSelectors object, you\u0026rsquo;ll be able to change a lot of markup if you manage to override every selectors properly.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/template-inheritance/parent-child-feature/",
	"title": "Parent/child theme",
	"tags": [],
	"description": "",
	"content": "Parent/child theme PrestaShop 1.7 relies a lot on template inheritance in order to create the most consistent theme possible while heavily reducing the amount of duplicated code.\nWe took it even further introducing the Parent Child theme feature. The point to is to avoid modifying the main theme so you can update it!\nThis feature is only useful if you want to slightly modify a theme (to add a block for example). If you need to modify the markup more deeply, modify the theme, don\u0026rsquo;t create a child theme. The principle So far we talked about extending template within the same theme. In PrestaShop 1.7 you can now extend templates from another theme.\nAs a theme developer, you want to create as many block as possible so your user can override the minimum amount of code. How to create a child theme First you need to have the theme you want to use as parent in your store /themes folder.\nThen you can create a very minimal theme, containing only the following files:\n. ├── config │ └── theme.yml └── preview.png  It\u0026rsquo;s recommended to copy these files from the Parent theme. Once you have this, you will specify in your child theme theme.yml which theme should be used as a parent. The value must be the theme technical name (ie: the theme folder name).\nparent:classicname:childthemedisplay_name:My first child Themeversion:1.0.0assets:use_parent_assets:trueGo ahead, select this theme in your backoffice and you\u0026rsquo;re all set.\nOverriding templates Without any further modification the child theme will use every template from the parent theme.\nIn the following example we\u0026rsquo;ll modify the category template.\nRe-defining the whole template Create the category template in your child theme templates/catalog/listing/category.tpl. At this point you can do anything you want in this template but most likely you still want to extend product-list template. If so, you don\u0026rsquo;t have to copy product-list template to your child theme, PrestaShop will use the parent file.\nExtend product-list the normal way and override the block you need.\n{extends file=\u0026#39;catalog/listing/product-list.tpl\u0026#39;}Extending the same template Another way to overriding the category template would be to extend the parent template and define just the block you need. There is a little difference if you want to override the same template, you need to add the parent resource (note the parent keyword in the example below).\n{extends file=\u0026#39;parent:catalog/listing/category.tpl\u0026#39;}"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-licenses-update/",
	"title": "prestashop:licenses:update",
	"tags": [],
	"description": "",
	"content": "prestashop:licenses:update Informations  Path: src/PrestaShopBundle/Command/UpdateLicensesCommand.php  Description This command aims to rewrite your license headers to be up-to-date.\nIt works on multiple files extensions: .css, .html.twig, .js, .json, .php, .tpl, .vue.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-linter-legacy-link/",
	"title": "prestashop:linter:legacy-link",
	"tags": [],
	"description": "",
	"content": "prestashop:linter:legacy-link Informations  Path: src/PrestaShopBundle/Command/LegacyLinkLinterCommand.php  Description This command aims to check if _legacy_link is configured in BackOffice routes.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-linter-naming-convention/",
	"title": "prestashop:linter:naming-convention",
	"tags": [],
	"description": "",
	"content": "prestashop:linter:naming-convention Informations  Path: src/PrestaShopBundle/Command/NamingConventionLinterCommand.php  Description This command aims to check if Back Office routes and controllers follow the following naming convention admin_{resources}_{action}.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-linter-security-annotation/",
	"title": "prestashop:linter:security-annotation",
	"tags": [],
	"description": "",
	"content": "prestashop:linter:security-annotation Informations  Path: src/PrestaShopBundle/Command/SecurityAnnotationLinterCommand.php Arguments:  action: Action to perform, must be one of: list and find-missing    Description This command aims to check if Back Office controller routes have configured Security annotations.\nTwo options are available: Listing and Finding Missing.\nListing This option aims to list all routes, and their related permissions.\nFinding missing This option aims to find routes with missing security annotations.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-list-commands-and-queries/",
	"title": "prestashop:list:commands-and-queries",
	"tags": [],
	"description": "",
	"content": "prestashop:list:commands-and-queries Informations  Path: src/PrestaShopBundle/Command/ListCommandsAndQueriesCommand.php  Description This command aims to list all available CQRS commands and queries.\nThat permits to list all classes, with their types (Command or Query) and their description.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-mail-generate/",
	"title": "prestashop:mail:generate",
	"tags": [],
	"description": "",
	"content": "prestashop:mail:generate Informations  Path: src/PrestaShopBundle/Command/GenerateMailTemplatesCommand.php Arguments:  theme: Theme to use for mail templates locale: Locale to use for the templates coreOutputFolder: Output folder to export core templates ((optional)) modulesOutputFolder: Output folder to export modules templates (by default same as core) ((optional))   Options:  --overwrite, -o: Overwrite existing templates (false, by default)    Description This command aims to generate mail templates for a specified theme.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-module/",
	"title": "prestashop:module",
	"tags": [],
	"description": "",
	"content": "prestashop:module Informations  Path: src/PrestaShopBundle/Command/ModuleCommand.php Arguments:  action: Action to execute, must be one of: install, uninstall, enable, disable, enable_mobile, disable_mobile, reset, upgrade, configure module name: Module on which the action will be executed file path: YML file path for configuration (optional)    Description This command aims to manage your modules via command line.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-schema-update-without-foreign/",
	"title": "prestashop:schema:update-without-foreign",
	"tags": [],
	"description": "",
	"content": "prestashop:schema:update-without-foreign Informations  Path: src/PrestaShopBundle/Command/UpdateSchemaCommand.php  Description This command aims to update the database.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-taxes-update-eu-tax-rule-groups/",
	"title": "prestashop:taxes:update-eu-tax-rule-groups",
	"tags": [],
	"description": "",
	"content": "prestashop:taxes:update-eu-tax-rule-groups Informations  Path: src/PrestaShopBundle/Command/UpdateEUTaxruleGroupsCommand.php  Description This command aims to update EU Tax rule groups.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-theme-enable/",
	"title": "prestashop:theme:enable",
	"tags": [],
	"description": "",
	"content": "prestashop:theme:enable Informations  Path: src/PrestaShopBundle/Command/ThemeEnablerCommand.php Arguments:  theme: Module on which the action will be executed    Description This command aims to enable your theme via command line.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-theme-export/",
	"title": "prestashop:theme:export",
	"tags": [],
	"description": "",
	"content": "prestashop:theme:export Informations  Path: src/PrestaShopBundle/Command/ExportThemeCommand.php Arguments:  theme: Directory name of the theme to export    Description This command aims to create a zip file to distribute a theme with its dependencies.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-translation-find-duplicates/",
	"title": "prestashop:translation:find-duplicates",
	"tags": [],
	"description": "",
	"content": "prestashop:translation:find-duplicates Informations  Path: src/PrestaShopBundle/Command/CheckTranslationDuplicatesCommand.php  Description This command aims to find duplicates in your translations.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-update-configuration-file-hooks-listing/",
	"title": "prestashop:update:configuration-file-hooks-listing",
	"tags": [],
	"description": "",
	"content": "prestashop:update:configuration-file-hooks-listing Informations  Path: src/PrestaShopBundle/Command/AppendConfigurationFileHooksListCommand.php  Description This command aims to append configuration file hooks list.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/prestashop-update-sql-upgrade-file-hooks-listing/",
	"title": "prestashop:update:sql-upgrade-file-hooks-listing",
	"tags": [],
	"description": "",
	"content": "prestashop:update:sql-upgrade-file-hooks-listing Informations  Path: src/PrestaShopBundle/Command/AppendHooksListForSqlUpgradeFileCommand.php Arguments:  ps-version: PrestaShop version for which the SQL upgrade file will be searched    Description This command aims to add SQL to the SQL upgrade file which contains hook insert operations.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/price_ranges/",
	"title": "Price ranges",
	"tags": [],
	"description": "",
	"content": "Resources for Price ranges Price_range    Name Format Required Description     id_carrier isInt ✔️ Carrier ID   delimiter1 isUnsignedFloat ✔️    delimiter2 isUnsignedFloat ✔️     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;price_range\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_carrier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_carrier\u0026gt; \u0026lt;delimiter1\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delimiter1\u0026gt; \u0026lt;delimiter2\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delimiter2\u0026gt; \u0026lt;/price_range\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/maintainers-guide/processes/",
	"title": "Processes",
	"tags": [],
	"description": "",
	"content": "Processes Security recommendations Maintainer GitHub accounts are granted extended rights on the PrestaShop organization.\nWe require from maintainers to take the necessary steps to make sure this account is protected. This means, but not only:\n enable 2FA on GitHub use a safe and strong password be very careful about GitHub tokens granting account accesses  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/product_customization_fields/",
	"title": "Product customization fields",
	"tags": [],
	"description": "",
	"content": "Resources for Product customization fields Customization_field    Name Format Required Max size Description     id_product isUnsignedId ✔️  Product ID   type isUnsignedId ✔️     required isBool ✔️     is_module isBool ❌     is_deleted isBool ❌     name  ✔️ 255     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;customization_field\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/type\u0026gt; \u0026lt;required\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/required\u0026gt; \u0026lt;is_module\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_module\u0026gt; \u0026lt;is_deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_deleted\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/customization_field\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/faq/product/",
	"title": "Product FAQ",
	"tags": [],
	"description": "",
	"content": "Product FAQ  Product cover  Product cover  Q: How can I override the cover image of my products?\nA: By default, when a product is displayed in a list its cover image is used, it is configurable in the BackOffice and is set in product properties via the cover_image_id key. If you want to change this default behaviour you can use the actionGetProductPropertiesAfter in your module and change this key.\n\u0026lt;?php /** * Here is an example where we use the first combination image instead of the default cover image, * this is useful when you want to display an image matching your current research for example. */ public function hookActionGetProductPropertiesAfter($params) { $product = $params[\u0026#39;product\u0026#39;]; $productInstance = new Product($product[\u0026#39;id_product\u0026#39;]); $productAttributeId = $product[\u0026#39;id_product_attribute\u0026#39;]; $combinationImages = $productInstance-\u0026gt;getCombinationImages($params[\u0026#39;id_lang\u0026#39;]); if (empty($combinationImages) || empty($combinationImages[$productAttributeId])) { return; } // Update cover image ID to use the first image of the product combination  $attributesImages = $combinationImages[$productAttributeId]; if (isset($attributesImages[0][\u0026#39;id_image\u0026#39;])) { $params[\u0026#39;product\u0026#39;][\u0026#39;cover_image_id\u0026#39;] = $attributesImages[0][\u0026#39;id_image\u0026#39;]; } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/product_feature_values/",
	"title": "Product feature values",
	"tags": [],
	"description": "",
	"content": "Resources for Product feature values Product_feature_value    Name Format Required Max size Description     id_feature isUnsignedId ✔️     custom isBool ❌     value isGenericName ✔️ 255     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product_feature_value\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_feature\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_feature\u0026gt; \u0026lt;custom\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/custom\u0026gt; \u0026lt;value\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/value\u0026gt; \u0026lt;/product_feature_value\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/product_features/",
	"title": "Product features",
	"tags": [],
	"description": "",
	"content": "Resources for Product features Product_feature    Name Format Required Max size Description     position isInt ❌     name isGenericName ✔️ 128     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product_feature\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;position\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/position\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/product_feature\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/product_option_values/",
	"title": "Product option values",
	"tags": [],
	"description": "",
	"content": "Resources for Product option values Product_option_value    Name Format Required Max size Description     id_attribute_group isUnsignedId ✔️     color isColor ❌     position isInt ❌     name isGenericName ✔️ 128     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product_option_value\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_attribute_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_attribute_group\u0026gt; \u0026lt;color\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/color\u0026gt; \u0026lt;position\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/position\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/product_option_value\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/product_options/",
	"title": "Product options",
	"tags": [],
	"description": "",
	"content": "Resources for Product options Product_option    Name Format Required Max size Description     is_color_group isBool ❌     group_type  ✔️     position isInt ❌     name isGenericName ✔️ 128    public_name isGenericName ✔️ 64    associations  ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product_option\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;is_color_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_color_group\u0026gt; \u0026lt;group_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/group_type\u0026gt; \u0026lt;position\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/position\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;public_name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/public_name\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;product_option_values\u0026gt; \u0026lt;product_option_value\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/product_option_value\u0026gt; \u0026lt;/product_option_values\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/product_option\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/product_suppliers/",
	"title": "Product suppliers",
	"tags": [],
	"description": "",
	"content": "Resources for Product suppliers Product_supplier    Name Format Required Max size Description     id_product isUnsignedId ✔️  Product ID   id_product_attribute isUnsignedId ✔️  Product attribute ID   id_supplier isUnsignedId ✔️  Supplier ID   id_currency isUnsignedId ❌  Currency ID   product_supplier_reference isReference ❌ 64    product_supplier_price_te isPrice ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product_supplier\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;product_supplier_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_supplier_reference\u0026gt; \u0026lt;product_supplier_price_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_supplier_price_te\u0026gt; \u0026lt;/product_supplier\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/products/",
	"title": "Products",
	"tags": [],
	"description": "",
	"content": "Resources for Products Product    Name Format Required Writable Max size Not filterable Description     id_manufacturer isUnsignedId ❌ ✔️   Manufacturer ID   id_supplier isUnsignedId ❌ ✔️   Supplier ID   id_category_default isUnsignedId ❌ ✔️      new  ❌ ✔️      cache_default_attribute  ❌ ✔️      id_default_image  ❌ ✔️  true    id_default_combination  ❌ ✔️  true    id_tax_rules_group isUnsignedId ❌ ✔️   Tax rules group ID   position_in_category  ❌ ✔️  true    manufacturer_name  ❌ ❌  true    quantity  ❌ ❌  true    type  ❌ ✔️  true    id_shop_default isUnsignedId ❌ ✔️   Default shop ID   reference isReference ❌ ✔️ 64     supplier_reference isReference ❌ ✔️ 64     location isReference ❌ ✔️ 64     width isUnsignedFloat ❌ ✔️      height isUnsignedFloat ❌ ✔️      depth isUnsignedFloat ❌ ✔️      weight isUnsignedFloat ❌ ✔️      quantity_discount isBool ❌ ✔️      ean13 isEan13 ❌ ✔️ 13     isbn isIsbn ❌ ✔️ 32     upc isUpc ❌ ✔️ 12     mpn isMpn ❌ ✔️ 40     cache_is_pack isBool ❌ ✔️      cache_has_attachments isBool ❌ ✔️      is_virtual isBool ❌ ✔️      state isUnsignedId ❌ ✔️      additional_delivery_times isUnsignedId ❌ ✔️      delivery_in_stock isGenericName ❌ ✔️ 255     delivery_out_stock isGenericName ❌ ✔️ 255     on_sale isBool ❌ ✔️      online_only isBool ❌ ✔️      ecotax isPrice ❌ ✔️      minimal_quantity isUnsignedInt ❌ ✔️      low_stock_threshold isInt ❌ ✔️      low_stock_alert isBool ❌ ✔️      price isPrice ✔️ ✔️      wholesale_price isPrice ❌ ✔️      unity isString ❌ ✔️      unit_price_ratio  ❌ ✔️      additional_shipping_cost isPrice ❌ ✔️      customizable isUnsignedInt ❌ ✔️      text_fields isUnsignedInt ❌ ✔️      uploadable_files isUnsignedInt ❌ ✔️      active isBool ❌ ✔️      redirect_type isString ❌ ✔️      id_type_redirected isUnsignedId ❌ ✔️      available_for_order isBool ❌ ✔️      available_date isDateFormat ❌ ✔️      show_condition isBool ❌ ✔️      condition isGenericName ❌ ✔️      show_price isBool ❌ ✔️      indexed isBool ❌ ✔️      visibility isProductVisibility ❌ ✔️      advanced_stock_management isBool ❌ ✔️      date_add isDate ❌ ✔️      date_upd isDate ❌ ✔️      pack_stock_type isUnsignedInt ❌ ✔️      meta_description isGenericName ❌ ✔️ 512     meta_keywords isGenericName ❌ ✔️ 255     meta_title isGenericName ❌ ✔️ 255     link_rewrite isLinkRewrite ❌ ✔️ 128     name isCatalogName ❌ ✔️ 128     description isCleanHtml ❌ ✔️      description_short isCleanHtml ❌ ✔️      available_now isGenericName ❌ ✔️ 255     available_later IsGenericName ❌ ✔️ 255     associations  ❌ ✔️       Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;product\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_manufacturer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_manufacturer\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_category_default\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_category_default\u0026gt; \u0026lt;new\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/new\u0026gt; \u0026lt;cache_default_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/cache_default_attribute\u0026gt; \u0026lt;id_default_image\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_default_image\u0026gt; \u0026lt;id_default_combination\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_default_combination\u0026gt; \u0026lt;id_tax_rules_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_tax_rules_group\u0026gt; \u0026lt;position_in_category\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/position_in_category\u0026gt; \u0026lt;type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/type\u0026gt; \u0026lt;id_shop_default\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_default\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;supplier_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/supplier_reference\u0026gt; \u0026lt;location\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/location\u0026gt; \u0026lt;width\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/width\u0026gt; \u0026lt;height\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/height\u0026gt; \u0026lt;depth\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/depth\u0026gt; \u0026lt;weight\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/weight\u0026gt; \u0026lt;quantity_discount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity_discount\u0026gt; \u0026lt;ean13\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ean13\u0026gt; \u0026lt;isbn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/isbn\u0026gt; \u0026lt;upc\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/upc\u0026gt; \u0026lt;mpn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mpn\u0026gt; \u0026lt;cache_is_pack\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/cache_is_pack\u0026gt; \u0026lt;cache_has_attachments\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/cache_has_attachments\u0026gt; \u0026lt;is_virtual\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_virtual\u0026gt; \u0026lt;state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/state\u0026gt; \u0026lt;additional_delivery_times\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/additional_delivery_times\u0026gt; \u0026lt;delivery_in_stock\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/delivery_in_stock\u0026gt; \u0026lt;delivery_out_stock\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/delivery_out_stock\u0026gt; \u0026lt;on_sale\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/on_sale\u0026gt; \u0026lt;online_only\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/online_only\u0026gt; \u0026lt;ecotax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ecotax\u0026gt; \u0026lt;minimal_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/minimal_quantity\u0026gt; \u0026lt;low_stock_threshold\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/low_stock_threshold\u0026gt; \u0026lt;low_stock_alert\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/low_stock_alert\u0026gt; \u0026lt;price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price\u0026gt; \u0026lt;wholesale_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/wholesale_price\u0026gt; \u0026lt;unity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unity\u0026gt; \u0026lt;unit_price_ratio\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unit_price_ratio\u0026gt; \u0026lt;additional_shipping_cost\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/additional_shipping_cost\u0026gt; \u0026lt;customizable\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/customizable\u0026gt; \u0026lt;text_fields\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/text_fields\u0026gt; \u0026lt;uploadable_files\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/uploadable_files\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;redirect_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/redirect_type\u0026gt; \u0026lt;id_type_redirected\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_type_redirected\u0026gt; \u0026lt;available_for_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/available_for_order\u0026gt; \u0026lt;available_date\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/available_date\u0026gt; \u0026lt;show_condition\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/show_condition\u0026gt; \u0026lt;condition\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/condition\u0026gt; \u0026lt;show_price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/show_price\u0026gt; \u0026lt;indexed\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/indexed\u0026gt; \u0026lt;visibility\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/visibility\u0026gt; \u0026lt;advanced_stock_management\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/advanced_stock_management\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;pack_stock_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/pack_stock_type\u0026gt; \u0026lt;meta_description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_description\u0026gt; \u0026lt;meta_keywords\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_keywords\u0026gt; \u0026lt;meta_title\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_title\u0026gt; \u0026lt;link_rewrite\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/link_rewrite\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/description\u0026gt; \u0026lt;description_short\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/description_short\u0026gt; \u0026lt;available_now\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/available_now\u0026gt; \u0026lt;available_later\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/available_later\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;categories\u0026gt; \u0026lt;category\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/category\u0026gt; \u0026lt;/categories\u0026gt; \u0026lt;images\u0026gt; \u0026lt;image\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/image\u0026gt; \u0026lt;/images\u0026gt; \u0026lt;combinations\u0026gt; \u0026lt;combination\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/combination\u0026gt; \u0026lt;/combinations\u0026gt; \u0026lt;product_option_values\u0026gt; \u0026lt;product_option_value\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/product_option_value\u0026gt; \u0026lt;/product_option_values\u0026gt; \u0026lt;product_features\u0026gt; \u0026lt;product_feature\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_feature_value\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_feature_value\u0026gt; \u0026lt;/product_feature\u0026gt; \u0026lt;/product_features\u0026gt; \u0026lt;tags\u0026gt; \u0026lt;tag\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/tag\u0026gt; \u0026lt;/tags\u0026gt; \u0026lt;stock_availables\u0026gt; \u0026lt;stock_available\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;/stock_available\u0026gt; \u0026lt;/stock_availables\u0026gt; \u0026lt;accessories\u0026gt; \u0026lt;product\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/product\u0026gt; \u0026lt;/accessories\u0026gt; \u0026lt;product_bundle\u0026gt; \u0026lt;product\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity\u0026gt; \u0026lt;/product\u0026gt; \u0026lt;/product_bundle\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/product\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/page-reference/back-office/order/refunds/",
	"title": "Refunds",
	"tags": [],
	"description": "",
	"content": "Cancellations and refunds  For a full specification of how these features work, you can read the functional specifications Order history and corresponding cancellation types Refund features are not activated by default. To activate them, go to the \u0026ldquo;Merchandise returns\u0026rdquo; page under the \u0026ldquo;Customer Service\u0026rdquo; menu, and activate the \u0026ldquo;Product returns\u0026rdquo; option at the bottom of the page. This will apply to all products and orders. In the order detail page, return product, cancel product, and standard refund buttons can only exist exclusively, following these rules:\n  If the order has been shipped, then the available action will be return product.\n  If the order has been paid but not shipped yet, then the available action will be standard refund.\n  In all other cases, the available action is cancel product.\n  The Partial refund button is available once a payment was made on the order, it can exist jointly with other refunds, and it exists even if the \u0026ldquo;Product returns\u0026rdquo; option was not enabled.\nPerforming cancellation actions programmatically Introduction Since Prestashop 1.7.7, cancellation actions (that is to say cancel product, return product, standard refund and partial refund) are implemented following the CQRS design pattern.\nYou will find more informations about Prestashop\u0026rsquo;s CQRS implementation on this page. Performing these actions is always a two step process:\n1/ Instantiate the corresponding CQRS command.\n2/ Give the command to the CQRS command bus.\nIn the code, it looks like this:\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\CommandBus\\CommandBusInterface; use PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\\CancelOrderProductCommand; // Instantiate the corresponding command $command = new CancelOrderProductCommand( $cancelledProducts, $orderId ); // Give it to the command bus $this-\u0026gt;commandBus-\u0026gt;handle($command); The following section will detail each cancellation commands and their required parameters.\nList of refunds related CQRS commands Note that all those commands are in this namespace: PrestaShop\\PrestaShop\\Core\\Domain\\Order\\Command\n   CQRS Command Parameters Description     CancelOrderProductCommand      array $cancelledProducts\nContains OrderDetail IDs (int) and quantities (int) to be cancelled:\n[$orderDetailId =\u0026gt; $quantity] An array containing a list of products (oderDetails) to be canceled. Each cancelled product is itself an array having the OrderDetail ID (int) as a key, and the quantity (int) to be cancelled as a value    int $orderId The id of the order containg the products being cancelled   IssueStandardRefundCommand      int $orderId The id of the order containing the products to be refunded    array $refunds\nContains a list of refunds, each refund is an array containing an OrderDetail ID (int) and a quantity (int) to be refunded:\n[$orderDetailId =\u0026gt; ['quantity' =\u0026gt; $quantity]] An array containing a list of products (oderDetails) to be refunded    bool $refundShippingCost Wether shipping cost should be refunded    bool $generateCreditSlip Wether a credit slip should be generated    bool $generateVoucher Wether a voucher should be generated    int $voucherRefundType Id of the voucher refund type, those can be found in the file VoucherRefundType.php   IssueReturnProductCommand      int $orderId The id of the order containing the products to be returned    array $refunds\nContains a list of refunds, each refund is an array containing an OrderDetail ID (int) and a quantity (int) to be refunded:\n[$orderDetailId =\u0026gt; ['quantity' =\u0026gt; $quantity]] An array containing a list of products (oderDetails) to be returned    bool $restockRefundedProducts Wether returned product should be put back in the stock (incrementing its quantity in stock)    bool $refundShippingCost Wether shipping cost should be refunded    bool $generateCreditSlip Wether a credit slip should be generated    bool $generateVoucher Wether a voucher should be generated    int $voucherRefundType Id of the voucher refund type, those can be found in the file VoucherRefundType.php   IssuePartialRefundCommand      int $orderId The id of the order containing the products to be refunded    array $refunds\nContains a list of refunds, each refund is an array containing an OrderDetail ID (int), a quantity (int) and amount (float) to be refunded:\n[$orderDetailId =\u0026gt; [\n'quantity' =\u0026gt; $quantity,'amount' =\u0026gt; $amount]\n] An array containing a list of products (oderDetails) to be refunded    string $shippingCostRefundAmount Amount to be refunded for shipping cost    bool $restockRefundedProducts Wether refunded products should be put back in the stock (incrementing its quantity in stock)    bool $generateCreditSlip Wether a credit slip should be generated    bool $generateVoucher Wether a voucher should be generated    int $voucherRefundType Id of the voucher refund type, those can be found in the file VoucherRefundType.php    The actionProductCancel hook Since Prestashop 1.7.7, the actionProductCancel hook is triggered by all refund actions, it was not the case in 1.7.6, see the differences in the table below:\n   Does this action trigger the actionProductCancel hook ? 1.7.6 1.7.7     Cancel product yes yes   Standard refund yes yes   Partial refund no yes   Return product yes yes    How to know which action triggered the actionProductCancel hook ? In Prestashop 1.7.7 Since Prestashop 1.7.7, the actionProductCancel hook has an action parameter indicating which action was performed. Its value is one of the attributes of the CancellationActionType class.\n\u0026lt;?php public function hookActionProductCancel($params) { // let\u0026#39;s say you want to check what user action triggered the hook:  if ($params[\u0026#39;action\u0026#39;] === CancellationActionType::STANDARD_REFUND) { // the hook was triggered by a \u0026#34;standard refund\u0026#34;  } else if ($params[\u0026#39;action\u0026#39;] === CancellationActionType::RETURN_PRODUCT) { // the hook was triggered by a \u0026#34;return product\u0026#34;  } } In Prestashop 1.7.6 In Prestashop 1.7.6 there\u0026rsquo;s no \u0026lsquo;action\u0026rsquo; parameter, but you can still guess what action was being performed given the order\u0026rsquo;s history, here\u0026rsquo;s how it looks like in the code:\n\u0026lt;?php if ($order-\u0026gt;hasBeenShipped()) { // this is a \u0026#39;return product\u0026#39; action } else if ($order-\u0026gt;hasBeenPaid() { // this is a \u0026#39;standard refund\u0026#39; } else { // this is a \u0026#39;cancel product\u0026#39;  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/release/",
	"title": "Release",
	"tags": [],
	"description": "",
	"content": "Releasing PrestaShop software This sections aims to explain the different concepts and processes behind releasing a new version of PrestaShop.\nIn this section  Minor release lifecycle   Patch release lifecycle   Release a native PrestaShop module   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/maintainers-guide/reviewing-pull-requests/",
	"title": "Reviewing Pull Requests",
	"tags": [],
	"description": "",
	"content": "Reviewing Pull Requests The code review process is generally regarded as a good practice and is adopted by hundreds of software projects around the world.\nIt provides lot of benefits:\n it helps spotting errors in the code, because we all make mistakes and it can be hard to find one\u0026rsquo;s own mistakes. it helps improving code quality not only by ensuring it\u0026rsquo;s readable and understandable, but also by pinpointing design, performance or security issues that may have been unintentionally introduced by the author. it helps spread knowledge of the code base, because the reviewer will learn how your code works too.  Reviewing is a discussion, not a to-do list. The main goal is to find the best solution by sharing different points of view. Approving Pull Requests Maintainers are responsible for the Pull Requests they approve. The main objective of this process is to make sure that the change being reviewed does not produce undesired side effects and that it\u0026rsquo;s inclusion is coherent with the project\u0026rsquo;s objectives.\nHere are the rules for approving a Pull Request:\n The change must follow the contribution guidelines, including:  Coding standards License \u0026amp; license headers Proper description   The change must not introduce evident regressions (including breaking changes) nor substantially increase entropy, unless it\u0026rsquo;s properly justified. The change must provide enough value to be worth merging.  Fulfilling the above requirements does not automatically imply that such a contribution must be accepted.\nConversely, non-compliant contributions should not be accepted. Collaborate with other teams Pull Requests introduce into the codebase many kinds of changes.\nSome Pull Requests do fix bugs. Sometimes the fix is done in a simple way, and the review is easy, sometimes the solution is more complex, and the reviewer must evaluate whether the submitted solution is good or if a better (simpler?) is desirable. It is recommended in such cases to ask for the opinion of other maintainers.\nSome Pull Requests do introduce new behavior changes (a new button, a new Back-Office page, a new feature\u0026hellip;) . If the change is impactful, such Pull Requests cannot be merged without the Product Team approval. It can be asked by marking the Pull Request and/or the related Issue with label \u0026ldquo;Waiting for PM\u0026rdquo; and Product Team will mark validated changes with label \u0026ldquo;PM ✓\u0026rdquo;.\nSome Pull Requests do introduce new UX changes (changing a layout, modifying a color\u0026hellip;) . If the change is impactful, such Pull Requests cannot be merged without the UX Team approval. It can be asked by marking the Pull Request and/or the related Issue with label \u0026ldquo;Waiting for UX\u0026rdquo; and UX Team will mark validated changes with label \u0026ldquo;UX ✓\u0026rdquo;.\nSome Pull Requests do introduce new wording changes. Usually, Prestonbot will detect such Pull Requests and automatically add the \u0026ldquo;Waiting for wording\u0026rdquo; label. The Wording Team will review the Pull Request and work with the author until it is valid. At this moment the Pull Request is labelled \u0026ldquo;Wording ✓\u0026rdquo;. Without this label, such Pull Requests cannot be merged.\nSome Pull Requests do introduce new technical changes (a new dependency, a new extensibility mechanism)\u0026hellip; If the change is impactful, it is recommended for Pull Requests to ask for the opinion of multiple maintainers. For changes that are important, a Voting phase might be needed.\nAll these Teams can be reached out on the Slack channel.\nDiscussing with author During review, maintainers can ask questions to the Pull Request author (for example to better understand a technical choice). Simply writing the question as a comment is enough.\nWhen doing so, it is recommended to add the label \u0026ldquo;Waiting for author\u0026rdquo; on the Pull Request. This helps other maintainers to know this Pull Request state.\nBots helping maintainers There are multiple bots that monitor the Issues and Pull Requests on GitHub.\nPrestonbot will try to add relevant informations on new Pull Requests and evaluate whether there are missing/invalid items. Following the Pull Request template, Prestonbot will add labels on the Pull Requests.\nLists of red flags Here is a list of things that should not be approved in a Pull Request\n Anti-patterns or code that clearly violates software development best practices such as SOLID principles. Code that does not comply with current PrestaShop architecture, unless for good reasons (example: some View logic inside the Model layer). Code that scales poorly and/or performs poorly. Code that is very hard to read and consequently less maintainable. Code that ignores one standard PrestaShop usecase (example: logic that only makes sense for EU rules or USA rules). Code that ignores part of PrestaShop user audience (example: CSS that is not RTL-compliant). Code that is not secure.  More details available here.\nAbout BC breaks Since PrestaShop follows SemVer, we should not accept Pull Requests introducing Breaking Changes unless they will be delivered in a new Major version.\nExceptions to this rule can however be made, for good reasons only such as:\n Security issue that cannot be fixed in a backward compatible manner Architecture/Design issue that cannot be fixed in an efficient and backward compatible manner Expected and announced beforehand change such as migrating a legacy page into a Symfony page  Maintainers are gatekeepers Approving a Pull Request is actually a meaningful act. It carries multiple messages:\n1. The submitted code is correct and its quality meets our expectations.\nThis is obviously a requirement for the Pull Request to be approved.\n2. The outcome of this Pull Request is desirable.\nSome Pull Requests are correct but are not merged because they do not benefit the project. For example a Pull Request that enables the support of XCF format for images is likely to be rejected as this image format is very rarely used in eCommerce.\n3. We accept to introduce this new code into our scope.\nCode that is merged inside the project becomes part of its scope. It means the maintainers team agree to maintain, manage, test, document and update this code as if it was their own.\nPart of the Pull Request might also be integrated into PrestaShop public API which must evolve in a backward compatible manner to comply with SemVer. This means that once that it is released, it is quite frozen and must be preserved.\nMerging Pull Requests A Pull Request may only be merged after the following requirements have been fulfilled:\n The change must not have any outstanding merge conflicts. The change has been approved by at least one maintainer (two maintainers for the PrestaShop Core repository). Automated checks (including automated tests) are passing. The change has been approved by the QA team using the \u0026ldquo;QA ✓\u0026rdquo; label, unless there\u0026rsquo;s a general agreement that the change is not testable by QA.  Marking merged Pull Requests When merging a Pull Request on the Core Repository, maintainer must do the following, if it has not been done by someone else:\n Link the Pull Request to the right milestone. The milestone to choose is the next target release. Add the label \u0026ldquo;Key feature\u0026rdquo; if the Pull Request must be mentioned in the Release Note. Add the label \u0026ldquo;BC break\u0026rdquo; if the Pull Request introduces a BC Break.  The items above are very important as they will be key to writing a good Release Note and ChangeLog for the next version.\nIt is also recommended to :\n Thank the Pull Request author and anybody else who invested notable energy into the Pull Request (code review, code suggestions, QA validation, usecase specification \u0026hellip;). If the Pull Request is related to an issue, check whether the issue is fixed and closed (it might be done automatically depending on the Pull Request) and whether it should be.  Stale Pull Requests Pull Requests may be closed after 30 days of inactivity following a request for modifications.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/rtl/",
	"title": "Right-To-Left languages",
	"tags": [],
	"description": "",
	"content": "Right-to-Left languages PrestaShop supports Right-to-Left (RTL) languages natively, both in the Back Office and the Front Office. It can automatically transform themes to make them compatible with RTL languages.\nAny Front Office theme can be transformed automatically by PrestaShop. Read \u0026ldquo;RTL support\u0026rdquo; in the Themes section to learn more about this system.\nBack Office support The Back Office uses the same \u0026ldquo;theme-flipping\u0026rdquo; system as the Front Office feature. While for Front Office themes the transformation procedure must be triggered manually, in the BO this is performed automatically whenever an RTL language is activated on the shop, either by installing an RTL language or by setting up a language as RTL via edit in the BO.\nRegenerating the RTL theme This assumes you have read the \u0026ldquo;RTL support\u0026rdquo; article linked above. Remember that PrestaShop won\u0026rsquo;t overwrite already existing files. You need to delete the files you want to regenerate beforehand. If you changed something in your Back Office theme and you want your change to be applied to the RTL theme, you can regenerate any RTL generated file by using this simple trick:\n First, delete the _rtl.css file you want to regenerate. Go to International \u0026gt; Localization, then click the \u0026ldquo;Languages\u0026rdquo; tab. Edit any language. Toggle the \u0026ldquo;Is RTL language\u0026rdquo; (see figure below) to \u0026ldquo;Yes\u0026rdquo; and save.\nIf the language was already RTL, toggle it to \u0026ldquo;No\u0026rdquo; and save before changing it back to \u0026ldquo;Yes\u0026rdquo;.    Toggling RTL for a language   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/rtl/",
	"title": "RTL support",
	"tags": [],
	"description": "",
	"content": "RTL support PrestaShop supports RTL (Right-to-left) themes natively.\nRTL stylesheets There are two ways of customizing your theme for RTL: either by adding an override file that is only loaded for RTL languages, or by using completely different version of the theme\u0026rsquo;s stylesheets.\nCSS override file PrestaShop will try to load a css file named rtl.css after your theme\u0026rsquo;s ones when displayed in an RTL language. You can use this file to place any style override you need for RTL.\nRTL version  When the shop is displayed in an RTL language, PrestaShop will automatically try and load RTL versions of the theme\u0026rsquo;s stylesheets if they are available, instead of the \u0026ldquo;normal\u0026rdquo; ones.\nRTL versions are automatically \u0026ldquo;discovered\u0026rdquo; by PrestaShop using a simple convention: to obtain the RTL version name, you just need to add _rtl to the end of the standard file name.\nExample:\n   Original name RTL version name     theme.css theme_rtl.css   theme-custom.css theme-custom_rtl.css    Stylesheet generation  PrestaShop can also automagically generate an RTL version of your theme\u0026rsquo;s stylesheets based on the original CSS files.\nFollow this steps to generate RTL stylesheets for your theme:\n Open your shop\u0026rsquo;s Back Office. Go to the \u0026ldquo;Design \u0026gt; Theme \u0026amp; Logo\u0026rdquo; page. Scroll down to the \u0026ldquo;Adaptation to right-to-left languages\u0026rdquo; section.\nNote: this is only visible if you have an RTL language installed on your shop. Choose the theme you want to generate stylesheets for. Toggle \u0026ldquo;Generate RTL stylesheet\u0026rdquo; to \u0026ldquo;Yes\u0026rdquo;. Press \u0026ldquo;Save\u0026rdquo;.    RTL generation in the back office   This process will generate _rtl.css files for every .css file in the theme.\nPrestaShop won\u0026rsquo;t generate a file if one with the same name already exists.\nIf you want to regenerate a file, you have to delete it first. Polishing it up Sometimes the automatic transformation won\u0026rsquo;t be enough to get your theme exactly how you want it.\nYou should never modify generated _rtl.css files – they are generated automatically by PrestaShop.\nIf you need to add some specific css to fix your RTL transformed files, use .rtlfix files. The content of those files is appended to the RTL version of that file after it\u0026rsquo;s transformed.\nThis is what PrestaShop does for each .css file in the theme:\n Take a file (let\u0026rsquo;s say it\u0026rsquo;s called my-file.css) If my-file_rtl.css exists, move on to the next file. Transform my-file.css to RTL and save its contents to my-file_rtl.css If a file named my-file.rtlfix exists, append its contents to my-file_rtl.css.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/security-policy/",
	"title": "Security policy",
	"tags": [],
	"description": "",
	"content": "Security Policy Obviously, PrestaShop project security is a critical matter. PrestaShop teams are dedicated to keep a high level of security in every aspects of the software.\nHowever a software without vulnerability does not exist, which is why there is a security report process. If you find a security issue, please follow it to responsibly disclose your findings.\nReporting a Vulnerability Security issues can be reported by sending an email to security@prestashop.com or through our YesWeHack Bug Bounty Program, which will go to security team members.\nWhen the security team receives a security bug report, the report will be assigned to a primary handler. This person will coordinate the fix and release process, involving the following steps:\n Confirm the problem and determine the affected versions. Audit code to find any potential similar problems. Prepare fixes for all releases still under maintenance. These fixes will be released as fast as possible.  The security team will follow up with a response indicating the next steps in handling the report.\nIf the issue is confirmed, the security team will keep you informed of the progress towards a fix and full announcement, and may ask for additional information or guidance.\nDisclosure Policy In general, public disclosure are made after the issue has been fully identified and a patch is ready to be released.\nSecurity release process Here is a short summary of the steps followed by the primary handler:\n  Security issues is reported to security@prestashop.com or through the YesWeHack Bug Bounty Program.\n  Security issues is assessed to identify their criticality level.\n   Minor issues are scoped to be fixed in the next scheduled minor release Critical issues are scoped to be fixed as soon as possible, meaning a patch release is delivered usually within 72 hours   For both minor and critical issues, a GitHub Security Advisory will be created to register the issue in GitHub CVE database.\n  A Private Security Forks is used to prepare a patch Pull Request for the advisory. The Pull Request then reviewed and tested by QA.\n  When all patch Pull Requests are ready (in the event that multiple issues are reported), they are all merged and a new Patch Release is built and delivered. Security Advisories are published and the vulnerabilities are disclosed in a Release Note, urging all PrestaShop users to upgrade in order to protect their shops.\n  (click on it to see full size)\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/faq/shipping/",
	"title": "Shipping FAQ",
	"tags": [],
	"description": "",
	"content": "Shipping FAQ  Shipping information How do I add a service fee to an order?  Shipping information Q: Where and how should I read and write the following informations to be sure that my module is compatible with every shipping modules:\n Tracking number Carrier name Estimated delivery date Real delivery date  A: These details are stored at different places.\nCarrier details Information related to a shipping (= delivery method) may be found / stored with the class Carrier.\n You may call Carrier::getCarriers(...) to retrieve all the carriers existing on the shop, with the details about their name, the module related, the delay\u0026hellip; If you need to update one of these carriers, you may use the Carrier (ObjectModel) class. Instantiate the carrier you need with:  \u0026lt;?php // From the carrier ID stored in the var $carrierId  $carrier = new \\Carrier($carrierId); // Apply changes to the $carrier object, then save. $carrier-\u0026gt;save(); Order specific details Some other details are specific to each order, like the tracking number. Regarding the required fields in your question, there is no place to store the real delivery date in the core tables.\nYou may reach the order delivery details with the following example:\n\u0026lt;?php // From an Order ID you have $order = new Order($orderId); $orderCarrier = new OrderCarrier($order-\u0026gt;getIdOrderCarrier()); // 1- Get tracking number $trackingNumber = $orderCarrier-\u0026gt;tracking_number; // 2- Set tracking number $orderCarrier-\u0026gt;tracking_number = \u0026#39;ABDC00F\u0026#39;; $orderCarrier-\u0026gt;save(); How do I add a service fee to an order? I want to create a module that provides an additional service (insurance, tracking, …) to an order. The service is billed to the buyer not the merchant.\nHow do I add a service fee to an order ?\nTODO:write answer\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/shop_groups/",
	"title": "Shop groups",
	"tags": [],
	"description": "",
	"content": "Resources for Shop groups Shop_group    Name Format Required Max size Description     name isGenericName ✔️ 64    share_customer isBool ❌     share_order isBool ❌     share_stock isBool ❌     active isBool ❌     deleted isBool ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;shop_group\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;share_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/share_customer\u0026gt; \u0026lt;share_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/share_order\u0026gt; \u0026lt;share_stock\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/share_stock\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;/shop_group\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/shop_urls/",
	"title": "Shop urls",
	"tags": [],
	"description": "",
	"content": "Resources for Shop urls Shop_url    Name Format Required Max size Description     id_shop  ✔️  Shop ID   active isBool ❌     main isBool ❌     domain isCleanHtml ✔️ 255    domain_ssl isCleanHtml ❌ 255    physical_uri  ❌ 64    virtual_uri  ❌ 64     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;shop_url\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;main\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/main\u0026gt; \u0026lt;domain\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/domain\u0026gt; \u0026lt;domain_ssl\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/domain_ssl\u0026gt; \u0026lt;physical_uri\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/physical_uri\u0026gt; \u0026lt;virtual_uri\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/virtual_uri\u0026gt; \u0026lt;/shop_url\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/shop-choice-tree/",
	"title": "ShopChoiceTreeType",
	"tags": [],
	"description": "",
	"content": "ShopChoiceTreeType The ShopChoiceTreeType is subtype of MaterialChoiceTreeType which is configured to be used for shop association input.\nType options    Option Type Default Description     multiple bool true Whether multiple shops can be selected or not.    Required Javascript components    Component Description     admin-dev/themes/new-theme/js/components/form/choice-tree.js Manages interaction of choice tree    Code example Add ShopChoiceTreeType to your form.\n\u0026lt;?php use Symfony\\Component\\Form\\AbstractType; use PrestaShopBundle\\Form\\Admin\\Type\\ShopChoiceTreeType; class SomeType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder-\u0026gt;add(\u0026#39;shop_association\u0026#39;, ShopChoiceTreeType::class); } } Preview example   ShopChoiceTreeType rendered in form   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/shops/",
	"title": "Shops",
	"tags": [],
	"description": "",
	"content": "Resources for Shops Shop    Name Format Required Max size Description     id_shop_group  ✔️  Shop group ID   id_category  ✔️     active isBool ❌     deleted isBool ❌     name isGenericName ✔️ 64    color isColor ❌     theme_name isThemeName ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;shop\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;id_category\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_category\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;color\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/color\u0026gt; \u0026lt;theme_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/theme_name\u0026gt; \u0026lt;/shop\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/shortcodes/",
	"title": "Shortcodes",
	"tags": [],
	"description": "",
	"content": "Shortcodes Hugo provides a nice feature that extends Markdown: shortcodes.\nHow they work Shortcodes are a special tags that you can use when writing your content that are interpreted by Hugo before the Markdown parser. You can think of them as \u0026ldquo;template macros\u0026rdquo;.\nThere are two kinds of shortcodes:\n  Tag style (surrounds your content)\n{{% ExampleShortcode %}} My custom content goes here {{% /ExampleShortcode %}}   Placeholder style (self-closing, adds some content)\n{{% ExampleShortcode %}}   Markdown expansion vs raw HTML You can choose to delimit your shortcodes with either {{% %}} or {{\u0026lt; \u0026gt;}}.\nIf you use the {{% %}} notation, the content you include between the opening and the closing tag will be processed using Markdown. Otherwise, it will be treated as raw HTML.\nParameters Some shortcodes also accept parameters. Use them like this:\n{{% ExampleShortcode param1=\u0026#34;value1\u0026#34; params2=\u0026#34;value2\u0026#34; %}} Quick reference Some default shortcodes are provided by Hugo (read shortcodes documentation) and some have been custom-made for this theme.\nHere are the most useful shortcodes, both native and custom:\n callout – Displays a block inside your document to make some information stand out. funcdef – Displays a styled function definition list. minver – Displays a version pill. notice – Displays a \u0026ldquo;note\u0026rdquo;, \u0026ldquo;tip\u0026rdquo; or \u0026ldquo;warning\u0026rdquo; box to highlight important information. ref – Links to another DevDocs page or a section of the page.  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/smarty-extensions/",
	"title": "Smarty Extensions",
	"tags": [],
	"description": "",
	"content": "Smarty Extensions PrestaShop provides several smarty helper functions and modifiers.\nFunctions {form_field} The {form_field} function will help you build forms while keeping the form markup consistent. It can be compared to the back office helpers introduced in PrestaShop 1.5.\nAs a template designer you will find the markup of each elements in _partials/form-fields.tpl.\n{form_field field=$field}\u0026hellip;where $field is an array, like this example:\n\u0026lt;?php $field = [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;user_email\u0026#39;, \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;email\u0026#39;, \u0026#39;required\u0026#39; =\u0026gt; 1, \u0026#39;label\u0026#39; =\u0026gt; \u0026#39;Email\u0026#39;, \u0026#39;value\u0026#39; =\u0026gt; null, \u0026#39;availableValues\u0026#39; =\u0026gt; [], \u0026#39;errors\u0026#39; =\u0026gt; [], ]; {hook} The {hook} function invokes a given named hook and displays its content (if any is returned).\n{hook h=\u0026#34;displayBeforeSomething\u0026#34;}Although not recommended, you can execute a hook for a specific module as well:\n{hook h=\u0026#34;displayBeforeSomething\u0026#34; mod=\u0026#34;mysupermodule\u0026#34;}You can choose to exclude some modules, which won\u0026rsquo;t be notified of the hook:\n{hook h=\u0026#34;displayBeforeSomething\u0026#34; excl=\u0026#34;foreveralone,derpmodule\u0026#34;}{l} The {l} function allows you to insert translated text in your template using the Translation system.\nThis function takes the following of arguments:\n   Name Required Type Example Description     s Yes String \u0026quot;Some text\u0026quot; Message to translate.   d  String \u0026quot;Modules.Mymodule.Shop\u0026quot; Translation domain (when using the new translation system).   mod  String \u0026quot;mymodule\u0026quot; Module name (when using the legacy translation system).   sprintf  Array ['replacement1', ...] Values to replace in the translated message.   js  Bool true [Deprecated] If true, slashes are added to escape quotes. Doesn\u0026rsquo;t work when d is present.    Here are some examples:\n{l s=\u0026#34;This is a text\u0026#34; d=\u0026#34;Admin.Shipping.Feature\u0026#34;}{l s=\u0026#34;This is a text with a %s\u0026#34; d=\u0026#34;Admin.Shipping.Feature\u0026#34; sprintf=[$replacement]}{l s=\u0026#34;This is a legacy text\u0026#34; mod=\u0026#34;somemodule\u0026#34;}If you need to escape quotes in the translated text, do it like this:\n\u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; var thisIsAString = \u0026#39;{l|escape:\u0026#34;javascript\u0026#34; s=\u0026#34;Don\u0026#39;t do this at home\u0026#34; d=\u0026#34;Modules.Mymodule\u0026#34;}\u0026#39;; \u0026lt;/script\u0026gt; {render} This function renders the specified template. Some variables coming from the controller might need to be passed to this function.\nSo far, it is only used for forms (customer information and checkout).\n{render file=\u0026#34;customer/_partials/login-form.tpl\u0026#34; ui=$login_form} {url} PrestaShop 1.7 introduces a new Smarty helper to generate URLs. This will take care of SSL, domain name, virtual and physical base URI, parameters concatenation, and of course URL rewriting.\n{url} uses the Link class internally.\nPlease see the $urls dataset to find already regenerated urls (such as home, cart, login and so on). While an instance of the Link object is still present in templates for backward compatibility purposes, it is strongly recommended not to use it. Use {url} instead. Here is a few examples:\n{url entity=address id=$id_address} {url entity=address params=[\u0026#39;id_address\u0026#39; =\u0026gt; $id_address]} {url entity=address id=$id_address params=[\u0026#39;delete\u0026#39; =\u0026gt; 1]} {url entity=\u0026#39;sf\u0026#39; route=\u0026#39;admin_module_manage\u0026#39; sf-params=[\u0026#39;foo\u0026#39; =\u0026gt; \u0026#39;bar\u0026#39;]} \u0026hellip;will respectively output:\nhttp://prestashop.ps/it/address?id_address=3 http://prestashop.ps/it/address?id_address=3 http://prestashop.ps/it/address?id_address=3\u0026amp;delete=1 http://prestashop.ps/it/admin/module/manage Widgets PrestaShop 1.7 introduced a new way to display modules in a theme, called Widgets. Instead of using a hook and hooking your module to it, the widget functions allow you explicitly manipulate your module from a template.\nAvoid using this feature if you can.\nWhile this can be useful in some situations, it effectively couples your template to a module, which is not a good practice. Use it with care.\n {widget} This function lets you display content from the module in your template.\nHere is an example from classic theme, it displays the shop contact details wherever you want.\n\u0026lt;div id=\u0026#34;sidebar\u0026#34;\u0026gt; {widget name=\u0026#34;ps_contactinfo\u0026#34;} \u0026lt;/div\u0026gt; Since the module may have a different behavior depending on which hook they are hooked on, you can pass the hook name.\n\u0026lt;div id=\u0026#34;footer\u0026#34;\u0026gt; {widget name=\u0026#34;ps_contactinfo\u0026#34; hook=\u0026#34;displayFooter\u0026#34;} \u0026lt;/div\u0026gt; {widget_block} Even better, you can rewrite the template on the go. The module will use your Smarty code instead of loading the template file.\nTaking the Link list module as an example. Instead of redefining ps_linklist/views/templates/hook/linkblock.tpl (source), you can override it this way:\n{widget_block name=\u0026#34;ps_linklist\u0026#34;} {foreach $linkBlocks as $linkBlock} \u0026lt;ul\u0026gt; {foreach $linkBlock.links as $link} \u0026lt;li\u0026gt; \u0026lt;h4\u0026gt;\u0026lt;a href=\u0026#34;{$link.url}\u0026#34;\u0026gt;{$link.title}\u0026lt;/a\u0026gt;\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt;{$link.description}\u0026lt;/p\u0026gt; \u0026lt;/li\u0026gt; {/foreach} \u0026lt;/ul\u0026gt; {/foreach} {/widget_block} Modifiers Class name modifiers In order to use the data from controller to generate class names, we added 2 modifiers: classname and classnames.\nclassname The classname data modifier will ensure that your string is a valid class name.\nIt will:\n Put it in lowercase. Replace any non-ASCII characters (such as accented characters) with their ASCII equivalent (see the code here ). Replace all non-alphanumerical characters with a single dash. Ensure only one consecutive dash is used.  {assign var=attr value=\u0026#39;Hérè-Is_a-Clàssnåme--@#$$ˆ*(\u0026amp;-----\u0026#39;}{$attr|classname}\u0026hellip;will output:\nhere-is-a-classname-v classnames This data modifier takes an array, where the key is the class name and the value is a boolean indicating if it should be outputted or not.\nNote that each class name is passed through the classname modifier.\n\u0026lt;?php $body_classes = [ \u0026#34;lang-fr\u0026#34; =\u0026gt; true, \u0026#34;rtl\u0026#34; =\u0026gt; false, \u0026#34;country-FR\u0026#34; =\u0026gt; true, \u0026#34;currency-EUR\u0026#34; =\u0026gt; true, \u0026#34;layout-full-width\u0026#34; =\u0026gt; true, \u0026#34;page-index\u0026#34; =\u0026gt; true, ]; This way, this Smarty code:\n\u0026lt;body class=\u0026#34;{$page.body_classes|classnames}\u0026#34;\u0026gt; \u0026hellip;will generate:\n\u0026lt;body class=\u0026#34;lang-fr country-fr currency-eur layout-full-width page-index\u0026#34;\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/smarty-helpers/",
	"title": "Smarty helper functions",
	"tags": [],
	"description": "",
	"content": "Helpers: functions and modifiers PrestaShop 1.7 provides several smarty helper functions and modifiers. See Smarty extensions for a full reference.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/specific_price_rules/",
	"title": "Specific price rules",
	"tags": [],
	"description": "",
	"content": "Resources for Specific price rules Specific_price_rule    Name Format Required Description     id_shop isUnsignedId ✔️ Shop ID   id_country isUnsignedId ✔️ Country ID   id_currency isUnsignedId ✔️ Currency ID   id_group isUnsignedId ✔️    name isCleanHtml ✔️    from_quantity isUnsignedInt ✔️    price isNegativePrice ✔️    reduction isPrice ✔️    reduction_tax isBool ✔️    reduction_type isReductionType ✔️    from isDateFormat ❌    to isDateFormat ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;specific_price_rule\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_country\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;id_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_group\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;from_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/from_quantity\u0026gt; \u0026lt;price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price\u0026gt; \u0026lt;reduction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction\u0026gt; \u0026lt;reduction_tax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_tax\u0026gt; \u0026lt;reduction_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_type\u0026gt; \u0026lt;from\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/from\u0026gt; \u0026lt;to\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/to\u0026gt; \u0026lt;/specific_price_rule\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/specific_prices/",
	"title": "Specific prices",
	"tags": [],
	"description": "",
	"content": "Resources for Specific prices Specific_price    Name Format Required Description     id_shop_group isUnsignedId ❌ Shop group ID   id_shop isUnsignedId ✔️ Shop ID   id_cart isUnsignedId ✔️ Cart ID   id_product isUnsignedId ✔️ Product ID   id_product_attribute isUnsignedId ❌ Product attribute ID   id_currency isUnsignedId ✔️ Currency ID   id_country isUnsignedId ✔️ Country ID   id_group isUnsignedId ✔️    id_customer isUnsignedId ✔️ Customer ID   id_specific_price_rule isUnsignedId ❌    price isNegativePrice ✔️    from_quantity isUnsignedInt ✔️    reduction isPrice ✔️    reduction_tax isBool ✔️    reduction_type isReductionType ✔️    from isDateFormat ✔️    to isDateFormat ✔️     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;specific_price\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_cart\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_cart\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;id_country\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_group\u0026gt; \u0026lt;id_customer\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_customer\u0026gt; \u0026lt;id_specific_price_rule\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_specific_price_rule\u0026gt; \u0026lt;price\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price\u0026gt; \u0026lt;from_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/from_quantity\u0026gt; \u0026lt;reduction\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction\u0026gt; \u0026lt;reduction_tax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_tax\u0026gt; \u0026lt;reduction_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reduction_type\u0026gt; \u0026lt;from\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/from\u0026gt; \u0026lt;to\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/to\u0026gt; \u0026lt;/specific_price\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/states/",
	"title": "States",
	"tags": [],
	"description": "",
	"content": "Resources for States State    Name Format Required Max size Description     id_zone isUnsignedId ✔️  Zone ID   id_country isUnsignedId ✔️  Country ID   iso_code isStateIsoCode ✔️ 7    name isGenericName ✔️ 32    active isBool ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;state\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_zone\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_zone\u0026gt; \u0026lt;id_country\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;iso_code\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/iso_code\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;/state\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/stock_availables/",
	"title": "Stock availables",
	"tags": [],
	"description": "",
	"content": "Resources for Stock availables Stock_available    Name Format Required Max size Description     id_product isUnsignedId ✔️  Product ID   id_product_attribute isUnsignedId ✔️  Product attribute ID   id_shop isUnsignedId ❌  Shop ID   id_shop_group isUnsignedId ❌  Shop group ID   quantity isInt ✔️     depends_on_stock isBool ✔️     out_of_stock isInt ✔️     location isString ❌ 255     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;stock_available\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity\u0026gt; \u0026lt;depends_on_stock\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/depends_on_stock\u0026gt; \u0026lt;out_of_stock\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/out_of_stock\u0026gt; \u0026lt;location\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/location\u0026gt; \u0026lt;/stock_available\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/stock_movement_reasons/",
	"title": "Stock movement reasons",
	"tags": [],
	"description": "",
	"content": "Resources for Stock movement reasons Stock_movement_reason    Name Format Required Max size Description     sign  ❌     deleted  ❌     date_add isDate ❌     date_upd isDate ❌     name isGenericName ✔️ 255     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;stock_movement_reason\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;sign\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/sign\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/stock_movement_reason\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/stock_movements/",
	"title": "Stock movements",
	"tags": [],
	"description": "",
	"content": "Resources for Stock movements Stock_mvt    Name Format Required Description     id_product  ❌ Product ID   id_product_attribute  ❌ Product attribute ID   id_warehouse  ❌ Warehouse ID   id_currency  ❌ Currency ID   management_type  ❌    id_employee isUnsignedId ✔️ Employee ID   id_stock isUnsignedId ✔️    id_stock_mvt_reason isUnsignedId ✔️    id_order isUnsignedId ❌ Order ID   id_supply_order isUnsignedId ❌    product_name  ❌    ean13  ❌    upc  ❌    reference  ❌    mpn  ❌    physical_quantity isUnsignedInt ✔️    sign isInt ✔️    last_wa isPrice ❌    current_wa isPrice ❌    price_te isPrice ✔️    date_add isDate ✔️     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;stock_mvt\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;management_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/management_type\u0026gt; \u0026lt;id_employee\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_employee\u0026gt; \u0026lt;id_stock\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_stock\u0026gt; \u0026lt;id_stock_mvt_reason\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_stock_mvt_reason\u0026gt; \u0026lt;id_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_order\u0026gt; \u0026lt;id_supply_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supply_order\u0026gt; \u0026lt;product_name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/product_name\u0026gt; \u0026lt;ean13\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ean13\u0026gt; \u0026lt;upc\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/upc\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;mpn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mpn\u0026gt; \u0026lt;physical_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/physical_quantity\u0026gt; \u0026lt;sign\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/sign\u0026gt; \u0026lt;last_wa\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/last_wa\u0026gt; \u0026lt;current_wa\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/current_wa\u0026gt; \u0026lt;price_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price_te\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/stock_mvt\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/stocks/",
	"title": "Stocks",
	"tags": [],
	"description": "",
	"content": "Resources for Stocks Stock    Name Format Required Writable Not filterable Description     id_warehouse isUnsignedId ✔️ ✔️  Warehouse ID   id_product isUnsignedId ✔️ ✔️  Product ID   id_product_attribute isUnsignedId ✔️ ✔️  Product attribute ID   real_quantity  ❌ ❌ true    reference isReference ❌ ✔️     ean13 isEan13 ❌ ✔️     isbn isIsbn ❌ ✔️     upc isUpc ❌ ✔️     mpn isMpn ❌ ✔️     physical_quantity isUnsignedInt ✔️ ✔️     usable_quantity isInt ✔️ ✔️     price_te isPrice ✔️ ✔️      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;stock\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;ean13\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ean13\u0026gt; \u0026lt;isbn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/isbn\u0026gt; \u0026lt;upc\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/upc\u0026gt; \u0026lt;mpn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mpn\u0026gt; \u0026lt;physical_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/physical_quantity\u0026gt; \u0026lt;usable_quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/usable_quantity\u0026gt; \u0026lt;price_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price_te\u0026gt; \u0026lt;/stock\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/stores/",
	"title": "Stores",
	"tags": [],
	"description": "",
	"content": "Resources for Stores Store    Name Format Required Max size Description     id_country isUnsignedId ✔️  Country ID   id_state isNullOrUnsignedId ❌  State ID   hours isJson ❌ 65000    postcode  ❌ 12    city isCityName ✔️ 64    latitude isCoordinate ❌ 13    longitude isCoordinate ❌ 13    phone isPhoneNumber ❌ 16    fax isPhoneNumber ❌ 16    email isEmail ❌ 255    active isBool ✔️     date_add isDate ❌     date_upd isDate ❌     name isGenericName ✔️ 255    address1 isAddress ✔️ 255    address2 isAddress ❌ 255    note isCleanHtml ❌ 65000     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;store\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_country\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;id_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;hours\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/hours\u0026gt; \u0026lt;postcode\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/postcode\u0026gt; \u0026lt;city\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/city\u0026gt; \u0026lt;latitude\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/latitude\u0026gt; \u0026lt;longitude\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/longitude\u0026gt; \u0026lt;phone\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/phone\u0026gt; \u0026lt;fax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/fax\u0026gt; \u0026lt;email\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/email\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;address1\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/address1\u0026gt; \u0026lt;address2\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/address2\u0026gt; \u0026lt;note\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/note\u0026gt; \u0026lt;/store\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/project/maintainers-guide/summary-github-lifecycle/",
	"title": "Summary of how GitHub Issues and Pull Requests are processed",
	"tags": [],
	"description": "",
	"content": "Summary of how GitHub Issues and Pull Requests are processed GitHub is the main tool used by maintainers to manage the PrestaShop project.\nThis page quickly describes how Issues and Pull Requests are processed on GitHub.\nThe teams On GitHub, there are mainly three teams working together on the project.\n Product Team: this team takes care of the product vision of the software. It has Product Managers, UX Designers and Wording Managers. Quality Assurance (QA) team: this team takes care of ensuring the quality of the software. It has QA analysts and QA automation engineers. Developers team a.k.a Core Team: this team takes care of the code and act as maintainer for the project.  A maintainer will naturally belong to the Developers team but can also assist and work with the Product Team and QA Team.\nIssues Currently, there are 4 different types of Issues submitted by users on GitHub.\nFeature Request When a user submits a Feature Request, it can be either a Product feature request (example: add a new Back office page) or a Technical feature request (example: support PostgreSQL).\nProduct feature requests are labelled \u0026ldquo;Waiting for PM\u0026rdquo; while Technical feature request are labelled \u0026ldquo;Waiting for dev\u0026rdquo;.\nThe team in charge will then analyse the request and either reject it or accept it. Rejected feature requests are closed while accepted feature requests are added to the roadmap and labelled. Labels will help triaging the backlog.\nBug report When a user submits a bug report, the QA team will analyse it and attempt to reproduce it. If it can be reproduced and is confirmed to be an issue, it will be labelled and added to the roadmap.\nIf it cannot be reproduced, QA team will attempt to explore the issue with the contributor to isolate the very settings responsible for the buggy behavior.\nIf the user does not answer for 30 days or after multiple attempts, it cannot be reproduced on our side, the issue is closed.\nRegressions If the bug report is confirmed, one of the key elements to evaluate is whether it is a regression. A regression is a bug that cannot be observed in the previous PrestaShop version, it means the software quality level has decreased instead of increasing. Regressions are usually milestoned to be fixed in the next patch version.\nThis is not easy The work of analyzing and testing all submitted bug reports is a very complex one, because there might be a very diverse range of reports. Moreover quite a huge number of them are actually not related to the software but to how the shop is being used: the server configuration, the shop configuration, the installed modules and the installed theme might introduce buggy behaviors that the user mistakenly believes come from the software.\nThis is why so much Issues cannot be reproducted on our side, but to find it out multiple explorations and attempts are necessary.\nSupport request We sometimes receive support requests on GitHub, ranging from questions about the software to \u0026ldquo;please help me to do X in my shop\u0026rdquo; requests. GitHub is for the software development so we usually redirect users to other channels using the Support template.\nOther There are some Issues which do not fit in the previous categories, such as releases Issues. They serve a specific purpose.\nPull Requests When a contributor submits a Pull Request, it goes through multiple stages.\nIs it eligible Maintainers must first validate that the Pull Request is eligible to review (the template is filled, the license headers are correct, the target branch is the right one \u0026hellip;).\nIf there is an issue with the Pull Request and it is not eligible, maintainers kindly ask the contributor to fix it.\nAbout the intent If the Pull Request is eligible, maintainers can evaluate if the changes brought by the Pull Request are desirables.\n If the Pull Request brings in changes in design, they can ask the validation of UX designers by adding the label \u0026ldquo;Waiting for UX\u0026rdquo;. If the Pull Request brings in changes to the product, they can ask the validation of Product managers by adding the label \u0026ldquo;Waiting for PM\u0026rdquo;. If the Pull Request brings in changes in wording, they can ask the validation of UX designers by adding the label \u0026ldquo;Waiting for wording\u0026rdquo;.  If one \u0026ldquo;Waiting for \u0026hellip;\u0026rdquo; label has been applied, the team in charge will process the Pull Request and then add a \u0026ldquo;\u0026hellip; approved\u0026rdquo; label. For example if Product team validates the new behavior implemented in a Pull Request, they will remove the \u0026ldquo;Waiting for PM\u0026rdquo; label and add the \u0026ldquo;PM approved\u0026rdquo; label instead.\nThere are some automated bots running on GitHub that will help maintainers to label the Pull Requests. For example Prestonbot is able to extract the new wordings and add the \u0026ldquo;Waiting for wording\u0026rdquo; label. You can read more about them here.\nAbout the code If the Pull Request is validated and there are no more \u0026ldquo;Waiting for \u0026hellip;\u0026rdquo; labels, then it awaits a code review. Maintainers provide this code review.\nA maintainer can choose to\n Ask for changes in the Pull Request (which blocks merging) Provides comments wihout blocking or approving Approve the Pull Request  When the Pull Request has been approved (it needs two approvals on the Core repository), the Pull Request must be tested. It is labelled \u0026ldquo;Waiting for QA\u0026rdquo;.\nTesting the Pull Request On regular Pull Requests, the QA team is in charge of testing the Pull Request. They will use the \u0026ldquo;How to test\u0026rdquo; part of the Pull Request description to validate the behavior implemented, and also run some more tests to validate there are no regressions.\nSome Pull Requests however cannot be tested by QA team, the Developers team might validate them.\nIf the Pull Request is tested successfully, the label \u0026ldquo;QA approved\u0026rdquo; is applied. Else, the author is notified about the Issues found by the tests.\nMerging the Pull Request Pull Requests that have been validated by QA can be merged. They must also be milestoned, and if they fix an issue, the issue must be labelled, milestoned, and closed.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/suppliers/",
	"title": "Suppliers",
	"tags": [],
	"description": "",
	"content": "Resources for Suppliers Supplier    Name Format Required Max size Description     link_rewrite  ❌     name isCatalogName ✔️ 64    active  ❌     date_add isDate ❌     date_upd isDate ❌     description isCleanHtml ❌     meta_title isGenericName ❌ 255    meta_description isGenericName ❌ 512    meta_keywords isGenericName ❌ 255     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;supplier\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;link_rewrite\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/link_rewrite\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/description\u0026gt; \u0026lt;meta_title\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_title\u0026gt; \u0026lt;meta_description\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_description\u0026gt; \u0026lt;meta_keywords\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/meta_keywords\u0026gt; \u0026lt;/supplier\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/supply_order_details/",
	"title": "Supply order details",
	"tags": [],
	"description": "",
	"content": "Resources for Supply order details Supply_order_detail    Name Format Required Description     id_supply_order isUnsignedId ✔️    id_product isUnsignedId ✔️ Product ID   id_product_attribute isUnsignedId ✔️ Product attribute ID   reference isReference ❌    supplier_reference isReference ❌    name isGenericName ✔️    ean13 isEan13 ❌    isbn isIsbn ❌    upc isUpc ❌    mpn isMpn ❌    exchange_rate isFloat ✔️    unit_price_te isPrice ✔️    quantity_expected isUnsignedInt ✔️    quantity_received isUnsignedInt ❌    price_te isPrice ✔️    discount_rate isFloat ✔️    discount_value_te isPrice ✔️    price_with_discount_te isPrice ✔️    tax_rate isFloat ✔️    tax_value isPrice ✔️    price_ti isPrice ✔️    tax_value_with_order_discount isFloat ✔️    price_with_order_discount_te isPrice ✔️     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;supply_order_detail\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_supply_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supply_order\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;supplier_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/supplier_reference\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;ean13\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/ean13\u0026gt; \u0026lt;isbn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/isbn\u0026gt; \u0026lt;upc\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/upc\u0026gt; \u0026lt;mpn\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/mpn\u0026gt; \u0026lt;exchange_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/exchange_rate\u0026gt; \u0026lt;unit_price_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/unit_price_te\u0026gt; \u0026lt;quantity_expected\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity_expected\u0026gt; \u0026lt;quantity_received\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity_received\u0026gt; \u0026lt;price_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price_te\u0026gt; \u0026lt;discount_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/discount_rate\u0026gt; \u0026lt;discount_value_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/discount_value_te\u0026gt; \u0026lt;price_with_discount_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price_with_discount_te\u0026gt; \u0026lt;tax_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/tax_rate\u0026gt; \u0026lt;tax_value\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/tax_value\u0026gt; \u0026lt;price_ti\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price_ti\u0026gt; \u0026lt;tax_value_with_order_discount\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/tax_value_with_order_discount\u0026gt; \u0026lt;price_with_order_discount_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/price_with_order_discount_te\u0026gt; \u0026lt;/supply_order_detail\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/supply_order_histories/",
	"title": "Supply order histories",
	"tags": [],
	"description": "",
	"content": "Resources for Supply order histories Supply_order_history    Name Format Required Description     id_supply_order isUnsignedId ✔️    id_employee isUnsignedId ✔️ Employee ID   id_state isUnsignedId ✔️ State ID   employee_firstname isName ❌    employee_lastname isName ❌    date_add isDate ✔️     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;supply_order_history\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_supply_order\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supply_order\u0026gt; \u0026lt;id_employee\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_employee\u0026gt; \u0026lt;id_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;employee_firstname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/employee_firstname\u0026gt; \u0026lt;employee_lastname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/employee_lastname\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/supply_order_history\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/supply_order_receipt_histories/",
	"title": "Supply order receipt histories",
	"tags": [],
	"description": "",
	"content": "Resources for Supply order receipt histories Supply_order_receipt_history    Name Format Required Description     id_supply_order_detail isUnsignedId ✔️    id_employee isUnsignedId ✔️ Employee ID   id_supply_order_state isUnsignedId ✔️    employee_firstname isName ❌    employee_lastname isName ❌    quantity isUnsignedInt ✔️    date_add isDate ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;supply_order_receipt_history\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_supply_order_detail\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supply_order_detail\u0026gt; \u0026lt;id_employee\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_employee\u0026gt; \u0026lt;id_supply_order_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supply_order_state\u0026gt; \u0026lt;employee_firstname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/employee_firstname\u0026gt; \u0026lt;employee_lastname\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/employee_lastname\u0026gt; \u0026lt;quantity\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/quantity\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;/supply_order_receipt_history\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/supply_order_states/",
	"title": "Supply order states",
	"tags": [],
	"description": "",
	"content": "Resources for Supply order states Supply_order_state    Name Format Required Max size Description     delivery_note isBool ❌     editable isBool ❌     receipt_state isBool ❌     pending_receipt isBool ❌     enclosed isBool ❌     color isColor ❌     name isGenericName ✔️ 128     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;supply_order_state\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;delivery_note\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delivery_note\u0026gt; \u0026lt;editable\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/editable\u0026gt; \u0026lt;receipt_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/receipt_state\u0026gt; \u0026lt;pending_receipt\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/pending_receipt\u0026gt; \u0026lt;enclosed\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/enclosed\u0026gt; \u0026lt;color\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/color\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/supply_order_state\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/supply_orders/",
	"title": "Supply orders",
	"tags": [],
	"description": "",
	"content": "Resources for Supply orders Supply_order    Name Format Required Description     id_supplier isUnsignedId ✔️ Supplier ID   id_lang isUnsignedId ✔️ Lang ID   id_warehouse isUnsignedId ✔️ Warehouse ID   id_supply_order_state isUnsignedId ✔️    id_currency isUnsignedId ✔️ Currency ID   supplier_name isCatalogName ❌    reference isGenericName ✔️    date_delivery_expected isDate ✔️    total_te isPrice ❌    total_with_discount_te isPrice ❌    total_ti isPrice ❌    total_tax isPrice ❌    discount_rate isFloat ❌    discount_value_te isPrice ❌    is_template isBool ❌    date_add isDate ❌    date_upd isDate ❌    associations  ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;supply_order\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_supplier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supplier\u0026gt; \u0026lt;id_lang\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;id_supply_order_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_supply_order_state\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;supplier_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/supplier_name\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;date_delivery_expected\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_delivery_expected\u0026gt; \u0026lt;total_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_te\u0026gt; \u0026lt;total_with_discount_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_with_discount_te\u0026gt; \u0026lt;total_ti\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_ti\u0026gt; \u0026lt;total_tax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/total_tax\u0026gt; \u0026lt;discount_rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/discount_rate\u0026gt; \u0026lt;discount_value_te\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/discount_value_te\u0026gt; \u0026lt;is_template\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/is_template\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;supply_order_details\u0026gt; \u0026lt;supply_order_detail\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;supplier_reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/supplier_reference\u0026gt; \u0026lt;product_name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/product_name\u0026gt; \u0026lt;/supply_order_detail\u0026gt; \u0026lt;/supply_order_details\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/supply_order\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/switch/",
	"title": "SwitchType",
	"tags": [],
	"description": "",
	"content": "SwitchType The SwitchType displays a switch with Yes/No values.\nType options    Option Type Default Description     choices array Choices with Yes/No values Choices for switch type   disabled bool false Whether Switch should be disabled or not    Required Javascript components None.\nCode example Add SwitchType to your form.\n\u0026lt;?php use Symfony\\Component\\Form\\AbstractType; use PrestaShopBundle\\Form\\Admin\\Type\\SwitchType; class SomeType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder-\u0026gt;add(\u0026#39;switch\u0026#39;, SwitchType::class, [ // Customized choices with ON/OFF instead of Yes/No  \u0026#39;choices\u0026#39; =\u0026gt; [ \u0026#39;ON\u0026#39; =\u0026gt; true, \u0026#39;OFF\u0026#39; =\u0026gt; false, ], ]); } } Preview example   SwitchType rendered in form   "
},
{
	"uri": "https://devdocs.prestashop.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": "Resources for Tags Tag    Name Format Required Max size Description     id_lang isUnsignedId ✔️  Lang ID   name isGenericName ✔️ 32     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;tag\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_lang\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_lang\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;/tag\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/tax_rule_groups/",
	"title": "Tax rule groups",
	"tags": [],
	"description": "",
	"content": "Resources for Tax rule groups Tax_rule_group    Name Format Required Max size Description     name isGenericName ✔️ 64    active isBool ❌     deleted isBool ❌     date_add isDate ❌     date_upd isDate ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;tax_rule_group\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;/tax_rule_group\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/tax_rules/",
	"title": "Tax rules",
	"tags": [],
	"description": "",
	"content": "Resources for Tax rules Tax_rule    Name Format Required Description     id_tax_rules_group isUnsignedId ✔️ Tax rules group ID   id_state isUnsignedId ❌ State ID   id_country isUnsignedId ✔️ Country ID   zipcode_from isPostCode ❌    zipcode_to isPostCode ❌    id_tax isUnsignedId ✔️    behavior isUnsignedInt ❌    description isString ❌     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;tax_rule\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_tax_rules_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_tax_rules_group\u0026gt; \u0026lt;id_state\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_state\u0026gt; \u0026lt;id_country\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_country\u0026gt; \u0026lt;zipcode_from\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/zipcode_from\u0026gt; \u0026lt;zipcode_to\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/zipcode_to\u0026gt; \u0026lt;id_tax\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_tax\u0026gt; \u0026lt;behavior\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/behavior\u0026gt; \u0026lt;description\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/description\u0026gt; \u0026lt;/tax_rule\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/taxes/",
	"title": "Taxes",
	"tags": [],
	"description": "",
	"content": "Resources for Taxes Tax    Name Format Required Max size Description     rate isFloat ✔️     active  ❌     deleted  ❌     name isGenericName ✔️ 32     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;tax\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;rate\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/rate\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;name\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/name\u0026gt; \u0026lt;/tax\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/template-inheritance/",
	"title": "Template inheritance",
	"tags": [],
	"description": "",
	"content": "Template inheritance PrestaShop 1.7 relies a lot on template inheritance in order to create the most consistant theme possible while heavily reducing the amount of duplicated code.\nThe principle Template inheritance allow you to extend a parent template and only redefine the block you need.\nThe picture below illustrates the example of a specific product page extending a generic one. Say you have three files: product-pack.tpl extending product.tpl, itself extending page.tpl.\n  Schema for template inheritance   The product-pack.tpl file will only contain the product description part. Everything else will be exactly the same as product page. Even better, the product page will only define the main content of the page, everything else will be taken from its own parent template (ie page.tpl).\nThe wrong way of doing this would be to extract header, footer and reusable part of the template and include them in each file.\nThe official Smarty documentation has a nice and simple example. In their own words:\n Template inheritance is an approach to managing templates that resembles object-oriented programming techniques. Instead of the traditional use of {include \u0026hellip;} tags to manage parts of templates, you can inherit the contents of one template to another (like extending a class) and change blocks of content therein (like overriding methods of a class.) This keeps template management minimal and efficient, since each template only contains the differences from the template it extends.\n PrestaShop real life example In a PrestaShop theme, many pages are very similar, for example template listing products: categories, new products, search results, and so on. All of them display a list of products so in PS 1.7 they all extend catalog/listing/product-list.tpl (which extends the main layout).\n{extends file=$layout} {block name=\u0026#39;content\u0026#39;} \u0026lt;section id=\u0026#34;main\u0026#34;\u0026gt; {block name=\u0026#39;product_list_header\u0026#39;} \u0026lt;h2 class=\u0026#34;h2\u0026#34;\u0026gt;{$listing.label}\u0026lt;/h2\u0026gt; {/block} {block name=\u0026#39;product_list\u0026#39;} {include file=\u0026#39;catalog/_partials/products.tpl\u0026#39; listing=$listing} {/block} \u0026lt;/section\u0026gt; {/block} The template will show a title and a list of products underneath. For category page, we want a nice description with an cover image. So we can simply override the product_list_header\n{extends file=\u0026#39;catalog/listing/product-list.tpl\u0026#39;} {block name=\u0026#39;product_list_header\u0026#39;} \u0026lt;h1\u0026gt;{$category.name}\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;category-cover\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;{$category.image.large.url}\u0026#34; alt=\u0026#34;{$category.image.legend}\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026#34;category-description\u0026#34;\u0026gt;{$category.description nofilter}\u0026lt;/div\u0026gt; {/block} This reduce code to the minimum, without any repetition.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/templates/",
	"title": "Templates",
	"tags": [],
	"description": "",
	"content": "Templates The following section describes the purpose of each template and how to use them.\nPrestaShop front office is based on Smarty template engine, for this part it\u0026rsquo;s very important you understood well how Smarty works, especially template inheritance.\n Templates \u0026amp; layouts   Head   Notifications   Listing pages   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/text-with-length-counter/",
	"title": "TextWithLengthCounterType",
	"tags": [],
	"description": "",
	"content": "TextWithLengthCounterType The TextWithLengthCounterType represents text input with value length counter.\nType options    Option Type Default Description     max_length int None, must be configured Max length of input value   position string before Configures position for counter. Available options are: before and after   input string text Configured input type text or textarea    Required Javascript components    Component Description     admin-dev/themes/new-theme/js/components/form/text-with-length-counter.js Calculates remaining length for input    Code example First, you have to add TextWithLengthCounterType to your form.\n\u0026lt;?php use Symfony\\Component\\Form\\AbstractType; use PrestaShopBundle\\Form\\Admin\\Type\\TextWithLengthCounterType; class SomeType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder-\u0026gt;add(\u0026#39;meta_title\u0026#39;, TextWithLengthCounterType::class, [ \u0026#39;max_length\u0026#39; =\u0026gt; 255, ]); } } Then in Javascript you have to enable TextWithLengthCounter component.\nimport TextWithLengthCounter from \u0026#34;admin-dev/themes/new-theme/js/components/form/text-with-length-counter\u0026#34;; // enables length counter for all TextWithLengthCounterType inputs on the page  new TextWithLengthCounter(); Preview example   TextWithLengthCounterType rendered in form   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/text-with-unit/",
	"title": "TextWithUnitType",
	"tags": [],
	"description": "",
	"content": "TextWithUnitType The TextWithUnitType represents text input with unit value (e.g. Kg, Cm \u0026amp; etc.).\nType options    Option Type Default Description     unit string unit Type of unit (e.g. Kg, Cm \u0026amp; etc)    Required Javascript components None.\nCode example Add TextWithUnitType to your form and optionally you can configure unit for it.\n\u0026lt;?php use Symfony\\Component\\Form\\AbstractType; use PrestaShopBundle\\Form\\Admin\\Type\\TextWithUnitType; class SomeType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder-\u0026gt;add(\u0026#39;weight\u0026#39;, TextWithUnitType::class, [ \u0026#39;unit\u0026#39; =\u0026gt; \u0026#39;kg\u0026#39;, \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;empty_data\u0026#39; =\u0026gt; \u0026#39;0\u0026#39;, ]) ; } } Preview example   TextWithUnitType rendered in form   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/console/",
	"title": "The Console component",
	"tags": [],
	"description": "",
	"content": "The Console component This sections aims to become the source of console commands :\n prestashop:licenses:update   prestashop:linter:legacy-link   prestashop:linter:naming-convention   prestashop:linter:security-annotation   prestashop:list:commands-and-queries   prestashop:mail:generate   prestashop:module   prestashop:schema:update-without-foreign   prestashop:taxes:update-eu-tax-rule-groups   prestashop:theme:enable   prestashop:theme:export   prestashop:translation:find-duplicates   prestashop:update:configuration-file-hooks-listing   prestashop:update:sql-upgrade-file-hooks-listing   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/faceted-search/",
	"title": "The Faceted Search component",
	"tags": [],
	"description": "",
	"content": "The Faceted Search Architecture This document describes the faceted search architecture that is being implemented in PrestaShop 1.7.\nPlease also read the extensive comments in classes/controller/ProductListingFrontControllerCore, as this document is only a high-level explanation.\nThe target audience is anybody who wants to develop a well-integrated search module that replaces the way the PrestaShop core searches for products.\nAt the moment this proof of concept works only on the CategoryController but it is easy to extend to the other product controllers (manufacturers, supplier\u0026hellip;).\nWhy, oh why? Efficient product search is at the heart of E-Commerce. Customers need to find what they\u0026rsquo;re looking for easily.\nWhen developing the StarterTheme we realized the way blocklayered and similar modules interact with the theme is very complicated and hard to extend. The modules try to emulate the CategoryController and fetch templates from the theme without any guarantee of the templates being there.\nIf we change the behavior of the CategoryController or rename a template, then all blocklayered-like modules need to be adapted. If your theme doesn\u0026rsquo;t have a file called product-list.tpl then the module fails, etc.\nWe have analyzed the way search modules work and we offer a set of standard objects and behaviors that allow us to reason about faceted search and improve it. This is all based on what we\u0026rsquo;ve observed, we\u0026rsquo;re mostly just putting a name on things and giving guidelines.\nKey Concepts Overview of the rendering process for displaying products on a category page  The core CategoryController executes a hook basically asking modules \u0026ldquo;hey, does anybody want to fetch the products for the category with id_category === 4 or should I do it myself?\u0026rdquo; A module (e.g. blocklayered) responds by returning an instance of a ProductSearchProviderInterface of its choosing The CategoryController notices the ProductSearchProviderInterface returned by the module and uses it to get the products (this is the equivalent of what hookActionProductListOverride did, only we work with well defined objects that are easy to reason about). The search provider returns a ProductSearchResult, it contains:  the products, obviously (which may just be an array like [['id_product' =\u0026gt; 2], ['id_product' =\u0026gt; 3]] - the core will add the missing data!) the pagination information (total number of pages, total number or results, etc.) cleanly wrapped inside a Pagination the new, updated filters the sort options that are supported to sort the list (array of SortOrders)   The CategoryController hydrates the product list, formats it, renders it. It also renders the filters, the pagination, and the sort options (price ascending, etc.).  Bottom line is, the search module only needs to worry about two things:\n executing a pure database query (internal or external database) that returns a list of product ids (no more getProductProperties, addColorsToProductList, etc.) optionally (if it wants to produce nice URLs), encode and decode the filters in a way that fits inside a URL  With this we reduced the size of the code in blocklayered by a factor of about 2.\nTerminology We did not make the words up, see for instance this article about Facets vs Filters.\nFacets and Filters Filters We call a filter any assertion that can be used to filter a list of products and does not contain logical operators such as \u0026ldquo;and\u0026rdquo; or \u0026ldquo;or\u0026rdquo; when expressed in plain English.\nFor instance \u0026ldquo;Blue products\u0026rdquo; is a filter. \u0026ldquo;Red or blue products\u0026rdquo; is not a filter. It\u0026rsquo;s a facet\u0026hellip;\nA Filter is represented by the PrestaShop\\PrestaShop\\Core\\Product\\Search\\Filter class.\nFacets We call a facet a set of filters combined with logical operators.\nFor instance \u0026ldquo;Blue products or red products\u0026rdquo; is a facet.\nFilters within a facet may be active or not, and are usually combined with the \u0026ldquo;or\u0026rdquo; operator even though it is defined by the implementation and not necessarily so. Still, there seems to be a strong UX convention that filters inside a facet are combined with \u0026ldquo;or\u0026rdquo;, meaning for instance that if I check the \u0026ldquo;Blue\u0026rdquo; and the \u0026ldquo;Red\u0026rdquo; filter I won\u0026rsquo;t get products that are both blue and red, but a mix of blue products and red products.\nA facet is represented by the PrestaShop\\PrestaShop\\Core\\Product\\Search\\Facet class. It is basically a collection of Filters.\nThe ProductSearchQuery object We introduce the PrestaShop\\PrestaShop\\Core\\Product\\Search\\ProductSearchQuery object to hold all search query information.\nBasically, this object contains:\n something that tells modules where the query came from (id_category, id_supplier for SupplierController etc.). This is the minimal filter that the search module is supposed to implement. the SortOrder that is requested the page number that is requested the resultsPerPage, i.e. the number of products per page that is expected  The search delegation mechanism In order for modules to replace the core search mechanism, we introduce a delegation mechanism in the form of the productSearchProvider hook.\nThe hook is executed with a ProductSearchQuery $query param, which allows modules to return an instance of a ProductSearchProviderInterface that is able to handle the query.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/",
	"title": "The Form component",
	"tags": [],
	"description": "",
	"content": "The Form component  Types Reference   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/grid/",
	"title": "The Grid component",
	"tags": [],
	"description": "",
	"content": "The Grid component  Introduction The Grid component provides tools that allow you to build, manage and display your data tables. The most important parts of Grid component are:\n Grid definition - defines structural information about a grid. Grid data - stores data for a grid. Search criteria - stores sorting, pagination and filters data for a grid.  Grid definition This is the most fundamental part of the Grid component. A Grid definition stores structural information about your Grid that defines:\n Id - unique id for Grid identification. It is used to dispatch hooks and identify Grid in other parts of the application. Name - human readable name, it is recommended to make it translatable. Columns - definition of columns that your Grid table has. Filters - definition of filters that are supported by Grid. Grid actions - actions that apply to a whole grid. It is common to have \u0026ldquo;Export\u0026rdquo;, \u0026ldquo;Import\u0026rdquo;, \u0026ldquo;Show SQL query\u0026rdquo; and similar grid actions. Bulk actions - actions that can be applied to multiple records in the Grid. It is common to have \u0026ldquo;Delete selected\u0026rdquo;, \u0026ldquo;Enable selected\u0026rdquo; and similar bulk actions.  Creating Grid Definition You don\u0026rsquo;t have to create the Grid Definition by yourself but instead rely on a PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\GridDefinitionFactoryInterface. PrestaShop already provides you with an abstract factory implementation PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory that you can use to create Grid definitions.\nWhen creating a Grid definition it is recommended to use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory as it allows you to define your structure, but takes care of the definition creation. To create a new grid definition, we will use AbstractGridDefinitionFactory.\n\u0026lt;?php namespace PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory; use PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\AbstractGridDefinitionFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\ColumnCollection; use PrestaShop\\PrestaShop\\Core\\Grid\\Column\\Type\\DataColumn; final class ProductGridDefinitionFactory extends AbstractGridDefinitionFactory { protected function getId() { return \u0026#39;products\u0026#39;; } protected function getName() { return $this-\u0026gt;trans(\u0026#39;Products\u0026#39;, [], \u0026#39;Admin.Advparameters.Feature\u0026#39;); } protected function getColumns() { return (new ColumnCollection()) -\u0026gt;add((new DataColumn(\u0026#39;id_product\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;ID\u0026#39;, [], \u0026#39;Admin.Global\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;id_product\u0026#39;, ]) ) -\u0026gt;add((new DataColumn(\u0026#39;reference\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Reference\u0026#39;, [], \u0026#39;Admin.Advparameters.Feature\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;reference\u0026#39;, ]) ) -\u0026gt;add((new DataColumn(\u0026#39;name\u0026#39;)) -\u0026gt;setName($this-\u0026gt;trans(\u0026#39;Name\u0026#39;, [], \u0026#39;Admin.Advparameters.Feature\u0026#39;)) -\u0026gt;setOptions([ \u0026#39;field\u0026#39; =\u0026gt; \u0026#39;name\u0026#39;, ]) ) ; } } We have just created a basic Grid Definition factory in which we defined our Grid\u0026rsquo;s id products, translatable name Products and 3 data columns.\nIt is recommended to keep your name translatable. To make that easy, AbstractGridDefinitionFactory provides access to the translator via the trans() method. Finally, register your Grid definition factory as a service.\nprestashop.core.grid.definition.factory.product_grid_definition_factory:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Definition\\Factory\\ProductGridDefinitionFactory\u0026#39;parent:\u0026#39;prestashop.core.grid.definition.factory.abstract_grid_definition\u0026#39;public:trueMost of the time you won\u0026rsquo;t be creating Grid Definitions by yourself but delegating this task to other services, but in case you need to create a Grid Definition by hand, here\u0026rsquo;s how you can do that.\n\u0026lt;?php $productsGridDefinitionFactory = $container-\u0026gt;get(\u0026#39;prestashop.core.grid.definition.factory.product_grid_definition_factory\u0026#39;); $productsGridDefinition = $productsGridDefinitionFactory-\u0026gt;getDefinition(); // you can access all information that was defined $productsGridDefinition-\u0026gt;getColumns(); // collection of defined columns $productsGridDefinition-\u0026gt;getName(); // \u0026#34;Products\u0026#34; $productsGridDefinition-\u0026gt;getId(); // \u0026#34;products\u0026#34; Search Criteria In the Grid component, Search Criteria is used for Grid\u0026rsquo;s data sorting, paginating \u0026amp; filtering. Search Criteria can be loaded from the database, URL query or anywhere else.\nThe Grid component itself does not manage Search Criteria but instead it provides an interface for it. In PrestaShop, the Filters component is used to resolve Search Criteria for a Grid. Search Criteria is immutable. This means that once a Search Criteria object is created it cannot be changed. Creating Search Criteria Even though most of the time Search Criteria will be created using the Filters component, you can still create it manually. Grid provides a simple implementation for it.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria; $filters = [ \u0026#39;id_product\u0026#39; =\u0026gt; 4, \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;mug\u0026#39;, ]; $searchCriteria = new SearchCriteria( $filters, \u0026#39;id_product\u0026#39;, \u0026#39;asc\u0026#39;, 0, 10 ); $searchCriteria-\u0026gt;getFilters(); // $filters array $searchCriteria-\u0026gt;getOrderBy(); // \u0026#34;id_product\u0026#34; $searchCriteria-\u0026gt;getOrderWay(); // \u0026#34;asc\u0026#34; $searchCriteria-\u0026gt;getOffset(); // 0 $searchCriteria-\u0026gt;getLimit(); // 10  The class PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria is only available since 1.7.6  When creating Search Criteria you can skip some or all of its data. If you set both orderWay and orderBy to null it will disable sorting. If you set both offset and limit to null it will disable pagination.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Search\\SearchCriteria; // sorting, pagination and filtering are disabled with this search criteria $emptySearchCriteria = new SearchCriteria(); // only pagination is set // that means sorting (and filters as it\u0026#39;s an empty array) will be disabled for search criteria $emptySortingSearchCriteria = new SearchCriteria( [], null, null, 2, 10 ); Grid Data The final part of the Grid component is data. Grid Data is stored in PrestaShop\\PrestaShop\\Core\\Grid\\Data\\GridData.\nCreating Grid Data The Grid component does not create Grid Data directly but instead relies on PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\GridDataFactoryInterface. PrestaShop provides you with a DoctrineGridDataFactory implementation out of the box which supports retrieving data from a MySQL database using Doctrine. However, if you need to load data from a REST API, Elasticsearch or any other data store, you can implement your own Grid Data factory.\nWe will be using DoctrineGridDataFactory to create data for our Grid. When using DoctrineGridDataFactory you have to implement DoctrineQueryBuilderInterface which will be used by the data factory to build Doctrine queries.\nWhen implementing DoctrineQueryBuilderInterface it is recommended to use PrestaShop\\PrestaShop\\Core\\Grid\\Query\\AbstractDoctrineQueryBuilder as it provides access to the Doctrine Connection and database tables prefix. \u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Query\\AbstractDoctrineQueryBuilder; final class ProductQueryBuilder extends AbstractDoctrineQueryBuilder { /** * @var int */ private $contextLangId; /** * @var int */ private $contextShopId; /** * @param Connection $connection * @param string $dbPrefix * @param int $contextLangId * @param int $contextShopId */ public function __construct(Connection $connection, $dbPrefix, $contextLangId, $contextShopId) { parent::__construct($connection, $dbPrefix); $this-\u0026gt;contextLangId = $contextLangId; $this-\u0026gt;contextShopId = $contextShopId; } // Get Search query builder returns a QueryBuilder that is used to fetch filtered, sorted and paginated data from the database.  // This query builder is also used to get the SQL query that was executed.  public function getSearchQueryBuilder(SearchCriteriaInterface $searchCriteria) { $qb = $this-\u0026gt;getBaseQuery(); $qb-\u0026gt;select(\u0026#39;p.id_product, p.reference, pl.name\u0026#39;) -\u0026gt;orderBy( $searchCriteria-\u0026gt;getOrderBy(), $searchCriteria-\u0026gt;getOrderWay() ) -\u0026gt;setFirstResult($searchCriteria-\u0026gt;getOffset()) -\u0026gt;setMaxResults($searchCriteria-\u0026gt;getLimit()); foreach ($searchCriteria-\u0026gt;getFilters() as $filterName =\u0026gt; $filterValue) { if (\u0026#39;id_product\u0026#39; === $filterName) { $qb-\u0026gt;andWhere(\u0026#34;p.id_product = :$filterName\u0026#34;); $qb-\u0026gt;setParameter($filterName, $filterValue); continue; } $qb-\u0026gt;andWhere(\u0026#34;$filterNameLIKE :$filterName\u0026#34;); $qb-\u0026gt;setParameter($filterName, \u0026#39;%\u0026#39;.$filterValue.\u0026#39;%\u0026#39;); } return $qb; } // Get Count query builder that is used to get the total count of all records (products)  public function getCountQueryBuilder(SearchCriteriaInterface $searchCriteria) { $qb = $this-\u0026gt;getBaseQuery(); $qb-\u0026gt;select(\u0026#39;COUNT(p.id_product)\u0026#39;); return $qb; } // Base query can be used for both Search and Count query builders  private function getBaseQuery() { return $this-\u0026gt;connection -\u0026gt;createQueryBuilder() -\u0026gt;from($this-\u0026gt;dbPrefix.\u0026#39;product\u0026#39;, \u0026#39;p\u0026#39;) -\u0026gt;leftJoin( \u0026#39;p\u0026#39;, $this-\u0026gt;dbPrefix.\u0026#39;product_lang\u0026#39;, \u0026#39;pl\u0026#39;, \u0026#39;p.id_product = pl.id_product AND pl.id_lang = :context_lang_id AND pl.id_shop = :context_shop_id\u0026#39; ) -\u0026gt;setParameter(\u0026#39;context_lang_id\u0026#39;, $this-\u0026gt;contextLangId) -\u0026gt;setParameter(\u0026#39;context_shop_id\u0026#39;, $this-\u0026gt;contextShopId) ; } } Once the Query builder is done, the last step is to register it as a service and configure your DoctrineGridDataFactory to use it.\n# Register ProductQueryBuilderprestashop.core.grid.query.product_query_builder:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Query\\ProductQueryBuilder\u0026#39;parent:\u0026#39;prestashop.core.grid.abstract_query_builder\u0026#39;arguments:- \u0026#34;@=service(\u0026#39;prestashop.adapter.legacy.context\u0026#39;).getContext().language.id\u0026#34;- \u0026#34;@=service(\u0026#39;prestashop.adapter.legacy.context\u0026#39;).getContext().shop.id\u0026#34;public:true# Configure our Grid Data factory to use the query builder that we registered aboveprestashop.core.grid.data.factory.product_data_factory:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\DoctrineGridDataFactory\u0026#39;arguments:- \u0026#39;@prestashop.core.grid.query.product_query_builder\u0026#39;# service id of our query builder- \u0026#39;@prestashop.core.hook.dispatcher\u0026#39;# every doctrine query builder needs the hook dispatcher- \u0026#39;@prestashop.core.grid.query.doctrine_query_parser\u0026#39;# parser to get the raw SQL query- \u0026#39;products\u0026#39;# this should match your grid id, in our case it\u0026#39;s \u0026#34;products\u0026#34;That\u0026rsquo;s it! Now we can use our Grid Data factory together with Search Criteria to get sorted, paginated and filtered data for our Grid.\n\u0026lt;?php $searchCriteria = ... /** PrestaShop\\PrestaShop\\Core\\Grid\\Data\\Factory\\GridDataFactoryInterface $productGridDataFactory */ $productGridDataFactory = $container-\u0026gt;get(\u0026#39;prestashop.core.grid.data.factory.product_data_factory\u0026#39;); $productGridData = $productDataFactory-\u0026gt;getData($searchCriteria); $productGridData-\u0026gt;getRecords(); // returns RecordCollection that contains products data $productGridData-\u0026gt;getRecordsTotal(); // returns the total count of products $productGridData-\u0026gt;getQuery(); // get the last executed query that was used to get RecordCollection Working with Grid We already know how to create and use Grid Definitions and Grid Data factories. Now it\u0026rsquo;s time to combine those services to create our Grid!\nConfiguring Grid factory As always, you should not create Grid by hand, PrestaShop already comes with PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory whose primary job is to create a Grid.\nIt is recommended to use the PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory to create Grids although you may need to create your own Grid factory in some rare cases. Let\u0026rsquo;s configure a GridFactory with our Grid Definition and Grid Data factory.\n# Configure Grid factory to use services we have implementedprestashop.core.grid.product_grid_factory:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\GridFactory\u0026#39;arguments:- \u0026#39;@prestashop.core.grid.definition.factory.product_grid_definition_factory\u0026#39;# our definition factory- \u0026#39;@prestashop.core.grid.data.factory.product_data_factory\u0026#39;# our data factory- \u0026#39;@prestashop.core.grid.filter.form_factory\u0026#39;# core service needed by grid factory- \u0026#39;@prestashop.core.hook.dispatcher\u0026#39;# core service needed by grid factoryAnd we are done! Let\u0026rsquo;s see how to use it and render it in the page.\nRendering Grid In Back Office controllers, you can use the Grid Factory to create a Grid and render it.\n\u0026lt;?php use Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\Response; class ProductController extends FrameworkBundleAdminController { /** * @return Response */ public function indexAction() { $searchCriteria = ... $productGridFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.product_grid_factory\u0026#39;); $productGrid = $productGridFactory-\u0026gt;getGrid($searchCriteria); return $this-\u0026gt;render(\u0026#39;@PrestaShop/Admin/Product/products.html.twig\u0026#39;, [ // $this-\u0026gt;presentGrid() is a helper method provided by FrameworkBundleAdminController  \u0026#39;productsGrid\u0026#39; =\u0026gt; $this-\u0026gt;presentGrid($productGrid), ]); } } To see the Grid in your page you have to include its template, which is provided by PrestaShop.\n{# @PrestaShop/Admin/Product/products.html.twig #}{% include \u0026#39;@PrestaShop/Admin/Common/Grid/grid_panel.html.twig\u0026#39; with {\u0026#39;grid\u0026#39;: productsGrid} %}It is possible to include the provided template and modify some parts of it, or you can create your own template to render the Grid.\nWorkflows Main workflow   Main workflow of the Grid Component   You can update this schema using the source XML file importable in services like draw.io. Hooks   Available hooks when creating a Grid   You can update this schema using the source XML file importable in services like draw.io. Learn more  Column Types reference   Actions reference   Bulk Actions reference   Filter types reference   Tutorials   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/hook/",
	"title": "The Hook component",
	"tags": [],
	"description": "",
	"content": "The Hook component The preferred way to customize PrestaShop is using Modules. Modules allow to customize PrestaShop in many ways.\nThe main path for Module integration are extension points called \u0026ldquo;Hooks\u0026rdquo;, which are placed throughout the system. Modules can subscribe to hooks in order to provide or alter features.\nThere are two types of hooks:\n Display hooks – Integrated mainly (but not exclusively) in templates, they allow modules to provide content that will be injected somewhere in a page. Action hooks – Allow modules to be informed of something happening in the system, and optionally alter the system’s behavior by modifying provided data.  Subscription registry PrestaShop\u0026rsquo;s Hook component acts as a registry for hook subscriptions. It stores which modules have subscribed to which hook. Multiple modules can subscribe to the same hook, and a single module can subscribe to multiple hooks.\nHere is how a Module subscribes to hook registerGDPRConsent:\n\u0026lt;?php class Somemodule extends Module { public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;registerGDPRConsent\u0026#39;); } } You can also register multiple hooks. Here is how a Module subscribes to hook registerGDPRConsent and displayProductAdditionalInfo:\n\u0026lt;?php class Somemodule extends Module { const AVAILABLE_HOOKS = [ \u0026#39;registerGDPRConsent\u0026#39;, \u0026#39;displayProductAdditionalInfo\u0026#39;, ]; public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(self::AVAILABLE_HOOKS); } } Hook dispatcher Throughout the software, multiple hooks are dispatched: this means at some point the system will look at all modules which subscribe to a given hook and trigger them, waiting for a result.\nThis is how a hook can be dispatched using Hook class:\n$id = Hook::exec(\u0026#39;actionModifyZoning\u0026#39;, [\u0026#39;address_id\u0026#39; =\u0026gt; $addressID]); Module callback Modules which have previously subscribed to this hook will be notified and will be able to act on this hook. Depending on the hook\u0026rsquo;s nature, they can alter the data being passed, trigger an event or even return a result (a data structure or raw HTML) to be used within PrestaShop.\nIn order to be notified when the subscribed hooks are dispatched, in addition to subscribing to them, modules must also declare one public callback function per subscribed hook, following this naming schema: hook\u0026lt;SubscribedHookName\u0026gt;. That way, when a hook is dispatched, the dispatcher will be able to identify and call the appropriate callback on each subscriber.\nThis means that in order to fully subscribe to a hook, a module must call registerHook() and declare a callback. For example:\n\u0026lt;?php class Somemodule extends Module { public function install() { return parent::install() \u0026amp;\u0026amp; $this-\u0026gt;registerHook(\u0026#39;registerGDPRConsent\u0026#39;); } public function hookRegisterGDPRConsent($parameters) { // This is where you can modify/alter the behavior of PrestaShop.  // The content of $parameters will depend on what is sent when the hook is dispatched.  } }  Notice how hook names start with a lower case letter (registerGDPRConsent), and hook callbacks use the capitalized name hookRegisterGDPRConsent. "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/import/",
	"title": "The Import component",
	"tags": [],
	"description": "",
	"content": "The Import component The legacy import page is not fully migrated to new architecture yet. Introduction The import workflow consists of the following steps:\n Configuration in import step 1 (such as data source, separators, other settings). Entity fields matching to data source columns in import step 2. Data validation process. Import process.  When using word entity, we are referring to a business entity from PrestaShop, such as Product, Category, Address, etc. Import step 1 This page consists of import configuration, where you select the import data source and choose wanted options, such as field separators, import language, whether old data should be truncated or not, etc. All configuration which is selected in this page, is represented by the PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigInterface.\n  Import step 1   Import configuration The default implementation of the mentioned configuration interface (PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigInterface) in PrestaShop can be seen in PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfig class. This class is a value object, which values are not supposed to change during one import operation.\nThe default ImportConfig implementation can be instantiated using the factory PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigFactory.\nImport step 2 In the second import step we can configure only two things that are directly related to the import:\n Number of rows to skip from the top of import file. Entity fields matching to data source columns.    Import step 2   Number of rows to skip The number of rows to skip from the top of import file value is also held in the default ImportConfig implementation and is exposed by the PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigInterface. The interface fits well for this configuration value, because the value is not supposed to change during the import operation.\nEntity fields matching  Entity fields matching can be explained as selecting which of the available entity fields is represented by which column in the import file. There are a couple of classes implemented in PrestaShop, that ease up the entity fields matching:\n Import entity - represented by PrestaShop\\PrestaShop\\Core\\Import\\Entity. Entity field - represented by PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityField. Data row - represented by PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\DataRow.  Import entity This class holds all import types, that are available by default in PrestaShop and allows to retrieve them easily:\n\u0026lt;?php // src/Core/Import/Entity.php  final class Entity { const TYPE_CATEGORIES = 0; const TYPE_PRODUCTS = 1; const TYPE_COMBINATIONS = 2; const TYPE_CUSTOMERS = 3; const TYPE_ADDRESSES = 4; const TYPE_MANUFACTURERS = 5; const TYPE_SUPPLIERS = 6; const TYPE_ALIAS = 7; const TYPE_STORE_CONTACTS = 8; \u0026lt;...\u0026gt; } Entity field Entity field is described by an implementation of PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityFieldInterface.\nEntity fields are stored in collections, by implementing PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityFieldCollectionInterface. Entity field collection default implementation is this class: PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\EntityFieldCollection.\nEntity field collections are provided by providers, which implement PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\Provider\\EntityFieldsProviderInterface. Every entity, which is available for import in PrestaShop, has it\u0026rsquo;s own fields provider in the PrestaShop\\PrestaShop\\Core\\Import\\EntityField\\Provider namespace.\nFor example, the entity fields provider for Customer entity builds the entity fields collection in the following way:\n\u0026lt;?php // src/Core/Import/EntityField/Provider/CustomerFieldsProvider.php  final class CustomerFieldsProvider implements EntityFieldsProviderInterface { public function getCollection() { $fields = [ new EntityField(\u0026#39;id\u0026#39;, $this-\u0026gt;trans(\u0026#39;ID\u0026#39;, \u0026#39;Admin.Global\u0026#39;)), new EntityField(\u0026#39;active\u0026#39;, $this-\u0026gt;trans(\u0026#39;Active (0/1)\u0026#39;)), new EntityField(\u0026#39;id_gender\u0026#39;, $this-\u0026gt;trans(\u0026#39;Titles ID (Mr = 1, Ms = 2, else 0)\u0026#39;)), new EntityField(\u0026#39;email\u0026#39;, $this-\u0026gt;trans(\u0026#39;Email\u0026#39;, \u0026#39;Admin.Global\u0026#39;), \u0026#39;\u0026#39;, true), new EntityField(\u0026#39;passwd\u0026#39;, $this-\u0026gt;trans(\u0026#39;Password\u0026#39;, \u0026#39;Admin.Global\u0026#39;), \u0026#39;\u0026#39;, true), new EntityField(\u0026#39;birthday\u0026#39;, $this-\u0026gt;trans(\u0026#39;Birth date (yyyy-mm-dd)\u0026#39;)), new EntityField(\u0026#39;lastname\u0026#39;, $this-\u0026gt;trans(\u0026#39;Last name\u0026#39;, \u0026#39;Admin.Global\u0026#39;), \u0026#39;\u0026#39;, true), new EntityField(\u0026#39;firstname\u0026#39;, $this-\u0026gt;trans(\u0026#39;First name\u0026#39;, \u0026#39;Admin.Global\u0026#39;), \u0026#39;\u0026#39;, true), new EntityField(\u0026#39;newsletter\u0026#39;, $this-\u0026gt;trans(\u0026#39;Newsletter (0/1)\u0026#39;)), new EntityField(\u0026#39;optin\u0026#39;, $this-\u0026gt;trans(\u0026#39;Partner offers (0/1)\u0026#39;)), new EntityField(\u0026#39;date_add\u0026#39;, $this-\u0026gt;trans(\u0026#39;Registration date (yyyy-mm-dd)\u0026#39;)), new EntityField(\u0026#39;group\u0026#39;, $this-\u0026gt;trans(\u0026#39;Groups (x,y,z...)\u0026#39;)), new EntityField(\u0026#39;id_default_group\u0026#39;, $this-\u0026gt;trans(\u0026#39;Default group ID\u0026#39;)), new EntityField( \u0026#39;id_shop\u0026#39;, $this-\u0026gt;trans(\u0026#39;ID / Name of shop\u0026#39;), $this-\u0026gt;trans(\u0026#39;Ignore this field if you don\\\u0026#39;t use the Multistore tool. If you leave this field empty, the default shop will be used.\u0026#39;, \u0026#39;Admin.Advparameters.Help\u0026#39;) ), ]; return EntityFieldCollection::createFromArray($fields); } // ... } Data row DataRow is an object representation of a data row from import source file.\nDataRow is described by an interface PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\DataRowInterface and can be used in collections to represent multiple rows of data.\nDataRow collections can be built using DataRowCollectionFactory, which should implement the PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\Factory\\DataRowCollectionFactoryInterface.\nCurrently there is one DataRowCollectionFactory implementation available in PrestaShop, which builds the DataRowCollection by reading a data file:\n\u0026lt;?php // src/Core/Import/File/DataRow/Factory/DataRowCollectionFactory.php  final class DataRowCollectionFactory implements DataRowCollectionFactoryInterface { // ...  public function buildFromFile(SplFileInfo $file, $maxRowsInCollection = null) { $dataRowCollection = new DataRowCollection(); $rowIndex = 0; foreach ($this-\u0026gt;fileReader-\u0026gt;read($file) as $dataRow) { if (null !== $maxRowsInCollection \u0026amp;\u0026amp; $rowIndex \u0026gt;= $maxRowsInCollection) { break; } $dataRowCollection-\u0026gt;addDataRow($dataRow); ++$rowIndex; } return $dataRowCollection; } } Import operation The import operation can be imaged as multiple smaller import processes running one after another, until the data is fully imported or critical errors occur.\nImport operation can be described by three essential parts:\n Import configuration preparation. The import handler. The importer.  Import configuration preparation To run the import process we have to prepare the configuration for it. As mentioned in previous topics, there are two configuration objects (ImportConfig and ImportRuntimeConfig), that have to be prepared for the import process. Both of them can be built using factories, which are described by interfaces PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportConfigFactoryInterface and PrestaShop\\PrestaShop\\Core\\Import\\Configuration\\ImportRuntimeConfigFactoryInterface.\nThere is one implementation of each of the two configuration interfaces in PrestaShop. Both of them are available to build the relevant import config object out of Symfony Request:\n\u0026lt;?php // src/Core/Import/Configuration/ImportConfigFactory.php  final class ImportConfigFactory implements ImportConfigFactoryInterface { public function buildFromRequest(Request $request) { $separator = $request-\u0026gt;request-\u0026gt;get( \u0026#39;separator\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;separator\u0026#39;, ImportSettings::DEFAULT_SEPARATOR) ); $multivalueSeparator = $request-\u0026gt;request-\u0026gt;get( \u0026#39;multiple_value_separator\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;multiple_value_separator\u0026#39;, ImportSettings::DEFAULT_MULTIVALUE_SEPARATOR) ); return new ImportConfig( $request-\u0026gt;request-\u0026gt;get(\u0026#39;csv\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;csv\u0026#39;)), $request-\u0026gt;request-\u0026gt;getInt(\u0026#39;entity\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;entity\u0026#39;, 0)), $request-\u0026gt;request-\u0026gt;get(\u0026#39;iso_lang\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;iso_lang\u0026#39;)), $separator, $multivalueSeparator, $request-\u0026gt;request-\u0026gt;getBoolean(\u0026#39;truncate\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;truncate\u0026#39;, false)), $request-\u0026gt;request-\u0026gt;getBoolean(\u0026#39;regenerate\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;regenerate\u0026#39;, false)), $request-\u0026gt;request-\u0026gt;getBoolean(\u0026#39;match_ref\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;match_ref\u0026#39;, false)), $request-\u0026gt;request-\u0026gt;getBoolean(\u0026#39;forceIDs\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;forceIDs\u0026#39;, false)), $request-\u0026gt;request-\u0026gt;getBoolean(\u0026#39;sendemail\u0026#39;, $request-\u0026gt;getSession()-\u0026gt;get(\u0026#39;sendemail\u0026#39;, true)), $request-\u0026gt;request-\u0026gt;getInt(\u0026#39;skip\u0026#39;, 0) ); } } \u0026lt;?php // src/Core/Import/Configuration/ImportRuntimeConfigFactory.php  final class ImportRuntimeConfigFactory implements ImportRuntimeConfigFactoryInterface { public function buildFromRequest(Request $request) { $sharedData = $request-\u0026gt;request-\u0026gt;get(\u0026#39;crossStepsVars\u0026#39;, []); return new ImportRuntimeConfig( $request-\u0026gt;request-\u0026gt;getBoolean(\u0026#39;validateOnly\u0026#39;), $request-\u0026gt;request-\u0026gt;getInt(\u0026#39;offset\u0026#39;), $request-\u0026gt;request-\u0026gt;getInt(\u0026#39;limit\u0026#39;), json_decode($sharedData, true), $request-\u0026gt;request-\u0026gt;get(\u0026#39;type_value\u0026#39;, []) ); } } Import handler To handle the import process we must prepare an ImportHandler, which will have access to our specific logic for import operation. The ImportHandler should implement PrestaShop/PrestaShop/Core/Import/Handler/ImportHandlerInterface.\nThere are three main methods exposed by the interface, which are essential for import logic execution:\n\u0026lt;?php // src/Core/Import/Handler/ImportHandlerInterface.php  interface ImportHandlerInterface { /** * Executed before import process is started. */ public function setUp(ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig); /** * Imports one data row. */ public function importRow( ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig, DataRowInterface $dataRow ); /** * Executed when the import process is completed. */ public function tearDown(ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig); // ... }  setUp() - executed before each import process. You can set prerequisites in this method, log some data, or execute additional operations that should be executed before starting the import. The method has both ImportConfigInterface and ImportRuntimeConfigInterface as arguments, meaning you can access the configuration if needed for import preparation. importRow() - executed for every row that\u0026rsquo;s being imported. This method should run the logic, that imports the data for one row. In addition to import configuration, this method also has a PrestaShop\\PrestaShop\\Core\\Import\\File\\DataRow\\DataRowInterface as an argument, which is an object representation of the current row from the import data source. tearDown() - executed when the import process is finished. Useful for actions that have to be done only once after each process.  Importer The Importer is responsible for running the import logic from ImportHandler, and applying the import configuration properly during the process. Importer is an object that implements the PrestaShop\\PrestaShop\\Core\\Import\\ImporterInterface. PrestaShop comes with one Importer implementation (PrestaShop\\PrestaShop\\Core\\Import\\Importer), which can be easily used for your needs.\nThe PrestaShop\\PrestaShop\\Core\\Import\\ImporterInterface exposes only one method:\n\u0026lt;?php // src/Core/Import/ImporterInterface.php  interface ImporterInterface { /** * Process the import. */ public function import( ImportConfigInterface $importConfig, ImportRuntimeConfigInterface $runtimeConfig, ImportHandlerInterface $importHandler ); } import() method accepts the import configurations and the import handler implementation as arguments and will execute the import logic automatically.\nImport execution example in a controller The processImportAction() controller action (from the example below) imports one batch of the import data at a time. It can be run multiple times, until all data is fully imported.\nThe controller action below is being called multiple times (via AJAX) by the JavaScript part of the import component, until all data is imported from the source file:\n\u0026lt;?php // src/PrestaShopBundle/Controller/Admin/Configure/AdvancedParameters/ImportController.php  public function processImportAction(Request $request) { $importer = $this-\u0026gt;get(\u0026#39;prestashop.core.import.importer\u0026#39;); $importConfigFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.import.config_factory\u0026#39;); $runtimeConfigFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.import.runtime_config_factory\u0026#39;); $importHandlerFinder = $this-\u0026gt;get(\u0026#39;prestashop.adapter.import.handler_finder\u0026#39;); // Building the configuration objects  $importConfig = $importConfigFactory-\u0026gt;buildFromRequest($request); $runtimeConfig = $runtimeConfigFactory-\u0026gt;buildFromRequest($request); // Running the import process  $importer-\u0026gt;import( $importConfig, $runtimeConfig, $importHandlerFinder-\u0026gt;find($importConfig-\u0026gt;getEntityType()) // Finding import handler  ); return $this-\u0026gt;json($runtimeConfig-\u0026gt;toArray()); } Related JavaScript Since the import operation can be heavy and take many resources to complete (depending on the amount of data to be imported), in PrestaShop it is being executed in smaller processes. To achieve that, some JavaScript code is being used, which continuously fires AJAX requests that trigger the import processing on the server, until the import finishes.\nAll JavaScript code, which is used by the import component, can be found under admin-dev/themes/new-theme/js/pages/import-data/ directory. We can find different JavaScript components there, which are explained below.\nEntityFieldsValidator Responsible for validating selected entity fields in import page 2 data table. It makes sure that you don\u0026rsquo;t miss any required fields, prevents you from selecting same field twice and shows error messages if you do.\n  Validation in import step 2 - duplicate fields   ImportBatchSizeCalculator Calculates the most reasonable batch size for each import process, depending on server\u0026rsquo;s response time. It adapts the batch size of the next import iteration by measuring how long it took for the server to process the data in previous import iteration.\nImportDataTable Responsible for pagination functionality in the import data preview table. The pagination arrows appear below the data table and can be used to peek the source file preview forward or backwards.\n  Import step 2 data preview table - pagination arrows   ImportMatchConfiguration Responsible for saving, loading or deleting import matches configurations. Import match configuration allows saving the matched entity fields for later reusability.\n  Import match configuration interface   PostSizeChecker Responsible for checking if POST size limit is being reached. It\u0026rsquo;s used in each import process, to make sure it won\u0026rsquo;t reach the limits.\nImportProgressModal Responsible for displaying the import progress for the end user in a modal window. It updates the progress bar of the modal, displays messages, shows/hides the buttons in modal when asked for.\n  Import modal   Importer Executes import process and fires AJAX import requests continuously. It uses the PostSizeChecker, ImportBatchCalculator and ImportProgressModal components internally and connects them to execute the import process.\nImportDataPage Responsible for running the Importer component when the end user clicks Import button. Collects data from the import match configuration form and passes it to the Importer.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/mail-templates/",
	"title": "The Mail Template component",
	"tags": [],
	"description": "",
	"content": "The Mail Template component  Introduction PrestaShop\u0026rsquo;s email notification system is based on static template files, one for each kind of message (like account creation, order confirmation, etc), which are stored in the mails folder. In order to localize these messages, PrestaShop needs a copy of each template, translated to every supported language. Shops download these translated versions when installing a new language pack.\nThis system has a few drawbacks. Shops need to download email packs every time a new language is installed, and if a template had not been translated to that language, you ended up with emails in English. This gets even more complicated when you use an email theme (from Addons or a freelance designer) which is therefore limited to the languages the authors translated by themselves. Also, any customization performed in a template has to be replicated for every installed language.\nStarting on 1.7.6, this feature has been significantly revamped. To avoid introducing breaking changes, the system still relies on static email templates, which are used by the Mail::send method. However, instead of downloading translated copies of each template, these files are now dynamically generated whenever you install a new language, using base templates, or layouts.\nThis is the first step to improving the email system in PrestaShop. As the feature gets further improved we will add more advanced customization for email templates.\nVocabulary Terms like \u0026ldquo;layouts\u0026rdquo;, \u0026ldquo;templates\u0026rdquo; and \u0026ldquo;themes\u0026rdquo; can be confusing, so let\u0026rsquo;s clarify them:\n  Mail themes are groups of Layouts with a given style, stored in the mails/themes/ directory.\nYou can have many mail themes installed, but only one active at a time.\n  Layouts are files that will be rendered using Twig to generate ready-to-use mail Templates.\nThey can use logic statements, translate wordings, extend other base layouts or include components. They are the basic files that make up your Mail theme.\n  Templates are static, translated files (html or txt) that will be generated by MailThemeGenerator from Layouts of a given Mail theme in a given language.\nThey contain no logic and are translated for ONE language. These are the files used by the Mail class when you send a mail and are located in the mails/ directory, grouped by language (mails/en/, mails/fr/, \u0026hellip;).\n  Architecture Folder structure The new email themes layout files are stored in the mails/themes/ folder. PrestaShop 1.7.6 is bundled with two email themes:\n classic – The default email theme that was bundled with PrestaShop up until the 1.7.5 version. modern – A new email theme with a modern, responsive design.  Each of these folder contains twig layouts which are organized in a conventional way:\n... ├── mails | ├── themes | | ├── modern | | | ├── assets # Contains the assets used in your layouts (optional) | | | ├── components # Contains block parts or base layouts for your email theme (optional) | | | | ├── footer.html.twig | | | | ├── layout.html.twig | | | ├── core # Contains layouts for Core transactional mails | | | | ├── account.html.twig # HTML layout for \u0026#34;account\u0026#34; transactional mail | | | | ├── account.txt.twig # TXT layout for \u0026#34;account\u0026#34; transactional mail | | | | ├── bankwire.html.twig # HTML layout for \u0026#34;bankwire\u0026#34; transactional mail | | | | ├── cheque.txt.twig # TXT layout for \u0026#34;cheque\u0026#34; transactional mail | | | | ├── contact.html.twig # HTML layout for \u0026#34;contact\u0026#34; transactional mail | | | ├── modules # Contains layouts specific to a given module | | | | ├── followup # Module name | | | | | ├── followup_1.html.twig | | | | | ├── followup_2.html.twig | | | | ├── ps_emailalerts # Module name | | | | | ├── new_order.html.twig | | | | | ├── followup_2.html.twig ... As you can see there are two types of layouts, one for each type of template:\n HTML layouts, which generate HTML templates and can contain tags for attractive design, images, links, etc. TXT layouts, which only contain plain text, used for old email clients or non interactive environments.  The layout name should respect the following convention: {layout_name}.{layout_type}.twig\nFor example:\n account.html.twig : layout for the account mail template in its html version cheque.txt.twig : layout for the cheque mail template in its txt version  As you may have noticed, some of our layouts have both types (e.g.: account) whereas others only have html or txt type (bankwire, cheque, \u0026hellip;). This is because you are not forced to define both types as they will be used as a fallback for each other:\n If only the html type is available, the same layout will be stripped of html tags and the resulting plain text will be used as your txt layout. If only the txt type is available, the same layout will be used for html layout (but it won\u0026rsquo;t have images nor any other rich elements).  Thanks to this fallback system, and since we mostly want rich HTML emails, most email themes will only contain html layouts, and txt layouts will be automatically generated from them. Themes and Layouts PrestaShop uses objects to manipulate email themes and layouts, they implement the following interfaces:\n PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeInterface – Describes a theme and provides a list of its layouts PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutInterface – Describes a theme layout (name, file paths, related module\u0026hellip;)  These interfaces have a corresponding collection that is used in the core services and provided via hooks:\n PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollectionInterface PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutCollectionInterface  Of course, PrestaShop provides concrete implementations which you are encouraged to reuse:\n PrestaShop\\PrestaShop\\Core\\MailTemplate\\Theme PrestaShop\\PrestaShop\\Core\\MailTemplate\\ThemeCollection PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\Layout PrestaShop\\PrestaShop\\Core\\MailTemplate\\Layout\\LayoutCollection  Generation workflow The templates from layouts generation workflow is a bit complex, here are the main components:\n GenerateThemeMailTemplatesCommand describes the generation settings (eg. which theme are we generating and in which language). GenerateThemeMailTemplatesCommandHandler is the command bus handler in charge of executing the generation using the configured MailTemplateGenerator. FolderThemeCatalog provides a ThemeCollection, which is built by scanning mail themes in folders. MailTemplateGenerator drives the generation of a ThemeInterface for the requested LanguageInterface. MailTemplateTwigRenderer actually renders the layout using the Twig renderer, and post-processes the result by applying any existing TransformationInterface. LayoutVariablesBuilder provides variables to be used in the Twig layouts.    Email Generation Workflow (it is advised to open it in another tab as the image is quite big)   You can update this schema using the source XML file importable in services like draw.io. Available hooks As you can see in the workflow, the email generation process includes a few hooks that allow you to include your own themes, layouts, variables and transformations:\n actionListMailThemes allows you to modify the ThemeCollection (add, remove, modify a theme or/and its layouts) actionBuildMailLayoutVariables allows you to modify the variables of a specific layout actionGetMailLayoutTransformations allows you to modify the transformations applied to a specific layout  Template variables Layout variables are NOT template variables\nAlways keep in mind that the variables provided by the LayoutVariablesBuilder will only be available during template generation, meaning that their value will be fixed into the exported static templates, and won\u0026rsquo;t change dynamically when your emails are being sent. They should not be confused with template variables (like firstname, lastname, \u0026hellip;) which are replaced at the last moment when the email is sent by the Mail::send function.\n Here is a quick resume of the differences:\n    Layout Template     Renderer Twig Swift_Plugins_DecoratorPlugin   Syntax {{ variable }} { variable }   Interpreted On generation When the email is being sent   Target All users/customers Specific user/action   Use cases Design, translations, \u0026hellip; Customization (user, order, \u0026hellip;)    On the same principle, you can add Twig logic in your templates, like conditions on email types, or even your own layout variables to deal with customization — but it will only be useful during email generation. So don\u0026rsquo;t use any Twig logic to adapt the templates for a specific user or order. Translation One of the main advantages of email generation is the possibility to use translations in the layouts, here is an example:\n\u0026lt;table width=\u0026#34;100%\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td align=\u0026#34;center\u0026#34; class=\u0026#34;titleblock\u0026#34;\u0026gt; \u0026lt;font size=\u0026#34;2\u0026#34; face=\u0026#34;Open-sans, sans-serif\u0026#34; color=\u0026#34;#555454\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;title\u0026#34;\u0026gt;{{ \u0026#39;This is a translated string\u0026#39;|trans({}, \u0026#39;EmailsBody\u0026#39;, locale)|raw }}\u0026lt;/span\u0026gt; \u0026lt;/font\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; Templates generation Automatic generation So now that you know how the generation process works, you might wonder when exactly does it happen? There are a few cases when generation is automatic:\n In Language class and more particularly during the calls to Language::downloadAndInstallLanguagePack, Language::installLanguagePack and of course Language::installEmailsLanguagePack which is now deprecated In PrestaShopBundle\\Install\\Upgrade::run when languages are updated  Manual generation Of course sometimes you still want to manually generate your emails (new theme installed, changes in some layouts, \u0026hellip;), then you can use:\n In the Symfony command prestashop:mail:generate if you want to launch a CLI generation In the \u0026ldquo;Design \u0026gt; Email Theme\u0026rdquo; page when you use the form to launch the generation manually (once per language)  Choosing the default theme Your shop can only use one theme at a time, so if you go to the \u0026ldquo;Design \u0026gt; Email Theme\u0026rdquo; page you will be able to choose your default email theme. This default theme will be used each time the generation process is launched automatically (language installation, upgrade, \u0026hellip;).\nThe default theme starting from 1.7.6 will be the modern theme, the classic theme was provided for backward compatibility and as an example.\nTroubleshooting I changed my default theme but my emails didn\u0026rsquo;t change. Indeed when you select your default theme you simply update your configuration, so any future generation will use the theme you selected.\nHowever no generation process is launched when you select a theme, so if you want to generate your emails with your newly selected theme you need to do it manually in the \u0026ldquo;Generate emails\u0026rdquo; form.\nThe form only generates one language, so you will have to repeat the action for each Language installed on your shop. I tried to generate emails with a new theme, but my templates are still in the previous one. There are two possibilities for this issue:\n1. Overwrite already-generated templates\nAs you may have noticed, the GenerateThemeMailTemplatesCommand and the \u0026ldquo;Generate emails\u0026rdquo; form have an overwrite option. We need this option because some shops may have installed email themes, or customized their templates manually. For that reason by default the generation process does not export a template if it already exists. If you want to replace the former templates you need to enable the overwrite option.\nBe careful, using this option will replace all the existing templates! 2. Overwrite the shop theme\u0026rsquo;s mail templates\nAs you may know, your PrestaShop theme (the shop\u0026rsquo;s theme, not the email theme) can include mail templates which override the shop\u0026rsquo;s default ones. Those templates are not contained in the default mails folder, but the in themes/{my_theme}/mails/ folder. Even if you generate your new mail theme (be it automatically or manually), the shop theme\u0026rsquo;s templates will have higher priority and will be used instead of your mail theme\u0026rsquo;s.\nIn that case, generate your mail theme manually and to select the shop theme you want to overwrite. Templates will be generated in its folder and will be used from now (don\u0026rsquo;t forget to enable the overwrite option if you want to replace them).\nBe aware this operation will permanently modify your shop theme\u0026rsquo;s files! Learn more Reference  Here is an example module showing how to integrate with the email generation workflow  Module Tutorials  How to extend a layout in a theme from a module How to add a layout in a theme from a module How to add an email theme from a module How to add layout variables from a module How to apply a transformation from a module  "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/position-updater/",
	"title": "The Position Updater component",
	"tags": [],
	"description": "",
	"content": "The Position updater component  Introduction Order elements position is a common use case in any CMS or a shop back-office. You may need to order, categories, products, modules or adds. The use cases are endless. Which is why we developed a generic component to help you manage your position updates quickly and efficiently. Combined with our Grid component this will help you build entity lists more easily. This component will be divided into \u0026hellip; components:\n PositionDefinition: it defined the basic information to compute and update the position( table, id field, position field, \u0026hellip;) PositionUpdate: this object contains all the atomic modifications that needs to be done on your list (symbolized by PositionModification objects) PositionUpdateFactory: this service allows you to build a PositionUpdate easily base on your PositionDefinition and basic modification data GridPositionUpdater: it is the main part of the component which gives you interfaces to perform position modifications  PositionDefinition The first thing, and nearly only thing, you need to create is you PositionDefinition which will hold the basic structure to manage the positions in your list. To allow our component to automatically compute position updates we need a few data:\n table: which table is being ordered and contains the position (ps_category, ps_product, \u0026hellip;) idField: what is the name of the field containing the id of this table (id_category, id_product) positionField: what is the name of the field containing the position in this table (position, pos, rank, \u0026hellip;) parentIdField (optional): in some cases the position depends on a parent context and your table will contains different positions based on a different parent (id_category, id_parent, \u0026hellip;)  Manual definition You can define this PositionDefinition manually:\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition; $positionDefinition = new PositionDefinition( \u0026#39;product\u0026#39;, \u0026#39;id_product\u0026#39;, \u0026#39;position\u0026#39;, \u0026#39;id_category_default\u0026#39; ); Service definition Or you can define a service to avoid duplicating your code:\nservices:_defaults:public:trueprestashop.product.grid.position_definition:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition\u0026#39;arguments:- \u0026#39;product\u0026#39;- \u0026#39;id_product\u0026#39;- \u0026#39;position\u0026#39;- \u0026#39;id_category_default\u0026#39;Building your PositionUpdate The good news is that you now made the hardest part, all other computing and database queries will be managed by our component. The only thing you have to do now is provide the updates you want to apply to your list positions. We provide a default PositionUpdateFactory to help you build your update, it is defined as a Symfony service accessible via prestashop.core.grid.position.position_update_factory.\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionDataException; $positionsData = [ \u0026#39;positions\u0026#39; =\u0026gt; [ [ \u0026#39;rowId\u0026#39; =\u0026gt; 12, \u0026#39;oldPosition\u0026#39; =\u0026gt; 0, \u0026#39;newPosition\u0026#39; =\u0026gt; 1, ], [ \u0026#39;rowId\u0026#39; =\u0026gt; 15, \u0026#39;oldPosition\u0026#39; =\u0026gt; 5, \u0026#39;newPosition\u0026#39; =\u0026gt; 3, ] ], \u0026#39;parentId\u0026#39; =\u0026gt; $categoryId, ]; /** @var PositionDefinition $positionDefinition */ $positionDefinition = $this-\u0026gt;get(\u0026#39;prestashop.product.grid.position_definition\u0026#39;); /** @var PositionUpdateFactory $positionUpdateFactory */ $positionUpdateFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.position.position_update_factory\u0026#39;); try { /** @var PositionUpdate $positionUpdate */ $positionUpdate = $positionUpdateFactory-\u0026gt;buildPositionUpdate($positionsData, $positionDefinition); } catch (PositionDataException $e) { //An exception is thrown if the input data doesn\u0026#39;t respect the expected format  $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); }  The format of the input data is not random nor fixed, it actually matches the definition of our PositionUpdateFactory which you can see in the service definition:\n# In src/PrestaShopBundle/Resources/config/services/core/grid.yml...# Grid position updaterprestashop.core.grid.position.position_update_factory:class:\u0026#39;PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory\u0026#39;arguments:- \u0026#39;positions\u0026#39;- \u0026#39;rowId\u0026#39;- \u0026#39;oldPosition\u0026#39;- \u0026#39;newPosition\u0026#39;- \u0026#39;parentId\u0026#39;If you need this component to match another input format you can instanciate your own factory with the appropriate settings.\n Update your positions Now that you built your PositionUpdate object all you need to do is perform the modification, to do this you can use the GridPositionUpdater service which id is PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdater\n\u0026lt;?php use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdaterInterface; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionUpdateException; /** @var PositionUpdate $positionUpdate */ $positionUpdate = buildPositionUpdate(); /** @var GridPositionUpdaterInterface $updater */ $updater = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.position.doctrine_grid_position_updater\u0026#39;); try { $updater-\u0026gt;update($positionUpdate); $this-\u0026gt;clearModuleCache(); $this-\u0026gt;addFlash(\u0026#39;success\u0026#39;, $this-\u0026gt;trans(\u0026#39;Successful update.\u0026#39;, \u0026#39;Admin.Notifications.Success\u0026#39;)); } catch (PositionUpdateException $e) { $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); } Example This is a example to sum up what you just learnt, here is a simple controller used in a grid in the ps_linklist module.\n# Route definition for the controlleradmin_link_block_update_positions:path:/link-widget/update-positions/{hookId}methods:[POST]defaults:_controller:\u0026#39;PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design\\LinkBlockController::updatePositionsAction\u0026#39;_legacy_controller:AdminLinkWidgetrequirements:hookId:\\d+\u0026lt;?php namespace PrestaShop\\Module\\LinkList\\Controller\\Admin\\Improve\\Design; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionDataException; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\Exception\\PositionUpdateException; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\GridPositionUpdaterInterface; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdateFactory; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionDefinition; use PrestaShop\\PrestaShop\\Core\\Grid\\Position\\PositionUpdate; use PrestaShopBundle\\Controller\\Admin\\FrameworkBundleAdminController; use PrestaShopBundle\\Security\\Annotation\\AdminSecurity; use PrestaShopBundle\\Security\\Annotation\\ModuleActivated; use Symfony\\Component\\HttpFoundation\\RedirectResponse; use Symfony\\Component\\HttpFoundation\\Request; use Symfony\\Component\\HttpFoundation\\Response; /** * Class LinkBlockController. * * @ModuleActivated(moduleName=\u0026#34;ps_linklist\u0026#34;, redirectRoute=\u0026#34;admin_module_manage\u0026#34;) */ class LinkBlockController extends FrameworkBundleAdminController { /** * @AdminSecurity(\u0026#34;is_granted(\u0026#39;update\u0026#39;, request.get(\u0026#39;_legacy_controller\u0026#39;))\u0026#34;, message=\u0026#34;Access denied.\u0026#34;) * * @param Request $request * @param int $hookId * * @throws \\Exception * * @return RedirectResponse */ public function updatePositionsAction(Request $request, $hookId) { $positionsData = [ \u0026#39;positions\u0026#39; =\u0026gt; $request-\u0026gt;request-\u0026gt;get(\u0026#39;positions\u0026#39;, null), \u0026#39;parentId\u0026#39; =\u0026gt; $hookId, ]; /** @var PositionDefinition $positionDefinition */ $positionDefinition = $this-\u0026gt;get(\u0026#39;prestashop.module.link_block.grid.position_definition\u0026#39;); /** @var PositionUpdateFactory $positionUpdateFactory */ $positionUpdateFactory = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.position.position_update_factory\u0026#39;); try { /** @var PositionUpdate $positionUpdate */ $positionUpdate = $positionUpdateFactory-\u0026gt;buildPositionUpdate($positionsData, $positionDefinition); } catch (PositionDataException $e) { $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); return $this-\u0026gt;redirectToRoute(\u0026#39;admin_link_block_list\u0026#39;); } /** @var GridPositionUpdaterInterface $updater */ $updater = $this-\u0026gt;get(\u0026#39;prestashop.core.grid.position.doctrine_grid_position_updater\u0026#39;); try { $updater-\u0026gt;update($positionUpdate); $this-\u0026gt;clearModuleCache(); $this-\u0026gt;addFlash(\u0026#39;success\u0026#39;, $this-\u0026gt;trans(\u0026#39;Successful update.\u0026#39;, \u0026#39;Admin.Notifications.Success\u0026#39;)); } catch (PositionUpdateException $e) { $errors = [$e-\u0026gt;toArray()]; $this-\u0026gt;flashErrors($errors); } return $this-\u0026gt;redirectToRoute(\u0026#39;admin_link_block_list\u0026#39;); } } "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/page-reference/back-office/product/form/",
	"title": "The Product Form",
	"tags": [],
	"description": "",
	"content": "The New Product Form  In most recent Product page, which was remade in 1.7.8, the form is divided into multiple sub forms. Each form has dedicated CQRS commands to manage its content.\nFor previous versions you can read this documentation about product form before 1.7.8. Creation / Update commands Except for the initial save, all product modifications are updates, which is why AddProductCommand is a special case. It requires only:\n the product type localized names (only the name in default language is required)  Once the product is created and its ID has been generated most of the other CQRS commands are updates so they will need a ProductId identifier. They allow partial updates to minimize the amount of sent data, of course even partial update require a minimum of consistency and will have validation rules such as required fields in some cases.\nProduct form This form combines different sub form types, each one is handled by dedicated CQRS commands.\n   Form type Field Description CQRS Command     BasicInformationType basic Contains the basic product information of the Product AddProductCommand and UpdateBasicInformationCommand   DescriptionType description Contains the description of the Product UpdateDescriptionCommand   ShortcutType shortcut Contains shortcut for prices and quantity of the Product UpdatePricesCommand, UpdateStockCommand and UpdateOptionsCommand   RelationshipsType relationships Contains relationships of the product N/A   ShortcutType shortcuts Contains shortcut fields editable in other sub forms but accessible in first tab easily N/A   TypeaheadProductPackCollectionType pack_items List of products (for Pack of product) AddProductToPackCommand UpdateProductPackCommand RemoveProductFromPachCommand   ProductCategoriesType product_categories Manage product categories N/A    BasicInformationType    Fields Field type Description     type_product ChoiceType Type of product: Standard, virtual or Pack of Product   name TranslateType Product name (localized)    DescriptionType    Fields Field type Description     description TranslateType Product description (localized)   description_short TranslateType Product short description (localized)    ShortcutType    Fields Field type Description CQRS Commands     price MoneyType Product price (tax excluded) UpdatePricesCommand   price_ttc MoneyType Product price (tax included)    quantity NumberType Product stock quantity    id_tax_rules_group ChoiceType One of the TaxRulesGroup entity UpdateStockCommand   reference TextType Product reference UpdateOptionsCommand    Component forms (WIP) These forms are displayed on the page but not integrated in the product form, they are independent component forms that use ajax requests instead.\nRelationshipsType    Fields Field type Description CQRS Commands     features CollectionType [ProductFeature] List of sub forms for product Feature entity AddProductFeatureCommand UpdateProductFeatureCommand RemoveProductFeatureCommand   id_manufacturer ChoiceType One of the ManufacturerCore UpdateProductManufacturerCommand   related_products TypeaheadProductCollectionType List of related products AddRelatedProductCommand RemoveRelatedProductCommand    ProductCategoriesType    Fields Field type Description CQRS Commands     categories ChoiceCategoriesTreeType List of associated categories UpdateProductCategoriesCommand   id_category_default ChoiceType One of the Category as default UpdateProductDefaultCategoryCommand   new_category SimpleCategory Sub form to add and associate a new Category entity AddCategoryCommand    To be defined These are the old form types that need to be split and redefined\n   Form type Fields Field type Description     ProductPrice   This Form type is used for step2 or \u0026ldquo;Pricing\u0026rdquo; tab    price MoneyType Product price (tax excluded)    price_ttc MoneyType Product price (tax included)    ecotax MoneyType Product eco tax (tax included)    id_tax_rules_group ChoiceType One of the TaxRulesGroup entity    on_sale CheckboxType Boolean to indicate if Product is on sale    wholesale_price MoneyType Wholesale/cost Product price (tax excluded)    unit_price MoneyType Price per unit (tax included)    unity TextType Unity description (Per kilo, per litre, \u0026hellip;)    specific_price ProductSpecificPrice Sub form to add and associate a new SpecificPrice entity    *specificPricePriority_* ChoiceType List of criteria to define priorities to apply specific prices    specificPricePriorityToAll CheckboxType Boolean to indicate if the priorities criteria must be applied on ALL products   ProductQuantity   This Form type is used for step3 or \u0026ldquo;Quantities\u0026rdquo; tab    attributes TextType Text field used to select attributes for Combination entity generation    advanced_stock_management CheckboxType Boolean to indicate if Advanced stock management is enable for this Product (available only if PS_ADVANCED_STOCK_MANAGEMENT is enabled)    depends_on_stock ChoiceType Select stock policy when using advanced stock management (based on stock or manual)    pack_stock_type ChoiceType Pack stock management type (Decrement pack only, products only, both or default configuration PS_PACK_STOCK_TYPE)    qty_0 NumberType Define product stock quantity    out_of_stock ChoiceType Out of stock policy (Allow orders, Deny orders, or default configuration PS_ORDER_OUT_OF_STOCK)    minimal_quantity NumberType Minimum quantity for sale    location TextType Stock location    low_stock_threshold NumberType Quantity that defines low stock is reached    low_stock_alert CheckboxType Enable email alert when low stock is reached    available_now TranslateType Label when in stock (localized)    available_later TranslateType Label when out of stock (and back order allowed) (localized)    available_date DatePickerType Availability date    virtual_product ProductVirtual For virtual product: Specify if a file is associated, and download limitations (number of download, expiration, \u0026hellip;)   ProductShipping   This Form type is used for step4 or \u0026ldquo;Shipping\u0026rdquo; tab    width NumberType Product width    height NumberType Product height    depth NumberType Product depth    weight NumberType Product weight    additional_shipping_cost MoneyType Shipping fees    selectedCarriers ChoiceType Selection of available carriers    additional_delivery_times ChoiceType Specify delivery time (None, default, specific)    delivery_out_stock TranslateType Specific label for out of stock delivery time (localized)    delivery_in_stock TranslateType Specific label for in stock delivery time (localized)    *warehouse_combination_* CollectionType [ProductWarehouseCombination] List of sub forms for WarehouseProductLocation entity   ProductSeo   This Form type is used for step5 or \u0026ldquo;SEO\u0026rdquo; tab    meta_title TranslateType Meta title used for search engine (localized)    meta_description TranslateType Meta description used for search engine (localized)    link_rewrite TranslateType Link rewrite part used when generating Friendly urls (localized)    redirect_type ChoiceType Redirection HTTP code when product is inactive (Permanent/temporary redirection to category/product, or not found)    id_type_redirected TypeaheadProductCollectionType Product/Category ID to redirect to   ProductOptions   This Form type is used for step6 or \u0026ldquo;Options\u0026rdquo; tab    visibility ChoiceType Product visibility is lists (Everywhere, catalog only, search only, nowhere)    tags TranslateType List of tags (localized)    display_options FormType Various display options (available_for_order, show_price, online_only)    mpn TextType Manufacturer Part Number    upc TextType UPC barcode    ean13 TextType EAN-13 or JAN barcode    isbn TextType ISBN code    reference TextType Product reference    show_condition CheckboxType Display condition of product    condition ChoiceType Type of condition for product (New, used, refurbished)    suppliers ChoiceType List of Supplier for this product    default_supplier TextType One of the Supplier as default one    *supplier_combination_* CollectionType [ProductSupplierCombination] List of sub forms for ProductSupplier entity (details Price and reference for each supplier)    custom_fields CollectionType [ProductCustomField] List of sub forms for ProductCustom entity (define possible custom texts, images, \u0026hellip;)    attachment_product ProductAttachement Sub form to create and associate an Attachment entity (instructions, documentation, recipes, \u0026hellip;)    attachments ChoiceType List of Attachment for this product    Sub forms Here is a description of the sub forms used in the main one\n   Form type Fields Field type Description     ProductAttachement   This Form type is used in ProductOptions to create an Attachment entity    file FileType File to upload    name TextType Filename    description TextType File description    add ButtonType Add button    cancel ButtonType Cancel button   ProductCustomField   This Form type is used in ProductOptions to edit a CustomizationField entity    id_customization_field HiddenType CustomizationField ID    label TranslateType Customization field name (localized)    type ChoiceType Customization field type (text, file)    require CheckboxType Boolean to indicate if custom field is required   ProductSpecificPrice   This Form type is used in ProductOptions to edit a SpecificPrice entity    sp_id_shop HiddenType or ChoiceType Select Shop association (When only one Shop just use the default one)    sp_id_currency ChoiceType Select specific price currency    sp_id_country ChoiceType Select specific price country    sp_id_group ChoiceType Select specific price group    sp_id_customer ChoiceType Select specific price customer    sp_id_product_attribute ChoiceType Select specific price combination    sp_from DatePickerType Specific price starting date    sp_to DatePickerType Specific price ending date    sp_from_quantity NumberType Specific price minimum quantity    sp_price MoneyType Specific price (tax excl.)    leave_bprice CheckboxType Boolean to indicate if initial price is kept    sp_reduction NumberType Reduction amount    sp_resp_reduction_type ChoiceType Reduction type (amount, percentage)    save ButtonType Save button    cancel ButtonType Cancel button   ProductSupplierCombination   This Form type is used in ProductOptions to edit a ProductSupplier entity    supplier_reference TextType Supplier reference    product_price MoneyType Product price for supplier    product_price_currency ChoiceType Select product price currency    id_product HiddenType Product ID    id_product_attribute HiddenType Combination ID    supplier_id HiddenType Supplier ID   ProductVirtual   This Form type is used in ProductQuantity to specify the virtual product file settings    is_virtual_file ChoiceType Boolean that indicates if the virtual product has an associated file    file FileType File to upload    name TextType Filename    nb_downloadable NumberType Number of allowed downloads    expiration_date DatePickerType Expiration date    nb_days NumberType Number of days    save ButtonType Save button   ProductWarehouseCombination   This Form type is used in ProductShipping to edit WarehouseProductLocation entities    activated ChoiceType Boolean that indicates if the warehouse stores the product    product_id HiddenType Product ID    id_product_attribute HiddenType Combination ID    warehouse_id HiddenType Warehouse ID    location TextType Location in warehouse (optional)   TypeaheadProductCollectionType   This Form type is used in ProductInformation to select related products and in ProductSEO to select the redirection target (Product or Category)    data CollectionType Serialized data that is then used to create the relation For related product it creates an accessory relation, for SEO it stores the ID for redirection   TypeaheadProductPackCollectionType   This Form type is used in ProductInformation to select products contained in the Pack    data CollectionType Serialized data that is then used to create the relation using the Pack entity    Extra forms Some extra forms are not integrated directly in the product form but displayed in the page and managed in individual components (often through ajax requests).\n   Form type Fields Field type Description     ProductCategories   This Form type is used to display and select the categories for the Product (as a tree)    categories ChoiceCategoriesTreeType Display a tree of categories and allows to select them   ChoiceCategoriesTreeType   Categories tree selector    tree ChoiceType List of Category entities   ProductCombination   This Form type is used to edit a Combination entity    id_product_attribute HiddenType Combination ID    attribute_reference TextType Combination reference    attribute_ean13 TextType Combination EAN-13 or JAN barcode    attribute_isbn TextType Combination ISBN code    attribute_upc TextType Combination UPC barcode    attribute_mpn TextType Combination Manufacturer Part Number    attribute_wholesale_price MoneyType Combination wholesale/cost price (tax excluded)    attribute_price MoneyType Impact on price (tax excl.)    attribute_priceTI MoneyType Impact on price (tax incl.)    attribute_ecotax MoneyType Combination ecotax (tax incl.)    attribute_weight NumberType Impact on weight    attribute_unity NumberType Impact on price per unit (tax excl.)    attribute_minimal_quantity NumberType Min. quantity for sale    attribute_location TextType Stock location    attribute_low_stock_threshold NumberType Low stock threshold    attribute_low_stock_alert CheckboxType Enable email alert when low stock is reached    available_date_attribute DatePickerType Availability date    attribute_default CheckboxType Set as default combination    attribute_quantity NumberType Combination quantity (when Stock management enabled)    id_image_attr ChoiceType List of Images associated to the Combination    final_price NumberType Final price   ProductCombinationBulk   This Form type is used to edit options when performing bulk action on Combination entities    quantity NumberType Combination quantity (when Stock management enabled)    cost_price MoneyType Combination wholesale/cost price (tax excl.)    impact_on_price_te MoneyType Combination price (tax excl.)    impact_on_price_ti MoneyType Combination price (tax incl.)    impact_on_weight NumberType Combination weight    date_availability DatePickerType Availability date    reference TextType Combination reference    minimal_quantity NumberType Combination minimum quantity for sale    low_stock_threshold NumberType Low stock threshold    low_stock_alert CheckboxType Enable email alert when low stock is reached    "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/reference/theme-translation/",
	"title": "Theme translation",
	"tags": [],
	"description": "",
	"content": "How to translate your theme PrestaShop 1.7 comes with a new translation system for themes.\nThe following instructions only apply to PrestaShop 1.7.2 and later. In previous versions, exported themes didn\u0026rsquo;t include the selected and included translations. 1. Add new or customize existing wordings in a theme Adding new wordings is easy when building your theme. You simply need to edit the .tpl file of your choice and add (or customize) a wording. All wordings must always be written in english.\nFor example:\n{l s=\u0026#39;Read more\u0026#39; d=\u0026#39;Shop.Yourthemename\u0026#39;}Change \u0026ldquo;Yourthemename\u0026rdquo; to your own theme\u0026rsquo;s name.\nThe theme name must start in a capital letter and have no other upper case letter (eg. \u0026ldquo;YourThemeName\u0026rdquo; won\u0026rsquo;t work). 2. Add the desired languages in your shop It is best to perform the following steps only after your shop is ready to be exported (ie. you\u0026rsquo;re done developing it).\n  On your shop, go to International \u0026gt; Translations\n  Then go to the \u0026ldquo;Add / Update a language\u0026rdquo; section and choose the languages that you wish to support in your theme.\n  3. Translate your theme\u0026rsquo;s custom translations Again, on the same \u0026ldquo;Translations\u0026rdquo; page as in the previous step, go to the \u0026ldquo;Modify translations section\u0026rdquo; and choose:\n Theme translations The theme you wish to translate (in this example, we are translating \u0026ldquo;lifestyle\u0026rdquo;) Language to translate to (eg. \u0026ldquo;French\u0026rdquo;)  When you click on \u0026ldquo;Modify\u0026rdquo;, a new page opens up that allows you to translate your theme\u0026rsquo;s wordings. On the left column, go to \u0026ldquo;Shop\u0026rdquo; and \u0026ldquo;your theme name\u0026rdquo; (\u0026ldquo;Lifestyle\u0026rdquo; in this example).\nA form appears on the right, showing all the customized wordings that you added in the .tpl files.\nAt this point, all you need to do is translate them, then redo the process for each one of the languages you want to translate your theme in.\n4. Export languages Once all translations are done, you now need to export all of the wordings that you want to include in your theme. For this, go back to the \u0026ldquo;Translations\u0026rdquo; page, then scroll to the \u0026ldquo;Export a language\u0026rdquo; section:\nOnce the .zip file has been downloaded, extract it and add this folder to your theme\u0026rsquo;s translations folder. This way, when you will export your theme, translations will be included with it.\n5. Export your theme After all the previous steps have been performed, all that\u0026rsquo;s left to do is export your theme.\n  On your shop, go to Design \u0026gt; Theme \u0026amp; logo.\n  In this page, on the top right corner, click on the \u0026ldquo;Export current theme\u0026rdquo; button.\n  After this step, the theme will be zipped an ready, and will include the translations that we added before. To verify it, just unzip the zip file and check that all the files are present.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/tinymce/",
	"title": "TinyMCE",
	"tags": [],
	"description": "",
	"content": "Modify the TinyMCE configuration You are able to modify the configuration by using the actionAdminControllerSetMedia hook.\nInside the JS file you added with this hook, you need to create a global object containing your custom configuration:\nwindow.defaultTinyMceConfig = { [...] } and as you can see in the tinymce core file it will load it instead of the default core configuration.\nKeep in mind that the config is not completely replaced, it\u0026rsquo;s an Object.assign, this means that if you want to remove a certain configuration, you\u0026rsquo;ll have to add it inside your own config, overwise it will be kept.\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/internationalization/translation/translation-tips/",
	"title": "Tips and tricks",
	"tags": [],
	"description": "",
	"content": "Translation tips and tricks Adding new wordings Wordings for the Core and Native modules can only be translated if they are declared in PrestaShop\u0026rsquo;s default translation catalogue. Therefore, whenever a new wording is added to the core or to a native module, it must be added to the default catalogue as well.\nNormally you would have to manually add each wording the appropriate default catalogue files (located in the app/Resources/translations/default folder). Thankfully, this task has been automated by the Core team!\nBefore every minor release, the whole source code for PrestaShop and Native Modules is analyzed using TranslationToolsBundle, and all newly discovered wordings are automatically added to the default catalogue.\nIncidentally, the same technique is also used to detect wordings used by third-party modules and make them translatable through the Back Office interface. Making wordings discoverable for automated addition to the catalogue TranslationToolsBundle uses static analysis to extract wordings from source code. Therefore, this means that you can simply use new wordings in the code, and they will be magically added to the catalogue later.\nHowever, due to limitations of this technique, the following guidelines must be followed when declaring new wordings:\n  This tool only detects wordings used through the trans() function, the {l} Smarty tag, and the trans Twig filter. Therefore, they must be declared in a PHP, TPL, or TWIG file. They will be detected regardless of whether that code is actually used in runtime or not.\n  Always use literal values, not variables, with the trans() function, the {l} Smarty tag, and trans Twig filter. Although variables are interpolated at runtime, they won\u0026rsquo;t be understood by the code analyzer, which only supports literals. Passing variables as arguments to these functions will prevent those wordings from being added to the catalogue.\n  Failure to comply with these guidelines will result in the wording not being added to the catalogue and not being translatable! Examples:\n\u0026lt;?php // literal values will work $this-\u0026gt;trans(\u0026#39;Some wording\u0026#39;, [], \u0026#39;Admin.Catalog.Feature\u0026#39;); // dynamic content can be injected using placeholders \u0026amp; replacements $this-\u0026gt;trans(\u0026#39;Some wording with %foo%\u0026#39;, [\u0026#39;%foo%\u0026#39; =\u0026gt; $dynamicContent], \u0026#39;Admin.Catalog.Feature\u0026#39;); // this won\u0026#39;t work, the interpreter will ignore variables $wording = \u0026#39;Some wording\u0026#39;; $domain = \u0026#39;Admin.Catalog.Feature\u0026#39;; $this-\u0026gt;trans($wording, [], $domain); // this will yield unexpected results $this-\u0026gt;trans(\u0026#39;Some \u0026#39;. $var . \u0026#39; wording\u0026#39;, [], \u0026#39;Admin.Catalog.Feature\u0026#39;); // dynamic behavior, like aliasing the trans() function, won\u0026#39;t work well either function translate($wording) { $this-\u0026gt;trans($wording, [], \u0026#39;Admin.Catalog.Feature\u0026#39;); } In Twig files, you can use trans_default_domain to set up your default domain. Keep in mind this works on a per-file basis:\n{% trans_default_domain \u0026#39;Admin.Catalog.Feature\u0026#39; %}{{ \u0026#39;Hello world\u0026#39;|trans }}{{ \u0026#39;Something else\u0026#39;|trans }}Form ChoiceTypes When declaring Symfony form types, you declare choices for ChoiceType fields as literal (untranslated) strings:\n\u0026lt;?php use PrestaShopBundle\\Form\\Admin\\Type\\TranslatorAwareType; use Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType; class SomeFormType extends TranslatorAwareType { /** * {@inheritdoc} */ public function buildForm(FormBuilderInterface $builder, array $options) { $builder -\u0026gt;add(\u0026#39;a_select_box\u0026#39;, ChoiceType::class, [ \u0026#39;choices\u0026#39; =\u0026gt; [ \u0026#39;First option\u0026#39; =\u0026gt; 0, \u0026#39;Second option\u0026#39; =\u0026gt; 1, \u0026#39;Third option\u0026#39; =\u0026gt; 2, ], \u0026#39;required\u0026#39; =\u0026gt; false, \u0026#39;label\u0026#39; =\u0026gt; $this-\u0026gt;trans(\u0026#39;This is a select box\u0026#39;, \u0026#39;Admin.Catalog.Feature\u0026#39;), \u0026#39;choice_translation_domain\u0026#39; =\u0026gt; \u0026#39;Admin.Some.Domain\u0026#39;, ]); } } The form above declares a Choice field (select box), with three different options.\nNotice the declaration of choice_translation_domain. This explicit translation domain will be used to translate choices from this field.\nNote: you must be careful when using this pattern: The analyzer expects the ChoiceType declaration to be inside a call to the add() method, using ChoiceType::class and not a FQCN.\nIf in doubt, have a look at ChoiceExtractor Array literals You can declare wordings as arrays as well. This obviously won\u0026rsquo;t translate the wordings at runtime but it will make them discoverable by the extractor.\n\u0026lt;?php [ \u0026#39;key\u0026#39; =\u0026gt; \u0026#39;This is a sample text\u0026#39;, \u0026#39;domain\u0026#39; =\u0026gt; \u0026#39;Admin.Some.Feature\u0026#39;, \u0026#39;parameters\u0026#39; =\u0026gt; [], ]; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/translatable/",
	"title": "TranslatableType",
	"tags": [],
	"description": "",
	"content": "TranslatableType The TranslatableType allows you to configure multilanguage input. This multilanguage behavior is provided on top of an existing input Type.\nType options    Option Type Default Description     type string Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType Type that you want to be translatable   options array Empty array Options for configured type   locales array Enabled shop locales (languages) Locales in which field can be translated    If you wish to use FormattedTextareaType as type, your base type must be TranslateType instead of TranslatableType. Required Javascript components    Component Description     admin-dev/themes/new-theme/js/components/translatable-input.js Allows toggling input for different locales    Code example First, you have to add TranslatableType to your form.\n\u0026lt;?php use Symfony\\Component\\Form\\AbstractType; use Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType; use PrestaShopBundle\\Form\\Admin\\Type\\TranslatableType; class SomeType extends AbstractType { public function buildForm(FormBuilderInterface $builder, array $options) { $builder-\u0026gt;add(\u0026#39;description\u0026#39;, TranslatableType::class, [ // we\u0026#39;ll have text area that is translatable  \u0026#39;type\u0026#39; =\u0026gt; TextareaType::class, ]); } } Then in Javascript you have to enable TranslatableInput component.\nimport TranslatableInput from \u0026#34;admin-dev/themes/new-theme/js/components/translatable-input\u0026#34;; // enable togging of different locales  new TranslatableInput(); Preview example   TranslatableType rendered in form using textarea   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/translated_configurations/",
	"title": "Translated configurations",
	"tags": [],
	"description": "",
	"content": "Resources for Translated configurations Translated_configuration    Name Format Required Max size Description     value  ❌     date_add isDate ❌     date_upd isDate ❌     name isConfigName ✔️ 32    id_shop_group isUnsignedId ❌  Shop group ID   id_shop isUnsignedId ❌  Shop ID    Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;translated_configuration\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;value\u0026gt; \u0026lt;language id=\u0026#34;1\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;language id=\u0026#34;2\u0026#34;\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/language\u0026gt; \u0026lt;/value\u0026gt; \u0026lt;date_add\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_add\u0026gt; \u0026lt;date_upd\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/date_upd\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;id_shop_group\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop_group\u0026gt; \u0026lt;id_shop\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_shop\u0026gt; \u0026lt;/translated_configuration\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/faq/upgrade/",
	"title": "Upgrade FAQ",
	"tags": [],
	"description": "",
	"content": "Upgrade FAQ  After upgrading, I lost access to some Back-Office pages Upgrade fails with Error message JqXHR  Restore access to Back Office Page Q: After upgrading my PrestaShop to a new version, I lost access to some Back-Office pages. How can I fix it?\nA: It is likely that some SQL configuration is not correct.\nFirst, identify what is the slug of the Back Office pages. You can find them into the SQL table ps_authorization_role. This will tell you the SQL identifier for these pages.\nSecond, identify the Role of the User you use to browse the Back Office.\nThird, check whether the table ps_access grants access to the Back Office pages, using the identifier of the role and the identifiers of the Back Office pages. There must be a record for the role and the page. If there is no such record, create it to grant access.\nUpgrade fails with Error message JqXHR If during upgrade process, it fails with the error message:\n[Ajax/Server operation [...]] textStatus: \u0026#34;Error\u0026#34; errorThrown: \u0026#34;\u0026#34; JqXHR: \u0026#34;\u0026#34;, This error message indicates something went wrong on server side.\nIn order to find out what exactly went wrong, you need to check the upgrade process logs that are located into the folder {Prestashop_Folder}/{Admin_folder}/autoupgrade/tmp/\n"
},
{
	"uri": "https://devdocs.prestashop.com/1.7/contribute/documentation/shortcodes/minver/",
	"title": "Version pill",
	"tags": [],
	"description": "",
	"content": "Version pill When highlighting a new feature, you may want to highlight the version on which that feature was added. You can add a version pill using minver:\nEverything\u0026#39;s better on {{\u0026lt; minver v=\u0026#34;1.7.4\u0026#34; \u0026gt;}} Which renders to:\nEverything\u0026rsquo;s better on 1.7.4 \n To align a pill with a title, use the parameter title=\u0026quot;true\u0026quot;:\n#### Example title {{\u0026lt; minver v=\u0026#34;1.7.4\u0026#34; title=\u0026#34;true\u0026#34;\u0026gt;}} Which is rendered like this:\nExample title   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/warehouse_product_locations/",
	"title": "Warehouse product locations",
	"tags": [],
	"description": "",
	"content": "Resources for Warehouse product locations Warehouse_product_location    Name Format Required Max size Description     id_product isUnsignedId ✔️  Product ID   id_product_attribute isUnsignedId ✔️  Product attribute ID   id_warehouse isUnsignedId ✔️  Warehouse ID   location isReference ❌ 64     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;warehouse_product_location\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_product\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product\u0026gt; \u0026lt;id_product_attribute\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_product_attribute\u0026gt; \u0026lt;id_warehouse\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_warehouse\u0026gt; \u0026lt;location\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/location\u0026gt; \u0026lt;/warehouse_product_location\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/warehouses/",
	"title": "Warehouses",
	"tags": [],
	"description": "",
	"content": "Resources for Warehouses Warehouse    Name Format Required Writable Max size Not filterable Description     id_address isUnsignedId ✔️ ✔️      id_employee isUnsignedId ✔️ ✔️   Employee ID   id_currency isUnsignedId ✔️ ✔️   Currency ID   valuation  ❌ ❌  true    deleted  ❌ ✔️      reference isString ✔️ ✔️ 64     name isString ✔️ ✔️ 45     management_type isStockManagement ✔️ ✔️      associations  ❌ ✔️       Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;warehouse\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_address\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_address\u0026gt; \u0026lt;id_employee\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_employee\u0026gt; \u0026lt;id_currency\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_currency\u0026gt; \u0026lt;deleted\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/deleted\u0026gt; \u0026lt;reference\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/reference\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;management_type\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/management_type\u0026gt; \u0026lt;associations\u0026gt; \u0026lt;stocks\u0026gt; \u0026lt;stock\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/stock\u0026gt; \u0026lt;/stocks\u0026gt; \u0026lt;carriers\u0026gt; \u0026lt;carrier\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;/carrier\u0026gt; \u0026lt;/carriers\u0026gt; \u0026lt;shops\u0026gt; \u0026lt;shop\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;/shop\u0026gt; \u0026lt;/shops\u0026gt; \u0026lt;/associations\u0026gt; \u0026lt;/warehouse\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/themes/getting-started/asset-management/webpack/",
	"title": "Webpack",
	"tags": [],
	"description": "",
	"content": "About Webpack  Webpack is a module bundler. Webpack takes modules with dependencies and generates static assets representing those modules.\n The main interest of using Webpack is that it will compile all your styles - which we advise you to write using Sass  - into a single CSS file. This way, your theme will make only one HTTP request for this single file, and since your browser will cache it for later re-use, it will even download this file only once.\nThe same goes with your JavaScript code. Instead of loading jQuery along with its community plugins, your own custom plugins and any extra code you might need, Webpack compiles and minifies all this JavaScript code into a single file, which will be loaded once - and cached.\nWebpack is not at all required by PrestaShop, you are free to use your favorite tool! The documentation explains Webpack since it\u0026rsquo;s the tool we chose for the Classic theme. Installing webpack If you want to compile your assets using Webpack (and we advise you to), follow these steps:\n Download and install Node.js, which contains the npm tool. In your command line tool, open the _dev folder. Install npm: npm install. You then have a choice:   To build your assets once, type npm run build. To rebuild your assets every time you change a file in the _dev folder, type npm run watch.  Webpack configuration The Webpack configuration file for Classic Theme is thus:\n All CSS rules go to the assets/css/theme.css file. All JavaScript code go to the assets/js/theme.js file.  It provides proper configuration for compile your Sass, Less, Stylus or CSS files into a single CSS file.\nJavaScript code is written in ES6, and compiled to ES5 with Babel.\nIf you want to use Stylus or Less, simply edit the command line under the \u0026ldquo;scripts\u0026rdquo; section.\nvar webpack = require(\u0026#39;webpack\u0026#39;); var ExtractTextPlugin = require(\u0026#34;extract-text-webpack-plugin\u0026#34;); var plugins = []; plugins.push( new ExtractTextPlugin(\u0026#39;../css/theme.css\u0026#39;) ); module.exports = [{ // JavaScript  entry: [ \u0026#39;./js/theme.js\u0026#39; ], output: { path: \u0026#39;../assets/js\u0026#39;, filename: \u0026#39;theme.js\u0026#39; }, module: { loaders: [{ test: /\\.js$/, exclude: /node_modules/, loaders: [\u0026#39;babel-loader\u0026#39;] }] }, externals: { prestashop: \u0026#39;prestashop\u0026#39; }, plugins: plugins, resolve: { extensions: [\u0026#39;\u0026#39;, \u0026#39;.js\u0026#39;] } }, { // CSS  entry: [ \u0026#39;./css/normalize.css\u0026#39;, \u0026#39;./css/example.less\u0026#39;, \u0026#39;./css/st/dev.styl\u0026#39;, \u0026#39;./css/theme.scss\u0026#39; ], output: { path: \u0026#39;../assets/js\u0026#39;, filename: \u0026#39;theme.js\u0026#39; }, module: { loaders: [{ test: /\\.scss$/, loader: ExtractTextPlugin.extract( \u0026#34;style\u0026#34;, \u0026#34;css-loader?sourceMap!postcss!sass-loader?sourceMap\u0026#34; ) }, { test: /\\.styl$/, loader: ExtractTextPlugin.extract( \u0026#34;style\u0026#34;, \u0026#34;css-loader?sourceMap!postcss!stylus-loader?sourceMap\u0026#34; ) }, { test: /\\.less$/, loader: ExtractTextPlugin.extract( \u0026#34;style\u0026#34;, \u0026#34;css-loader?sourceMap!postcss!less-loader?sourceMap\u0026#34; ) }, { test: /\\.css$/, loader: ExtractTextPlugin.extract( \u0026#39;style\u0026#39;, \u0026#39;css-loader?sourceMap!postcss-loader\u0026#39; ) }, { test: /.(png|woff(2)?|eot|ttf|svg)(\\?[a-z0-9=\\.]+)?$/, loader: \u0026#39;file-loader?name=../css/[hash].[ext]\u0026#39; }] }, plugins: plugins, resolve: { extensions: [\u0026#39;\u0026#39;, \u0026#39;.scss\u0026#39;, \u0026#39;.styl\u0026#39;, \u0026#39;.less\u0026#39;, \u0026#39;.css\u0026#39;] } }]; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/",
	"title": "Webservice Resources",
	"tags": [],
	"description": "",
	"content": "Resources  Addresses   Carriers   Cart rules   Carts   Categories   Combinations   Configurations   Contacts   Content management system   Countries   Currencies   Customer messages   Customer threads   Customers   Customizations   Deliveries   Employees   Groups   Guests   Image types   Languages   Manufacturers   Messages   Order carriers   Order cart rules   Order details   Order histories   Order invoices   Order payments   Order slip   Order states   Orders   Price ranges   Product customization fields   Product feature values   Product features   Product option values   Product options   Product suppliers   Products   Shop groups   Shop urls   Shops   Specific price rules   Specific prices   States   Stock availables   Stock movement reasons   Stock movements   Stocks   Stores   Suppliers   Supply order details   Supply order histories   Supply order receipt histories   Supply order states   Supply orders   Tags   Tax rule groups   Tax rules   Taxes   Translated configurations   Warehouse product locations   Warehouses   Weight ranges   Zones   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/weight_ranges/",
	"title": "Weight ranges",
	"tags": [],
	"description": "",
	"content": "Resources for Weight ranges Weight_range    Name Format Required Description     id_carrier isInt ✔️ Carrier ID   delimiter1 isUnsignedFloat ✔️    delimiter2 isUnsignedFloat ✔️     Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;weight_range\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;id_carrier\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id_carrier\u0026gt; \u0026lt;delimiter1\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delimiter1\u0026gt; \u0026lt;delimiter2\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/delimiter2\u0026gt; \u0026lt;/weight_range\u0026gt; \u0026lt;/prestashop\u0026gt; "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/development/components/form/types-reference/yes-and-no-choice/",
	"title": "YesAndNoChoiceType",
	"tags": [],
	"description": "",
	"content": "YesAndNoChoiceType The YesAndNoChoiceType represents select input with options Yes and No.\nType options    Option Type Default Description     choices array array By default Yes/No choices are defined   required boolean false Whether field is required or not    Required Javascript components None.\nPreview example   YesAndNoChoiceType rendered in form   "
},
{
	"uri": "https://devdocs.prestashop.com/1.7/webservice/resources/zones/",
	"title": "Zones",
	"tags": [],
	"description": "",
	"content": "Resources for Zones Zone    Name Format Required Max size Description     name isGenericName ✔️ 64    active isBool ❌      Blank schema \u0026lt;prestashop xmlns:xlink=\u0026#34;http://www.w3.org/1999/xlink\u0026#34;\u0026gt; \u0026lt;zone\u0026gt; \u0026lt;id\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/id\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;active\u0026gt;\u0026lt;![CDATA[]]\u0026gt;\u0026lt;/active\u0026gt; \u0026lt;/zone\u0026gt; \u0026lt;/prestashop\u0026gt; "
}]